import { createRequire as topLevelCreateRequire } from 'module';
const require = topLevelCreateRequire(import.meta.url);
import bannerUrl from 'url';
const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));globalThis.openNextDebug = true;globalThis.openNextVersion = "3.7.6";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x5) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x5, {
  get: (a5, b5) => (typeof require !== "undefined" ? require : a5)[b5]
}) : x5)(function(x5) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x5 + '" is not supported');
});
var __commonJS = (cb2, mod) => function __require3() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/next/dist/shared/lib/image-config.js
var require_image_config = __commonJS({
  "node_modules/next/dist/shared/lib/image-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      VALID_LOADERS: function() {
        return VALID_LOADERS;
      },
      imageConfigDefault: function() {
        return imageConfigDefault;
      }
    });
    var VALID_LOADERS = [
      "default",
      "imgix",
      "cloudinary",
      "akamai",
      "custom"
    ];
    var imageConfigDefault = {
      deviceSizes: [
        640,
        750,
        828,
        1080,
        1200,
        1920,
        2048,
        3840
      ],
      imageSizes: [
        16,
        32,
        48,
        64,
        96,
        128,
        256,
        384
      ],
      path: "/_next/image",
      loader: "default",
      loaderFile: "",
      domains: [],
      disableStaticImages: false,
      minimumCacheTTL: 60,
      formats: [
        "image/webp"
      ],
      dangerouslyAllowSVG: false,
      contentSecurityPolicy: "script-src 'none'; frame-src 'none'; sandbox;",
      contentDispositionType: "attachment",
      localPatterns: void 0,
      remotePatterns: [],
      qualities: void 0,
      unoptimized: false
    };
  }
});

// node_modules/next/dist/lib/constants.js
var require_constants = __commonJS({
  "node_modules/next/dist/lib/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      ACTION_SUFFIX: function() {
        return ACTION_SUFFIX;
      },
      APP_DIR_ALIAS: function() {
        return APP_DIR_ALIAS;
      },
      CACHE_ONE_YEAR: function() {
        return CACHE_ONE_YEAR;
      },
      DOT_NEXT_ALIAS: function() {
        return DOT_NEXT_ALIAS;
      },
      ESLINT_DEFAULT_DIRS: function() {
        return ESLINT_DEFAULT_DIRS;
      },
      GSP_NO_RETURNED_VALUE: function() {
        return GSP_NO_RETURNED_VALUE;
      },
      GSSP_COMPONENT_MEMBER_ERROR: function() {
        return GSSP_COMPONENT_MEMBER_ERROR;
      },
      GSSP_NO_RETURNED_VALUE: function() {
        return GSSP_NO_RETURNED_VALUE;
      },
      HTML_CONTENT_TYPE_HEADER: function() {
        return HTML_CONTENT_TYPE_HEADER;
      },
      INFINITE_CACHE: function() {
        return INFINITE_CACHE;
      },
      INSTRUMENTATION_HOOK_FILENAME: function() {
        return INSTRUMENTATION_HOOK_FILENAME;
      },
      JSON_CONTENT_TYPE_HEADER: function() {
        return JSON_CONTENT_TYPE_HEADER;
      },
      MATCHED_PATH_HEADER: function() {
        return MATCHED_PATH_HEADER;
      },
      MIDDLEWARE_FILENAME: function() {
        return MIDDLEWARE_FILENAME;
      },
      MIDDLEWARE_LOCATION_REGEXP: function() {
        return MIDDLEWARE_LOCATION_REGEXP;
      },
      NEXT_BODY_SUFFIX: function() {
        return NEXT_BODY_SUFFIX;
      },
      NEXT_CACHE_IMPLICIT_TAG_ID: function() {
        return NEXT_CACHE_IMPLICIT_TAG_ID;
      },
      NEXT_CACHE_REVALIDATED_TAGS_HEADER: function() {
        return NEXT_CACHE_REVALIDATED_TAGS_HEADER;
      },
      NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER: function() {
        return NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER;
      },
      NEXT_CACHE_SOFT_TAG_MAX_LENGTH: function() {
        return NEXT_CACHE_SOFT_TAG_MAX_LENGTH;
      },
      NEXT_CACHE_TAGS_HEADER: function() {
        return NEXT_CACHE_TAGS_HEADER;
      },
      NEXT_CACHE_TAG_MAX_ITEMS: function() {
        return NEXT_CACHE_TAG_MAX_ITEMS;
      },
      NEXT_CACHE_TAG_MAX_LENGTH: function() {
        return NEXT_CACHE_TAG_MAX_LENGTH;
      },
      NEXT_DATA_SUFFIX: function() {
        return NEXT_DATA_SUFFIX;
      },
      NEXT_INTERCEPTION_MARKER_PREFIX: function() {
        return NEXT_INTERCEPTION_MARKER_PREFIX;
      },
      NEXT_META_SUFFIX: function() {
        return NEXT_META_SUFFIX;
      },
      NEXT_QUERY_PARAM_PREFIX: function() {
        return NEXT_QUERY_PARAM_PREFIX;
      },
      NEXT_RESUME_HEADER: function() {
        return NEXT_RESUME_HEADER;
      },
      NON_STANDARD_NODE_ENV: function() {
        return NON_STANDARD_NODE_ENV;
      },
      PAGES_DIR_ALIAS: function() {
        return PAGES_DIR_ALIAS;
      },
      PRERENDER_REVALIDATE_HEADER: function() {
        return PRERENDER_REVALIDATE_HEADER;
      },
      PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {
        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;
      },
      PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {
        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;
      },
      ROOT_DIR_ALIAS: function() {
        return ROOT_DIR_ALIAS;
      },
      RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {
        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;
      },
      RSC_ACTION_ENCRYPTION_ALIAS: function() {
        return RSC_ACTION_ENCRYPTION_ALIAS;
      },
      RSC_ACTION_PROXY_ALIAS: function() {
        return RSC_ACTION_PROXY_ALIAS;
      },
      RSC_ACTION_VALIDATE_ALIAS: function() {
        return RSC_ACTION_VALIDATE_ALIAS;
      },
      RSC_CACHE_WRAPPER_ALIAS: function() {
        return RSC_CACHE_WRAPPER_ALIAS;
      },
      RSC_DYNAMIC_IMPORT_WRAPPER_ALIAS: function() {
        return RSC_DYNAMIC_IMPORT_WRAPPER_ALIAS;
      },
      RSC_MOD_REF_PROXY_ALIAS: function() {
        return RSC_MOD_REF_PROXY_ALIAS;
      },
      RSC_PREFETCH_SUFFIX: function() {
        return RSC_PREFETCH_SUFFIX;
      },
      RSC_SEGMENTS_DIR_SUFFIX: function() {
        return RSC_SEGMENTS_DIR_SUFFIX;
      },
      RSC_SEGMENT_SUFFIX: function() {
        return RSC_SEGMENT_SUFFIX;
      },
      RSC_SUFFIX: function() {
        return RSC_SUFFIX;
      },
      SERVER_PROPS_EXPORT_ERROR: function() {
        return SERVER_PROPS_EXPORT_ERROR;
      },
      SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {
        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;
      },
      SERVER_PROPS_SSG_CONFLICT: function() {
        return SERVER_PROPS_SSG_CONFLICT;
      },
      SERVER_RUNTIME: function() {
        return SERVER_RUNTIME;
      },
      SSG_FALLBACK_EXPORT_ERROR: function() {
        return SSG_FALLBACK_EXPORT_ERROR;
      },
      SSG_GET_INITIAL_PROPS_CONFLICT: function() {
        return SSG_GET_INITIAL_PROPS_CONFLICT;
      },
      STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {
        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;
      },
      TEXT_PLAIN_CONTENT_TYPE_HEADER: function() {
        return TEXT_PLAIN_CONTENT_TYPE_HEADER;
      },
      UNSTABLE_REVALIDATE_RENAME_ERROR: function() {
        return UNSTABLE_REVALIDATE_RENAME_ERROR;
      },
      WEBPACK_LAYERS: function() {
        return WEBPACK_LAYERS;
      },
      WEBPACK_RESOURCE_QUERIES: function() {
        return WEBPACK_RESOURCE_QUERIES;
      }
    });
    var TEXT_PLAIN_CONTENT_TYPE_HEADER = "text/plain";
    var HTML_CONTENT_TYPE_HEADER = "text/html; charset=utf-8";
    var JSON_CONTENT_TYPE_HEADER = "application/json; charset=utf-8";
    var NEXT_QUERY_PARAM_PREFIX = "nxtP";
    var NEXT_INTERCEPTION_MARKER_PREFIX = "nxtI";
    var MATCHED_PATH_HEADER = "x-matched-path";
    var PRERENDER_REVALIDATE_HEADER = "x-prerender-revalidate";
    var PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = "x-prerender-revalidate-if-generated";
    var RSC_PREFETCH_SUFFIX = ".prefetch.rsc";
    var RSC_SEGMENTS_DIR_SUFFIX = ".segments";
    var RSC_SEGMENT_SUFFIX = ".segment.rsc";
    var RSC_SUFFIX = ".rsc";
    var ACTION_SUFFIX = ".action";
    var NEXT_DATA_SUFFIX = ".json";
    var NEXT_META_SUFFIX = ".meta";
    var NEXT_BODY_SUFFIX = ".body";
    var NEXT_CACHE_TAGS_HEADER = "x-next-cache-tags";
    var NEXT_CACHE_REVALIDATED_TAGS_HEADER = "x-next-revalidated-tags";
    var NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER = "x-next-revalidate-tag-token";
    var NEXT_RESUME_HEADER = "next-resume";
    var NEXT_CACHE_TAG_MAX_ITEMS = 128;
    var NEXT_CACHE_TAG_MAX_LENGTH = 256;
    var NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024;
    var NEXT_CACHE_IMPLICIT_TAG_ID = "_N_T_";
    var CACHE_ONE_YEAR = 31536e3;
    var INFINITE_CACHE = 4294967294;
    var MIDDLEWARE_FILENAME = "middleware";
    var MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;
    var INSTRUMENTATION_HOOK_FILENAME = "instrumentation";
    var PAGES_DIR_ALIAS = "private-next-pages";
    var DOT_NEXT_ALIAS = "private-dot-next";
    var ROOT_DIR_ALIAS = "private-next-root-dir";
    var APP_DIR_ALIAS = "private-next-app-dir";
    var RSC_MOD_REF_PROXY_ALIAS = "private-next-rsc-mod-ref-proxy";
    var RSC_ACTION_VALIDATE_ALIAS = "private-next-rsc-action-validate";
    var RSC_ACTION_PROXY_ALIAS = "private-next-rsc-server-reference";
    var RSC_CACHE_WRAPPER_ALIAS = "private-next-rsc-cache-wrapper";
    var RSC_DYNAMIC_IMPORT_WRAPPER_ALIAS = "private-next-rsc-track-dynamic-import";
    var RSC_ACTION_ENCRYPTION_ALIAS = "private-next-rsc-action-encryption";
    var RSC_ACTION_CLIENT_WRAPPER_ALIAS = "private-next-rsc-action-client-wrapper";
    var PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;
    var SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;
    var SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;
    var SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;
    var STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;
    var SERVER_PROPS_EXPORT_ERROR = `pages with \`getServerSideProps\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;
    var GSP_NO_RETURNED_VALUE = "Your `getStaticProps` function did not return an object. Did you forget to add a `return`?";
    var GSSP_NO_RETURNED_VALUE = "Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?";
    var UNSTABLE_REVALIDATE_RENAME_ERROR = "The `unstable_revalidate` property is available for general use.\nPlease use `revalidate` instead.";
    var GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;
    var NON_STANDARD_NODE_ENV = `You are using a non-standard "NODE_ENV" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;
    var SSG_FALLBACK_EXPORT_ERROR = `Pages with \`fallback\` enabled in \`getStaticPaths\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;
    var ESLINT_DEFAULT_DIRS = [
      "app",
      "pages",
      "components",
      "lib",
      "src"
    ];
    var SERVER_RUNTIME = {
      edge: "edge",
      experimentalEdge: "experimental-edge",
      nodejs: "nodejs"
    };
    var WEBPACK_LAYERS_NAMES = {
      /**
      * The layer for the shared code between the client and server bundles.
      */
      shared: "shared",
      /**
      * The layer for server-only runtime and picking up `react-server` export conditions.
      * Including app router RSC pages and app router custom routes and metadata routes.
      */
      reactServerComponents: "rsc",
      /**
      * Server Side Rendering layer for app (ssr).
      */
      serverSideRendering: "ssr",
      /**
      * The browser client bundle layer for actions.
      */
      actionBrowser: "action-browser",
      /**
      * The Node.js bundle layer for the API routes.
      */
      apiNode: "api-node",
      /**
      * The Edge Lite bundle layer for the API routes.
      */
      apiEdge: "api-edge",
      /**
      * The layer for the middleware code.
      */
      middleware: "middleware",
      /**
      * The layer for the instrumentation hooks.
      */
      instrument: "instrument",
      /**
      * The layer for assets on the edge.
      */
      edgeAsset: "edge-asset",
      /**
      * The browser client bundle layer for App directory.
      */
      appPagesBrowser: "app-pages-browser",
      /**
      * The browser client bundle layer for Pages directory.
      */
      pagesDirBrowser: "pages-dir-browser",
      /**
      * The Edge Lite bundle layer for Pages directory.
      */
      pagesDirEdge: "pages-dir-edge",
      /**
      * The Node.js bundle layer for Pages directory.
      */
      pagesDirNode: "pages-dir-node"
    };
    var WEBPACK_LAYERS = {
      ...WEBPACK_LAYERS_NAMES,
      GROUP: {
        builtinReact: [
          WEBPACK_LAYERS_NAMES.reactServerComponents,
          WEBPACK_LAYERS_NAMES.actionBrowser
        ],
        serverOnly: [
          WEBPACK_LAYERS_NAMES.reactServerComponents,
          WEBPACK_LAYERS_NAMES.actionBrowser,
          WEBPACK_LAYERS_NAMES.instrument,
          WEBPACK_LAYERS_NAMES.middleware
        ],
        neutralTarget: [
          // pages api
          WEBPACK_LAYERS_NAMES.apiNode,
          WEBPACK_LAYERS_NAMES.apiEdge
        ],
        clientOnly: [
          WEBPACK_LAYERS_NAMES.serverSideRendering,
          WEBPACK_LAYERS_NAMES.appPagesBrowser
        ],
        bundled: [
          WEBPACK_LAYERS_NAMES.reactServerComponents,
          WEBPACK_LAYERS_NAMES.actionBrowser,
          WEBPACK_LAYERS_NAMES.serverSideRendering,
          WEBPACK_LAYERS_NAMES.appPagesBrowser,
          WEBPACK_LAYERS_NAMES.shared,
          WEBPACK_LAYERS_NAMES.instrument,
          WEBPACK_LAYERS_NAMES.middleware
        ],
        appPages: [
          // app router pages and layouts
          WEBPACK_LAYERS_NAMES.reactServerComponents,
          WEBPACK_LAYERS_NAMES.serverSideRendering,
          WEBPACK_LAYERS_NAMES.appPagesBrowser,
          WEBPACK_LAYERS_NAMES.actionBrowser
        ]
      }
    };
    var WEBPACK_RESOURCE_QUERIES = {
      edgeSSREntry: "__next_edge_ssr_entry__",
      metadata: "__next_metadata__",
      metadataRoute: "__next_metadata_route__",
      metadataImageMeta: "__next_metadata_image_meta__"
    };
  }
});

// node_modules/next/dist/shared/lib/canary-only.js
var require_canary_only = __commonJS({
  "node_modules/next/dist/shared/lib/canary-only.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      CanaryOnlyError: function() {
        return CanaryOnlyError;
      },
      isStableBuild: function() {
        return isStableBuild;
      }
    });
    function isStableBuild() {
      var _process_env___NEXT_VERSION;
      return !((_process_env___NEXT_VERSION = "15.5.3") == null ? void 0 : _process_env___NEXT_VERSION.includes("canary")) && !process.env.__NEXT_TEST_MODE && !process.env.NEXT_PRIVATE_LOCAL_DEV;
    }
    var CanaryOnlyError = class extends Error {
      constructor(arg) {
        if (typeof arg === "object" && "feature" in arg) {
          super('The experimental feature "' + arg.feature + '" can only be enabled when using the latest canary version of Next.js.');
        } else {
          super(arg);
        }
        this.stack = void 0;
      }
    };
  }
});

// node_modules/next/dist/server/config-shared.js
var require_config_shared = __commonJS({
  "node_modules/next/dist/server/config-shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      defaultConfig: function() {
        return defaultConfig2;
      },
      normalizeConfig: function() {
        return normalizeConfig;
      }
    });
    var _os = /* @__PURE__ */ _interop_require_default(__require("os"));
    var _imageconfig = require_image_config();
    var _constants = require_constants();
    var _canaryonly = require_canary_only();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var defaultConfig2 = Object.freeze({
      env: {},
      webpack: null,
      eslint: {
        ignoreDuringBuilds: false
      },
      typescript: {
        ignoreBuildErrors: false,
        tsconfigPath: "tsconfig.json"
      },
      typedRoutes: false,
      distDir: ".next",
      cleanDistDir: true,
      assetPrefix: "",
      cacheHandler: process.env.NEXT_CACHE_HANDLER_PATH,
      // default to 50MB limit
      cacheMaxMemorySize: 50 * 1024 * 1024,
      configOrigin: "default",
      useFileSystemPublicRoutes: true,
      generateBuildId: () => null,
      generateEtags: true,
      pageExtensions: [
        "tsx",
        "ts",
        "jsx",
        "js"
      ],
      poweredByHeader: true,
      compress: true,
      images: _imageconfig.imageConfigDefault,
      devIndicators: {
        position: "bottom-left"
      },
      onDemandEntries: {
        maxInactiveAge: 60 * 1e3,
        pagesBufferLength: 5
      },
      amp: {
        canonicalBase: ""
      },
      basePath: "",
      sassOptions: {},
      trailingSlash: false,
      i18n: null,
      productionBrowserSourceMaps: false,
      excludeDefaultMomentLocales: true,
      serverRuntimeConfig: {},
      publicRuntimeConfig: {},
      reactProductionProfiling: false,
      reactStrictMode: null,
      reactMaxHeadersLength: 6e3,
      httpAgentOptions: {
        keepAlive: true
      },
      logging: {},
      compiler: {},
      expireTime: process.env.NEXT_PRIVATE_CDN_CONSUMED_SWR_CACHE_CONTROL ? void 0 : 31536e3,
      staticPageGenerationTimeout: 60,
      output: !!process.env.NEXT_PRIVATE_STANDALONE ? "standalone" : void 0,
      modularizeImports: void 0,
      outputFileTracingRoot: process.env.NEXT_PRIVATE_OUTPUT_TRACE_ROOT || "",
      allowedDevOrigins: void 0,
      experimental: {
        adapterPath: process.env.NEXT_ADAPTER_PATH || void 0,
        useSkewCookie: false,
        cacheLife: {
          default: {
            stale: void 0,
            revalidate: 60 * 15,
            expire: _constants.INFINITE_CACHE
          },
          seconds: {
            stale: 30,
            revalidate: 1,
            expire: 60
          },
          minutes: {
            stale: 60 * 5,
            revalidate: 60,
            expire: 60 * 60
          },
          hours: {
            stale: 60 * 5,
            revalidate: 60 * 60,
            expire: 60 * 60 * 24
          },
          days: {
            stale: 60 * 5,
            revalidate: 60 * 60 * 24,
            expire: 60 * 60 * 24 * 7
          },
          weeks: {
            stale: 60 * 5,
            revalidate: 60 * 60 * 24 * 7,
            expire: 60 * 60 * 24 * 30
          },
          max: {
            stale: 60 * 5,
            revalidate: 60 * 60 * 24 * 30,
            expire: _constants.INFINITE_CACHE
          }
        },
        cacheHandlers: {
          default: process.env.NEXT_DEFAULT_CACHE_HANDLER_PATH,
          remote: process.env.NEXT_REMOTE_CACHE_HANDLER_PATH,
          static: process.env.NEXT_STATIC_CACHE_HANDLER_PATH
        },
        cssChunking: true,
        multiZoneDraftMode: false,
        appNavFailHandling: false,
        prerenderEarlyExit: true,
        serverMinification: true,
        // Will default to cacheComponents value.
        enablePrerenderSourceMaps: void 0,
        serverSourceMaps: false,
        linkNoTouchStart: false,
        caseSensitiveRoutes: false,
        clientSegmentCache: false,
        clientParamParsing: false,
        dynamicOnHover: false,
        appDocumentPreloading: void 0,
        preloadEntriesOnStart: true,
        clientRouterFilter: true,
        clientRouterFilterRedirects: false,
        fetchCacheKeyPrefix: "",
        middlewarePrefetch: "flexible",
        optimisticClientCache: true,
        manualClientBasePath: false,
        cpus: Math.max(1, (Number(process.env.CIRCLE_NODE_TOTAL) || (_os.default.cpus() || {
          length: 1
        }).length) - 1),
        memoryBasedWorkersCount: false,
        imgOptConcurrency: null,
        imgOptTimeoutInSeconds: 7,
        imgOptMaxInputPixels: 268402689,
        imgOptSequentialRead: null,
        imgOptSkipMetadata: null,
        isrFlushToDisk: true,
        workerThreads: false,
        proxyTimeout: void 0,
        optimizeCss: false,
        nextScriptWorkers: false,
        scrollRestoration: false,
        externalDir: false,
        disableOptimizedLoading: false,
        gzipSize: true,
        craCompat: false,
        esmExternals: true,
        fullySpecified: false,
        swcTraceProfiling: false,
        forceSwcTransforms: false,
        swcPlugins: void 0,
        largePageDataBytes: 128 * 1e3,
        disablePostcssPresetEnv: void 0,
        amp: void 0,
        urlImports: void 0,
        turbo: void 0,
        typedEnv: false,
        clientTraceMetadata: void 0,
        parallelServerCompiles: false,
        parallelServerBuildTraces: false,
        ppr: false,
        authInterrupts: false,
        webpackBuildWorker: void 0,
        webpackMemoryOptimizations: false,
        optimizeServerReact: true,
        viewTransition: false,
        routerBFCache: false,
        removeUncaughtErrorAndRejectionListeners: false,
        validateRSCRequestHeaders: !!(process.env.__NEXT_TEST_MODE || !(0, _canaryonly.isStableBuild)()),
        staleTimes: {
          dynamic: 0,
          static: 300
        },
        allowDevelopmentBuild: void 0,
        reactCompiler: void 0,
        staticGenerationRetryCount: void 0,
        serverComponentsHmrCache: true,
        staticGenerationMaxConcurrency: 8,
        staticGenerationMinPagesPerWorker: 25,
        cacheComponents: false,
        inlineCss: false,
        useCache: void 0,
        slowModuleDetection: void 0,
        globalNotFound: false,
        devtoolSegmentExplorer: true,
        browserDebugInfoInTerminal: false,
        optimizeRouterScrolling: false
      },
      htmlLimitedBots: void 0,
      bundlePagesRouterDependencies: false
    });
    async function normalizeConfig(phase, config2) {
      if (typeof config2 === "function") {
        config2 = config2(phase, {
          defaultConfig: defaultConfig2
        });
      }
      return await config2;
    }
  }
});

// node_modules/next/dist/compiled/@hapi/accept/index.js
var require_accept = __commonJS({
  "node_modules/next/dist/compiled/@hapi/accept/index.js"(exports, module) {
    (() => {
      "use strict";
      var e5 = { 298: (e6, t6, r6) => {
        const n5 = r6(135);
        const o5 = r6(749);
        const s5 = {};
        t6.selection = function(e7, r7, n6) {
          const o6 = t6.selections(e7, r7, n6);
          return o6.length ? o6[0] : "";
        };
        t6.selections = function(e7, t7, r7) {
          n5.assert(!t7 || Array.isArray(t7), "Preferences must be an array");
          return s5.parse(e7 || "", t7, r7);
        };
        s5.parse = function(e7, t7, r7) {
          const n6 = e7.replace(/[ \t]/g, "");
          const a5 = /* @__PURE__ */ new Map();
          if (t7) {
            let e8 = 0;
            for (const n7 of t7) {
              const t8 = n7.toLowerCase();
              a5.set(t8, { orig: n7, pos: e8++ });
              if (r7.prefixMatch) {
                const r8 = t8.split("-");
                while (r8.pop(), r8.length > 0) {
                  const t9 = r8.join("-");
                  if (!a5.has(t9)) {
                    a5.set(t9, { orig: n7, pos: e8++ });
                  }
                }
              }
            }
          }
          const i5 = n6.split(",");
          const u5 = [];
          const c5 = /* @__PURE__ */ new Set();
          for (let e8 = 0; e8 < i5.length; ++e8) {
            const n7 = i5[e8];
            if (!n7) {
              continue;
            }
            const s6 = n7.split(";");
            if (s6.length > 2) {
              throw o5.badRequest(`Invalid ${r7.type} header`);
            }
            let f6 = s6[0].toLowerCase();
            if (!f6) {
              throw o5.badRequest(`Invalid ${r7.type} header`);
            }
            if (r7.equivalents && r7.equivalents.has(f6)) {
              f6 = r7.equivalents.get(f6);
            }
            const l6 = { token: f6, pos: e8, q: 1 };
            if (t7 && a5.has(f6)) {
              l6.pref = a5.get(f6).pos;
            }
            c5.add(l6.token);
            if (s6.length === 2) {
              const e9 = s6[1];
              const [t8, n8] = e9.split("=");
              if (!n8 || t8 !== "q" && t8 !== "Q") {
                throw o5.badRequest(`Invalid ${r7.type} header`);
              }
              const a6 = parseFloat(n8);
              if (a6 === 0) {
                continue;
              }
              if (Number.isFinite(a6) && a6 <= 1 && a6 >= 1e-3) {
                l6.q = a6;
              }
            }
            u5.push(l6);
          }
          u5.sort(s5.sort);
          const f5 = u5.map((e8) => e8.token);
          if (r7.default && !c5.has(r7.default)) {
            f5.push(r7.default);
          }
          if (!t7 || !t7.length) {
            return f5;
          }
          const l5 = [];
          for (const e8 of f5) {
            if (e8 === "*") {
              for (const [e9, t8] of a5) {
                if (!c5.has(e9)) {
                  l5.push(t8.orig);
                }
              }
            } else {
              const t8 = e8.toLowerCase();
              if (a5.has(t8)) {
                l5.push(a5.get(t8).orig);
              }
            }
          }
          return l5;
        };
        s5.sort = function(e7, t7) {
          const r7 = -1;
          const n6 = 1;
          if (t7.q !== e7.q) {
            return t7.q - e7.q;
          }
          if (t7.pref !== e7.pref) {
            if (e7.pref === void 0) {
              return n6;
            }
            if (t7.pref === void 0) {
              return r7;
            }
            return e7.pref - t7.pref;
          }
          return e7.pos - t7.pos;
        };
      }, 538: (e6, t6, r6) => {
        const n5 = r6(298);
        const o5 = r6(305);
        const s5 = { options: { charset: { type: "accept-charset" }, encoding: { type: "accept-encoding", default: "identity", equivalents: /* @__PURE__ */ new Map([["x-compress", "compress"], ["x-gzip", "gzip"]]) }, language: { type: "accept-language", prefixMatch: true } } };
        for (const e7 in s5.options) {
          t6[e7] = (t7, r7) => n5.selection(t7, r7, s5.options[e7]);
          t6[`${e7}s`] = (t7, r7) => n5.selections(t7, r7, s5.options[e7]);
        }
        t6.mediaType = (e7, t7) => o5.selection(e7, t7);
        t6.mediaTypes = (e7, t7) => o5.selections(e7, t7);
        t6.parseAll = function(e7) {
          return { charsets: t6.charsets(e7["accept-charset"]), encodings: t6.encodings(e7["accept-encoding"]), languages: t6.languages(e7["accept-language"]), mediaTypes: t6.mediaTypes(e7.accept) };
        };
      }, 305: (e6, t6, r6) => {
        const n5 = r6(135);
        const o5 = r6(749);
        const s5 = {};
        t6.selection = function(e7, r7) {
          const n6 = t6.selections(e7, r7);
          return n6.length ? n6[0] : "";
        };
        t6.selections = function(e7, t7) {
          n5.assert(!t7 || Array.isArray(t7), "Preferences must be an array");
          return s5.parse(e7, t7);
        };
        s5.validMediaRx = /^(?:\*\/\*)|(?:[\w\!#\$%&'\*\+\-\.\^`\|~]+\/\*)|(?:[\w\!#\$%&'\*\+\-\.\^`\|~]+\/[\w\!#\$%&'\*\+\-\.\^`\|~]+)$/;
        s5.parse = function(e7, t7) {
          const { header: r7, quoted: n6 } = s5.normalize(e7);
          const a5 = r7.split(",");
          const i5 = [];
          const u5 = {};
          for (let e8 = 0; e8 < a5.length; ++e8) {
            const t8 = a5[e8];
            if (!t8) {
              continue;
            }
            const r8 = t8.split(";");
            const c5 = r8.shift().toLowerCase();
            if (!s5.validMediaRx.test(c5)) {
              continue;
            }
            const f5 = { token: c5, params: {}, exts: {}, pos: e8 };
            let l5 = "params";
            for (const e9 of r8) {
              const t9 = e9.split("=");
              if (t9.length !== 2 || !t9[1]) {
                throw o5.badRequest(`Invalid accept header`);
              }
              const r9 = t9[0];
              let s6 = t9[1];
              if (r9 === "q" || r9 === "Q") {
                l5 = "exts";
                s6 = parseFloat(s6);
                if (!Number.isFinite(s6) || s6 > 1 || s6 < 1e-3 && s6 !== 0) {
                  s6 = 1;
                }
                f5.q = s6;
              } else {
                if (s6[0] === '"') {
                  s6 = `"${n6[s6]}"`;
                }
                f5[l5][t9[0]] = s6;
              }
            }
            const p5 = Object.keys(f5.params);
            f5.original = [""].concat(p5.map((e9) => `${e9}=${f5.params[e9]}`)).join(";");
            f5.specificity = p5.length;
            if (f5.q === void 0) {
              f5.q = 1;
            }
            const d5 = f5.token.split("/");
            f5.type = d5[0];
            f5.subtype = d5[1];
            u5[f5.token] = f5;
            if (f5.q) {
              i5.push(f5);
            }
          }
          i5.sort(s5.sort);
          return s5.preferences(u5, i5, t7);
        };
        s5.normalize = function(e7) {
          e7 = e7 || "*/*";
          const t7 = { header: e7, quoted: {} };
          if (e7.includes('"')) {
            let r7 = 0;
            t7.header = e7.replace(/="([^"]*)"/g, (e8, n6) => {
              const o6 = '"' + ++r7;
              t7.quoted[o6] = n6;
              return "=" + o6;
            });
          }
          t7.header = t7.header.replace(/[ \t]/g, "");
          return t7;
        };
        s5.sort = function(e7, t7) {
          if (t7.q !== e7.q) {
            return t7.q - e7.q;
          }
          if (e7.type !== t7.type) {
            return s5.innerSort(e7, t7, "type");
          }
          if (e7.subtype !== t7.subtype) {
            return s5.innerSort(e7, t7, "subtype");
          }
          if (e7.specificity !== t7.specificity) {
            return t7.specificity - e7.specificity;
          }
          return e7.pos - t7.pos;
        };
        s5.innerSort = function(e7, t7, r7) {
          const n6 = -1;
          const o6 = 1;
          if (e7[r7] === "*") {
            return o6;
          }
          if (t7[r7] === "*") {
            return n6;
          }
          return e7[r7] < t7[r7] ? n6 : o6;
        };
        s5.preferences = function(e7, t7, r7) {
          if (!r7 || !r7.length) {
            return t7.map((e8) => e8.token + e8.original);
          }
          const o6 = /* @__PURE__ */ Object.create(null);
          const s6 = /* @__PURE__ */ Object.create(null);
          let a5 = false;
          for (const e8 of r7) {
            const t8 = e8.toLowerCase();
            s6[t8] = e8;
            const r8 = t8.split("/");
            const i6 = r8[0];
            const u5 = r8[1];
            if (i6 === "*") {
              n5.assert(u5 === "*", "Invalid media type preference contains wildcard type with a subtype");
              a5 = true;
              continue;
            }
            o6[i6] = o6[i6] || /* @__PURE__ */ Object.create(null);
            o6[i6][u5] = e8;
          }
          const i5 = [];
          for (const r8 of t7) {
            const t8 = r8.token;
            const { type: n6, subtype: u5 } = e7[t8];
            const c5 = o6[n6];
            if (n6 === "*") {
              for (const t9 of Object.keys(s6)) {
                if (!e7[t9]) {
                  i5.push(s6[t9]);
                }
              }
              if (a5) {
                i5.push("*/*");
              }
              continue;
            }
            if (a5) {
              i5.push((s6[t8] || t8) + r8.original);
              continue;
            }
            if (u5 !== "*") {
              const e8 = s6[t8];
              if (e8 || c5 && c5["*"]) {
                i5.push((e8 || t8) + r8.original);
              }
              continue;
            }
            if (c5) {
              for (const t9 of Object.keys(c5)) {
                if (!e7[`${n6}/${t9}`]) {
                  i5.push(c5[t9]);
                }
              }
            }
          }
          return i5;
        };
      }, 749: (e6, t6, r6) => {
        const n5 = r6(135);
        const o5 = { codes: /* @__PURE__ */ new Map([[100, "Continue"], [101, "Switching Protocols"], [102, "Processing"], [200, "OK"], [201, "Created"], [202, "Accepted"], [203, "Non-Authoritative Information"], [204, "No Content"], [205, "Reset Content"], [206, "Partial Content"], [207, "Multi-Status"], [300, "Multiple Choices"], [301, "Moved Permanently"], [302, "Moved Temporarily"], [303, "See Other"], [304, "Not Modified"], [305, "Use Proxy"], [307, "Temporary Redirect"], [400, "Bad Request"], [401, "Unauthorized"], [402, "Payment Required"], [403, "Forbidden"], [404, "Not Found"], [405, "Method Not Allowed"], [406, "Not Acceptable"], [407, "Proxy Authentication Required"], [408, "Request Time-out"], [409, "Conflict"], [410, "Gone"], [411, "Length Required"], [412, "Precondition Failed"], [413, "Request Entity Too Large"], [414, "Request-URI Too Large"], [415, "Unsupported Media Type"], [416, "Requested Range Not Satisfiable"], [417, "Expectation Failed"], [418, "I'm a teapot"], [422, "Unprocessable Entity"], [423, "Locked"], [424, "Failed Dependency"], [425, "Too Early"], [426, "Upgrade Required"], [428, "Precondition Required"], [429, "Too Many Requests"], [431, "Request Header Fields Too Large"], [451, "Unavailable For Legal Reasons"], [500, "Internal Server Error"], [501, "Not Implemented"], [502, "Bad Gateway"], [503, "Service Unavailable"], [504, "Gateway Time-out"], [505, "HTTP Version Not Supported"], [506, "Variant Also Negotiates"], [507, "Insufficient Storage"], [509, "Bandwidth Limit Exceeded"], [510, "Not Extended"], [511, "Network Authentication Required"]]) };
        t6.Boom = class extends Error {
          constructor(e7, r7 = {}) {
            if (e7 instanceof Error) {
              return t6.boomify(n5.clone(e7), r7);
            }
            const { statusCode: s5 = 500, data: a5 = null, ctor: i5 = t6.Boom } = r7;
            const u5 = new Error(e7 ? e7 : void 0);
            Error.captureStackTrace(u5, i5);
            u5.data = a5;
            const c5 = o5.initialize(u5, s5);
            Object.defineProperty(c5, "typeof", { value: i5 });
            if (r7.decorate) {
              Object.assign(c5, r7.decorate);
            }
            return c5;
          }
          static [Symbol.hasInstance](e7) {
            return t6.isBoom(e7);
          }
        };
        t6.isBoom = function(e7, t7) {
          return e7 instanceof Error && !!e7.isBoom && (!t7 || e7.output.statusCode === t7);
        };
        t6.boomify = function(e7, t7) {
          n5.assert(e7 instanceof Error, "Cannot wrap non-Error object");
          t7 = t7 || {};
          if (t7.data !== void 0) {
            e7.data = t7.data;
          }
          if (t7.decorate) {
            Object.assign(e7, t7.decorate);
          }
          if (!e7.isBoom) {
            return o5.initialize(e7, t7.statusCode || 500, t7.message);
          }
          if (t7.override === false || !t7.statusCode && !t7.message) {
            return e7;
          }
          return o5.initialize(e7, t7.statusCode || e7.output.statusCode, t7.message);
        };
        t6.badRequest = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 400, data: r7, ctor: t6.badRequest });
        };
        t6.unauthorized = function(e7, r7, o6) {
          const s5 = new t6.Boom(e7, { statusCode: 401, ctor: t6.unauthorized });
          if (!r7) {
            return s5;
          }
          if (typeof r7 !== "string") {
            s5.output.headers["WWW-Authenticate"] = r7.join(", ");
            return s5;
          }
          let a5 = `${r7}`;
          if (o6 || e7) {
            s5.output.payload.attributes = {};
          }
          if (o6) {
            if (typeof o6 === "string") {
              a5 += " " + n5.escapeHeaderAttribute(o6);
              s5.output.payload.attributes = o6;
            } else {
              a5 += " " + Object.keys(o6).map((e8) => {
                let t7 = o6[e8];
                if (t7 === null || t7 === void 0) {
                  t7 = "";
                }
                s5.output.payload.attributes[e8] = t7;
                return `${e8}="${n5.escapeHeaderAttribute(t7.toString())}"`;
              }).join(", ");
            }
          }
          if (e7) {
            if (o6) {
              a5 += ",";
            }
            a5 += ` error="${n5.escapeHeaderAttribute(e7)}"`;
            s5.output.payload.attributes.error = e7;
          } else {
            s5.isMissing = true;
          }
          s5.output.headers["WWW-Authenticate"] = a5;
          return s5;
        };
        t6.paymentRequired = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 402, data: r7, ctor: t6.paymentRequired });
        };
        t6.forbidden = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 403, data: r7, ctor: t6.forbidden });
        };
        t6.notFound = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 404, data: r7, ctor: t6.notFound });
        };
        t6.methodNotAllowed = function(e7, r7, n6) {
          const o6 = new t6.Boom(e7, { statusCode: 405, data: r7, ctor: t6.methodNotAllowed });
          if (typeof n6 === "string") {
            n6 = [n6];
          }
          if (Array.isArray(n6)) {
            o6.output.headers.Allow = n6.join(", ");
          }
          return o6;
        };
        t6.notAcceptable = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 406, data: r7, ctor: t6.notAcceptable });
        };
        t6.proxyAuthRequired = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 407, data: r7, ctor: t6.proxyAuthRequired });
        };
        t6.clientTimeout = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 408, data: r7, ctor: t6.clientTimeout });
        };
        t6.conflict = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 409, data: r7, ctor: t6.conflict });
        };
        t6.resourceGone = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 410, data: r7, ctor: t6.resourceGone });
        };
        t6.lengthRequired = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 411, data: r7, ctor: t6.lengthRequired });
        };
        t6.preconditionFailed = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 412, data: r7, ctor: t6.preconditionFailed });
        };
        t6.entityTooLarge = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 413, data: r7, ctor: t6.entityTooLarge });
        };
        t6.uriTooLong = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 414, data: r7, ctor: t6.uriTooLong });
        };
        t6.unsupportedMediaType = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 415, data: r7, ctor: t6.unsupportedMediaType });
        };
        t6.rangeNotSatisfiable = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 416, data: r7, ctor: t6.rangeNotSatisfiable });
        };
        t6.expectationFailed = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 417, data: r7, ctor: t6.expectationFailed });
        };
        t6.teapot = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 418, data: r7, ctor: t6.teapot });
        };
        t6.badData = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 422, data: r7, ctor: t6.badData });
        };
        t6.locked = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 423, data: r7, ctor: t6.locked });
        };
        t6.failedDependency = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 424, data: r7, ctor: t6.failedDependency });
        };
        t6.tooEarly = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 425, data: r7, ctor: t6.tooEarly });
        };
        t6.preconditionRequired = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 428, data: r7, ctor: t6.preconditionRequired });
        };
        t6.tooManyRequests = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 429, data: r7, ctor: t6.tooManyRequests });
        };
        t6.illegal = function(e7, r7) {
          return new t6.Boom(e7, { statusCode: 451, data: r7, ctor: t6.illegal });
        };
        t6.internal = function(e7, r7, n6 = 500) {
          return o5.serverError(e7, r7, n6, t6.internal);
        };
        t6.notImplemented = function(e7, r7) {
          return o5.serverError(e7, r7, 501, t6.notImplemented);
        };
        t6.badGateway = function(e7, r7) {
          return o5.serverError(e7, r7, 502, t6.badGateway);
        };
        t6.serverUnavailable = function(e7, r7) {
          return o5.serverError(e7, r7, 503, t6.serverUnavailable);
        };
        t6.gatewayTimeout = function(e7, r7) {
          return o5.serverError(e7, r7, 504, t6.gatewayTimeout);
        };
        t6.badImplementation = function(e7, r7) {
          const n6 = o5.serverError(e7, r7, 500, t6.badImplementation);
          n6.isDeveloperError = true;
          return n6;
        };
        o5.initialize = function(e7, t7, r7) {
          const s5 = parseInt(t7, 10);
          n5.assert(!isNaN(s5) && s5 >= 400, "First argument must be a number (400+):", t7);
          e7.isBoom = true;
          e7.isServer = s5 >= 500;
          if (!e7.hasOwnProperty("data")) {
            e7.data = null;
          }
          e7.output = { statusCode: s5, payload: {}, headers: {} };
          Object.defineProperty(e7, "reformat", { value: o5.reformat });
          if (!r7 && !e7.message) {
            e7.reformat();
            r7 = e7.output.payload.error;
          }
          if (r7) {
            const t8 = Object.getOwnPropertyDescriptor(e7, "message") || Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e7), "message");
            n5.assert(!t8 || t8.configurable && !t8.get, "The error is not compatible with boom");
            e7.message = r7 + (e7.message ? ": " + e7.message : "");
            e7.output.payload.message = e7.message;
          }
          e7.reformat();
          return e7;
        };
        o5.reformat = function(e7 = false) {
          this.output.payload.statusCode = this.output.statusCode;
          this.output.payload.error = o5.codes.get(this.output.statusCode) || "Unknown";
          if (this.output.statusCode === 500 && e7 !== true) {
            this.output.payload.message = "An internal server error occurred";
          } else if (this.message) {
            this.output.payload.message = this.message;
          }
        };
        o5.serverError = function(e7, r7, n6, o6) {
          if (r7 instanceof Error && !r7.isBoom) {
            return t6.boomify(r7, { statusCode: n6, message: e7 });
          }
          return new t6.Boom(e7, { statusCode: n6, data: r7, ctor: o6 });
        };
      }, 181: (e6, t6, r6) => {
        const n5 = r6(498);
        const o5 = r6(920);
        const s5 = r6(89);
        const a5 = r6(938);
        const i5 = {};
        e6.exports = function(e7, t7, r7 = {}) {
          n5(e7 && typeof e7 === "object", "Invalid defaults value: must be an object");
          n5(!t7 || t7 === true || typeof t7 === "object", "Invalid source value: must be true, falsy or an object");
          n5(typeof r7 === "object", "Invalid options: must be an object");
          if (!t7) {
            return null;
          }
          if (r7.shallow) {
            return i5.applyToDefaultsWithShallow(e7, t7, r7);
          }
          const a6 = o5(e7);
          if (t7 === true) {
            return a6;
          }
          const u5 = r7.nullOverride !== void 0 ? r7.nullOverride : false;
          return s5(a6, t7, { nullOverride: u5, mergeArrays: false });
        };
        i5.applyToDefaultsWithShallow = function(e7, t7, r7) {
          const u5 = r7.shallow;
          n5(Array.isArray(u5), "Invalid keys");
          const c5 = /* @__PURE__ */ new Map();
          const f5 = t7 === true ? null : /* @__PURE__ */ new Set();
          for (let r8 of u5) {
            r8 = Array.isArray(r8) ? r8 : r8.split(".");
            const n6 = a5(e7, r8);
            if (n6 && typeof n6 === "object") {
              c5.set(n6, f5 && a5(t7, r8) || n6);
            } else if (f5) {
              f5.add(r8);
            }
          }
          const l5 = o5(e7, {}, c5);
          if (!f5) {
            return l5;
          }
          for (const e8 of f5) {
            i5.reachCopy(l5, t7, e8);
          }
          return s5(l5, t7, { mergeArrays: false, nullOverride: false });
        };
        i5.reachCopy = function(e7, t7, r7) {
          for (const e8 of r7) {
            if (!(e8 in t7)) {
              return;
            }
            t7 = t7[e8];
          }
          const n6 = t7;
          let o6 = e7;
          for (let e8 = 0; e8 < r7.length - 1; ++e8) {
            const t8 = r7[e8];
            if (typeof o6[t8] !== "object") {
              o6[t8] = {};
            }
            o6 = o6[t8];
          }
          o6[r7[r7.length - 1]] = n6;
        };
      }, 498: (e6, t6, r6) => {
        const n5 = r6(650);
        const o5 = {};
        e6.exports = function(e7, ...t7) {
          if (e7) {
            return;
          }
          if (t7.length === 1 && t7[0] instanceof Error) {
            throw t7[0];
          }
          throw new n5(t7);
        };
      }, 0: (e6) => {
        const t6 = {};
        e6.exports = t6.Bench = class {
          constructor() {
            this.ts = 0;
            this.reset();
          }
          reset() {
            this.ts = t6.Bench.now();
          }
          elapsed() {
            return t6.Bench.now() - this.ts;
          }
          static now() {
            const e7 = process.hrtime();
            return e7[0] * 1e3 + e7[1] / 1e6;
          }
        };
      }, 761: (e6, t6, r6) => {
        const n5 = r6(908);
        const o5 = {};
        e6.exports = function() {
          return new Promise(n5);
        };
      }, 920: (e6, t6, r6) => {
        const n5 = r6(938);
        const o5 = r6(520);
        const s5 = r6(932);
        const a5 = { needsProtoHack: /* @__PURE__ */ new Set([o5.set, o5.map, o5.weakSet, o5.weakMap]) };
        e6.exports = a5.clone = function(e7, t7 = {}, r7 = null) {
          if (typeof e7 !== "object" || e7 === null) {
            return e7;
          }
          let n6 = a5.clone;
          let i5 = r7;
          if (t7.shallow) {
            if (t7.shallow !== true) {
              return a5.cloneWithShallow(e7, t7);
            }
            n6 = (e8) => e8;
          } else if (i5) {
            const t8 = i5.get(e7);
            if (t8) {
              return t8;
            }
          } else {
            i5 = /* @__PURE__ */ new Map();
          }
          const u5 = o5.getInternalProto(e7);
          if (u5 === o5.buffer) {
            return Buffer && Buffer.from(e7);
          }
          if (u5 === o5.date) {
            return new Date(e7.getTime());
          }
          if (u5 === o5.regex) {
            return new RegExp(e7);
          }
          const c5 = a5.base(e7, u5, t7);
          if (c5 === e7) {
            return e7;
          }
          if (i5) {
            i5.set(e7, c5);
          }
          if (u5 === o5.set) {
            for (const r8 of e7) {
              c5.add(n6(r8, t7, i5));
            }
          } else if (u5 === o5.map) {
            for (const [r8, o6] of e7) {
              c5.set(r8, n6(o6, t7, i5));
            }
          }
          const f5 = s5.keys(e7, t7);
          for (const r8 of f5) {
            if (r8 === "__proto__") {
              continue;
            }
            if (u5 === o5.array && r8 === "length") {
              c5.length = e7.length;
              continue;
            }
            const s6 = Object.getOwnPropertyDescriptor(e7, r8);
            if (s6) {
              if (s6.get || s6.set) {
                Object.defineProperty(c5, r8, s6);
              } else if (s6.enumerable) {
                c5[r8] = n6(e7[r8], t7, i5);
              } else {
                Object.defineProperty(c5, r8, { enumerable: false, writable: true, configurable: true, value: n6(e7[r8], t7, i5) });
              }
            } else {
              Object.defineProperty(c5, r8, { enumerable: true, writable: true, configurable: true, value: n6(e7[r8], t7, i5) });
            }
          }
          return c5;
        };
        a5.cloneWithShallow = function(e7, t7) {
          const r7 = t7.shallow;
          t7 = Object.assign({}, t7);
          t7.shallow = false;
          const o6 = /* @__PURE__ */ new Map();
          for (const t8 of r7) {
            const r8 = n5(e7, t8);
            if (typeof r8 === "object" || typeof r8 === "function") {
              o6.set(r8, r8);
            }
          }
          return a5.clone(e7, t7, o6);
        };
        a5.base = function(e7, t7, r7) {
          if (r7.prototype === false) {
            if (a5.needsProtoHack.has(t7)) {
              return new t7.constructor();
            }
            return t7 === o5.array ? [] : {};
          }
          const n6 = Object.getPrototypeOf(e7);
          if (n6 && n6.isImmutable) {
            return e7;
          }
          if (t7 === o5.array) {
            const e8 = [];
            if (n6 !== t7) {
              Object.setPrototypeOf(e8, n6);
            }
            return e8;
          }
          if (a5.needsProtoHack.has(t7)) {
            const e8 = new n6.constructor();
            if (n6 !== t7) {
              Object.setPrototypeOf(e8, n6);
            }
            return e8;
          }
          return Object.create(n6);
        };
      }, 101: (e6, t6, r6) => {
        const n5 = r6(498);
        const o5 = r6(17);
        const s5 = r6(212);
        const a5 = r6(932);
        const i5 = {};
        e6.exports = function(e7, t7, r7 = {}) {
          if (typeof t7 !== "object") {
            t7 = [t7];
          }
          n5(!Array.isArray(t7) || t7.length, "Values array cannot be empty");
          if (typeof e7 === "string") {
            return i5.string(e7, t7, r7);
          }
          if (Array.isArray(e7)) {
            return i5.array(e7, t7, r7);
          }
          n5(typeof e7 === "object", "Reference must be string or an object");
          return i5.object(e7, t7, r7);
        };
        i5.array = function(e7, t7, r7) {
          if (!Array.isArray(t7)) {
            t7 = [t7];
          }
          if (!e7.length) {
            return false;
          }
          if (r7.only && r7.once && e7.length !== t7.length) {
            return false;
          }
          let n6;
          const o6 = /* @__PURE__ */ new Map();
          for (const e8 of t7) {
            if (!r7.deep || !e8 || typeof e8 !== "object") {
              const t8 = o6.get(e8);
              if (t8) {
                ++t8.allowed;
              } else {
                o6.set(e8, { allowed: 1, hits: 0 });
              }
            } else {
              n6 = n6 || i5.compare(r7);
              let t8 = false;
              for (const [r8, s7] of o6.entries()) {
                if (n6(r8, e8)) {
                  ++s7.allowed;
                  t8 = true;
                  break;
                }
              }
              if (!t8) {
                o6.set(e8, { allowed: 1, hits: 0 });
              }
            }
          }
          let s6 = 0;
          for (const t8 of e7) {
            let e8;
            if (!r7.deep || !t8 || typeof t8 !== "object") {
              e8 = o6.get(t8);
            } else {
              n6 = n6 || i5.compare(r7);
              for (const [r8, s7] of o6.entries()) {
                if (n6(r8, t8)) {
                  e8 = s7;
                  break;
                }
              }
            }
            if (e8) {
              ++e8.hits;
              ++s6;
              if (r7.once && e8.hits > e8.allowed) {
                return false;
              }
            }
          }
          if (r7.only && s6 !== e7.length) {
            return false;
          }
          for (const e8 of o6.values()) {
            if (e8.hits === e8.allowed) {
              continue;
            }
            if (e8.hits < e8.allowed && !r7.part) {
              return false;
            }
          }
          return !!s6;
        };
        i5.object = function(e7, t7, r7) {
          n5(r7.once === void 0, "Cannot use option once with object");
          const o6 = a5.keys(e7, r7);
          if (!o6.length) {
            return false;
          }
          if (Array.isArray(t7)) {
            return i5.array(o6, t7, r7);
          }
          const s6 = Object.getOwnPropertySymbols(t7).filter((e8) => t7.propertyIsEnumerable(e8));
          const u5 = [...Object.keys(t7), ...s6];
          const c5 = i5.compare(r7);
          const f5 = new Set(u5);
          for (const n6 of o6) {
            if (!f5.has(n6)) {
              if (r7.only) {
                return false;
              }
              continue;
            }
            if (!c5(t7[n6], e7[n6])) {
              return false;
            }
            f5.delete(n6);
          }
          if (f5.size) {
            return r7.part ? f5.size < u5.length : false;
          }
          return true;
        };
        i5.string = function(e7, t7, r7) {
          if (e7 === "") {
            return t7.length === 1 && t7[0] === "" || !r7.once && !t7.some((e8) => e8 !== "");
          }
          const o6 = /* @__PURE__ */ new Map();
          const a6 = [];
          for (const e8 of t7) {
            n5(typeof e8 === "string", "Cannot compare string reference to non-string value");
            if (e8) {
              const t8 = o6.get(e8);
              if (t8) {
                ++t8.allowed;
              } else {
                o6.set(e8, { allowed: 1, hits: 0 });
                a6.push(s5(e8));
              }
            } else if (r7.once || r7.only) {
              return false;
            }
          }
          if (!a6.length) {
            return true;
          }
          const i6 = new RegExp(`(${a6.join("|")})`, "g");
          const u5 = e7.replace(i6, (e8, t8) => {
            ++o6.get(t8).hits;
            return "";
          });
          if (r7.only && u5) {
            return false;
          }
          let c5 = false;
          for (const e8 of o6.values()) {
            if (e8.hits) {
              c5 = true;
            }
            if (e8.hits === e8.allowed) {
              continue;
            }
            if (e8.hits < e8.allowed && !r7.part) {
              return false;
            }
            if (r7.once) {
              return false;
            }
          }
          return !!c5;
        };
        i5.compare = function(e7) {
          if (!e7.deep) {
            return i5.shallow;
          }
          const t7 = e7.only !== void 0;
          const r7 = e7.part !== void 0;
          const n6 = { prototype: t7 ? e7.only : r7 ? !e7.part : false, part: t7 ? !e7.only : r7 ? e7.part : false };
          return (e8, t8) => o5(e8, t8, n6);
        };
        i5.shallow = function(e7, t7) {
          return e7 === t7;
        };
      }, 17: (e6, t6, r6) => {
        const n5 = r6(520);
        const o5 = { mismatched: null };
        e6.exports = function(e7, t7, r7) {
          r7 = Object.assign({ prototype: true }, r7);
          return !!o5.isDeepEqual(e7, t7, r7, []);
        };
        o5.isDeepEqual = function(e7, t7, r7, s5) {
          if (e7 === t7) {
            return e7 !== 0 || 1 / e7 === 1 / t7;
          }
          const a5 = typeof e7;
          if (a5 !== typeof t7) {
            return false;
          }
          if (e7 === null || t7 === null) {
            return false;
          }
          if (a5 === "function") {
            if (!r7.deepFunction || e7.toString() !== t7.toString()) {
              return false;
            }
          } else if (a5 !== "object") {
            return e7 !== e7 && t7 !== t7;
          }
          const i5 = o5.getSharedType(e7, t7, !!r7.prototype);
          switch (i5) {
            case n5.buffer:
              return Buffer && Buffer.prototype.equals.call(e7, t7);
            case n5.promise:
              return e7 === t7;
            case n5.regex:
              return e7.toString() === t7.toString();
            case o5.mismatched:
              return false;
          }
          for (let r8 = s5.length - 1; r8 >= 0; --r8) {
            if (s5[r8].isSame(e7, t7)) {
              return true;
            }
          }
          s5.push(new o5.SeenEntry(e7, t7));
          try {
            return !!o5.isDeepEqualObj(i5, e7, t7, r7, s5);
          } finally {
            s5.pop();
          }
        };
        o5.getSharedType = function(e7, t7, r7) {
          if (r7) {
            if (Object.getPrototypeOf(e7) !== Object.getPrototypeOf(t7)) {
              return o5.mismatched;
            }
            return n5.getInternalProto(e7);
          }
          const s5 = n5.getInternalProto(e7);
          if (s5 !== n5.getInternalProto(t7)) {
            return o5.mismatched;
          }
          return s5;
        };
        o5.valueOf = function(e7) {
          const t7 = e7.valueOf;
          if (t7 === void 0) {
            return e7;
          }
          try {
            return t7.call(e7);
          } catch (e8) {
            return e8;
          }
        };
        o5.hasOwnEnumerableProperty = function(e7, t7) {
          return Object.prototype.propertyIsEnumerable.call(e7, t7);
        };
        o5.isSetSimpleEqual = function(e7, t7) {
          for (const r7 of Set.prototype.values.call(e7)) {
            if (!Set.prototype.has.call(t7, r7)) {
              return false;
            }
          }
          return true;
        };
        o5.isDeepEqualObj = function(e7, t7, r7, s5, a5) {
          const { isDeepEqual: i5, valueOf: u5, hasOwnEnumerableProperty: c5 } = o5;
          const { keys: f5, getOwnPropertySymbols: l5 } = Object;
          if (e7 === n5.array) {
            if (s5.part) {
              for (const e8 of t7) {
                for (const t8 of r7) {
                  if (i5(e8, t8, s5, a5)) {
                    return true;
                  }
                }
              }
            } else {
              if (t7.length !== r7.length) {
                return false;
              }
              for (let e8 = 0; e8 < t7.length; ++e8) {
                if (!i5(t7[e8], r7[e8], s5, a5)) {
                  return false;
                }
              }
              return true;
            }
          } else if (e7 === n5.set) {
            if (t7.size !== r7.size) {
              return false;
            }
            if (!o5.isSetSimpleEqual(t7, r7)) {
              const e8 = new Set(Set.prototype.values.call(r7));
              for (const r8 of Set.prototype.values.call(t7)) {
                if (e8.delete(r8)) {
                  continue;
                }
                let t8 = false;
                for (const n6 of e8) {
                  if (i5(r8, n6, s5, a5)) {
                    e8.delete(n6);
                    t8 = true;
                    break;
                  }
                }
                if (!t8) {
                  return false;
                }
              }
            }
          } else if (e7 === n5.map) {
            if (t7.size !== r7.size) {
              return false;
            }
            for (const [e8, n6] of Map.prototype.entries.call(t7)) {
              if (n6 === void 0 && !Map.prototype.has.call(r7, e8)) {
                return false;
              }
              if (!i5(n6, Map.prototype.get.call(r7, e8), s5, a5)) {
                return false;
              }
            }
          } else if (e7 === n5.error) {
            if (t7.name !== r7.name || t7.message !== r7.message) {
              return false;
            }
          }
          const p5 = u5(t7);
          const d5 = u5(r7);
          if ((t7 !== p5 || r7 !== d5) && !i5(p5, d5, s5, a5)) {
            return false;
          }
          const y3 = f5(t7);
          if (!s5.part && y3.length !== f5(r7).length && !s5.skip) {
            return false;
          }
          let g5 = 0;
          for (const e8 of y3) {
            if (s5.skip && s5.skip.includes(e8)) {
              if (r7[e8] === void 0) {
                ++g5;
              }
              continue;
            }
            if (!c5(r7, e8)) {
              return false;
            }
            if (!i5(t7[e8], r7[e8], s5, a5)) {
              return false;
            }
          }
          if (!s5.part && y3.length - g5 !== f5(r7).length) {
            return false;
          }
          if (s5.symbols !== false) {
            const e8 = l5(t7);
            const n6 = new Set(l5(r7));
            for (const o6 of e8) {
              if (!s5.skip || !s5.skip.includes(o6)) {
                if (c5(t7, o6)) {
                  if (!c5(r7, o6)) {
                    return false;
                  }
                  if (!i5(t7[o6], r7[o6], s5, a5)) {
                    return false;
                  }
                } else if (c5(r7, o6)) {
                  return false;
                }
              }
              n6.delete(o6);
            }
            for (const e9 of n6) {
              if (c5(r7, e9)) {
                return false;
              }
            }
          }
          return true;
        };
        o5.SeenEntry = class {
          constructor(e7, t7) {
            this.obj = e7;
            this.ref = t7;
          }
          isSame(e7, t7) {
            return this.obj === e7 && this.ref === t7;
          }
        };
      }, 650: (e6, t6, r6) => {
        const n5 = r6(710);
        const o5 = {};
        e6.exports = class extends Error {
          constructor(e7) {
            const r7 = e7.filter((e8) => e8 !== "").map((e8) => typeof e8 === "string" ? e8 : e8 instanceof Error ? e8.message : n5(e8));
            super(r7.join(" ") || "Unknown error");
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(this, t6.assert);
            }
          }
        };
      }, 401: (e6, t6, r6) => {
        const n5 = r6(498);
        const o5 = {};
        e6.exports = function(e7) {
          n5(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(e7), "Bad attribute value (" + e7 + ")");
          return e7.replace(/\\/g, "\\\\").replace(/\"/g, '\\"');
        };
      }, 682: (e6) => {
        const t6 = {};
        e6.exports = function(e7) {
          if (!e7) {
            return "";
          }
          let r6 = "";
          for (let n5 = 0; n5 < e7.length; ++n5) {
            const o5 = e7.charCodeAt(n5);
            if (t6.isSafe(o5)) {
              r6 += e7[n5];
            } else {
              r6 += t6.escapeHtmlChar(o5);
            }
          }
          return r6;
        };
        t6.escapeHtmlChar = function(e7) {
          const r6 = t6.namedHtml[e7];
          if (typeof r6 !== "undefined") {
            return r6;
          }
          if (e7 >= 256) {
            return "&#" + e7 + ";";
          }
          const n5 = e7.toString(16).padStart(2, "0");
          return `&#x${n5};`;
        };
        t6.isSafe = function(e7) {
          return typeof t6.safeCharCodes[e7] !== "undefined";
        };
        t6.namedHtml = { 38: "&amp;", 60: "&lt;", 62: "&gt;", 34: "&quot;", 160: "&nbsp;", 162: "&cent;", 163: "&pound;", 164: "&curren;", 169: "&copy;", 174: "&reg;" };
        t6.safeCharCodes = function() {
          const e7 = {};
          for (let t7 = 32; t7 < 123; ++t7) {
            if (t7 >= 97 || t7 >= 65 && t7 <= 90 || t7 >= 48 && t7 <= 57 || t7 === 32 || t7 === 46 || t7 === 44 || t7 === 45 || t7 === 58 || t7 === 95) {
              e7[t7] = null;
            }
          }
          return e7;
        }();
      }, 303: (e6) => {
        const t6 = {};
        e6.exports = function(e7) {
          if (!e7) {
            return "";
          }
          const t7 = 60;
          const r6 = 62;
          const n5 = 38;
          const o5 = 8232;
          let s5;
          return e7.replace(/[<>&\u2028\u2029]/g, (e8) => {
            s5 = e8.charCodeAt(0);
            if (s5 === t7) {
              return "\\u003c";
            }
            if (s5 === r6) {
              return "\\u003e";
            }
            if (s5 === n5) {
              return "\\u0026";
            }
            if (s5 === o5) {
              return "\\u2028";
            }
            return "\\u2029";
          });
        };
      }, 212: (e6) => {
        const t6 = {};
        e6.exports = function(e7) {
          return e7.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
        };
      }, 385: (e6) => {
        const t6 = {};
        e6.exports = t6.flatten = function(e7, r6) {
          const n5 = r6 || [];
          for (let r7 = 0; r7 < e7.length; ++r7) {
            if (Array.isArray(e7[r7])) {
              t6.flatten(e7[r7], n5);
            } else {
              n5.push(e7[r7]);
            }
          }
          return n5;
        };
      }, 908: (e6) => {
        const t6 = {};
        e6.exports = function() {
        };
      }, 135: (e6, t6, r6) => {
        const n5 = {};
        e6.exports = { applyToDefaults: r6(181), assert: r6(498), Bench: r6(0), block: r6(761), clone: r6(920), contain: r6(101), deepEqual: r6(17), Error: r6(650), escapeHeaderAttribute: r6(401), escapeHtml: r6(682), escapeJson: r6(303), escapeRegex: r6(212), flatten: r6(385), ignore: r6(908), intersect: r6(332), isPromise: r6(539), merge: r6(89), once: r6(246), reach: r6(938), reachTemplate: r6(768), stringify: r6(710), wait: r6(421) };
      }, 332: (e6) => {
        const t6 = {};
        e6.exports = function(e7, r6, n5 = {}) {
          if (!e7 || !r6) {
            return n5.first ? null : [];
          }
          const o5 = [];
          const s5 = Array.isArray(e7) ? new Set(e7) : e7;
          const a5 = /* @__PURE__ */ new Set();
          for (const e8 of r6) {
            if (t6.has(s5, e8) && !a5.has(e8)) {
              if (n5.first) {
                return e8;
              }
              o5.push(e8);
              a5.add(e8);
            }
          }
          return n5.first ? null : o5;
        };
        t6.has = function(e7, t7) {
          if (typeof e7.has === "function") {
            return e7.has(t7);
          }
          return e7[t7] !== void 0;
        };
      }, 539: (e6) => {
        const t6 = {};
        e6.exports = function(e7) {
          return !!e7 && typeof e7.then === "function";
        };
      }, 89: (e6, t6, r6) => {
        const n5 = r6(498);
        const o5 = r6(920);
        const s5 = r6(932);
        const a5 = {};
        e6.exports = a5.merge = function(e7, t7, r7) {
          n5(e7 && typeof e7 === "object", "Invalid target value: must be an object");
          n5(t7 === null || t7 === void 0 || typeof t7 === "object", "Invalid source value: must be null, undefined, or an object");
          if (!t7) {
            return e7;
          }
          r7 = Object.assign({ nullOverride: true, mergeArrays: true }, r7);
          if (Array.isArray(t7)) {
            n5(Array.isArray(e7), "Cannot merge array onto an object");
            if (!r7.mergeArrays) {
              e7.length = 0;
            }
            for (let n6 = 0; n6 < t7.length; ++n6) {
              e7.push(o5(t7[n6], { symbols: r7.symbols }));
            }
            return e7;
          }
          const i5 = s5.keys(t7, r7);
          for (let n6 = 0; n6 < i5.length; ++n6) {
            const s6 = i5[n6];
            if (s6 === "__proto__" || !Object.prototype.propertyIsEnumerable.call(t7, s6)) {
              continue;
            }
            const u5 = t7[s6];
            if (u5 && typeof u5 === "object") {
              if (e7[s6] === u5) {
                continue;
              }
              if (!e7[s6] || typeof e7[s6] !== "object" || Array.isArray(e7[s6]) !== Array.isArray(u5) || u5 instanceof Date || Buffer && Buffer.isBuffer(u5) || u5 instanceof RegExp) {
                e7[s6] = o5(u5, { symbols: r7.symbols });
              } else {
                a5.merge(e7[s6], u5, r7);
              }
            } else {
              if (u5 !== null && u5 !== void 0) {
                e7[s6] = u5;
              } else if (r7.nullOverride) {
                e7[s6] = u5;
              }
            }
          }
          return e7;
        };
      }, 246: (e6) => {
        const t6 = {};
        e6.exports = function(e7) {
          if (e7._hoekOnce) {
            return e7;
          }
          let t7 = false;
          const wrapped = function(...r6) {
            if (!t7) {
              t7 = true;
              e7(...r6);
            }
          };
          wrapped._hoekOnce = true;
          return wrapped;
        };
      }, 938: (e6, t6, r6) => {
        const n5 = r6(498);
        const o5 = {};
        e6.exports = function(e7, t7, r7) {
          if (t7 === false || t7 === null || t7 === void 0) {
            return e7;
          }
          r7 = r7 || {};
          if (typeof r7 === "string") {
            r7 = { separator: r7 };
          }
          const s5 = Array.isArray(t7);
          n5(!s5 || !r7.separator, "Separator option no valid for array-based chain");
          const a5 = s5 ? t7 : t7.split(r7.separator || ".");
          let i5 = e7;
          for (let e8 = 0; e8 < a5.length; ++e8) {
            let s6 = a5[e8];
            const u5 = r7.iterables && o5.iterables(i5);
            if (Array.isArray(i5) || u5 === "set") {
              const e9 = Number(s6);
              if (Number.isInteger(e9)) {
                s6 = e9 < 0 ? i5.length + e9 : e9;
              }
            }
            if (!i5 || typeof i5 === "function" && r7.functions === false || !u5 && i5[s6] === void 0) {
              n5(!r7.strict || e8 + 1 === a5.length, "Missing segment", s6, "in reach path ", t7);
              n5(typeof i5 === "object" || r7.functions === true || typeof i5 !== "function", "Invalid segment", s6, "in reach path ", t7);
              i5 = r7.default;
              break;
            }
            if (!u5) {
              i5 = i5[s6];
            } else if (u5 === "set") {
              i5 = [...i5][s6];
            } else {
              i5 = i5.get(s6);
            }
          }
          return i5;
        };
        o5.iterables = function(e7) {
          if (e7 instanceof Set) {
            return "set";
          }
          if (e7 instanceof Map) {
            return "map";
          }
        };
      }, 768: (e6, t6, r6) => {
        const n5 = r6(938);
        const o5 = {};
        e6.exports = function(e7, t7, r7) {
          return t7.replace(/{([^}]+)}/g, (t8, o6) => {
            const s5 = n5(e7, o6, r7);
            return s5 === void 0 || s5 === null ? "" : s5;
          });
        };
      }, 710: (e6) => {
        const t6 = {};
        e6.exports = function(...e7) {
          try {
            return JSON.stringify.apply(null, e7);
          } catch (e8) {
            return "[Cannot display object: " + e8.message + "]";
          }
        };
      }, 520: (e6, t6) => {
        const r6 = {};
        t6 = e6.exports = { array: Array.prototype, buffer: Buffer && Buffer.prototype, date: Date.prototype, error: Error.prototype, generic: Object.prototype, map: Map.prototype, promise: Promise.prototype, regex: RegExp.prototype, set: Set.prototype, weakMap: WeakMap.prototype, weakSet: WeakSet.prototype };
        r6.typeMap = /* @__PURE__ */ new Map([["[object Error]", t6.error], ["[object Map]", t6.map], ["[object Promise]", t6.promise], ["[object Set]", t6.set], ["[object WeakMap]", t6.weakMap], ["[object WeakSet]", t6.weakSet]]);
        t6.getInternalProto = function(e7) {
          if (Array.isArray(e7)) {
            return t6.array;
          }
          if (Buffer && e7 instanceof Buffer) {
            return t6.buffer;
          }
          if (e7 instanceof Date) {
            return t6.date;
          }
          if (e7 instanceof RegExp) {
            return t6.regex;
          }
          if (e7 instanceof Error) {
            return t6.error;
          }
          const n5 = Object.prototype.toString.call(e7);
          return r6.typeMap.get(n5) || t6.generic;
        };
      }, 932: (e6, t6) => {
        const r6 = {};
        t6.keys = function(e7, t7 = {}) {
          return t7.symbols !== false ? Reflect.ownKeys(e7) : Object.getOwnPropertyNames(e7);
        };
      }, 421: (e6) => {
        const t6 = {};
        e6.exports = function(e7, t7) {
          if (typeof e7 !== "number" && e7 !== void 0) {
            throw new TypeError("Timeout must be a number");
          }
          return new Promise((r6) => setTimeout(r6, e7, t7));
        };
      } };
      var t5 = {};
      function __nccwpck_require__(r6) {
        var n5 = t5[r6];
        if (n5 !== void 0) {
          return n5.exports;
        }
        var o5 = t5[r6] = { exports: {} };
        var s5 = true;
        try {
          e5[r6](o5, o5.exports, __nccwpck_require__);
          s5 = false;
        } finally {
          if (s5) delete t5[r6];
        }
        return o5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var r5 = __nccwpck_require__(538);
      module.exports = r5;
    })();
  }
});

// node_modules/next/dist/compiled/content-disposition/index.js
var require_content_disposition = __commonJS({
  "node_modules/next/dist/compiled/content-disposition/index.js"(exports, module) {
    (() => {
      var e5 = { 934: (e6, r6, t6) => {
        "use strict";
        e6.exports = contentDisposition;
        e6.exports.parse = parse3;
        var n5 = t6(17).basename;
        var a5 = t6(291).Buffer;
        var o5 = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
        var i5 = /%[0-9A-Fa-f]{2}/;
        var f5 = /%([0-9A-Fa-f]{2})/g;
        var u5 = /[^\x20-\x7e\xa0-\xff]/g;
        var s5 = /\\([\u0000-\u007f])/g;
        var p5 = /([\\"])/g;
        var l5 = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
        var c5 = /^[\x20-\x7e\x80-\xff]+$/;
        var v6 = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
        var d5 = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
        var x5 = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
        function contentDisposition(e7, r7) {
          var t7 = r7 || {};
          var n6 = t7.type || "attachment";
          var a6 = createparams(e7, t7.fallback);
          return format(new ContentDisposition(n6, a6));
        }
        function createparams(e7, r7) {
          if (e7 === void 0) {
            return;
          }
          var t7 = {};
          if (typeof e7 !== "string") {
            throw new TypeError("filename must be a string");
          }
          if (r7 === void 0) {
            r7 = true;
          }
          if (typeof r7 !== "string" && typeof r7 !== "boolean") {
            throw new TypeError("fallback must be a string or boolean");
          }
          if (typeof r7 === "string" && u5.test(r7)) {
            throw new TypeError("fallback must be ISO-8859-1 string");
          }
          var a6 = n5(e7);
          var o6 = c5.test(a6);
          var f6 = typeof r7 !== "string" ? r7 && getlatin1(a6) : n5(r7);
          var s6 = typeof f6 === "string" && f6 !== a6;
          if (s6 || !o6 || i5.test(a6)) {
            t7["filename*"] = a6;
          }
          if (o6 || s6) {
            t7.filename = s6 ? f6 : a6;
          }
          return t7;
        }
        function format(e7) {
          var r7 = e7.parameters;
          var t7 = e7.type;
          if (!t7 || typeof t7 !== "string" || !v6.test(t7)) {
            throw new TypeError("invalid type");
          }
          var n6 = String(t7).toLowerCase();
          if (r7 && typeof r7 === "object") {
            var a6;
            var o6 = Object.keys(r7).sort();
            for (var i6 = 0; i6 < o6.length; i6++) {
              a6 = o6[i6];
              var f6 = a6.substr(-1) === "*" ? ustring(r7[a6]) : qstring(r7[a6]);
              n6 += "; " + a6 + "=" + f6;
            }
          }
          return n6;
        }
        function decodefield(e7) {
          var r7 = d5.exec(e7);
          if (!r7) {
            throw new TypeError("invalid extended field value");
          }
          var t7 = r7[1].toLowerCase();
          var n6 = r7[2];
          var o6;
          var i6 = n6.replace(f5, pdecode);
          switch (t7) {
            case "iso-8859-1":
              o6 = getlatin1(i6);
              break;
            case "utf-8":
              o6 = a5.from(i6, "binary").toString("utf8");
              break;
            default:
              throw new TypeError("unsupported charset in extended field");
          }
          return o6;
        }
        function getlatin1(e7) {
          return String(e7).replace(u5, "?");
        }
        function parse3(e7) {
          if (!e7 || typeof e7 !== "string") {
            throw new TypeError("argument string is required");
          }
          var r7 = x5.exec(e7);
          if (!r7) {
            throw new TypeError("invalid type format");
          }
          var t7 = r7[0].length;
          var n6 = r7[1].toLowerCase();
          var a6;
          var o6 = [];
          var i6 = {};
          var f6;
          t7 = l5.lastIndex = r7[0].substr(-1) === ";" ? t7 - 1 : t7;
          while (r7 = l5.exec(e7)) {
            if (r7.index !== t7) {
              throw new TypeError("invalid parameter format");
            }
            t7 += r7[0].length;
            a6 = r7[1].toLowerCase();
            f6 = r7[2];
            if (o6.indexOf(a6) !== -1) {
              throw new TypeError("invalid duplicate parameter");
            }
            o6.push(a6);
            if (a6.indexOf("*") + 1 === a6.length) {
              a6 = a6.slice(0, -1);
              f6 = decodefield(f6);
              i6[a6] = f6;
              continue;
            }
            if (typeof i6[a6] === "string") {
              continue;
            }
            if (f6[0] === '"') {
              f6 = f6.substr(1, f6.length - 2).replace(s5, "$1");
            }
            i6[a6] = f6;
          }
          if (t7 !== -1 && t7 !== e7.length) {
            throw new TypeError("invalid parameter format");
          }
          return new ContentDisposition(n6, i6);
        }
        function pdecode(e7, r7) {
          return String.fromCharCode(parseInt(r7, 16));
        }
        function pencode(e7) {
          return "%" + String(e7).charCodeAt(0).toString(16).toUpperCase();
        }
        function qstring(e7) {
          var r7 = String(e7);
          return '"' + r7.replace(p5, "\\$1") + '"';
        }
        function ustring(e7) {
          var r7 = String(e7);
          var t7 = encodeURIComponent(r7).replace(o5, pencode);
          return "UTF-8''" + t7;
        }
        function ContentDisposition(e7, r7) {
          this.type = e7;
          this.parameters = r7;
        }
      }, 291: (e6, r6, t6) => {
        var n5 = t6(300);
        var a5 = n5.Buffer;
        function copyProps(e7, r7) {
          for (var t7 in e7) {
            r7[t7] = e7[t7];
          }
        }
        if (a5.from && a5.alloc && a5.allocUnsafe && a5.allocUnsafeSlow) {
          e6.exports = n5;
        } else {
          copyProps(n5, r6);
          r6.Buffer = SafeBuffer;
        }
        function SafeBuffer(e7, r7, t7) {
          return a5(e7, r7, t7);
        }
        copyProps(a5, SafeBuffer);
        SafeBuffer.from = function(e7, r7, t7) {
          if (typeof e7 === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return a5(e7, r7, t7);
        };
        SafeBuffer.alloc = function(e7, r7, t7) {
          if (typeof e7 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var n6 = a5(e7);
          if (r7 !== void 0) {
            if (typeof t7 === "string") {
              n6.fill(r7, t7);
            } else {
              n6.fill(r7);
            }
          } else {
            n6.fill(0);
          }
          return n6;
        };
        SafeBuffer.allocUnsafe = function(e7) {
          if (typeof e7 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return a5(e7);
        };
        SafeBuffer.allocUnsafeSlow = function(e7) {
          if (typeof e7 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return n5.SlowBuffer(e7);
        };
      }, 300: (e6) => {
        "use strict";
        e6.exports = __require("buffer");
      }, 17: (e6) => {
        "use strict";
        e6.exports = __require("path");
      } };
      var r5 = {};
      function __nccwpck_require__(t6) {
        var n5 = r5[t6];
        if (n5 !== void 0) {
          return n5.exports;
        }
        var a5 = r5[t6] = { exports: {} };
        var o5 = true;
        try {
          e5[t6](a5, a5.exports, __nccwpck_require__);
          o5 = false;
        } finally {
          if (o5) delete r5[t6];
        }
        return a5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var t5 = __nccwpck_require__(934);
      module.exports = t5;
    })();
  }
});

// node_modules/next/dist/compiled/image-size/index.js
var require_image_size = __commonJS({
  "node_modules/next/dist/compiled/image-size/index.js"(exports, module) {
    (() => {
      var t5 = { 457: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.detector = void 0;
        const r5 = n6(229);
        const i5 = Object.keys(r5.typeHandlers);
        const s5 = { 56: "psd", 66: "bmp", 68: "dds", 71: "gif", 73: "tiff", 77: "tiff", 82: "webp", 105: "icns", 137: "png", 255: "jpg" };
        function detector(t7) {
          const e7 = t7[0];
          if (e7 in s5) {
            const n7 = s5[e7];
            if (n7 && r5.typeHandlers[n7].validate(t7)) {
              return n7;
            }
          }
          const finder = (e8) => r5.typeHandlers[e8].validate(t7);
          return i5.find(finder);
        }
        e6.detector = detector;
      }, 833: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.types = e6.setConcurrency = e6.disableTypes = e6.disableFS = e6.imageSize = void 0;
        const r5 = n6(147);
        const i5 = n6(17);
        const s5 = n6(927);
        const o5 = n6(229);
        const c5 = n6(457);
        const a5 = 512 * 1024;
        const u5 = new s5.default({ concurrency: 100, autostart: true });
        const d5 = { disabledFS: false, disabledTypes: [] };
        function lookup(t7, e7) {
          const n7 = (0, c5.detector)(t7);
          if (typeof n7 !== "undefined") {
            if (d5.disabledTypes.indexOf(n7) > -1) {
              throw new TypeError("disabled file type: " + n7);
            }
            if (n7 in o5.typeHandlers) {
              const r6 = o5.typeHandlers[n7].calculate(t7, e7);
              if (r6 !== void 0) {
                r6.type = r6.type ?? n7;
                return r6;
              }
            }
          }
          throw new TypeError("unsupported file type: " + n7 + " (file: " + e7 + ")");
        }
        async function readFileAsync(t7) {
          const e7 = await r5.promises.open(t7, "r");
          try {
            const { size: t8 } = await e7.stat();
            if (t8 <= 0) {
              throw new Error("Empty file");
            }
            const n7 = Math.min(t8, a5);
            const r6 = new Uint8Array(n7);
            await e7.read(r6, 0, n7, 0);
            return r6;
          } finally {
            await e7.close();
          }
        }
        function readFileSync2(t7) {
          const e7 = r5.openSync(t7, "r");
          try {
            const { size: t8 } = r5.fstatSync(e7);
            if (t8 <= 0) {
              throw new Error("Empty file");
            }
            const n7 = Math.min(t8, a5);
            const i6 = new Uint8Array(n7);
            r5.readSync(e7, i6, 0, n7, 0);
            return i6;
          } finally {
            r5.closeSync(e7);
          }
        }
        t6.exports = e6 = imageSize;
        e6["default"] = imageSize;
        function imageSize(t7, e7) {
          if (t7 instanceof Uint8Array) {
            return lookup(t7);
          }
          if (typeof t7 !== "string" || d5.disabledFS) {
            throw new TypeError("invalid invocation. input should be a Uint8Array");
          }
          const n7 = i5.resolve(t7);
          if (typeof e7 === "function") {
            u5.push(() => readFileAsync(n7).then((t8) => process.nextTick(e7, null, lookup(t8, n7))).catch(e7));
          } else {
            const t8 = readFileSync2(n7);
            return lookup(t8, n7);
          }
        }
        e6.imageSize = imageSize;
        const disableFS = (t7) => {
          d5.disabledFS = t7;
        };
        e6.disableFS = disableFS;
        const disableTypes = (t7) => {
          d5.disabledTypes = t7;
        };
        e6.disableTypes = disableTypes;
        const setConcurrency = (t7) => {
          u5.concurrency = t7;
        };
        e6.setConcurrency = setConcurrency;
        e6.types = Object.keys(o5.typeHandlers);
      }, 436: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.BMP = void 0;
        const r5 = n6(779);
        e6.BMP = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 2) === "BM", calculate: (t7) => ({ height: Math.abs((0, r5.readInt32LE)(t7, 22)), width: (0, r5.readUInt32LE)(t7, 18) }) };
      }, 67: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.CUR = void 0;
        const r5 = n6(845);
        const i5 = n6(779);
        const s5 = 2;
        e6.CUR = { validate(t7) {
          const e7 = (0, i5.readUInt16LE)(t7, 0);
          const n7 = (0, i5.readUInt16LE)(t7, 4);
          if (e7 !== 0 || n7 === 0) return false;
          const r6 = (0, i5.readUInt16LE)(t7, 2);
          return r6 === s5;
        }, calculate: (t7) => r5.ICO.calculate(t7) };
      }, 400: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.DDS = void 0;
        const r5 = n6(779);
        e6.DDS = { validate: (t7) => (0, r5.readUInt32LE)(t7, 0) === 542327876, calculate: (t7) => ({ height: (0, r5.readUInt32LE)(t7, 12), width: (0, r5.readUInt32LE)(t7, 16) }) };
      }, 197: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.GIF = void 0;
        const r5 = n6(779);
        const i5 = /^GIF8[79]a/;
        e6.GIF = { validate: (t7) => i5.test((0, r5.toUTF8String)(t7, 0, 6)), calculate: (t7) => ({ height: (0, r5.readUInt16LE)(t7, 8), width: (0, r5.readUInt16LE)(t7, 6) }) };
      }, 974: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.HEIF = void 0;
        const r5 = n6(779);
        const i5 = { avif: "avif", mif1: "heif", msf1: "heif", heic: "heic", heix: "heic", hevc: "heic", hevx: "heic" };
        e6.HEIF = { validate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "ftyp") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const s5 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return s5 in i5;
        }, calculate(t7) {
          const e7 = (0, r5.findBox)(t7, "meta", 0);
          const n7 = e7 && (0, r5.findBox)(t7, "iprp", e7.offset + 12);
          const i6 = n7 && (0, r5.findBox)(t7, "ipco", n7.offset + 8);
          const s5 = i6 && (0, r5.findBox)(t7, "ispe", i6.offset + 8);
          if (s5) {
            return { height: (0, r5.readUInt32BE)(t7, s5.offset + 16), width: (0, r5.readUInt32BE)(t7, s5.offset + 12), type: (0, r5.toUTF8String)(t7, 8, 12) };
          }
          throw new TypeError("Invalid HEIF, no size found");
        } };
      }, 512: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.ICNS = void 0;
        const r5 = n6(779);
        const i5 = 4 + 4;
        const s5 = 4;
        const o5 = 4;
        const c5 = { ICON: 32, "ICN#": 32, "icm#": 16, icm4: 16, icm8: 16, "ics#": 16, ics4: 16, ics8: 16, is32: 16, s8mk: 16, icp4: 16, icl4: 32, icl8: 32, il32: 32, l8mk: 32, icp5: 32, ic11: 32, ich4: 48, ich8: 48, ih32: 48, h8mk: 48, icp6: 64, ic12: 32, it32: 128, t8mk: 128, ic07: 128, ic08: 256, ic13: 256, ic09: 512, ic14: 512, ic10: 1024 };
        function readImageHeader(t7, e7) {
          const n7 = e7 + o5;
          return [(0, r5.toUTF8String)(t7, e7, n7), (0, r5.readUInt32BE)(t7, n7)];
        }
        function getImageSize(t7) {
          const e7 = c5[t7];
          return { width: e7, height: e7, type: t7 };
        }
        e6.ICNS = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 4) === "icns", calculate(t7) {
          const e7 = t7.length;
          const n7 = (0, r5.readUInt32BE)(t7, s5);
          let o6 = i5;
          let c6 = readImageHeader(t7, o6);
          let a5 = getImageSize(c6[0]);
          o6 += c6[1];
          if (o6 === n7) return a5;
          const u5 = { height: a5.height, images: [a5], width: a5.width };
          while (o6 < n7 && o6 < e7) {
            c6 = readImageHeader(t7, o6);
            a5 = getImageSize(c6[0]);
            o6 += c6[1];
            u5.images.push(a5);
          }
          return u5;
        } };
      }, 845: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.ICO = void 0;
        const r5 = n6(779);
        const i5 = 1;
        const s5 = 2 + 2 + 2;
        const o5 = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;
        function getSizeFromOffset(t7, e7) {
          const n7 = t7[e7];
          return n7 === 0 ? 256 : n7;
        }
        function getImageSize(t7, e7) {
          const n7 = s5 + e7 * o5;
          return { height: getSizeFromOffset(t7, n7 + 1), width: getSizeFromOffset(t7, n7) };
        }
        e6.ICO = { validate(t7) {
          const e7 = (0, r5.readUInt16LE)(t7, 0);
          const n7 = (0, r5.readUInt16LE)(t7, 4);
          if (e7 !== 0 || n7 === 0) return false;
          const s6 = (0, r5.readUInt16LE)(t7, 2);
          return s6 === i5;
        }, calculate(t7) {
          const e7 = (0, r5.readUInt16LE)(t7, 4);
          const n7 = getImageSize(t7, 0);
          if (e7 === 1) return n7;
          const i6 = [n7];
          for (let n8 = 1; n8 < e7; n8 += 1) {
            i6.push(getImageSize(t7, n8));
          }
          return { height: n7.height, images: i6, width: n7.width };
        } };
      }, 229: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.typeHandlers = void 0;
        const r5 = n6(436);
        const i5 = n6(67);
        const s5 = n6(400);
        const o5 = n6(197);
        const c5 = n6(974);
        const a5 = n6(512);
        const u5 = n6(845);
        const d5 = n6(885);
        const l5 = n6(530);
        const f5 = n6(934);
        const h5 = n6(245);
        const p5 = n6(33);
        const g5 = n6(105);
        const y3 = n6(210);
        const I3 = n6(448);
        const v6 = n6(136);
        const w5 = n6(414);
        const E3 = n6(753);
        const m5 = n6(940);
        const U2 = n6(226);
        e6.typeHandlers = { bmp: r5.BMP, cur: i5.CUR, dds: s5.DDS, gif: o5.GIF, heif: c5.HEIF, icns: a5.ICNS, ico: u5.ICO, j2c: d5.J2C, jp2: l5.JP2, jpg: f5.JPG, jxl: h5.JXL, "jxl-stream": p5.JXLStream, ktx: g5.KTX, png: y3.PNG, pnm: I3.PNM, psd: v6.PSD, svg: w5.SVG, tga: E3.TGA, tiff: m5.TIFF, webp: U2.WEBP };
      }, 885: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.J2C = void 0;
        const r5 = n6(779);
        e6.J2C = { validate: (t7) => (0, r5.readUInt32BE)(t7, 0) === 4283432785, calculate: (t7) => ({ height: (0, r5.readUInt32BE)(t7, 12), width: (0, r5.readUInt32BE)(t7, 8) }) };
      }, 530: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JP2 = void 0;
        const r5 = n6(779);
        e6.JP2 = { validate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "jP  ") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const i5 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return i5 === "jp2 ";
        }, calculate(t7) {
          const e7 = (0, r5.findBox)(t7, "jp2h", 0);
          const n7 = e7 && (0, r5.findBox)(t7, "ihdr", e7.offset + 8);
          if (n7) {
            return { height: (0, r5.readUInt32BE)(t7, n7.offset + 8), width: (0, r5.readUInt32BE)(t7, n7.offset + 12) };
          }
          throw new TypeError("Unsupported JPEG 2000 format");
        } };
      }, 934: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JPG = void 0;
        const r5 = n6(779);
        const i5 = "45786966";
        const s5 = 2;
        const o5 = 6;
        const c5 = 2;
        const a5 = "4d4d";
        const u5 = "4949";
        const d5 = 12;
        const l5 = 2;
        function isEXIF(t7) {
          return (0, r5.toHexString)(t7, 2, 6) === i5;
        }
        function extractSize(t7, e7) {
          return { height: (0, r5.readUInt16BE)(t7, e7), width: (0, r5.readUInt16BE)(t7, e7 + 2) };
        }
        function extractOrientation(t7, e7) {
          const n7 = 8;
          const i6 = o5 + n7;
          const s6 = (0, r5.readUInt)(t7, 16, i6, e7);
          for (let n8 = 0; n8 < s6; n8++) {
            const s7 = i6 + l5 + n8 * d5;
            const o6 = s7 + d5;
            if (s7 > t7.length) {
              return;
            }
            const c6 = t7.slice(s7, o6);
            const a6 = (0, r5.readUInt)(c6, 16, 0, e7);
            if (a6 === 274) {
              const t8 = (0, r5.readUInt)(c6, 16, 2, e7);
              if (t8 !== 3) {
                return;
              }
              const n9 = (0, r5.readUInt)(c6, 32, 4, e7);
              if (n9 !== 1) {
                return;
              }
              return (0, r5.readUInt)(c6, 16, 8, e7);
            }
          }
        }
        function validateExifBlock(t7, e7) {
          const n7 = t7.slice(s5, e7);
          const i6 = (0, r5.toHexString)(n7, o5, o5 + c5);
          const d6 = i6 === a5;
          const l6 = i6 === u5;
          if (d6 || l6) {
            return extractOrientation(n7, d6);
          }
        }
        function validateInput(t7, e7) {
          if (e7 > t7.length) {
            throw new TypeError("Corrupt JPG, exceeded buffer limits");
          }
        }
        e6.JPG = { validate: (t7) => (0, r5.toHexString)(t7, 0, 2) === "ffd8", calculate(t7) {
          t7 = t7.slice(4);
          let e7;
          let n7;
          while (t7.length) {
            const i6 = (0, r5.readUInt16BE)(t7, 0);
            if (t7[i6] !== 255) {
              t7 = t7.slice(1);
              continue;
            }
            if (isEXIF(t7)) {
              e7 = validateExifBlock(t7, i6);
            }
            validateInput(t7, i6);
            n7 = t7[i6 + 1];
            if (n7 === 192 || n7 === 193 || n7 === 194) {
              const n8 = extractSize(t7, i6 + 5);
              if (!e7) {
                return n8;
              }
              return { height: n8.height, orientation: e7, width: n8.width };
            }
            t7 = t7.slice(i6 + 2);
          }
          throw new TypeError("Invalid JPG, no size found");
        } };
      }, 33: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JXLStream = void 0;
        const r5 = n6(779);
        const i5 = n6(112);
        function calculateImageDimension(t7, e7) {
          if (e7) {
            return 8 * (1 + t7.getBits(5));
          } else {
            const e8 = t7.getBits(2);
            const n7 = [9, 13, 18, 30][e8];
            return 1 + t7.getBits(n7);
          }
        }
        function calculateImageWidth(t7, e7, n7, r6) {
          if (e7 && n7 === 0) {
            return 8 * (1 + t7.getBits(5));
          } else if (n7 === 0) {
            return calculateImageDimension(t7, false);
          } else {
            const t8 = [1, 1.2, 4 / 3, 1.5, 16 / 9, 5 / 4, 2];
            return Math.floor(r6 * t8[n7 - 1]);
          }
        }
        e6.JXLStream = { validate: (t7) => (0, r5.toHexString)(t7, 0, 2) === "ff0a", calculate(t7) {
          const e7 = new i5.BitReader(t7, "little-endian");
          const n7 = e7.getBits(1) === 1;
          const r6 = calculateImageDimension(e7, n7);
          const s5 = e7.getBits(3);
          const o5 = calculateImageWidth(e7, n7, s5, r6);
          return { width: o5, height: r6 };
        } };
      }, 245: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JXL = void 0;
        const r5 = n6(779);
        const i5 = n6(33);
        function extractCodestream(t7) {
          const e7 = (0, r5.findBox)(t7, "jxlc", 0);
          if (e7) {
            return t7.slice(e7.offset + 8, e7.offset + e7.size);
          }
          const n7 = extractPartialStreams(t7);
          if (n7.length > 0) {
            return concatenateCodestreams(n7);
          }
          return void 0;
        }
        function extractPartialStreams(t7) {
          const e7 = [];
          let n7 = 0;
          while (n7 < t7.length) {
            const i6 = (0, r5.findBox)(t7, "jxlp", n7);
            if (!i6) break;
            e7.push(t7.slice(i6.offset + 12, i6.offset + i6.size));
            n7 = i6.offset + i6.size;
          }
          return e7;
        }
        function concatenateCodestreams(t7) {
          const e7 = t7.reduce((t8, e8) => t8 + e8.length, 0);
          const n7 = new Uint8Array(e7);
          let r6 = 0;
          for (const e8 of t7) {
            n7.set(e8, r6);
            r6 += e8.length;
          }
          return n7;
        }
        e6.JXL = { validate: (t7) => {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "JXL ") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const i6 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return i6 === "jxl ";
        }, calculate(t7) {
          const e7 = extractCodestream(t7);
          if (e7) return i5.JXLStream.calculate(e7);
          throw new Error("No codestream found in JXL container");
        } };
      }, 105: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.KTX = void 0;
        const r5 = n6(779);
        e6.KTX = { validate: (t7) => {
          const e7 = (0, r5.toUTF8String)(t7, 1, 7);
          return ["KTX 11", "KTX 20"].includes(e7);
        }, calculate: (t7) => {
          const e7 = t7[5] === 49 ? "ktx" : "ktx2";
          const n7 = e7 === "ktx" ? 36 : 20;
          return { height: (0, r5.readUInt32LE)(t7, n7 + 4), width: (0, r5.readUInt32LE)(t7, n7), type: e7 };
        } };
      }, 210: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PNG = void 0;
        const r5 = n6(779);
        const i5 = "PNG\r\n\n";
        const s5 = "IHDR";
        const o5 = "CgBI";
        e6.PNG = { validate(t7) {
          if (i5 === (0, r5.toUTF8String)(t7, 1, 8)) {
            let e7 = (0, r5.toUTF8String)(t7, 12, 16);
            if (e7 === o5) {
              e7 = (0, r5.toUTF8String)(t7, 28, 32);
            }
            if (e7 !== s5) {
              throw new TypeError("Invalid PNG");
            }
            return true;
          }
          return false;
        }, calculate(t7) {
          if ((0, r5.toUTF8String)(t7, 12, 16) === o5) {
            return { height: (0, r5.readUInt32BE)(t7, 36), width: (0, r5.readUInt32BE)(t7, 32) };
          }
          return { height: (0, r5.readUInt32BE)(t7, 20), width: (0, r5.readUInt32BE)(t7, 16) };
        } };
      }, 448: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PNM = void 0;
        const r5 = n6(779);
        const i5 = { P1: "pbm/ascii", P2: "pgm/ascii", P3: "ppm/ascii", P4: "pbm", P5: "pgm", P6: "ppm", P7: "pam", PF: "pfm" };
        const s5 = { default: (t7) => {
          let e7 = [];
          while (t7.length > 0) {
            const n7 = t7.shift();
            if (n7[0] === "#") {
              continue;
            }
            e7 = n7.split(" ");
            break;
          }
          if (e7.length === 2) {
            return { height: parseInt(e7[1], 10), width: parseInt(e7[0], 10) };
          } else {
            throw new TypeError("Invalid PNM");
          }
        }, pam: (t7) => {
          const e7 = {};
          while (t7.length > 0) {
            const n7 = t7.shift();
            if (n7.length > 16 || n7.charCodeAt(0) > 128) {
              continue;
            }
            const [r6, i6] = n7.split(" ");
            if (r6 && i6) {
              e7[r6.toLowerCase()] = parseInt(i6, 10);
            }
            if (e7.height && e7.width) {
              break;
            }
          }
          if (e7.height && e7.width) {
            return { height: e7.height, width: e7.width };
          } else {
            throw new TypeError("Invalid PAM");
          }
        } };
        e6.PNM = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 2) in i5, calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 0, 2);
          const n7 = i5[e7];
          const o5 = (0, r5.toUTF8String)(t7, 3).split(/[\r\n]+/);
          const c5 = s5[n7] || s5.default;
          return c5(o5);
        } };
      }, 136: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PSD = void 0;
        const r5 = n6(779);
        e6.PSD = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 4) === "8BPS", calculate: (t7) => ({ height: (0, r5.readUInt32BE)(t7, 14), width: (0, r5.readUInt32BE)(t7, 18) }) };
      }, 414: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.SVG = void 0;
        const r5 = n6(779);
        const i5 = /<svg\s([^>"']|"[^"]*"|'[^']*')*>/;
        const s5 = { height: /\sheight=(['"])([^%]+?)\1/, root: i5, viewbox: /\sviewBox=(['"])(.+?)\1/i, width: /\swidth=(['"])([^%]+?)\1/ };
        const o5 = 2.54;
        const c5 = { in: 96, cm: 96 / o5, em: 16, ex: 8, m: 96 / o5 * 100, mm: 96 / o5 / 10, pc: 96 / 72 / 12, pt: 96 / 72, px: 1 };
        const a5 = new RegExp(`^([0-9.]+(?:e\\d+)?)(${Object.keys(c5).join("|")})?$`);
        function parseLength(t7) {
          const e7 = a5.exec(t7);
          if (!e7) {
            return void 0;
          }
          return Math.round(Number(e7[1]) * (c5[e7[2]] || 1));
        }
        function parseViewbox(t7) {
          const e7 = t7.split(" ");
          return { height: parseLength(e7[3]), width: parseLength(e7[2]) };
        }
        function parseAttributes(t7) {
          const e7 = t7.match(s5.width);
          const n7 = t7.match(s5.height);
          const r6 = t7.match(s5.viewbox);
          return { height: n7 && parseLength(n7[2]), viewbox: r6 && parseViewbox(r6[2]), width: e7 && parseLength(e7[2]) };
        }
        function calculateByDimensions(t7) {
          return { height: t7.height, width: t7.width };
        }
        function calculateByViewbox(t7, e7) {
          const n7 = e7.width / e7.height;
          if (t7.width) {
            return { height: Math.floor(t7.width / n7), width: t7.width };
          }
          if (t7.height) {
            return { height: t7.height, width: Math.floor(t7.height * n7) };
          }
          return { height: e7.height, width: e7.width };
        }
        e6.SVG = { validate: (t7) => i5.test((0, r5.toUTF8String)(t7, 0, 1e3)), calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7).match(s5.root);
          if (e7) {
            const t8 = parseAttributes(e7[0]);
            if (t8.width && t8.height) {
              return calculateByDimensions(t8);
            }
            if (t8.viewbox) {
              return calculateByViewbox(t8, t8.viewbox);
            }
          }
          throw new TypeError("Invalid SVG");
        } };
      }, 753: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.TGA = void 0;
        const r5 = n6(779);
        e6.TGA = { validate(t7) {
          return (0, r5.readUInt16LE)(t7, 0) === 0 && (0, r5.readUInt16LE)(t7, 4) === 0;
        }, calculate(t7) {
          return { height: (0, r5.readUInt16LE)(t7, 14), width: (0, r5.readUInt16LE)(t7, 12) };
        } };
      }, 940: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.TIFF = void 0;
        const r5 = n6(147);
        const i5 = n6(779);
        function readIFD(t7, e7, n7) {
          const s6 = (0, i5.readUInt)(t7, 32, 4, n7);
          let o5 = 1024;
          const c5 = r5.statSync(e7).size;
          if (s6 + o5 > c5) {
            o5 = c5 - s6 - 10;
          }
          const a5 = new Uint8Array(o5);
          const u5 = r5.openSync(e7, "r");
          r5.readSync(u5, a5, 0, o5, s6);
          r5.closeSync(u5);
          return a5.slice(2);
        }
        function readValue(t7, e7) {
          const n7 = (0, i5.readUInt)(t7, 16, 8, e7);
          const r6 = (0, i5.readUInt)(t7, 16, 10, e7);
          return (r6 << 16) + n7;
        }
        function nextTag(t7) {
          if (t7.length > 24) {
            return t7.slice(12);
          }
        }
        function extractTags(t7, e7) {
          const n7 = {};
          let r6 = t7;
          while (r6 && r6.length) {
            const t8 = (0, i5.readUInt)(r6, 16, 0, e7);
            const s6 = (0, i5.readUInt)(r6, 16, 2, e7);
            const o5 = (0, i5.readUInt)(r6, 32, 4, e7);
            if (t8 === 0) {
              break;
            } else {
              if (o5 === 1 && (s6 === 3 || s6 === 4)) {
                n7[t8] = readValue(r6, e7);
              }
              r6 = nextTag(r6);
            }
          }
          return n7;
        }
        function determineEndianness(t7) {
          const e7 = (0, i5.toUTF8String)(t7, 0, 2);
          if ("II" === e7) {
            return "LE";
          } else if ("MM" === e7) {
            return "BE";
          }
        }
        const s5 = ["49492a00", "4d4d002a"];
        e6.TIFF = { validate: (t7) => s5.includes((0, i5.toHexString)(t7, 0, 4)), calculate(t7, e7) {
          if (!e7) {
            throw new TypeError("Tiff doesn't support buffer");
          }
          const n7 = determineEndianness(t7) === "BE";
          const r6 = readIFD(t7, e7, n7);
          const i6 = extractTags(r6, n7);
          const s6 = i6[256];
          const o5 = i6[257];
          if (!s6 || !o5) {
            throw new TypeError("Invalid Tiff. Missing tags");
          }
          return { height: o5, width: s6 };
        } };
      }, 779: (t6, e6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.findBox = e6.readUInt = e6.readUInt32LE = e6.readUInt32BE = e6.readInt32LE = e6.readUInt24LE = e6.readUInt16LE = e6.readUInt16BE = e6.readInt16LE = e6.toHexString = e6.toUTF8String = void 0;
        const n6 = new TextDecoder();
        const toUTF8String = (t7, e7 = 0, r6 = t7.length) => n6.decode(t7.slice(e7, r6));
        e6.toUTF8String = toUTF8String;
        const toHexString = (t7, e7 = 0, n7 = t7.length) => t7.slice(e7, n7).reduce((t8, e8) => t8 + ("0" + e8.toString(16)).slice(-2), "");
        e6.toHexString = toHexString;
        const readInt16LE = (t7, e7 = 0) => {
          const n7 = t7[e7] + t7[e7 + 1] * 2 ** 8;
          return n7 | (n7 & 2 ** 15) * 131070;
        };
        e6.readInt16LE = readInt16LE;
        const readUInt16BE = (t7, e7 = 0) => t7[e7] * 2 ** 8 + t7[e7 + 1];
        e6.readUInt16BE = readUInt16BE;
        const readUInt16LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8;
        e6.readUInt16LE = readUInt16LE;
        const readUInt24LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16;
        e6.readUInt24LE = readUInt24LE;
        const readInt32LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16 + (t7[e7 + 3] << 24);
        e6.readInt32LE = readInt32LE;
        const readUInt32BE = (t7, e7 = 0) => t7[e7] * 2 ** 24 + t7[e7 + 1] * 2 ** 16 + t7[e7 + 2] * 2 ** 8 + t7[e7 + 3];
        e6.readUInt32BE = readUInt32BE;
        const readUInt32LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16 + t7[e7 + 3] * 2 ** 24;
        e6.readUInt32LE = readUInt32LE;
        const r5 = { readUInt16BE: e6.readUInt16BE, readUInt16LE: e6.readUInt16LE, readUInt32BE: e6.readUInt32BE, readUInt32LE: e6.readUInt32LE };
        function readUInt(t7, e7, n7, i5) {
          n7 = n7 || 0;
          const s5 = i5 ? "BE" : "LE";
          const o5 = "readUInt" + e7 + s5;
          return r5[o5](t7, n7);
        }
        e6.readUInt = readUInt;
        function readBox(t7, n7) {
          if (t7.length - n7 < 4) return;
          const r6 = (0, e6.readUInt32BE)(t7, n7);
          if (t7.length - n7 < r6) return;
          return { name: (0, e6.toUTF8String)(t7, 4 + n7, 8 + n7), offset: n7, size: r6 };
        }
        function findBox(t7, e7, n7) {
          while (n7 < t7.length) {
            const r6 = readBox(t7, n7);
            if (!r6) break;
            if (r6.name === e7) return r6;
            n7 += r6.size > 0 ? r6.size : 8;
          }
        }
        e6.findBox = findBox;
      }, 226: (t6, e6, n6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.WEBP = void 0;
        const r5 = n6(779);
        function calculateExtended(t7) {
          return { height: 1 + (0, r5.readUInt24LE)(t7, 7), width: 1 + (0, r5.readUInt24LE)(t7, 4) };
        }
        function calculateLossless(t7) {
          return { height: 1 + ((t7[4] & 15) << 10 | t7[3] << 2 | (t7[2] & 192) >> 6), width: 1 + ((t7[2] & 63) << 8 | t7[1]) };
        }
        function calculateLossy(t7) {
          return { height: (0, r5.readInt16LE)(t7, 8) & 16383, width: (0, r5.readInt16LE)(t7, 6) & 16383 };
        }
        e6.WEBP = { validate(t7) {
          const e7 = "RIFF" === (0, r5.toUTF8String)(t7, 0, 4);
          const n7 = "WEBP" === (0, r5.toUTF8String)(t7, 8, 12);
          const i5 = "VP8" === (0, r5.toUTF8String)(t7, 12, 15);
          return e7 && n7 && i5;
        }, calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 12, 16);
          t7 = t7.slice(20, 30);
          if (e7 === "VP8X") {
            const e8 = t7[0];
            const n8 = (e8 & 192) === 0;
            const r6 = (e8 & 1) === 0;
            if (n8 && r6) {
              return calculateExtended(t7);
            } else {
              throw new TypeError("Invalid WebP");
            }
          }
          if (e7 === "VP8 " && t7[0] !== 47) {
            return calculateLossy(t7);
          }
          const n7 = (0, r5.toHexString)(t7, 3, 6);
          if (e7 === "VP8L" && n7 !== "9d012a") {
            return calculateLossless(t7);
          }
          throw new TypeError("Invalid WebP");
        } };
      }, 112: (t6, e6) => {
        "use strict";
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.BitReader = void 0;
        class BitReader {
          constructor(t7, e7) {
            this.input = t7;
            this.endianness = e7;
            this.byteOffset = 2;
            this.bitOffset = 0;
          }
          getBits(t7 = 1) {
            let e7 = 0;
            let n6 = 0;
            while (n6 < t7) {
              if (this.byteOffset >= this.input.length) {
                throw new Error("Reached end of input");
              }
              const r5 = this.input[this.byteOffset];
              const i5 = 8 - this.bitOffset;
              const s5 = Math.min(t7 - n6, i5);
              if (this.endianness === "little-endian") {
                const t8 = (1 << s5) - 1;
                const i6 = r5 >> this.bitOffset & t8;
                e7 |= i6 << n6;
              } else {
                const t8 = (1 << s5) - 1 << 8 - this.bitOffset - s5;
                const n7 = (r5 & t8) >> 8 - this.bitOffset - s5;
                e7 = e7 << s5 | n7;
              }
              n6 += s5;
              this.bitOffset += s5;
              if (this.bitOffset === 8) {
                this.byteOffset++;
                this.bitOffset = 0;
              }
            }
            return e7;
          }
        }
        e6.BitReader = BitReader;
      }, 842: (t6, e6, n6) => {
        try {
          var r5 = n6(837);
          if (typeof r5.inherits !== "function") throw "";
          t6.exports = r5.inherits;
        } catch (e7) {
          t6.exports = n6(782);
        }
      }, 782: (t6) => {
        if (typeof Object.create === "function") {
          t6.exports = function inherits(t7, e6) {
            if (e6) {
              t7.super_ = e6;
              t7.prototype = Object.create(e6.prototype, { constructor: { value: t7, enumerable: false, writable: true, configurable: true } });
            }
          };
        } else {
          t6.exports = function inherits(t7, e6) {
            if (e6) {
              t7.super_ = e6;
              var TempCtor = function() {
              };
              TempCtor.prototype = e6.prototype;
              t7.prototype = new TempCtor();
              t7.prototype.constructor = t7;
            }
          };
        }
      }, 927: (t6, e6, n6) => {
        var r5 = n6(842);
        var i5 = n6(361).EventEmitter;
        t6.exports = Queue;
        t6.exports["default"] = Queue;
        function Queue(t7) {
          if (!(this instanceof Queue)) {
            return new Queue(t7);
          }
          i5.call(this);
          t7 = t7 || {};
          this.concurrency = t7.concurrency || Infinity;
          this.timeout = t7.timeout || 0;
          this.autostart = t7.autostart || false;
          this.results = t7.results || null;
          this.pending = 0;
          this.session = 0;
          this.running = false;
          this.jobs = [];
          this.timers = {};
        }
        r5(Queue, i5);
        var s5 = ["pop", "shift", "indexOf", "lastIndexOf"];
        s5.forEach(function(t7) {
          Queue.prototype[t7] = function() {
            return Array.prototype[t7].apply(this.jobs, arguments);
          };
        });
        Queue.prototype.slice = function(t7, e7) {
          this.jobs = this.jobs.slice(t7, e7);
          return this;
        };
        Queue.prototype.reverse = function() {
          this.jobs.reverse();
          return this;
        };
        var o5 = ["push", "unshift", "splice"];
        o5.forEach(function(t7) {
          Queue.prototype[t7] = function() {
            var e7 = Array.prototype[t7].apply(this.jobs, arguments);
            if (this.autostart) {
              this.start();
            }
            return e7;
          };
        });
        Object.defineProperty(Queue.prototype, "length", { get: function() {
          return this.pending + this.jobs.length;
        } });
        Queue.prototype.start = function(t7) {
          if (t7) {
            callOnErrorOrEnd.call(this, t7);
          }
          this.running = true;
          if (this.pending >= this.concurrency) {
            return;
          }
          if (this.jobs.length === 0) {
            if (this.pending === 0) {
              done.call(this);
            }
            return;
          }
          var e7 = this;
          var n7 = this.jobs.shift();
          var r6 = true;
          var i6 = this.session;
          var s6 = null;
          var o6 = false;
          var c5 = null;
          var a5 = n7.hasOwnProperty("timeout") ? n7.timeout : this.timeout;
          function next(t8, a6) {
            if (r6 && e7.session === i6) {
              r6 = false;
              e7.pending--;
              if (s6 !== null) {
                delete e7.timers[s6];
                clearTimeout(s6);
              }
              if (t8) {
                e7.emit("error", t8, n7);
              } else if (o6 === false) {
                if (c5 !== null) {
                  e7.results[c5] = Array.prototype.slice.call(arguments, 1);
                }
                e7.emit("success", a6, n7);
              }
              if (e7.session === i6) {
                if (e7.pending === 0 && e7.jobs.length === 0) {
                  done.call(e7);
                } else if (e7.running) {
                  e7.start();
                }
              }
            }
          }
          if (a5) {
            s6 = setTimeout(function() {
              o6 = true;
              if (e7.listeners("timeout").length > 0) {
                e7.emit("timeout", next, n7);
              } else {
                next();
              }
            }, a5);
            this.timers[s6] = s6;
          }
          if (this.results) {
            c5 = this.results.length;
            this.results[c5] = null;
          }
          this.pending++;
          e7.emit("start", n7);
          var u5 = n7(next);
          if (u5 && u5.then && typeof u5.then === "function") {
            u5.then(function(t8) {
              return next(null, t8);
            }).catch(function(t8) {
              return next(t8 || true);
            });
          }
          if (this.running && this.jobs.length > 0) {
            this.start();
          }
        };
        Queue.prototype.stop = function() {
          this.running = false;
        };
        Queue.prototype.end = function(t7) {
          clearTimers.call(this);
          this.jobs.length = 0;
          this.pending = 0;
          done.call(this, t7);
        };
        function clearTimers() {
          for (var t7 in this.timers) {
            var e7 = this.timers[t7];
            delete this.timers[t7];
            clearTimeout(e7);
          }
        }
        function callOnErrorOrEnd(t7) {
          var e7 = this;
          this.on("error", onerror);
          this.on("end", onend);
          function onerror(t8) {
            e7.end(t8);
          }
          function onend(n7) {
            e7.removeListener("error", onerror);
            e7.removeListener("end", onend);
            t7(n7, this.results);
          }
        }
        function done(t7) {
          this.session++;
          this.running = false;
          this.emit("end", t7);
        }
      }, 361: (t6) => {
        "use strict";
        t6.exports = __require("events");
      }, 147: (t6) => {
        "use strict";
        t6.exports = __require("fs");
      }, 17: (t6) => {
        "use strict";
        t6.exports = __require("path");
      }, 837: (t6) => {
        "use strict";
        t6.exports = __require("util");
      } };
      var e5 = {};
      function __nccwpck_require__(n6) {
        var r5 = e5[n6];
        if (r5 !== void 0) {
          return r5.exports;
        }
        var i5 = e5[n6] = { exports: {} };
        var s5 = true;
        try {
          t5[n6](i5, i5.exports, __nccwpck_require__);
          s5 = false;
        } finally {
          if (s5) delete e5[n6];
        }
        return i5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var n5 = __nccwpck_require__(833);
      module.exports = n5;
    })();
  }
});

// node_modules/next/dist/compiled/image-detector/detector.js
var require_detector = __commonJS({
  "node_modules/next/dist/compiled/image-detector/detector.js"(exports, module) {
    (() => {
      "use strict";
      var t5 = { 436: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.BMP = void 0;
        const r5 = n6(779);
        e6.BMP = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 2) === "BM", calculate: (t7) => ({ height: Math.abs((0, r5.readInt32LE)(t7, 22)), width: (0, r5.readUInt32LE)(t7, 18) }) };
      }, 67: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.CUR = void 0;
        const r5 = n6(845);
        const i5 = n6(779);
        const o5 = 2;
        e6.CUR = { validate(t7) {
          const e7 = (0, i5.readUInt16LE)(t7, 0);
          const n7 = (0, i5.readUInt16LE)(t7, 4);
          if (e7 !== 0 || n7 === 0) return false;
          const r6 = (0, i5.readUInt16LE)(t7, 2);
          return r6 === o5;
        }, calculate: (t7) => r5.ICO.calculate(t7) };
      }, 400: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.DDS = void 0;
        const r5 = n6(779);
        e6.DDS = { validate: (t7) => (0, r5.readUInt32LE)(t7, 0) === 542327876, calculate: (t7) => ({ height: (0, r5.readUInt32LE)(t7, 12), width: (0, r5.readUInt32LE)(t7, 16) }) };
      }, 197: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.GIF = void 0;
        const r5 = n6(779);
        const i5 = /^GIF8[79]a/;
        e6.GIF = { validate: (t7) => i5.test((0, r5.toUTF8String)(t7, 0, 6)), calculate: (t7) => ({ height: (0, r5.readUInt16LE)(t7, 8), width: (0, r5.readUInt16LE)(t7, 6) }) };
      }, 974: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.HEIF = void 0;
        const r5 = n6(779);
        const i5 = { avif: "avif", mif1: "heif", msf1: "heif", heic: "heic", heix: "heic", hevc: "heic", hevx: "heic" };
        e6.HEIF = { validate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "ftyp") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const o5 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return o5 in i5;
        }, calculate(t7) {
          const e7 = (0, r5.findBox)(t7, "meta", 0);
          const n7 = e7 && (0, r5.findBox)(t7, "iprp", e7.offset + 12);
          const i6 = n7 && (0, r5.findBox)(t7, "ipco", n7.offset + 8);
          const o5 = i6 && (0, r5.findBox)(t7, "ispe", i6.offset + 8);
          if (o5) {
            return { height: (0, r5.readUInt32BE)(t7, o5.offset + 16), width: (0, r5.readUInt32BE)(t7, o5.offset + 12), type: (0, r5.toUTF8String)(t7, 8, 12) };
          }
          throw new TypeError("Invalid HEIF, no size found");
        } };
      }, 512: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.ICNS = void 0;
        const r5 = n6(779);
        const i5 = 4 + 4;
        const o5 = 4;
        const s5 = 4;
        const c5 = { ICON: 32, "ICN#": 32, "icm#": 16, icm4: 16, icm8: 16, "ics#": 16, ics4: 16, ics8: 16, is32: 16, s8mk: 16, icp4: 16, icl4: 32, icl8: 32, il32: 32, l8mk: 32, icp5: 32, ic11: 32, ich4: 48, ich8: 48, ih32: 48, h8mk: 48, icp6: 64, ic12: 32, it32: 128, t8mk: 128, ic07: 128, ic08: 256, ic13: 256, ic09: 512, ic14: 512, ic10: 1024 };
        function readImageHeader(t7, e7) {
          const n7 = e7 + s5;
          return [(0, r5.toUTF8String)(t7, e7, n7), (0, r5.readUInt32BE)(t7, n7)];
        }
        function getImageSize(t7) {
          const e7 = c5[t7];
          return { width: e7, height: e7, type: t7 };
        }
        e6.ICNS = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 4) === "icns", calculate(t7) {
          const e7 = t7.length;
          const n7 = (0, r5.readUInt32BE)(t7, o5);
          let s6 = i5;
          let c6 = readImageHeader(t7, s6);
          let a5 = getImageSize(c6[0]);
          s6 += c6[1];
          if (s6 === n7) return a5;
          const d5 = { height: a5.height, images: [a5], width: a5.width };
          while (s6 < n7 && s6 < e7) {
            c6 = readImageHeader(t7, s6);
            a5 = getImageSize(c6[0]);
            s6 += c6[1];
            d5.images.push(a5);
          }
          return d5;
        } };
      }, 845: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.ICO = void 0;
        const r5 = n6(779);
        const i5 = 1;
        const o5 = 2 + 2 + 2;
        const s5 = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;
        function getSizeFromOffset(t7, e7) {
          const n7 = t7[e7];
          return n7 === 0 ? 256 : n7;
        }
        function getImageSize(t7, e7) {
          const n7 = o5 + e7 * s5;
          return { height: getSizeFromOffset(t7, n7 + 1), width: getSizeFromOffset(t7, n7) };
        }
        e6.ICO = { validate(t7) {
          const e7 = (0, r5.readUInt16LE)(t7, 0);
          const n7 = (0, r5.readUInt16LE)(t7, 4);
          if (e7 !== 0 || n7 === 0) return false;
          const o6 = (0, r5.readUInt16LE)(t7, 2);
          return o6 === i5;
        }, calculate(t7) {
          const e7 = (0, r5.readUInt16LE)(t7, 4);
          const n7 = getImageSize(t7, 0);
          if (e7 === 1) return n7;
          const i6 = [n7];
          for (let n8 = 1; n8 < e7; n8 += 1) {
            i6.push(getImageSize(t7, n8));
          }
          return { height: n7.height, images: i6, width: n7.width };
        } };
      }, 229: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.typeHandlers = void 0;
        const r5 = n6(436);
        const i5 = n6(67);
        const o5 = n6(400);
        const s5 = n6(197);
        const c5 = n6(974);
        const a5 = n6(512);
        const d5 = n6(845);
        const f5 = n6(885);
        const u5 = n6(530);
        const l5 = n6(934);
        const h5 = n6(245);
        const g5 = n6(33);
        const I3 = n6(105);
        const p5 = n6(210);
        const U2 = n6(448);
        const w5 = n6(136);
        const v6 = n6(414);
        const E3 = n6(753);
        const m5 = n6(940);
        const B3 = n6(226);
        e6.typeHandlers = { bmp: r5.BMP, cur: i5.CUR, dds: o5.DDS, gif: s5.GIF, heif: c5.HEIF, icns: a5.ICNS, ico: d5.ICO, j2c: f5.J2C, jp2: u5.JP2, jpg: l5.JPG, jxl: h5.JXL, "jxl-stream": g5.JXLStream, ktx: I3.KTX, png: p5.PNG, pnm: U2.PNM, psd: w5.PSD, svg: v6.SVG, tga: E3.TGA, tiff: m5.TIFF, webp: B3.WEBP };
      }, 885: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.J2C = void 0;
        const r5 = n6(779);
        e6.J2C = { validate: (t7) => (0, r5.readUInt32BE)(t7, 0) === 4283432785, calculate: (t7) => ({ height: (0, r5.readUInt32BE)(t7, 12), width: (0, r5.readUInt32BE)(t7, 8) }) };
      }, 530: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JP2 = void 0;
        const r5 = n6(779);
        e6.JP2 = { validate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "jP  ") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const i5 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return i5 === "jp2 ";
        }, calculate(t7) {
          const e7 = (0, r5.findBox)(t7, "jp2h", 0);
          const n7 = e7 && (0, r5.findBox)(t7, "ihdr", e7.offset + 8);
          if (n7) {
            return { height: (0, r5.readUInt32BE)(t7, n7.offset + 8), width: (0, r5.readUInt32BE)(t7, n7.offset + 12) };
          }
          throw new TypeError("Unsupported JPEG 2000 format");
        } };
      }, 934: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JPG = void 0;
        const r5 = n6(779);
        const i5 = "45786966";
        const o5 = 2;
        const s5 = 6;
        const c5 = 2;
        const a5 = "4d4d";
        const d5 = "4949";
        const f5 = 12;
        const u5 = 2;
        function isEXIF(t7) {
          return (0, r5.toHexString)(t7, 2, 6) === i5;
        }
        function extractSize(t7, e7) {
          return { height: (0, r5.readUInt16BE)(t7, e7), width: (0, r5.readUInt16BE)(t7, e7 + 2) };
        }
        function extractOrientation(t7, e7) {
          const n7 = 8;
          const i6 = s5 + n7;
          const o6 = (0, r5.readUInt)(t7, 16, i6, e7);
          for (let n8 = 0; n8 < o6; n8++) {
            const o7 = i6 + u5 + n8 * f5;
            const s6 = o7 + f5;
            if (o7 > t7.length) {
              return;
            }
            const c6 = t7.slice(o7, s6);
            const a6 = (0, r5.readUInt)(c6, 16, 0, e7);
            if (a6 === 274) {
              const t8 = (0, r5.readUInt)(c6, 16, 2, e7);
              if (t8 !== 3) {
                return;
              }
              const n9 = (0, r5.readUInt)(c6, 32, 4, e7);
              if (n9 !== 1) {
                return;
              }
              return (0, r5.readUInt)(c6, 16, 8, e7);
            }
          }
        }
        function validateExifBlock(t7, e7) {
          const n7 = t7.slice(o5, e7);
          const i6 = (0, r5.toHexString)(n7, s5, s5 + c5);
          const f6 = i6 === a5;
          const u6 = i6 === d5;
          if (f6 || u6) {
            return extractOrientation(n7, f6);
          }
        }
        function validateInput(t7, e7) {
          if (e7 > t7.length) {
            throw new TypeError("Corrupt JPG, exceeded buffer limits");
          }
        }
        e6.JPG = { validate: (t7) => (0, r5.toHexString)(t7, 0, 2) === "ffd8", calculate(t7) {
          t7 = t7.slice(4);
          let e7;
          let n7;
          while (t7.length) {
            const i6 = (0, r5.readUInt16BE)(t7, 0);
            if (t7[i6] !== 255) {
              t7 = t7.slice(1);
              continue;
            }
            if (isEXIF(t7)) {
              e7 = validateExifBlock(t7, i6);
            }
            validateInput(t7, i6);
            n7 = t7[i6 + 1];
            if (n7 === 192 || n7 === 193 || n7 === 194) {
              const n8 = extractSize(t7, i6 + 5);
              if (!e7) {
                return n8;
              }
              return { height: n8.height, orientation: e7, width: n8.width };
            }
            t7 = t7.slice(i6 + 2);
          }
          throw new TypeError("Invalid JPG, no size found");
        } };
      }, 33: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JXLStream = void 0;
        const r5 = n6(779);
        const i5 = n6(112);
        function calculateImageDimension(t7, e7) {
          if (e7) {
            return 8 * (1 + t7.getBits(5));
          } else {
            const e8 = t7.getBits(2);
            const n7 = [9, 13, 18, 30][e8];
            return 1 + t7.getBits(n7);
          }
        }
        function calculateImageWidth(t7, e7, n7, r6) {
          if (e7 && n7 === 0) {
            return 8 * (1 + t7.getBits(5));
          } else if (n7 === 0) {
            return calculateImageDimension(t7, false);
          } else {
            const t8 = [1, 1.2, 4 / 3, 1.5, 16 / 9, 5 / 4, 2];
            return Math.floor(r6 * t8[n7 - 1]);
          }
        }
        e6.JXLStream = { validate: (t7) => (0, r5.toHexString)(t7, 0, 2) === "ff0a", calculate(t7) {
          const e7 = new i5.BitReader(t7, "little-endian");
          const n7 = e7.getBits(1) === 1;
          const r6 = calculateImageDimension(e7, n7);
          const o5 = e7.getBits(3);
          const s5 = calculateImageWidth(e7, n7, o5, r6);
          return { width: s5, height: r6 };
        } };
      }, 245: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.JXL = void 0;
        const r5 = n6(779);
        const i5 = n6(33);
        function extractCodestream(t7) {
          const e7 = (0, r5.findBox)(t7, "jxlc", 0);
          if (e7) {
            return t7.slice(e7.offset + 8, e7.offset + e7.size);
          }
          const n7 = extractPartialStreams(t7);
          if (n7.length > 0) {
            return concatenateCodestreams(n7);
          }
          return void 0;
        }
        function extractPartialStreams(t7) {
          const e7 = [];
          let n7 = 0;
          while (n7 < t7.length) {
            const i6 = (0, r5.findBox)(t7, "jxlp", n7);
            if (!i6) break;
            e7.push(t7.slice(i6.offset + 12, i6.offset + i6.size));
            n7 = i6.offset + i6.size;
          }
          return e7;
        }
        function concatenateCodestreams(t7) {
          const e7 = t7.reduce((t8, e8) => t8 + e8.length, 0);
          const n7 = new Uint8Array(e7);
          let r6 = 0;
          for (const e8 of t7) {
            n7.set(e8, r6);
            r6 += e8.length;
          }
          return n7;
        }
        e6.JXL = { validate: (t7) => {
          const e7 = (0, r5.toUTF8String)(t7, 4, 8);
          if (e7 !== "JXL ") return false;
          const n7 = (0, r5.findBox)(t7, "ftyp", 0);
          if (!n7) return false;
          const i6 = (0, r5.toUTF8String)(t7, n7.offset + 8, n7.offset + 12);
          return i6 === "jxl ";
        }, calculate(t7) {
          const e7 = extractCodestream(t7);
          if (e7) return i5.JXLStream.calculate(e7);
          throw new Error("No codestream found in JXL container");
        } };
      }, 105: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.KTX = void 0;
        const r5 = n6(779);
        e6.KTX = { validate: (t7) => {
          const e7 = (0, r5.toUTF8String)(t7, 1, 7);
          return ["KTX 11", "KTX 20"].includes(e7);
        }, calculate: (t7) => {
          const e7 = t7[5] === 49 ? "ktx" : "ktx2";
          const n7 = e7 === "ktx" ? 36 : 20;
          return { height: (0, r5.readUInt32LE)(t7, n7 + 4), width: (0, r5.readUInt32LE)(t7, n7), type: e7 };
        } };
      }, 210: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PNG = void 0;
        const r5 = n6(779);
        const i5 = "PNG\r\n\n";
        const o5 = "IHDR";
        const s5 = "CgBI";
        e6.PNG = { validate(t7) {
          if (i5 === (0, r5.toUTF8String)(t7, 1, 8)) {
            let e7 = (0, r5.toUTF8String)(t7, 12, 16);
            if (e7 === s5) {
              e7 = (0, r5.toUTF8String)(t7, 28, 32);
            }
            if (e7 !== o5) {
              throw new TypeError("Invalid PNG");
            }
            return true;
          }
          return false;
        }, calculate(t7) {
          if ((0, r5.toUTF8String)(t7, 12, 16) === s5) {
            return { height: (0, r5.readUInt32BE)(t7, 36), width: (0, r5.readUInt32BE)(t7, 32) };
          }
          return { height: (0, r5.readUInt32BE)(t7, 20), width: (0, r5.readUInt32BE)(t7, 16) };
        } };
      }, 448: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PNM = void 0;
        const r5 = n6(779);
        const i5 = { P1: "pbm/ascii", P2: "pgm/ascii", P3: "ppm/ascii", P4: "pbm", P5: "pgm", P6: "ppm", P7: "pam", PF: "pfm" };
        const o5 = { default: (t7) => {
          let e7 = [];
          while (t7.length > 0) {
            const n7 = t7.shift();
            if (n7[0] === "#") {
              continue;
            }
            e7 = n7.split(" ");
            break;
          }
          if (e7.length === 2) {
            return { height: parseInt(e7[1], 10), width: parseInt(e7[0], 10) };
          } else {
            throw new TypeError("Invalid PNM");
          }
        }, pam: (t7) => {
          const e7 = {};
          while (t7.length > 0) {
            const n7 = t7.shift();
            if (n7.length > 16 || n7.charCodeAt(0) > 128) {
              continue;
            }
            const [r6, i6] = n7.split(" ");
            if (r6 && i6) {
              e7[r6.toLowerCase()] = parseInt(i6, 10);
            }
            if (e7.height && e7.width) {
              break;
            }
          }
          if (e7.height && e7.width) {
            return { height: e7.height, width: e7.width };
          } else {
            throw new TypeError("Invalid PAM");
          }
        } };
        e6.PNM = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 2) in i5, calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 0, 2);
          const n7 = i5[e7];
          const s5 = (0, r5.toUTF8String)(t7, 3).split(/[\r\n]+/);
          const c5 = o5[n7] || o5.default;
          return c5(s5);
        } };
      }, 136: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.PSD = void 0;
        const r5 = n6(779);
        e6.PSD = { validate: (t7) => (0, r5.toUTF8String)(t7, 0, 4) === "8BPS", calculate: (t7) => ({ height: (0, r5.readUInt32BE)(t7, 14), width: (0, r5.readUInt32BE)(t7, 18) }) };
      }, 414: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.SVG = void 0;
        const r5 = n6(779);
        const i5 = /<svg\s([^>"']|"[^"]*"|'[^']*')*>/;
        const o5 = { height: /\sheight=(['"])([^%]+?)\1/, root: i5, viewbox: /\sviewBox=(['"])(.+?)\1/i, width: /\swidth=(['"])([^%]+?)\1/ };
        const s5 = 2.54;
        const c5 = { in: 96, cm: 96 / s5, em: 16, ex: 8, m: 96 / s5 * 100, mm: 96 / s5 / 10, pc: 96 / 72 / 12, pt: 96 / 72, px: 1 };
        const a5 = new RegExp(`^([0-9.]+(?:e\\d+)?)(${Object.keys(c5).join("|")})?$`);
        function parseLength(t7) {
          const e7 = a5.exec(t7);
          if (!e7) {
            return void 0;
          }
          return Math.round(Number(e7[1]) * (c5[e7[2]] || 1));
        }
        function parseViewbox(t7) {
          const e7 = t7.split(" ");
          return { height: parseLength(e7[3]), width: parseLength(e7[2]) };
        }
        function parseAttributes(t7) {
          const e7 = t7.match(o5.width);
          const n7 = t7.match(o5.height);
          const r6 = t7.match(o5.viewbox);
          return { height: n7 && parseLength(n7[2]), viewbox: r6 && parseViewbox(r6[2]), width: e7 && parseLength(e7[2]) };
        }
        function calculateByDimensions(t7) {
          return { height: t7.height, width: t7.width };
        }
        function calculateByViewbox(t7, e7) {
          const n7 = e7.width / e7.height;
          if (t7.width) {
            return { height: Math.floor(t7.width / n7), width: t7.width };
          }
          if (t7.height) {
            return { height: t7.height, width: Math.floor(t7.height * n7) };
          }
          return { height: e7.height, width: e7.width };
        }
        e6.SVG = { validate: (t7) => i5.test((0, r5.toUTF8String)(t7, 0, 1e3)), calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7).match(o5.root);
          if (e7) {
            const t8 = parseAttributes(e7[0]);
            if (t8.width && t8.height) {
              return calculateByDimensions(t8);
            }
            if (t8.viewbox) {
              return calculateByViewbox(t8, t8.viewbox);
            }
          }
          throw new TypeError("Invalid SVG");
        } };
      }, 753: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.TGA = void 0;
        const r5 = n6(779);
        e6.TGA = { validate(t7) {
          return (0, r5.readUInt16LE)(t7, 0) === 0 && (0, r5.readUInt16LE)(t7, 4) === 0;
        }, calculate(t7) {
          return { height: (0, r5.readUInt16LE)(t7, 14), width: (0, r5.readUInt16LE)(t7, 12) };
        } };
      }, 940: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.TIFF = void 0;
        const r5 = n6(147);
        const i5 = n6(779);
        function readIFD(t7, e7, n7) {
          const o6 = (0, i5.readUInt)(t7, 32, 4, n7);
          let s5 = 1024;
          const c5 = r5.statSync(e7).size;
          if (o6 + s5 > c5) {
            s5 = c5 - o6 - 10;
          }
          const a5 = new Uint8Array(s5);
          const d5 = r5.openSync(e7, "r");
          r5.readSync(d5, a5, 0, s5, o6);
          r5.closeSync(d5);
          return a5.slice(2);
        }
        function readValue(t7, e7) {
          const n7 = (0, i5.readUInt)(t7, 16, 8, e7);
          const r6 = (0, i5.readUInt)(t7, 16, 10, e7);
          return (r6 << 16) + n7;
        }
        function nextTag(t7) {
          if (t7.length > 24) {
            return t7.slice(12);
          }
        }
        function extractTags(t7, e7) {
          const n7 = {};
          let r6 = t7;
          while (r6 && r6.length) {
            const t8 = (0, i5.readUInt)(r6, 16, 0, e7);
            const o6 = (0, i5.readUInt)(r6, 16, 2, e7);
            const s5 = (0, i5.readUInt)(r6, 32, 4, e7);
            if (t8 === 0) {
              break;
            } else {
              if (s5 === 1 && (o6 === 3 || o6 === 4)) {
                n7[t8] = readValue(r6, e7);
              }
              r6 = nextTag(r6);
            }
          }
          return n7;
        }
        function determineEndianness(t7) {
          const e7 = (0, i5.toUTF8String)(t7, 0, 2);
          if ("II" === e7) {
            return "LE";
          } else if ("MM" === e7) {
            return "BE";
          }
        }
        const o5 = ["49492a00", "4d4d002a"];
        e6.TIFF = { validate: (t7) => o5.includes((0, i5.toHexString)(t7, 0, 4)), calculate(t7, e7) {
          if (!e7) {
            throw new TypeError("Tiff doesn't support buffer");
          }
          const n7 = determineEndianness(t7) === "BE";
          const r6 = readIFD(t7, e7, n7);
          const i6 = extractTags(r6, n7);
          const o6 = i6[256];
          const s5 = i6[257];
          if (!o6 || !s5) {
            throw new TypeError("Invalid Tiff. Missing tags");
          }
          return { height: s5, width: o6 };
        } };
      }, 779: (t6, e6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.findBox = e6.readUInt = e6.readUInt32LE = e6.readUInt32BE = e6.readInt32LE = e6.readUInt24LE = e6.readUInt16LE = e6.readUInt16BE = e6.readInt16LE = e6.toHexString = e6.toUTF8String = void 0;
        const n6 = new TextDecoder();
        const toUTF8String = (t7, e7 = 0, r6 = t7.length) => n6.decode(t7.slice(e7, r6));
        e6.toUTF8String = toUTF8String;
        const toHexString = (t7, e7 = 0, n7 = t7.length) => t7.slice(e7, n7).reduce((t8, e8) => t8 + ("0" + e8.toString(16)).slice(-2), "");
        e6.toHexString = toHexString;
        const readInt16LE = (t7, e7 = 0) => {
          const n7 = t7[e7] + t7[e7 + 1] * 2 ** 8;
          return n7 | (n7 & 2 ** 15) * 131070;
        };
        e6.readInt16LE = readInt16LE;
        const readUInt16BE = (t7, e7 = 0) => t7[e7] * 2 ** 8 + t7[e7 + 1];
        e6.readUInt16BE = readUInt16BE;
        const readUInt16LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8;
        e6.readUInt16LE = readUInt16LE;
        const readUInt24LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16;
        e6.readUInt24LE = readUInt24LE;
        const readInt32LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16 + (t7[e7 + 3] << 24);
        e6.readInt32LE = readInt32LE;
        const readUInt32BE = (t7, e7 = 0) => t7[e7] * 2 ** 24 + t7[e7 + 1] * 2 ** 16 + t7[e7 + 2] * 2 ** 8 + t7[e7 + 3];
        e6.readUInt32BE = readUInt32BE;
        const readUInt32LE = (t7, e7 = 0) => t7[e7] + t7[e7 + 1] * 2 ** 8 + t7[e7 + 2] * 2 ** 16 + t7[e7 + 3] * 2 ** 24;
        e6.readUInt32LE = readUInt32LE;
        const r5 = { readUInt16BE: e6.readUInt16BE, readUInt16LE: e6.readUInt16LE, readUInt32BE: e6.readUInt32BE, readUInt32LE: e6.readUInt32LE };
        function readUInt(t7, e7, n7, i5) {
          n7 = n7 || 0;
          const o5 = i5 ? "BE" : "LE";
          const s5 = "readUInt" + e7 + o5;
          return r5[s5](t7, n7);
        }
        e6.readUInt = readUInt;
        function readBox(t7, n7) {
          if (t7.length - n7 < 4) return;
          const r6 = (0, e6.readUInt32BE)(t7, n7);
          if (t7.length - n7 < r6) return;
          return { name: (0, e6.toUTF8String)(t7, 4 + n7, 8 + n7), offset: n7, size: r6 };
        }
        function findBox(t7, e7, n7) {
          while (n7 < t7.length) {
            const r6 = readBox(t7, n7);
            if (!r6) break;
            if (r6.name === e7) return r6;
            n7 += r6.size > 0 ? r6.size : 8;
          }
        }
        e6.findBox = findBox;
      }, 226: (t6, e6, n6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.WEBP = void 0;
        const r5 = n6(779);
        function calculateExtended(t7) {
          return { height: 1 + (0, r5.readUInt24LE)(t7, 7), width: 1 + (0, r5.readUInt24LE)(t7, 4) };
        }
        function calculateLossless(t7) {
          return { height: 1 + ((t7[4] & 15) << 10 | t7[3] << 2 | (t7[2] & 192) >> 6), width: 1 + ((t7[2] & 63) << 8 | t7[1]) };
        }
        function calculateLossy(t7) {
          return { height: (0, r5.readInt16LE)(t7, 8) & 16383, width: (0, r5.readInt16LE)(t7, 6) & 16383 };
        }
        e6.WEBP = { validate(t7) {
          const e7 = "RIFF" === (0, r5.toUTF8String)(t7, 0, 4);
          const n7 = "WEBP" === (0, r5.toUTF8String)(t7, 8, 12);
          const i5 = "VP8" === (0, r5.toUTF8String)(t7, 12, 15);
          return e7 && n7 && i5;
        }, calculate(t7) {
          const e7 = (0, r5.toUTF8String)(t7, 12, 16);
          t7 = t7.slice(20, 30);
          if (e7 === "VP8X") {
            const e8 = t7[0];
            const n8 = (e8 & 192) === 0;
            const r6 = (e8 & 1) === 0;
            if (n8 && r6) {
              return calculateExtended(t7);
            } else {
              throw new TypeError("Invalid WebP");
            }
          }
          if (e7 === "VP8 " && t7[0] !== 47) {
            return calculateLossy(t7);
          }
          const n7 = (0, r5.toHexString)(t7, 3, 6);
          if (e7 === "VP8L" && n7 !== "9d012a") {
            return calculateLossless(t7);
          }
          throw new TypeError("Invalid WebP");
        } };
      }, 112: (t6, e6) => {
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.BitReader = void 0;
        class BitReader {
          constructor(t7, e7) {
            this.input = t7;
            this.endianness = e7;
            this.byteOffset = 2;
            this.bitOffset = 0;
          }
          getBits(t7 = 1) {
            let e7 = 0;
            let n6 = 0;
            while (n6 < t7) {
              if (this.byteOffset >= this.input.length) {
                throw new Error("Reached end of input");
              }
              const r5 = this.input[this.byteOffset];
              const i5 = 8 - this.bitOffset;
              const o5 = Math.min(t7 - n6, i5);
              if (this.endianness === "little-endian") {
                const t8 = (1 << o5) - 1;
                const i6 = r5 >> this.bitOffset & t8;
                e7 |= i6 << n6;
              } else {
                const t8 = (1 << o5) - 1 << 8 - this.bitOffset - o5;
                const n7 = (r5 & t8) >> 8 - this.bitOffset - o5;
                e7 = e7 << o5 | n7;
              }
              n6 += o5;
              this.bitOffset += o5;
              if (this.bitOffset === 8) {
                this.byteOffset++;
                this.bitOffset = 0;
              }
            }
            return e7;
          }
        }
        e6.BitReader = BitReader;
      }, 147: (t6) => {
        t6.exports = __require("fs");
      } };
      var e5 = {};
      function __nccwpck_require__(n6) {
        var r5 = e5[n6];
        if (r5 !== void 0) {
          return r5.exports;
        }
        var i5 = e5[n6] = { exports: {} };
        var o5 = true;
        try {
          t5[n6](i5, i5.exports, __nccwpck_require__);
          o5 = false;
        } finally {
          if (o5) delete e5[n6];
        }
        return i5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var n5 = {};
      (() => {
        var t6 = n5;
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.detector = void 0;
        const e6 = __nccwpck_require__(229);
        const r5 = Object.keys(e6.typeHandlers);
        const i5 = { 56: "psd", 66: "bmp", 68: "dds", 71: "gif", 73: "tiff", 77: "tiff", 82: "webp", 105: "icns", 137: "png", 255: "jpg" };
        function detector(t7) {
          const n6 = t7[0];
          if (n6 in i5) {
            const r6 = i5[n6];
            if (r6 && e6.typeHandlers[r6].validate(t7)) {
              return r6;
            }
          }
          const finder = (n7) => e6.typeHandlers[n7].validate(t7);
          return r5.find(finder);
        }
        t6.detector = detector;
      })();
      module.exports = n5;
    })();
  }
});

// node_modules/next/dist/compiled/is-animated/index.js
var require_is_animated = __commonJS({
  "node_modules/next/dist/compiled/is-animated/index.js"(exports, module) {
    (() => {
      var e5 = { 199: (e6, r6, t6) => {
        "use strict";
        var a5 = t6(226);
        var i5 = t6(643);
        var n5 = t6(68);
        function isAnimated(e7) {
          if (a5.isGIF(e7)) {
            return a5.isAnimated(e7);
          }
          if (i5.isPNG(e7)) {
            return i5.isAnimated(e7);
          }
          if (n5.isWebp(e7)) {
            return n5.isAnimated(e7);
          }
          return false;
        }
        e6.exports = isAnimated;
      }, 226: (e6, r6) => {
        "use strict";
        function getDataBlocksLength(e7, r7) {
          var t6 = 0;
          while (e7[r7 + t6]) {
            t6 += e7[r7 + t6] + 1;
          }
          return t6 + 1;
        }
        r6.isGIF = function(e7) {
          var r7 = e7.slice(0, 3).toString("ascii");
          return r7 === "GIF";
        };
        r6.isAnimated = function(e7) {
          var r7, t6, a5;
          var i5 = 0;
          var n5 = 0;
          a5 = e7.slice(0, 3).toString("ascii");
          if (a5 !== "GIF") {
            return false;
          }
          r7 = e7[10] & 128;
          t6 = e7[10] & 7;
          i5 += 6;
          i5 += 7;
          i5 += r7 ? 3 * Math.pow(2, t6 + 1) : 0;
          while (n5 < 2 && i5 < e7.length) {
            switch (e7[i5]) {
              case 44:
                n5 += 1;
                r7 = e7[i5 + 9] & 128;
                t6 = e7[i5 + 9] & 7;
                i5 += 10;
                i5 += r7 ? 3 * Math.pow(2, t6 + 1) : 0;
                i5 += getDataBlocksLength(e7, i5 + 1) + 1;
                break;
              case 33:
                i5 += 2;
                i5 += getDataBlocksLength(e7, i5);
                break;
              case 59:
                i5 = e7.length;
                break;
              default:
                i5 = e7.length;
                break;
            }
          }
          return n5 > 1;
        };
      }, 643: (e6, r6) => {
        r6.isPNG = function(e7) {
          var r7 = e7.slice(0, 8).toString("hex");
          return r7 === "89504e470d0a1a0a";
        };
        r6.isAnimated = function(e7) {
          var r7 = false;
          var t6 = false;
          var a5 = false;
          var i5 = null;
          var n5 = 8;
          while (n5 < e7.length) {
            var s5 = e7.readUInt32BE(n5);
            var f5 = e7.slice(n5 + 4, n5 + 8).toString("ascii");
            switch (f5) {
              case "acTL":
                r7 = true;
                break;
              case "IDAT":
                if (!r7) {
                  return false;
                }
                if (i5 !== "fcTL" && i5 !== "IDAT") {
                  return false;
                }
                t6 = true;
                break;
              case "fdAT":
                if (!t6) {
                  return false;
                }
                if (i5 !== "fcTL" && i5 !== "fdAT") {
                  return false;
                }
                a5 = true;
                break;
            }
            i5 = f5;
            n5 += 4 + 4 + s5 + 4;
          }
          return r7 && t6 && a5;
        };
      }, 68: (e6, r6) => {
        r6.isWebp = function(e7) {
          var r7 = [87, 69, 66, 80];
          for (var t6 = 0; t6 < r7.length; t6++) {
            if (e7[t6 + 8] !== r7[t6]) {
              return false;
            }
          }
          return true;
        };
        r6.isAnimated = function(e7) {
          var r7 = [65, 78, 73, 77];
          for (var t6 = 0; t6 < e7.length; t6++) {
            for (var a5 = 0; a5 < r7.length; a5++) {
              if (e7[t6 + a5] !== r7[a5]) {
                break;
              }
            }
            if (a5 === r7.length) {
              return true;
            }
          }
          return false;
        };
      } };
      var r5 = {};
      function __nccwpck_require__(t6) {
        var a5 = r5[t6];
        if (a5 !== void 0) {
          return a5.exports;
        }
        var i5 = r5[t6] = { exports: {} };
        var n5 = true;
        try {
          e5[t6](i5, i5.exports, __nccwpck_require__);
          n5 = false;
        } finally {
          if (n5) delete r5[t6];
        }
        return i5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var t5 = __nccwpck_require__(199);
      module.exports = t5;
    })();
  }
});

// node_modules/next/dist/shared/lib/image-blur-svg.js
var require_image_blur_svg = __commonJS({
  "node_modules/next/dist/shared/lib/image-blur-svg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getImageBlurSvg", {
      enumerable: true,
      get: function() {
        return getImageBlurSvg;
      }
    });
    function getImageBlurSvg(param) {
      let { widthInt, heightInt, blurWidth, blurHeight, blurDataURL, objectFit } = param;
      const std = 20;
      const svgWidth = blurWidth ? blurWidth * 40 : widthInt;
      const svgHeight = blurHeight ? blurHeight * 40 : heightInt;
      const viewBox = svgWidth && svgHeight ? "viewBox='0 0 " + svgWidth + " " + svgHeight + "'" : "";
      const preserveAspectRatio = viewBox ? "none" : objectFit === "contain" ? "xMidYMid" : objectFit === "cover" ? "xMidYMid slice" : "none";
      return "%3Csvg xmlns='http://www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
    }
  }
});

// node_modules/next/dist/compiled/picomatch/index.js
var require_picomatch = __commonJS({
  "node_modules/next/dist/compiled/picomatch/index.js"(exports, module) {
    (() => {
      "use strict";
      var t5 = { 170: (t6, e6, u6) => {
        const n5 = u6(510);
        const isWindows = () => {
          if (typeof navigator !== "undefined" && navigator.platform) {
            const t7 = navigator.platform.toLowerCase();
            return t7 === "win32" || t7 === "windows";
          }
          if (typeof process !== "undefined" && process.platform) {
            return process.platform === "win32";
          }
          return false;
        };
        function picomatch(t7, e7, u7 = false) {
          if (e7 && (e7.windows === null || e7.windows === void 0)) {
            e7 = { ...e7, windows: isWindows() };
          }
          return n5(t7, e7, u7);
        }
        Object.assign(picomatch, n5);
        t6.exports = picomatch;
      }, 154: (t6) => {
        const e6 = "\\\\/";
        const u6 = `[^${e6}]`;
        const n5 = "\\.";
        const o5 = "\\+";
        const s5 = "\\?";
        const r5 = "\\/";
        const a5 = "(?=.)";
        const i5 = "[^/]";
        const c5 = `(?:${r5}|$)`;
        const p5 = `(?:^|${r5})`;
        const l5 = `${n5}{1,2}${c5}`;
        const f5 = `(?!${n5})`;
        const A3 = `(?!${p5}${l5})`;
        const _2 = `(?!${n5}{0,1}${c5})`;
        const R2 = `(?!${l5})`;
        const E3 = `[^.${r5}]`;
        const h5 = `${i5}*?`;
        const g5 = "/";
        const b5 = { DOT_LITERAL: n5, PLUS_LITERAL: o5, QMARK_LITERAL: s5, SLASH_LITERAL: r5, ONE_CHAR: a5, QMARK: i5, END_ANCHOR: c5, DOTS_SLASH: l5, NO_DOT: f5, NO_DOTS: A3, NO_DOT_SLASH: _2, NO_DOTS_SLASH: R2, QMARK_NO_DOT: E3, STAR: h5, START_ANCHOR: p5, SEP: g5 };
        const C3 = { ...b5, SLASH_LITERAL: `[${e6}]`, QMARK: u6, STAR: `${u6}*?`, DOTS_SLASH: `${n5}{1,2}(?:[${e6}]|$)`, NO_DOT: `(?!${n5})`, NO_DOTS: `(?!(?:^|[${e6}])${n5}{1,2}(?:[${e6}]|$))`, NO_DOT_SLASH: `(?!${n5}{0,1}(?:[${e6}]|$))`, NO_DOTS_SLASH: `(?!${n5}{1,2}(?:[${e6}]|$))`, QMARK_NO_DOT: `[^.${e6}]`, START_ANCHOR: `(?:^|[${e6}])`, END_ANCHOR: `(?:[${e6}]|$)`, SEP: "\\" };
        const y3 = { alnum: "a-zA-Z0-9", alpha: "a-zA-Z", ascii: "\\x00-\\x7F", blank: " \\t", cntrl: "\\x00-\\x1F\\x7F", digit: "0-9", graph: "\\x21-\\x7E", lower: "a-z", print: "\\x20-\\x7E ", punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~", space: " \\t\\r\\n\\v\\f", upper: "A-Z", word: "A-Za-z0-9_", xdigit: "A-Fa-f0-9" };
        t6.exports = { MAX_LENGTH: 1024 * 64, POSIX_REGEX_SOURCE: y3, REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g, REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/, REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/, REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g, REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g, REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g, REPLACEMENTS: { "***": "*", "**/**": "**", "**/**/**": "**" }, CHAR_0: 48, CHAR_9: 57, CHAR_UPPERCASE_A: 65, CHAR_LOWERCASE_A: 97, CHAR_UPPERCASE_Z: 90, CHAR_LOWERCASE_Z: 122, CHAR_LEFT_PARENTHESES: 40, CHAR_RIGHT_PARENTHESES: 41, CHAR_ASTERISK: 42, CHAR_AMPERSAND: 38, CHAR_AT: 64, CHAR_BACKWARD_SLASH: 92, CHAR_CARRIAGE_RETURN: 13, CHAR_CIRCUMFLEX_ACCENT: 94, CHAR_COLON: 58, CHAR_COMMA: 44, CHAR_DOT: 46, CHAR_DOUBLE_QUOTE: 34, CHAR_EQUAL: 61, CHAR_EXCLAMATION_MARK: 33, CHAR_FORM_FEED: 12, CHAR_FORWARD_SLASH: 47, CHAR_GRAVE_ACCENT: 96, CHAR_HASH: 35, CHAR_HYPHEN_MINUS: 45, CHAR_LEFT_ANGLE_BRACKET: 60, CHAR_LEFT_CURLY_BRACE: 123, CHAR_LEFT_SQUARE_BRACKET: 91, CHAR_LINE_FEED: 10, CHAR_NO_BREAK_SPACE: 160, CHAR_PERCENT: 37, CHAR_PLUS: 43, CHAR_QUESTION_MARK: 63, CHAR_RIGHT_ANGLE_BRACKET: 62, CHAR_RIGHT_CURLY_BRACE: 125, CHAR_RIGHT_SQUARE_BRACKET: 93, CHAR_SEMICOLON: 59, CHAR_SINGLE_QUOTE: 39, CHAR_SPACE: 32, CHAR_TAB: 9, CHAR_UNDERSCORE: 95, CHAR_VERTICAL_LINE: 124, CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, extglobChars(t7) {
          return { "!": { type: "negate", open: "(?:(?!(?:", close: `))${t7.STAR})` }, "?": { type: "qmark", open: "(?:", close: ")?" }, "+": { type: "plus", open: "(?:", close: ")+" }, "*": { type: "star", open: "(?:", close: ")*" }, "@": { type: "at", open: "(?:", close: ")" } };
        }, globChars(t7) {
          return t7 === true ? C3 : b5;
        } };
      }, 697: (t6, e6, u6) => {
        const n5 = u6(154);
        const o5 = u6(96);
        const { MAX_LENGTH: s5, POSIX_REGEX_SOURCE: r5, REGEX_NON_SPECIAL_CHARS: a5, REGEX_SPECIAL_CHARS_BACKREF: i5, REPLACEMENTS: c5 } = n5;
        const expandRange = (t7, e7) => {
          if (typeof e7.expandRange === "function") {
            return e7.expandRange(...t7, e7);
          }
          t7.sort();
          const u7 = `[${t7.join("-")}]`;
          try {
            new RegExp(u7);
          } catch (e8) {
            return t7.map((t8) => o5.escapeRegex(t8)).join("..");
          }
          return u7;
        };
        const syntaxError = (t7, e7) => `Missing ${t7}: "${e7}" - use "\\\\${e7}" to match literal characters`;
        const parse3 = (t7, e7) => {
          if (typeof t7 !== "string") {
            throw new TypeError("Expected a string");
          }
          t7 = c5[t7] || t7;
          const u7 = { ...e7 };
          const p5 = typeof u7.maxLength === "number" ? Math.min(s5, u7.maxLength) : s5;
          let l5 = t7.length;
          if (l5 > p5) {
            throw new SyntaxError(`Input length: ${l5}, exceeds maximum allowed length: ${p5}`);
          }
          const f5 = { type: "bos", value: "", output: u7.prepend || "" };
          const A3 = [f5];
          const _2 = u7.capture ? "" : "?:";
          const R2 = n5.globChars(u7.windows);
          const E3 = n5.extglobChars(R2);
          const { DOT_LITERAL: h5, PLUS_LITERAL: g5, SLASH_LITERAL: b5, ONE_CHAR: C3, DOTS_SLASH: y3, NO_DOT: $, NO_DOT_SLASH: x5, NO_DOTS_SLASH: S2, QMARK: H3, QMARK_NO_DOT: v6, STAR: d5, START_ANCHOR: L2 } = R2;
          const globstar = (t8) => `(${_2}(?:(?!${L2}${t8.dot ? y3 : h5}).)*?)`;
          const T2 = u7.dot ? "" : $;
          const O2 = u7.dot ? H3 : v6;
          let k5 = u7.bash === true ? globstar(u7) : d5;
          if (u7.capture) {
            k5 = `(${k5})`;
          }
          if (typeof u7.noext === "boolean") {
            u7.noextglob = u7.noext;
          }
          const m5 = { input: t7, index: -1, start: 0, dot: u7.dot === true, consumed: "", output: "", prefix: "", backtrack: false, negated: false, brackets: 0, braces: 0, parens: 0, quotes: 0, globstar: false, tokens: A3 };
          t7 = o5.removePrefix(t7, m5);
          l5 = t7.length;
          const w5 = [];
          const N2 = [];
          const I3 = [];
          let B3 = f5;
          let G3;
          const eos = () => m5.index === l5 - 1;
          const D3 = m5.peek = (e8 = 1) => t7[m5.index + e8];
          const M2 = m5.advance = () => t7[++m5.index] || "";
          const remaining = () => t7.slice(m5.index + 1);
          const consume = (t8 = "", e8 = 0) => {
            m5.consumed += t8;
            m5.index += e8;
          };
          const append = (t8) => {
            m5.output += t8.output != null ? t8.output : t8.value;
            consume(t8.value);
          };
          const negate3 = () => {
            let t8 = 1;
            while (D3() === "!" && (D3(2) !== "(" || D3(3) === "?")) {
              M2();
              m5.start++;
              t8++;
            }
            if (t8 % 2 === 0) {
              return false;
            }
            m5.negated = true;
            m5.start++;
            return true;
          };
          const increment = (t8) => {
            m5[t8]++;
            I3.push(t8);
          };
          const decrement = (t8) => {
            m5[t8]--;
            I3.pop();
          };
          const push = (t8) => {
            if (B3.type === "globstar") {
              const e8 = m5.braces > 0 && (t8.type === "comma" || t8.type === "brace");
              const u8 = t8.extglob === true || w5.length && (t8.type === "pipe" || t8.type === "paren");
              if (t8.type !== "slash" && t8.type !== "paren" && !e8 && !u8) {
                m5.output = m5.output.slice(0, -B3.output.length);
                B3.type = "star";
                B3.value = "*";
                B3.output = k5;
                m5.output += B3.output;
              }
            }
            if (w5.length && t8.type !== "paren") {
              w5[w5.length - 1].inner += t8.value;
            }
            if (t8.value || t8.output) append(t8);
            if (B3 && B3.type === "text" && t8.type === "text") {
              B3.output = (B3.output || B3.value) + t8.value;
              B3.value += t8.value;
              return;
            }
            t8.prev = B3;
            A3.push(t8);
            B3 = t8;
          };
          const extglobOpen = (t8, e8) => {
            const n6 = { ...E3[e8], conditions: 1, inner: "" };
            n6.prev = B3;
            n6.parens = m5.parens;
            n6.output = m5.output;
            const o6 = (u7.capture ? "(" : "") + n6.open;
            increment("parens");
            push({ type: t8, value: e8, output: m5.output ? "" : C3 });
            push({ type: "paren", extglob: true, value: M2(), output: o6 });
            w5.push(n6);
          };
          const extglobClose = (t8) => {
            let n6 = t8.close + (u7.capture ? ")" : "");
            let o6;
            if (t8.type === "negate") {
              let s6 = k5;
              if (t8.inner && t8.inner.length > 1 && t8.inner.includes("/")) {
                s6 = globstar(u7);
              }
              if (s6 !== k5 || eos() || /^\)+$/.test(remaining())) {
                n6 = t8.close = `)$))${s6}`;
              }
              if (t8.inner.includes("*") && (o6 = remaining()) && /^\.[^\\/.]+$/.test(o6)) {
                const u8 = parse3(o6, { ...e7, fastpaths: false }).output;
                n6 = t8.close = `)${u8})${s6})`;
              }
              if (t8.prev.type === "bos") {
                m5.negatedExtglob = true;
              }
            }
            push({ type: "paren", extglob: true, value: G3, output: n6 });
            decrement("parens");
          };
          if (u7.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t7)) {
            let n6 = false;
            let s6 = t7.replace(i5, (t8, e8, u8, o6, s7, r6) => {
              if (o6 === "\\") {
                n6 = true;
                return t8;
              }
              if (o6 === "?") {
                if (e8) {
                  return e8 + o6 + (s7 ? H3.repeat(s7.length) : "");
                }
                if (r6 === 0) {
                  return O2 + (s7 ? H3.repeat(s7.length) : "");
                }
                return H3.repeat(u8.length);
              }
              if (o6 === ".") {
                return h5.repeat(u8.length);
              }
              if (o6 === "*") {
                if (e8) {
                  return e8 + o6 + (s7 ? k5 : "");
                }
                return k5;
              }
              return e8 ? t8 : `\\${t8}`;
            });
            if (n6 === true) {
              if (u7.unescape === true) {
                s6 = s6.replace(/\\/g, "");
              } else {
                s6 = s6.replace(/\\+/g, (t8) => t8.length % 2 === 0 ? "\\\\" : t8 ? "\\" : "");
              }
            }
            if (s6 === t7 && u7.contains === true) {
              m5.output = t7;
              return m5;
            }
            m5.output = o5.wrapOutput(s6, m5, e7);
            return m5;
          }
          while (!eos()) {
            G3 = M2();
            if (G3 === "\0") {
              continue;
            }
            if (G3 === "\\") {
              const t8 = D3();
              if (t8 === "/" && u7.bash !== true) {
                continue;
              }
              if (t8 === "." || t8 === ";") {
                continue;
              }
              if (!t8) {
                G3 += "\\";
                push({ type: "text", value: G3 });
                continue;
              }
              const e9 = /^\\+/.exec(remaining());
              let n7 = 0;
              if (e9 && e9[0].length > 2) {
                n7 = e9[0].length;
                m5.index += n7;
                if (n7 % 2 !== 0) {
                  G3 += "\\";
                }
              }
              if (u7.unescape === true) {
                G3 = M2();
              } else {
                G3 += M2();
              }
              if (m5.brackets === 0) {
                push({ type: "text", value: G3 });
                continue;
              }
            }
            if (m5.brackets > 0 && (G3 !== "]" || B3.value === "[" || B3.value === "[^")) {
              if (u7.posix !== false && G3 === ":") {
                const t8 = B3.value.slice(1);
                if (t8.includes("[")) {
                  B3.posix = true;
                  if (t8.includes(":")) {
                    const t9 = B3.value.lastIndexOf("[");
                    const e9 = B3.value.slice(0, t9);
                    const u8 = B3.value.slice(t9 + 2);
                    const n7 = r5[u8];
                    if (n7) {
                      B3.value = e9 + n7;
                      m5.backtrack = true;
                      M2();
                      if (!f5.output && A3.indexOf(B3) === 1) {
                        f5.output = C3;
                      }
                      continue;
                    }
                  }
                }
              }
              if (G3 === "[" && D3() !== ":" || G3 === "-" && D3() === "]") {
                G3 = `\\${G3}`;
              }
              if (G3 === "]" && (B3.value === "[" || B3.value === "[^")) {
                G3 = `\\${G3}`;
              }
              if (u7.posix === true && G3 === "!" && B3.value === "[") {
                G3 = "^";
              }
              B3.value += G3;
              append({ value: G3 });
              continue;
            }
            if (m5.quotes === 1 && G3 !== '"') {
              G3 = o5.escapeRegex(G3);
              B3.value += G3;
              append({ value: G3 });
              continue;
            }
            if (G3 === '"') {
              m5.quotes = m5.quotes === 1 ? 0 : 1;
              if (u7.keepQuotes === true) {
                push({ type: "text", value: G3 });
              }
              continue;
            }
            if (G3 === "(") {
              increment("parens");
              push({ type: "paren", value: G3 });
              continue;
            }
            if (G3 === ")") {
              if (m5.parens === 0 && u7.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "("));
              }
              const t8 = w5[w5.length - 1];
              if (t8 && m5.parens === t8.parens + 1) {
                extglobClose(w5.pop());
                continue;
              }
              push({ type: "paren", value: G3, output: m5.parens ? ")" : "\\)" });
              decrement("parens");
              continue;
            }
            if (G3 === "[") {
              if (u7.nobracket === true || !remaining().includes("]")) {
                if (u7.nobracket !== true && u7.strictBrackets === true) {
                  throw new SyntaxError(syntaxError("closing", "]"));
                }
                G3 = `\\${G3}`;
              } else {
                increment("brackets");
              }
              push({ type: "bracket", value: G3 });
              continue;
            }
            if (G3 === "]") {
              if (u7.nobracket === true || B3 && B3.type === "bracket" && B3.value.length === 1) {
                push({ type: "text", value: G3, output: `\\${G3}` });
                continue;
              }
              if (m5.brackets === 0) {
                if (u7.strictBrackets === true) {
                  throw new SyntaxError(syntaxError("opening", "["));
                }
                push({ type: "text", value: G3, output: `\\${G3}` });
                continue;
              }
              decrement("brackets");
              const t8 = B3.value.slice(1);
              if (B3.posix !== true && t8[0] === "^" && !t8.includes("/")) {
                G3 = `/${G3}`;
              }
              B3.value += G3;
              append({ value: G3 });
              if (u7.literalBrackets === false || o5.hasRegexChars(t8)) {
                continue;
              }
              const e9 = o5.escapeRegex(B3.value);
              m5.output = m5.output.slice(0, -B3.value.length);
              if (u7.literalBrackets === true) {
                m5.output += e9;
                B3.value = e9;
                continue;
              }
              B3.value = `(${_2}${e9}|${B3.value})`;
              m5.output += B3.value;
              continue;
            }
            if (G3 === "{" && u7.nobrace !== true) {
              increment("braces");
              const t8 = { type: "brace", value: G3, output: "(", outputIndex: m5.output.length, tokensIndex: m5.tokens.length };
              N2.push(t8);
              push(t8);
              continue;
            }
            if (G3 === "}") {
              const t8 = N2[N2.length - 1];
              if (u7.nobrace === true || !t8) {
                push({ type: "text", value: G3, output: G3 });
                continue;
              }
              let e9 = ")";
              if (t8.dots === true) {
                const t9 = A3.slice();
                const n7 = [];
                for (let e10 = t9.length - 1; e10 >= 0; e10--) {
                  A3.pop();
                  if (t9[e10].type === "brace") {
                    break;
                  }
                  if (t9[e10].type !== "dots") {
                    n7.unshift(t9[e10].value);
                  }
                }
                e9 = expandRange(n7, u7);
                m5.backtrack = true;
              }
              if (t8.comma !== true && t8.dots !== true) {
                const u8 = m5.output.slice(0, t8.outputIndex);
                const n7 = m5.tokens.slice(t8.tokensIndex);
                t8.value = t8.output = "\\{";
                G3 = e9 = "\\}";
                m5.output = u8;
                for (const t9 of n7) {
                  m5.output += t9.output || t9.value;
                }
              }
              push({ type: "brace", value: G3, output: e9 });
              decrement("braces");
              N2.pop();
              continue;
            }
            if (G3 === "|") {
              if (w5.length > 0) {
                w5[w5.length - 1].conditions++;
              }
              push({ type: "text", value: G3 });
              continue;
            }
            if (G3 === ",") {
              let t8 = G3;
              const e9 = N2[N2.length - 1];
              if (e9 && I3[I3.length - 1] === "braces") {
                e9.comma = true;
                t8 = "|";
              }
              push({ type: "comma", value: G3, output: t8 });
              continue;
            }
            if (G3 === "/") {
              if (B3.type === "dot" && m5.index === m5.start + 1) {
                m5.start = m5.index + 1;
                m5.consumed = "";
                m5.output = "";
                A3.pop();
                B3 = f5;
                continue;
              }
              push({ type: "slash", value: G3, output: b5 });
              continue;
            }
            if (G3 === ".") {
              if (m5.braces > 0 && B3.type === "dot") {
                if (B3.value === ".") B3.output = h5;
                const t8 = N2[N2.length - 1];
                B3.type = "dots";
                B3.output += G3;
                B3.value += G3;
                t8.dots = true;
                continue;
              }
              if (m5.braces + m5.parens === 0 && B3.type !== "bos" && B3.type !== "slash") {
                push({ type: "text", value: G3, output: h5 });
                continue;
              }
              push({ type: "dot", value: G3, output: h5 });
              continue;
            }
            if (G3 === "?") {
              const t8 = B3 && B3.value === "(";
              if (!t8 && u7.noextglob !== true && D3() === "(" && D3(2) !== "?") {
                extglobOpen("qmark", G3);
                continue;
              }
              if (B3 && B3.type === "paren") {
                const t9 = D3();
                let e9 = G3;
                if (B3.value === "(" && !/[!=<:]/.test(t9) || t9 === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                  e9 = `\\${G3}`;
                }
                push({ type: "text", value: G3, output: e9 });
                continue;
              }
              if (u7.dot !== true && (B3.type === "slash" || B3.type === "bos")) {
                push({ type: "qmark", value: G3, output: v6 });
                continue;
              }
              push({ type: "qmark", value: G3, output: H3 });
              continue;
            }
            if (G3 === "!") {
              if (u7.noextglob !== true && D3() === "(") {
                if (D3(2) !== "?" || !/[!=<:]/.test(D3(3))) {
                  extglobOpen("negate", G3);
                  continue;
                }
              }
              if (u7.nonegate !== true && m5.index === 0) {
                negate3();
                continue;
              }
            }
            if (G3 === "+") {
              if (u7.noextglob !== true && D3() === "(" && D3(2) !== "?") {
                extglobOpen("plus", G3);
                continue;
              }
              if (B3 && B3.value === "(" || u7.regex === false) {
                push({ type: "plus", value: G3, output: g5 });
                continue;
              }
              if (B3 && (B3.type === "bracket" || B3.type === "paren" || B3.type === "brace") || m5.parens > 0) {
                push({ type: "plus", value: G3 });
                continue;
              }
              push({ type: "plus", value: g5 });
              continue;
            }
            if (G3 === "@") {
              if (u7.noextglob !== true && D3() === "(" && D3(2) !== "?") {
                push({ type: "at", extglob: true, value: G3, output: "" });
                continue;
              }
              push({ type: "text", value: G3 });
              continue;
            }
            if (G3 !== "*") {
              if (G3 === "$" || G3 === "^") {
                G3 = `\\${G3}`;
              }
              const t8 = a5.exec(remaining());
              if (t8) {
                G3 += t8[0];
                m5.index += t8[0].length;
              }
              push({ type: "text", value: G3 });
              continue;
            }
            if (B3 && (B3.type === "globstar" || B3.star === true)) {
              B3.type = "star";
              B3.star = true;
              B3.value += G3;
              B3.output = k5;
              m5.backtrack = true;
              m5.globstar = true;
              consume(G3);
              continue;
            }
            let e8 = remaining();
            if (u7.noextglob !== true && /^\([^?]/.test(e8)) {
              extglobOpen("star", G3);
              continue;
            }
            if (B3.type === "star") {
              if (u7.noglobstar === true) {
                consume(G3);
                continue;
              }
              const n7 = B3.prev;
              const o6 = n7.prev;
              const s6 = n7.type === "slash" || n7.type === "bos";
              const r6 = o6 && (o6.type === "star" || o6.type === "globstar");
              if (u7.bash === true && (!s6 || e8[0] && e8[0] !== "/")) {
                push({ type: "star", value: G3, output: "" });
                continue;
              }
              const a6 = m5.braces > 0 && (n7.type === "comma" || n7.type === "brace");
              const i6 = w5.length && (n7.type === "pipe" || n7.type === "paren");
              if (!s6 && n7.type !== "paren" && !a6 && !i6) {
                push({ type: "star", value: G3, output: "" });
                continue;
              }
              while (e8.slice(0, 3) === "/**") {
                const u8 = t7[m5.index + 4];
                if (u8 && u8 !== "/") {
                  break;
                }
                e8 = e8.slice(3);
                consume("/**", 3);
              }
              if (n7.type === "bos" && eos()) {
                B3.type = "globstar";
                B3.value += G3;
                B3.output = globstar(u7);
                m5.output = B3.output;
                m5.globstar = true;
                consume(G3);
                continue;
              }
              if (n7.type === "slash" && n7.prev.type !== "bos" && !r6 && eos()) {
                m5.output = m5.output.slice(0, -(n7.output + B3.output).length);
                n7.output = `(?:${n7.output}`;
                B3.type = "globstar";
                B3.output = globstar(u7) + (u7.strictSlashes ? ")" : "|$)");
                B3.value += G3;
                m5.globstar = true;
                m5.output += n7.output + B3.output;
                consume(G3);
                continue;
              }
              if (n7.type === "slash" && n7.prev.type !== "bos" && e8[0] === "/") {
                const t8 = e8[1] !== void 0 ? "|$" : "";
                m5.output = m5.output.slice(0, -(n7.output + B3.output).length);
                n7.output = `(?:${n7.output}`;
                B3.type = "globstar";
                B3.output = `${globstar(u7)}${b5}|${b5}${t8})`;
                B3.value += G3;
                m5.output += n7.output + B3.output;
                m5.globstar = true;
                consume(G3 + M2());
                push({ type: "slash", value: "/", output: "" });
                continue;
              }
              if (n7.type === "bos" && e8[0] === "/") {
                B3.type = "globstar";
                B3.value += G3;
                B3.output = `(?:^|${b5}|${globstar(u7)}${b5})`;
                m5.output = B3.output;
                m5.globstar = true;
                consume(G3 + M2());
                push({ type: "slash", value: "/", output: "" });
                continue;
              }
              m5.output = m5.output.slice(0, -B3.output.length);
              B3.type = "globstar";
              B3.output = globstar(u7);
              B3.value += G3;
              m5.output += B3.output;
              m5.globstar = true;
              consume(G3);
              continue;
            }
            const n6 = { type: "star", value: G3, output: k5 };
            if (u7.bash === true) {
              n6.output = ".*?";
              if (B3.type === "bos" || B3.type === "slash") {
                n6.output = T2 + n6.output;
              }
              push(n6);
              continue;
            }
            if (B3 && (B3.type === "bracket" || B3.type === "paren") && u7.regex === true) {
              n6.output = G3;
              push(n6);
              continue;
            }
            if (m5.index === m5.start || B3.type === "slash" || B3.type === "dot") {
              if (B3.type === "dot") {
                m5.output += x5;
                B3.output += x5;
              } else if (u7.dot === true) {
                m5.output += S2;
                B3.output += S2;
              } else {
                m5.output += T2;
                B3.output += T2;
              }
              if (D3() !== "*") {
                m5.output += C3;
                B3.output += C3;
              }
            }
            push(n6);
          }
          while (m5.brackets > 0) {
            if (u7.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
            m5.output = o5.escapeLast(m5.output, "[");
            decrement("brackets");
          }
          while (m5.parens > 0) {
            if (u7.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
            m5.output = o5.escapeLast(m5.output, "(");
            decrement("parens");
          }
          while (m5.braces > 0) {
            if (u7.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
            m5.output = o5.escapeLast(m5.output, "{");
            decrement("braces");
          }
          if (u7.strictSlashes !== true && (B3.type === "star" || B3.type === "bracket")) {
            push({ type: "maybe_slash", value: "", output: `${b5}?` });
          }
          if (m5.backtrack === true) {
            m5.output = "";
            for (const t8 of m5.tokens) {
              m5.output += t8.output != null ? t8.output : t8.value;
              if (t8.suffix) {
                m5.output += t8.suffix;
              }
            }
          }
          return m5;
        };
        parse3.fastpaths = (t7, e7) => {
          const u7 = { ...e7 };
          const r6 = typeof u7.maxLength === "number" ? Math.min(s5, u7.maxLength) : s5;
          const a6 = t7.length;
          if (a6 > r6) {
            throw new SyntaxError(`Input length: ${a6}, exceeds maximum allowed length: ${r6}`);
          }
          t7 = c5[t7] || t7;
          const { DOT_LITERAL: i6, SLASH_LITERAL: p5, ONE_CHAR: l5, DOTS_SLASH: f5, NO_DOT: A3, NO_DOTS: _2, NO_DOTS_SLASH: R2, STAR: E3, START_ANCHOR: h5 } = n5.globChars(u7.windows);
          const g5 = u7.dot ? _2 : A3;
          const b5 = u7.dot ? R2 : A3;
          const C3 = u7.capture ? "" : "?:";
          const y3 = { negated: false, prefix: "" };
          let $ = u7.bash === true ? ".*?" : E3;
          if (u7.capture) {
            $ = `(${$})`;
          }
          const globstar = (t8) => {
            if (t8.noglobstar === true) return $;
            return `(${C3}(?:(?!${h5}${t8.dot ? f5 : i6}).)*?)`;
          };
          const create = (t8) => {
            switch (t8) {
              case "*":
                return `${g5}${l5}${$}`;
              case ".*":
                return `${i6}${l5}${$}`;
              case "*.*":
                return `${g5}${$}${i6}${l5}${$}`;
              case "*/*":
                return `${g5}${$}${p5}${l5}${b5}${$}`;
              case "**":
                return g5 + globstar(u7);
              case "**/*":
                return `(?:${g5}${globstar(u7)}${p5})?${b5}${l5}${$}`;
              case "**/*.*":
                return `(?:${g5}${globstar(u7)}${p5})?${b5}${$}${i6}${l5}${$}`;
              case "**/.*":
                return `(?:${g5}${globstar(u7)}${p5})?${i6}${l5}${$}`;
              default: {
                const e8 = /^(.*?)\.(\w+)$/.exec(t8);
                if (!e8) return;
                const u8 = create(e8[1]);
                if (!u8) return;
                return u8 + i6 + e8[2];
              }
            }
          };
          const x5 = o5.removePrefix(t7, y3);
          let S2 = create(x5);
          if (S2 && u7.strictSlashes !== true) {
            S2 += `${p5}?`;
          }
          return S2;
        };
        t6.exports = parse3;
      }, 510: (t6, e6, u6) => {
        const n5 = u6(716);
        const o5 = u6(697);
        const s5 = u6(96);
        const r5 = u6(154);
        const isObject = (t7) => t7 && typeof t7 === "object" && !Array.isArray(t7);
        const picomatch = (t7, e7, u7 = false) => {
          if (Array.isArray(t7)) {
            const n7 = t7.map((t8) => picomatch(t8, e7, u7));
            const arrayMatcher = (t8) => {
              for (const e8 of n7) {
                const u8 = e8(t8);
                if (u8) return u8;
              }
              return false;
            };
            return arrayMatcher;
          }
          const n6 = isObject(t7) && t7.tokens && t7.input;
          if (t7 === "" || typeof t7 !== "string" && !n6) {
            throw new TypeError("Expected pattern to be a non-empty string");
          }
          const o6 = e7 || {};
          const s6 = o6.windows;
          const r6 = n6 ? picomatch.compileRe(t7, e7) : picomatch.makeRe(t7, e7, false, true);
          const a5 = r6.state;
          delete r6.state;
          let isIgnored = () => false;
          if (o6.ignore) {
            const t8 = { ...e7, ignore: null, onMatch: null, onResult: null };
            isIgnored = picomatch(o6.ignore, t8, u7);
          }
          const matcher = (u8, n7 = false) => {
            const { isMatch: i5, match: c5, output: p5 } = picomatch.test(u8, r6, e7, { glob: t7, posix: s6 });
            const l5 = { glob: t7, state: a5, regex: r6, posix: s6, input: u8, output: p5, match: c5, isMatch: i5 };
            if (typeof o6.onResult === "function") {
              o6.onResult(l5);
            }
            if (i5 === false) {
              l5.isMatch = false;
              return n7 ? l5 : false;
            }
            if (isIgnored(u8)) {
              if (typeof o6.onIgnore === "function") {
                o6.onIgnore(l5);
              }
              l5.isMatch = false;
              return n7 ? l5 : false;
            }
            if (typeof o6.onMatch === "function") {
              o6.onMatch(l5);
            }
            return n7 ? l5 : true;
          };
          if (u7) {
            matcher.state = a5;
          }
          return matcher;
        };
        picomatch.test = (t7, e7, u7, { glob: n6, posix: o6 } = {}) => {
          if (typeof t7 !== "string") {
            throw new TypeError("Expected input to be a string");
          }
          if (t7 === "") {
            return { isMatch: false, output: "" };
          }
          const r6 = u7 || {};
          const a5 = r6.format || (o6 ? s5.toPosixSlashes : null);
          let i5 = t7 === n6;
          let c5 = i5 && a5 ? a5(t7) : t7;
          if (i5 === false) {
            c5 = a5 ? a5(t7) : t7;
            i5 = c5 === n6;
          }
          if (i5 === false || r6.capture === true) {
            if (r6.matchBase === true || r6.basename === true) {
              i5 = picomatch.matchBase(t7, e7, u7, o6);
            } else {
              i5 = e7.exec(c5);
            }
          }
          return { isMatch: Boolean(i5), match: i5, output: c5 };
        };
        picomatch.matchBase = (t7, e7, u7) => {
          const n6 = e7 instanceof RegExp ? e7 : picomatch.makeRe(e7, u7);
          return n6.test(s5.basename(t7));
        };
        picomatch.isMatch = (t7, e7, u7) => picomatch(e7, u7)(t7);
        picomatch.parse = (t7, e7) => {
          if (Array.isArray(t7)) return t7.map((t8) => picomatch.parse(t8, e7));
          return o5(t7, { ...e7, fastpaths: false });
        };
        picomatch.scan = (t7, e7) => n5(t7, e7);
        picomatch.compileRe = (t7, e7, u7 = false, n6 = false) => {
          if (u7 === true) {
            return t7.output;
          }
          const o6 = e7 || {};
          const s6 = o6.contains ? "" : "^";
          const r6 = o6.contains ? "" : "$";
          let a5 = `${s6}(?:${t7.output})${r6}`;
          if (t7 && t7.negated === true) {
            a5 = `^(?!${a5}).*$`;
          }
          const i5 = picomatch.toRegex(a5, e7);
          if (n6 === true) {
            i5.state = t7;
          }
          return i5;
        };
        picomatch.makeRe = (t7, e7 = {}, u7 = false, n6 = false) => {
          if (!t7 || typeof t7 !== "string") {
            throw new TypeError("Expected a non-empty string");
          }
          let s6 = { negated: false, fastpaths: true };
          if (e7.fastpaths !== false && (t7[0] === "." || t7[0] === "*")) {
            s6.output = o5.fastpaths(t7, e7);
          }
          if (!s6.output) {
            s6 = o5(t7, e7);
          }
          return picomatch.compileRe(s6, e7, u7, n6);
        };
        picomatch.toRegex = (t7, e7) => {
          try {
            const u7 = e7 || {};
            return new RegExp(t7, u7.flags || (u7.nocase ? "i" : ""));
          } catch (t8) {
            if (e7 && e7.debug === true) throw t8;
            return /$^/;
          }
        };
        picomatch.constants = r5;
        t6.exports = picomatch;
      }, 716: (t6, e6, u6) => {
        const n5 = u6(96);
        const { CHAR_ASTERISK: o5, CHAR_AT: s5, CHAR_BACKWARD_SLASH: r5, CHAR_COMMA: a5, CHAR_DOT: i5, CHAR_EXCLAMATION_MARK: c5, CHAR_FORWARD_SLASH: p5, CHAR_LEFT_CURLY_BRACE: l5, CHAR_LEFT_PARENTHESES: f5, CHAR_LEFT_SQUARE_BRACKET: A3, CHAR_PLUS: _2, CHAR_QUESTION_MARK: R2, CHAR_RIGHT_CURLY_BRACE: E3, CHAR_RIGHT_PARENTHESES: h5, CHAR_RIGHT_SQUARE_BRACKET: g5 } = u6(154);
        const isPathSeparator = (t7) => t7 === p5 || t7 === r5;
        const depth = (t7) => {
          if (t7.isPrefix !== true) {
            t7.depth = t7.isGlobstar ? Infinity : 1;
          }
        };
        const scan = (t7, e7) => {
          const u7 = e7 || {};
          const b5 = t7.length - 1;
          const C3 = u7.parts === true || u7.scanToEnd === true;
          const y3 = [];
          const $ = [];
          const x5 = [];
          let S2 = t7;
          let H3 = -1;
          let v6 = 0;
          let d5 = 0;
          let L2 = false;
          let T2 = false;
          let O2 = false;
          let k5 = false;
          let m5 = false;
          let w5 = false;
          let N2 = false;
          let I3 = false;
          let B3 = false;
          let G3 = false;
          let D3 = 0;
          let M2;
          let P2;
          let K2 = { value: "", depth: 0, isGlob: false };
          const eos = () => H3 >= b5;
          const peek = () => S2.charCodeAt(H3 + 1);
          const advance = () => {
            M2 = P2;
            return S2.charCodeAt(++H3);
          };
          while (H3 < b5) {
            P2 = advance();
            let t8;
            if (P2 === r5) {
              N2 = K2.backslashes = true;
              P2 = advance();
              if (P2 === l5) {
                w5 = true;
              }
              continue;
            }
            if (w5 === true || P2 === l5) {
              D3++;
              while (eos() !== true && (P2 = advance())) {
                if (P2 === r5) {
                  N2 = K2.backslashes = true;
                  advance();
                  continue;
                }
                if (P2 === l5) {
                  D3++;
                  continue;
                }
                if (w5 !== true && P2 === i5 && (P2 = advance()) === i5) {
                  L2 = K2.isBrace = true;
                  O2 = K2.isGlob = true;
                  G3 = true;
                  if (C3 === true) {
                    continue;
                  }
                  break;
                }
                if (w5 !== true && P2 === a5) {
                  L2 = K2.isBrace = true;
                  O2 = K2.isGlob = true;
                  G3 = true;
                  if (C3 === true) {
                    continue;
                  }
                  break;
                }
                if (P2 === E3) {
                  D3--;
                  if (D3 === 0) {
                    w5 = false;
                    L2 = K2.isBrace = true;
                    G3 = true;
                    break;
                  }
                }
              }
              if (C3 === true) {
                continue;
              }
              break;
            }
            if (P2 === p5) {
              y3.push(H3);
              $.push(K2);
              K2 = { value: "", depth: 0, isGlob: false };
              if (G3 === true) continue;
              if (M2 === i5 && H3 === v6 + 1) {
                v6 += 2;
                continue;
              }
              d5 = H3 + 1;
              continue;
            }
            if (u7.noext !== true) {
              const t9 = P2 === _2 || P2 === s5 || P2 === o5 || P2 === R2 || P2 === c5;
              if (t9 === true && peek() === f5) {
                O2 = K2.isGlob = true;
                k5 = K2.isExtglob = true;
                G3 = true;
                if (P2 === c5 && H3 === v6) {
                  B3 = true;
                }
                if (C3 === true) {
                  while (eos() !== true && (P2 = advance())) {
                    if (P2 === r5) {
                      N2 = K2.backslashes = true;
                      P2 = advance();
                      continue;
                    }
                    if (P2 === h5) {
                      O2 = K2.isGlob = true;
                      G3 = true;
                      break;
                    }
                  }
                  continue;
                }
                break;
              }
            }
            if (P2 === o5) {
              if (M2 === o5) m5 = K2.isGlobstar = true;
              O2 = K2.isGlob = true;
              G3 = true;
              if (C3 === true) {
                continue;
              }
              break;
            }
            if (P2 === R2) {
              O2 = K2.isGlob = true;
              G3 = true;
              if (C3 === true) {
                continue;
              }
              break;
            }
            if (P2 === A3) {
              while (eos() !== true && (t8 = advance())) {
                if (t8 === r5) {
                  N2 = K2.backslashes = true;
                  advance();
                  continue;
                }
                if (t8 === g5) {
                  T2 = K2.isBracket = true;
                  O2 = K2.isGlob = true;
                  G3 = true;
                  break;
                }
              }
              if (C3 === true) {
                continue;
              }
              break;
            }
            if (u7.nonegate !== true && P2 === c5 && H3 === v6) {
              I3 = K2.negated = true;
              v6++;
              continue;
            }
            if (u7.noparen !== true && P2 === f5) {
              O2 = K2.isGlob = true;
              if (C3 === true) {
                while (eos() !== true && (P2 = advance())) {
                  if (P2 === f5) {
                    N2 = K2.backslashes = true;
                    P2 = advance();
                    continue;
                  }
                  if (P2 === h5) {
                    G3 = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
            if (O2 === true) {
              G3 = true;
              if (C3 === true) {
                continue;
              }
              break;
            }
          }
          if (u7.noext === true) {
            k5 = false;
            O2 = false;
          }
          let U2 = S2;
          let X2 = "";
          let F3 = "";
          if (v6 > 0) {
            X2 = S2.slice(0, v6);
            S2 = S2.slice(v6);
            d5 -= v6;
          }
          if (U2 && O2 === true && d5 > 0) {
            U2 = S2.slice(0, d5);
            F3 = S2.slice(d5);
          } else if (O2 === true) {
            U2 = "";
            F3 = S2;
          } else {
            U2 = S2;
          }
          if (U2 && U2 !== "" && U2 !== "/" && U2 !== S2) {
            if (isPathSeparator(U2.charCodeAt(U2.length - 1))) {
              U2 = U2.slice(0, -1);
            }
          }
          if (u7.unescape === true) {
            if (F3) F3 = n5.removeBackslashes(F3);
            if (U2 && N2 === true) {
              U2 = n5.removeBackslashes(U2);
            }
          }
          const Q2 = { prefix: X2, input: t7, start: v6, base: U2, glob: F3, isBrace: L2, isBracket: T2, isGlob: O2, isExtglob: k5, isGlobstar: m5, negated: I3, negatedExtglob: B3 };
          if (u7.tokens === true) {
            Q2.maxDepth = 0;
            if (!isPathSeparator(P2)) {
              $.push(K2);
            }
            Q2.tokens = $;
          }
          if (u7.parts === true || u7.tokens === true) {
            let e8;
            for (let n6 = 0; n6 < y3.length; n6++) {
              const o6 = e8 ? e8 + 1 : v6;
              const s6 = y3[n6];
              const r6 = t7.slice(o6, s6);
              if (u7.tokens) {
                if (n6 === 0 && v6 !== 0) {
                  $[n6].isPrefix = true;
                  $[n6].value = X2;
                } else {
                  $[n6].value = r6;
                }
                depth($[n6]);
                Q2.maxDepth += $[n6].depth;
              }
              if (n6 !== 0 || r6 !== "") {
                x5.push(r6);
              }
              e8 = s6;
            }
            if (e8 && e8 + 1 < t7.length) {
              const n6 = t7.slice(e8 + 1);
              x5.push(n6);
              if (u7.tokens) {
                $[$.length - 1].value = n6;
                depth($[$.length - 1]);
                Q2.maxDepth += $[$.length - 1].depth;
              }
            }
            Q2.slashes = y3;
            Q2.parts = x5;
          }
          return Q2;
        };
        t6.exports = scan;
      }, 96: (t6, e6, u6) => {
        const { REGEX_BACKSLASH: n5, REGEX_REMOVE_BACKSLASH: o5, REGEX_SPECIAL_CHARS: s5, REGEX_SPECIAL_CHARS_GLOBAL: r5 } = u6(154);
        e6.isObject = (t7) => t7 !== null && typeof t7 === "object" && !Array.isArray(t7);
        e6.hasRegexChars = (t7) => s5.test(t7);
        e6.isRegexChar = (t7) => t7.length === 1 && e6.hasRegexChars(t7);
        e6.escapeRegex = (t7) => t7.replace(r5, "\\$1");
        e6.toPosixSlashes = (t7) => t7.replace(n5, "/");
        e6.removeBackslashes = (t7) => t7.replace(o5, (t8) => t8 === "\\" ? "" : t8);
        e6.escapeLast = (t7, u7, n6) => {
          const o6 = t7.lastIndexOf(u7, n6);
          if (o6 === -1) return t7;
          if (t7[o6 - 1] === "\\") return e6.escapeLast(t7, u7, o6 - 1);
          return `${t7.slice(0, o6)}\\${t7.slice(o6)}`;
        };
        e6.removePrefix = (t7, e7 = {}) => {
          let u7 = t7;
          if (u7.startsWith("./")) {
            u7 = u7.slice(2);
            e7.prefix = "./";
          }
          return u7;
        };
        e6.wrapOutput = (t7, e7 = {}, u7 = {}) => {
          const n6 = u7.contains ? "" : "^";
          const o6 = u7.contains ? "" : "$";
          let s6 = `${n6}(?:${t7})${o6}`;
          if (e7.negated === true) {
            s6 = `(?:^(?!${s6}).*$)`;
          }
          return s6;
        };
        e6.basename = (t7, { windows: e7 } = {}) => {
          const u7 = t7.split(e7 ? /[\\/]/ : "/");
          const n6 = u7[u7.length - 1];
          if (n6 === "") {
            return u7[u7.length - 2];
          }
          return n6;
        };
      } };
      var e5 = {};
      function __nccwpck_require__(u6) {
        var n5 = e5[u6];
        if (n5 !== void 0) {
          return n5.exports;
        }
        var o5 = e5[u6] = { exports: {} };
        var s5 = true;
        try {
          t5[u6](o5, o5.exports, __nccwpck_require__);
          s5 = false;
        } finally {
          if (s5) delete e5[u6];
        }
        return o5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var u5 = __nccwpck_require__(170);
      module.exports = u5;
    })();
  }
});

// node_modules/next/dist/shared/lib/match-local-pattern.js
var require_match_local_pattern = __commonJS({
  "node_modules/next/dist/shared/lib/match-local-pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      hasLocalMatch: function() {
        return hasLocalMatch;
      },
      matchLocalPattern: function() {
        return matchLocalPattern;
      }
    });
    var _picomatch = require_picomatch();
    function matchLocalPattern(pattern, url) {
      if (pattern.search !== void 0) {
        if (pattern.search !== url.search) {
          return false;
        }
      }
      var _pattern_pathname;
      if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : "**", {
        dot: true
      }).test(url.pathname)) {
        return false;
      }
      return true;
    }
    function hasLocalMatch(localPatterns, urlPathAndQuery) {
      if (!localPatterns) {
        return true;
      }
      const url = new URL(urlPathAndQuery, "http://n");
      return localPatterns.some((p5) => matchLocalPattern(p5, url));
    }
  }
});

// node_modules/next/dist/shared/lib/match-remote-pattern.js
var require_match_remote_pattern = __commonJS({
  "node_modules/next/dist/shared/lib/match-remote-pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      hasRemoteMatch: function() {
        return hasRemoteMatch;
      },
      matchRemotePattern: function() {
        return matchRemotePattern;
      }
    });
    var _picomatch = require_picomatch();
    function matchRemotePattern(pattern, url) {
      if (pattern.protocol !== void 0) {
        if (pattern.protocol.replace(/:$/, "") !== url.protocol.replace(/:$/, "")) {
          return false;
        }
      }
      if (pattern.port !== void 0) {
        if (pattern.port !== url.port) {
          return false;
        }
      }
      if (pattern.hostname === void 0) {
        throw Object.defineProperty(new Error("Pattern should define hostname but found\n" + JSON.stringify(pattern)), "__NEXT_ERROR_CODE", {
          value: "E410",
          enumerable: false,
          configurable: true
        });
      } else {
        if (!(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)) {
          return false;
        }
      }
      if (pattern.search !== void 0) {
        if (pattern.search !== url.search) {
          return false;
        }
      }
      var _pattern_pathname;
      if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : "**", {
        dot: true
      }).test(url.pathname)) {
        return false;
      }
      return true;
    }
    function hasRemoteMatch(domains, remotePatterns, url) {
      return domains.some((domain) => url.hostname === domain) || remotePatterns.some((p5) => matchRemotePattern(p5, url));
    }
  }
});

// node_modules/next/dist/server/web/utils.js
var require_utils = __commonJS({
  "node_modules/next/dist/server/web/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      fromNodeOutgoingHttpHeaders: function() {
        return fromNodeOutgoingHttpHeaders;
      },
      normalizeNextQueryParam: function() {
        return normalizeNextQueryParam;
      },
      splitCookiesString: function() {
        return splitCookiesString;
      },
      toNodeOutgoingHttpHeaders: function() {
        return toNodeOutgoingHttpHeaders;
      },
      validateURL: function() {
        return validateURL;
      }
    });
    var _constants = require_constants();
    function fromNodeOutgoingHttpHeaders(nodeHeaders) {
      const headers = new Headers();
      for (let [key, value] of Object.entries(nodeHeaders)) {
        const values = Array.isArray(value) ? value : [
          value
        ];
        for (let v6 of values) {
          if (typeof v6 === "undefined") continue;
          if (typeof v6 === "number") {
            v6 = v6.toString();
          }
          headers.append(key, v6);
        }
      }
      return headers;
    }
    function splitCookiesString(cookiesString) {
      var cookiesStrings = [];
      var pos = 0;
      var start;
      var ch2;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace2() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch2 = cookiesString.charAt(pos);
        return ch2 !== "=" && ch2 !== ";" && ch2 !== ",";
      }
      while (pos < cookiesString.length) {
        start = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace2()) {
          ch2 = cookiesString.charAt(pos);
          if (ch2 === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace2();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start, lastComma));
              start = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    function toNodeOutgoingHttpHeaders(headers) {
      const nodeHeaders = {};
      const cookies = [];
      if (headers) {
        for (const [key, value] of headers.entries()) {
          if (key.toLowerCase() === "set-cookie") {
            cookies.push(...splitCookiesString(value));
            nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;
          } else {
            nodeHeaders[key] = value;
          }
        }
      }
      return nodeHeaders;
    }
    function validateURL(url) {
      try {
        return String(new URL(String(url)));
      } catch (error2) {
        throw Object.defineProperty(new Error(`URL is malformed "${String(url)}". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {
          cause: error2
        }), "__NEXT_ERROR_CODE", {
          value: "E61",
          enumerable: false,
          configurable: true
        });
      }
    }
    function normalizeNextQueryParam(key) {
      const prefixes = [
        _constants.NEXT_QUERY_PARAM_PREFIX,
        _constants.NEXT_INTERCEPTION_MARKER_PREFIX
      ];
      for (const prefix of prefixes) {
        if (key !== prefix && key.startsWith(prefix)) {
          return key.substring(prefix.length);
        }
      }
      return null;
    }
  }
});

// node_modules/next/dist/server/lib/mock-request.js
var require_mock_request = __commonJS({
  "node_modules/next/dist/server/lib/mock-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      MockedRequest: function() {
        return MockedRequest;
      },
      MockedResponse: function() {
        return MockedResponse;
      },
      createRequestResponseMocks: function() {
        return createRequestResponseMocks;
      }
    });
    var _stream = /* @__PURE__ */ _interop_require_default(__require("stream"));
    var _utils = require_utils();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var MockedRequest = class extends _stream.default.Readable {
      constructor({ url, headers, method, socket = null, readable }) {
        super(), // This is hardcoded for now, but can be updated to be configurable if needed.
        this.httpVersion = "1.0", this.httpVersionMajor = 1, this.httpVersionMinor = 0, // If we don't actually have a socket, we'll just use a mock one that
        // always returns false for the `encrypted` property and undefined for the
        // `remoteAddress` property.
        this.socket = new Proxy({}, {
          get: (_target, prop) => {
            if (prop !== "encrypted" && prop !== "remoteAddress") {
              throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
                value: "E52",
                enumerable: false,
                configurable: true
              });
            }
            if (prop === "remoteAddress") return void 0;
            return false;
          }
        });
        this.url = url;
        this.headers = headers;
        this.method = method;
        if (readable) {
          this.bodyReadable = readable;
          this.bodyReadable.on("end", () => this.emit("end"));
          this.bodyReadable.on("close", () => this.emit("close"));
        }
        if (socket) {
          this.socket = socket;
        }
      }
      get headersDistinct() {
        const headers = {};
        for (const [key, value] of Object.entries(this.headers)) {
          if (!value) continue;
          headers[key] = Array.isArray(value) ? value : [
            value
          ];
        }
        return headers;
      }
      _read(size) {
        if (this.bodyReadable) {
          return this.bodyReadable._read(size);
        } else {
          this.emit("end");
          this.emit("close");
        }
      }
      /**
      * The `connection` property is just an alias for the `socket` property.
      *
      * @deprecated — since v13.0.0 - Use socket instead.
      */
      get connection() {
        return this.socket;
      }
      // The following methods are not implemented as they are not used in the
      // Next.js codebase.
      get aborted() {
        throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
          value: "E52",
          enumerable: false,
          configurable: true
        });
      }
      get complete() {
        throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
          value: "E52",
          enumerable: false,
          configurable: true
        });
      }
      get trailers() {
        throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
          value: "E52",
          enumerable: false,
          configurable: true
        });
      }
      get trailersDistinct() {
        throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
          value: "E52",
          enumerable: false,
          configurable: true
        });
      }
      get rawTrailers() {
        throw Object.defineProperty(new Error("Method not implemented"), "__NEXT_ERROR_CODE", {
          value: "E52",
          enumerable: false,
          configurable: true
        });
      }
      get rawHeaders() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      setTimeout() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
    };
    var MockedResponse = class extends _stream.default.Writable {
      constructor(res = {}) {
        super(), this.statusMessage = "", this.finished = false, this.headersSent = false, /**
        * A list of buffers that have been written to the response.
        *
        * @internal - used internally by Next.js
        */
        this.buffers = [];
        this.statusCode = res.statusCode ?? 200;
        this.socket = res.socket ?? null;
        this.headers = res.headers ? (0, _utils.fromNodeOutgoingHttpHeaders)(res.headers) : new Headers();
        this.headPromise = new Promise((resolve) => {
          this.headPromiseResolve = resolve;
        });
        this.hasStreamed = new Promise((resolve, reject) => {
          this.on("finish", () => resolve(true));
          this.on("end", () => resolve(true));
          this.on("error", (err) => reject(err));
        }).then((val) => {
          this.headPromiseResolve == null ? void 0 : this.headPromiseResolve.call(this);
          return val;
        });
        if (res.resWriter) {
          this.resWriter = res.resWriter;
        }
      }
      appendHeader(name, value) {
        const values = Array.isArray(value) ? value : [
          value
        ];
        for (const v6 of values) {
          this.headers.append(name, v6);
        }
        return this;
      }
      /**
      * Returns true if the response has been sent, false otherwise.
      *
      * @internal - used internally by Next.js
      */
      get isSent() {
        return this.finished || this.headersSent;
      }
      /**
      * The `connection` property is just an alias for the `socket` property.
      *
      * @deprecated — since v13.0.0 - Use socket instead.
      */
      get connection() {
        return this.socket;
      }
      write(chunk) {
        if (this.resWriter) {
          return this.resWriter(chunk);
        }
        this.buffers.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));
        return true;
      }
      end() {
        this.finished = true;
        return super.end(...arguments);
      }
      /**
      * This method is a no-op because the `MockedResponse` instance is not
      * actually connected to a socket. This method is not specified on the
      * interface type for `ServerResponse` but is called by Node.js.
      *
      * @see https://github.com/nodejs/node/pull/7949
      */
      _implicitHeader() {
      }
      _write(chunk, _encoding, callback) {
        this.write(chunk);
        callback();
      }
      writeHead(statusCode, statusMessage, headers) {
        if (!headers && typeof statusMessage !== "string") {
          headers = statusMessage;
        } else if (typeof statusMessage === "string" && statusMessage.length > 0) {
          this.statusMessage = statusMessage;
        }
        if (headers) {
          if (Array.isArray(headers)) {
            for (let i5 = 0; i5 < headers.length; i5 += 2) {
              this.setHeader(headers[i5], headers[i5 + 1]);
            }
          } else {
            for (const [key, value] of Object.entries(headers)) {
              if (typeof value === "undefined") continue;
              this.setHeader(key, value);
            }
          }
        }
        this.statusCode = statusCode;
        this.headersSent = true;
        this.headPromiseResolve == null ? void 0 : this.headPromiseResolve.call(this);
        return this;
      }
      hasHeader(name) {
        return this.headers.has(name);
      }
      getHeader(name) {
        return this.headers.get(name) ?? void 0;
      }
      getHeaders() {
        return (0, _utils.toNodeOutgoingHttpHeaders)(this.headers);
      }
      getHeaderNames() {
        return Array.from(this.headers.keys());
      }
      setHeader(name, value) {
        if (Array.isArray(value)) {
          this.headers.delete(name);
          for (const v6 of value) {
            this.headers.append(name, v6);
          }
        } else if (typeof value === "number") {
          this.headers.set(name, value.toString());
        } else {
          this.headers.set(name, value);
        }
        return this;
      }
      removeHeader(name) {
        this.headers.delete(name);
      }
      flushHeaders() {
      }
      // The following methods are not implemented as they are not used in the
      // Next.js codebase.
      get strictContentLength() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      writeEarlyHints() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get req() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      assignSocket() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      detachSocket() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      writeContinue() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      writeProcessing() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get upgrading() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get chunkedEncoding() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get shouldKeepAlive() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get useChunkedEncodingByDefault() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      get sendDate() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      setTimeout() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      addTrailers() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
      setHeaders() {
        throw Object.defineProperty(new Error("Method not implemented."), "__NEXT_ERROR_CODE", {
          value: "E41",
          enumerable: false,
          configurable: true
        });
      }
    };
    function createRequestResponseMocks({ url, headers = {}, method = "GET", bodyReadable, resWriter, socket = null }) {
      return {
        req: new MockedRequest({
          url,
          headers,
          method,
          socket,
          readable: bodyReadable
        }),
        res: new MockedResponse({
          socket,
          resWriter
        })
      };
    }
  }
});

// node_modules/next/dist/lib/detached-promise.js
var require_detached_promise = __commonJS({
  "node_modules/next/dist/lib/detached-promise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DetachedPromise", {
      enumerable: true,
      get: function() {
        return DetachedPromise;
      }
    });
    var DetachedPromise = class {
      constructor() {
        let resolve;
        let reject;
        this.promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
        this.resolve = resolve;
        this.reject = reject;
      }
    };
  }
});

// node_modules/next/dist/lib/batcher.js
var require_batcher = __commonJS({
  "node_modules/next/dist/lib/batcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Batcher", {
      enumerable: true,
      get: function() {
        return Batcher;
      }
    });
    var _detachedpromise = require_detached_promise();
    var Batcher = class _Batcher {
      constructor(cacheKeyFn, schedulerFn = (fn) => fn()) {
        this.cacheKeyFn = cacheKeyFn;
        this.schedulerFn = schedulerFn;
        this.pending = /* @__PURE__ */ new Map();
      }
      static create(options) {
        return new _Batcher(options == null ? void 0 : options.cacheKeyFn, options == null ? void 0 : options.schedulerFn);
      }
      /**
      * Wraps a function in a promise that will be resolved or rejected only once
      * for a given key. This will allow multiple calls to the function to be
      * made, but only one will be executed at a time. The result of the first
      * call will be returned to all callers.
      *
      * @param key the key to use for the cache
      * @param fn the function to wrap
      * @returns a promise that resolves to the result of the function
      */
      async batch(key, fn) {
        const cacheKey = this.cacheKeyFn ? await this.cacheKeyFn(key) : key;
        if (cacheKey === null) {
          return fn(cacheKey, Promise.resolve);
        }
        const pending = this.pending.get(cacheKey);
        if (pending) return pending;
        const { promise, resolve, reject } = new _detachedpromise.DetachedPromise();
        this.pending.set(cacheKey, promise);
        this.schedulerFn(async () => {
          try {
            const result = await fn(cacheKey, resolve);
            resolve(result);
          } catch (err) {
            reject(err);
          } finally {
            this.pending.delete(cacheKey);
          }
        });
        return promise;
      }
    };
  }
});

// node_modules/next/dist/lib/scheduler.js
var require_scheduler = __commonJS({
  "node_modules/next/dist/lib/scheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      atLeastOneTask: function() {
        return atLeastOneTask;
      },
      scheduleImmediate: function() {
        return scheduleImmediate;
      },
      scheduleOnNextTick: function() {
        return scheduleOnNextTick;
      },
      waitAtLeastOneReactRenderTask: function() {
        return waitAtLeastOneReactRenderTask;
      }
    });
    var scheduleOnNextTick = (cb2) => {
      Promise.resolve().then(() => {
        if (process.env.NEXT_RUNTIME === "edge") {
          setTimeout(cb2, 0);
        } else {
          process.nextTick(cb2);
        }
      });
    };
    var scheduleImmediate = (cb2) => {
      if (process.env.NEXT_RUNTIME === "edge") {
        setTimeout(cb2, 0);
      } else {
        setImmediate(cb2);
      }
    };
    function atLeastOneTask() {
      return new Promise((resolve) => scheduleImmediate(resolve));
    }
    function waitAtLeastOneReactRenderTask() {
      if (process.env.NEXT_RUNTIME === "edge") {
        return new Promise((r5) => setTimeout(r5, 0));
      } else {
        return new Promise((r5) => setImmediate(r5));
      }
    }
  }
});

// node_modules/next/dist/server/response-cache/types.js
var require_types = __commonJS({
  "node_modules/next/dist/server/response-cache/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      CachedRouteKind: function() {
        return CachedRouteKind;
      },
      IncrementalCacheKind: function() {
        return IncrementalCacheKind;
      }
    });
    var CachedRouteKind = /* @__PURE__ */ function(CachedRouteKind2) {
      CachedRouteKind2["APP_PAGE"] = "APP_PAGE";
      CachedRouteKind2["APP_ROUTE"] = "APP_ROUTE";
      CachedRouteKind2["PAGES"] = "PAGES";
      CachedRouteKind2["FETCH"] = "FETCH";
      CachedRouteKind2["REDIRECT"] = "REDIRECT";
      CachedRouteKind2["IMAGE"] = "IMAGE";
      return CachedRouteKind2;
    }({});
    var IncrementalCacheKind = /* @__PURE__ */ function(IncrementalCacheKind2) {
      IncrementalCacheKind2["APP_PAGE"] = "APP_PAGE";
      IncrementalCacheKind2["APP_ROUTE"] = "APP_ROUTE";
      IncrementalCacheKind2["PAGES"] = "PAGES";
      IncrementalCacheKind2["FETCH"] = "FETCH";
      IncrementalCacheKind2["IMAGE"] = "IMAGE";
      return IncrementalCacheKind2;
    }({});
  }
});

// node_modules/next/dist/server/lib/trace/constants.js
var require_constants2 = __commonJS({
  "node_modules/next/dist/server/lib/trace/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      AppRenderSpan: function() {
        return AppRenderSpan;
      },
      AppRouteRouteHandlersSpan: function() {
        return AppRouteRouteHandlersSpan;
      },
      BaseServerSpan: function() {
        return BaseServerSpan;
      },
      LoadComponentsSpan: function() {
        return LoadComponentsSpan;
      },
      LogSpanAllowList: function() {
        return LogSpanAllowList;
      },
      MiddlewareSpan: function() {
        return MiddlewareSpan;
      },
      NextNodeServerSpan: function() {
        return NextNodeServerSpan;
      },
      NextServerSpan: function() {
        return NextServerSpan;
      },
      NextVanillaSpanAllowlist: function() {
        return NextVanillaSpanAllowlist;
      },
      NodeSpan: function() {
        return NodeSpan;
      },
      RenderSpan: function() {
        return RenderSpan;
      },
      ResolveMetadataSpan: function() {
        return ResolveMetadataSpan;
      },
      RouterSpan: function() {
        return RouterSpan;
      },
      StartServerSpan: function() {
        return StartServerSpan;
      }
    });
    var BaseServerSpan = /* @__PURE__ */ function(BaseServerSpan2) {
      BaseServerSpan2["handleRequest"] = "BaseServer.handleRequest";
      BaseServerSpan2["run"] = "BaseServer.run";
      BaseServerSpan2["pipe"] = "BaseServer.pipe";
      BaseServerSpan2["getStaticHTML"] = "BaseServer.getStaticHTML";
      BaseServerSpan2["render"] = "BaseServer.render";
      BaseServerSpan2["renderToResponseWithComponents"] = "BaseServer.renderToResponseWithComponents";
      BaseServerSpan2["renderToResponse"] = "BaseServer.renderToResponse";
      BaseServerSpan2["renderToHTML"] = "BaseServer.renderToHTML";
      BaseServerSpan2["renderError"] = "BaseServer.renderError";
      BaseServerSpan2["renderErrorToResponse"] = "BaseServer.renderErrorToResponse";
      BaseServerSpan2["renderErrorToHTML"] = "BaseServer.renderErrorToHTML";
      BaseServerSpan2["render404"] = "BaseServer.render404";
      return BaseServerSpan2;
    }(BaseServerSpan || {});
    var LoadComponentsSpan = /* @__PURE__ */ function(LoadComponentsSpan2) {
      LoadComponentsSpan2["loadDefaultErrorComponents"] = "LoadComponents.loadDefaultErrorComponents";
      LoadComponentsSpan2["loadComponents"] = "LoadComponents.loadComponents";
      return LoadComponentsSpan2;
    }(LoadComponentsSpan || {});
    var NextServerSpan = /* @__PURE__ */ function(NextServerSpan2) {
      NextServerSpan2["getRequestHandler"] = "NextServer.getRequestHandler";
      NextServerSpan2["getServer"] = "NextServer.getServer";
      NextServerSpan2["getServerRequestHandler"] = "NextServer.getServerRequestHandler";
      NextServerSpan2["createServer"] = "createServer.createServer";
      return NextServerSpan2;
    }(NextServerSpan || {});
    var NextNodeServerSpan = /* @__PURE__ */ function(NextNodeServerSpan2) {
      NextNodeServerSpan2["compression"] = "NextNodeServer.compression";
      NextNodeServerSpan2["getBuildId"] = "NextNodeServer.getBuildId";
      NextNodeServerSpan2["createComponentTree"] = "NextNodeServer.createComponentTree";
      NextNodeServerSpan2["clientComponentLoading"] = "NextNodeServer.clientComponentLoading";
      NextNodeServerSpan2["getLayoutOrPageModule"] = "NextNodeServer.getLayoutOrPageModule";
      NextNodeServerSpan2["generateStaticRoutes"] = "NextNodeServer.generateStaticRoutes";
      NextNodeServerSpan2["generateFsStaticRoutes"] = "NextNodeServer.generateFsStaticRoutes";
      NextNodeServerSpan2["generatePublicRoutes"] = "NextNodeServer.generatePublicRoutes";
      NextNodeServerSpan2["generateImageRoutes"] = "NextNodeServer.generateImageRoutes.route";
      NextNodeServerSpan2["sendRenderResult"] = "NextNodeServer.sendRenderResult";
      NextNodeServerSpan2["proxyRequest"] = "NextNodeServer.proxyRequest";
      NextNodeServerSpan2["runApi"] = "NextNodeServer.runApi";
      NextNodeServerSpan2["render"] = "NextNodeServer.render";
      NextNodeServerSpan2["renderHTML"] = "NextNodeServer.renderHTML";
      NextNodeServerSpan2["imageOptimizer"] = "NextNodeServer.imageOptimizer";
      NextNodeServerSpan2["getPagePath"] = "NextNodeServer.getPagePath";
      NextNodeServerSpan2["getRoutesManifest"] = "NextNodeServer.getRoutesManifest";
      NextNodeServerSpan2["findPageComponents"] = "NextNodeServer.findPageComponents";
      NextNodeServerSpan2["getFontManifest"] = "NextNodeServer.getFontManifest";
      NextNodeServerSpan2["getServerComponentManifest"] = "NextNodeServer.getServerComponentManifest";
      NextNodeServerSpan2["getRequestHandler"] = "NextNodeServer.getRequestHandler";
      NextNodeServerSpan2["renderToHTML"] = "NextNodeServer.renderToHTML";
      NextNodeServerSpan2["renderError"] = "NextNodeServer.renderError";
      NextNodeServerSpan2["renderErrorToHTML"] = "NextNodeServer.renderErrorToHTML";
      NextNodeServerSpan2["render404"] = "NextNodeServer.render404";
      NextNodeServerSpan2["startResponse"] = "NextNodeServer.startResponse";
      NextNodeServerSpan2["route"] = "route";
      NextNodeServerSpan2["onProxyReq"] = "onProxyReq";
      NextNodeServerSpan2["apiResolver"] = "apiResolver";
      NextNodeServerSpan2["internalFetch"] = "internalFetch";
      return NextNodeServerSpan2;
    }(NextNodeServerSpan || {});
    var StartServerSpan = /* @__PURE__ */ function(StartServerSpan2) {
      StartServerSpan2["startServer"] = "startServer.startServer";
      return StartServerSpan2;
    }(StartServerSpan || {});
    var RenderSpan = /* @__PURE__ */ function(RenderSpan2) {
      RenderSpan2["getServerSideProps"] = "Render.getServerSideProps";
      RenderSpan2["getStaticProps"] = "Render.getStaticProps";
      RenderSpan2["renderToString"] = "Render.renderToString";
      RenderSpan2["renderDocument"] = "Render.renderDocument";
      RenderSpan2["createBodyResult"] = "Render.createBodyResult";
      return RenderSpan2;
    }(RenderSpan || {});
    var AppRenderSpan = /* @__PURE__ */ function(AppRenderSpan2) {
      AppRenderSpan2["renderToString"] = "AppRender.renderToString";
      AppRenderSpan2["renderToReadableStream"] = "AppRender.renderToReadableStream";
      AppRenderSpan2["getBodyResult"] = "AppRender.getBodyResult";
      AppRenderSpan2["fetch"] = "AppRender.fetch";
      return AppRenderSpan2;
    }(AppRenderSpan || {});
    var RouterSpan = /* @__PURE__ */ function(RouterSpan2) {
      RouterSpan2["executeRoute"] = "Router.executeRoute";
      return RouterSpan2;
    }(RouterSpan || {});
    var NodeSpan = /* @__PURE__ */ function(NodeSpan2) {
      NodeSpan2["runHandler"] = "Node.runHandler";
      return NodeSpan2;
    }(NodeSpan || {});
    var AppRouteRouteHandlersSpan = /* @__PURE__ */ function(AppRouteRouteHandlersSpan2) {
      AppRouteRouteHandlersSpan2["runHandler"] = "AppRouteRouteHandlers.runHandler";
      return AppRouteRouteHandlersSpan2;
    }(AppRouteRouteHandlersSpan || {});
    var ResolveMetadataSpan = /* @__PURE__ */ function(ResolveMetadataSpan2) {
      ResolveMetadataSpan2["generateMetadata"] = "ResolveMetadata.generateMetadata";
      ResolveMetadataSpan2["generateViewport"] = "ResolveMetadata.generateViewport";
      return ResolveMetadataSpan2;
    }(ResolveMetadataSpan || {});
    var MiddlewareSpan = /* @__PURE__ */ function(MiddlewareSpan2) {
      MiddlewareSpan2["execute"] = "Middleware.execute";
      return MiddlewareSpan2;
    }(MiddlewareSpan || {});
    var NextVanillaSpanAllowlist = [
      "Middleware.execute",
      "BaseServer.handleRequest",
      "Render.getServerSideProps",
      "Render.getStaticProps",
      "AppRender.fetch",
      "AppRender.getBodyResult",
      "Render.renderDocument",
      "Node.runHandler",
      "AppRouteRouteHandlers.runHandler",
      "ResolveMetadata.generateMetadata",
      "ResolveMetadata.generateViewport",
      "NextNodeServer.createComponentTree",
      "NextNodeServer.findPageComponents",
      "NextNodeServer.getLayoutOrPageModule",
      "NextNodeServer.startResponse",
      "NextNodeServer.clientComponentLoading"
    ];
    var LogSpanAllowList = [
      "NextNodeServer.findPageComponents",
      "NextNodeServer.createComponentTree",
      "NextNodeServer.clientComponentLoading"
    ];
  }
});

// node_modules/next/dist/shared/lib/is-thenable.js
var require_is_thenable = __commonJS({
  "node_modules/next/dist/shared/lib/is-thenable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isThenable", {
      enumerable: true,
      get: function() {
        return isThenable;
      }
    });
    function isThenable(promise) {
      return promise !== null && typeof promise === "object" && "then" in promise && typeof promise.then === "function";
    }
  }
});

// node_modules/next/dist/compiled/@opentelemetry/api/index.js
var require_api = __commonJS({
  "node_modules/next/dist/compiled/@opentelemetry/api/index.js"(exports, module) {
    (() => {
      "use strict";
      var e5 = { 491: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.ContextAPI = void 0;
        const n5 = r6(223);
        const a5 = r6(172);
        const o5 = r6(930);
        const i5 = "context";
        const c5 = new n5.NoopContextManager();
        class ContextAPI {
          constructor() {
          }
          static getInstance() {
            if (!this._instance) {
              this._instance = new ContextAPI();
            }
            return this._instance;
          }
          setGlobalContextManager(e7) {
            return (0, a5.registerGlobal)(i5, e7, o5.DiagAPI.instance());
          }
          active() {
            return this._getContextManager().active();
          }
          with(e7, t7, r7, ...n6) {
            return this._getContextManager().with(e7, t7, r7, ...n6);
          }
          bind(e7, t7) {
            return this._getContextManager().bind(e7, t7);
          }
          _getContextManager() {
            return (0, a5.getGlobal)(i5) || c5;
          }
          disable() {
            this._getContextManager().disable();
            (0, a5.unregisterGlobal)(i5, o5.DiagAPI.instance());
          }
        }
        t6.ContextAPI = ContextAPI;
      }, 930: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.DiagAPI = void 0;
        const n5 = r6(56);
        const a5 = r6(912);
        const o5 = r6(957);
        const i5 = r6(172);
        const c5 = "diag";
        class DiagAPI {
          constructor() {
            function _logProxy(e8) {
              return function(...t7) {
                const r7 = (0, i5.getGlobal)("diag");
                if (!r7) return;
                return r7[e8](...t7);
              };
            }
            const e7 = this;
            const setLogger = (t7, r7 = { logLevel: o5.DiagLogLevel.INFO }) => {
              var n6, c6, s5;
              if (t7 === e7) {
                const t8 = new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
                e7.error((n6 = t8.stack) !== null && n6 !== void 0 ? n6 : t8.message);
                return false;
              }
              if (typeof r7 === "number") {
                r7 = { logLevel: r7 };
              }
              const u5 = (0, i5.getGlobal)("diag");
              const l5 = (0, a5.createLogLevelDiagLogger)((c6 = r7.logLevel) !== null && c6 !== void 0 ? c6 : o5.DiagLogLevel.INFO, t7);
              if (u5 && !r7.suppressOverrideMessage) {
                const e8 = (s5 = new Error().stack) !== null && s5 !== void 0 ? s5 : "<failed to generate stacktrace>";
                u5.warn(`Current logger will be overwritten from ${e8}`);
                l5.warn(`Current logger will overwrite one already registered from ${e8}`);
              }
              return (0, i5.registerGlobal)("diag", l5, e7, true);
            };
            e7.setLogger = setLogger;
            e7.disable = () => {
              (0, i5.unregisterGlobal)(c5, e7);
            };
            e7.createComponentLogger = (e8) => new n5.DiagComponentLogger(e8);
            e7.verbose = _logProxy("verbose");
            e7.debug = _logProxy("debug");
            e7.info = _logProxy("info");
            e7.warn = _logProxy("warn");
            e7.error = _logProxy("error");
          }
          static instance() {
            if (!this._instance) {
              this._instance = new DiagAPI();
            }
            return this._instance;
          }
        }
        t6.DiagAPI = DiagAPI;
      }, 653: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.MetricsAPI = void 0;
        const n5 = r6(660);
        const a5 = r6(172);
        const o5 = r6(930);
        const i5 = "metrics";
        class MetricsAPI {
          constructor() {
          }
          static getInstance() {
            if (!this._instance) {
              this._instance = new MetricsAPI();
            }
            return this._instance;
          }
          setGlobalMeterProvider(e7) {
            return (0, a5.registerGlobal)(i5, e7, o5.DiagAPI.instance());
          }
          getMeterProvider() {
            return (0, a5.getGlobal)(i5) || n5.NOOP_METER_PROVIDER;
          }
          getMeter(e7, t7, r7) {
            return this.getMeterProvider().getMeter(e7, t7, r7);
          }
          disable() {
            (0, a5.unregisterGlobal)(i5, o5.DiagAPI.instance());
          }
        }
        t6.MetricsAPI = MetricsAPI;
      }, 181: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.PropagationAPI = void 0;
        const n5 = r6(172);
        const a5 = r6(874);
        const o5 = r6(194);
        const i5 = r6(277);
        const c5 = r6(369);
        const s5 = r6(930);
        const u5 = "propagation";
        const l5 = new a5.NoopTextMapPropagator();
        class PropagationAPI {
          constructor() {
            this.createBaggage = c5.createBaggage;
            this.getBaggage = i5.getBaggage;
            this.getActiveBaggage = i5.getActiveBaggage;
            this.setBaggage = i5.setBaggage;
            this.deleteBaggage = i5.deleteBaggage;
          }
          static getInstance() {
            if (!this._instance) {
              this._instance = new PropagationAPI();
            }
            return this._instance;
          }
          setGlobalPropagator(e7) {
            return (0, n5.registerGlobal)(u5, e7, s5.DiagAPI.instance());
          }
          inject(e7, t7, r7 = o5.defaultTextMapSetter) {
            return this._getGlobalPropagator().inject(e7, t7, r7);
          }
          extract(e7, t7, r7 = o5.defaultTextMapGetter) {
            return this._getGlobalPropagator().extract(e7, t7, r7);
          }
          fields() {
            return this._getGlobalPropagator().fields();
          }
          disable() {
            (0, n5.unregisterGlobal)(u5, s5.DiagAPI.instance());
          }
          _getGlobalPropagator() {
            return (0, n5.getGlobal)(u5) || l5;
          }
        }
        t6.PropagationAPI = PropagationAPI;
      }, 997: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.TraceAPI = void 0;
        const n5 = r6(172);
        const a5 = r6(846);
        const o5 = r6(139);
        const i5 = r6(607);
        const c5 = r6(930);
        const s5 = "trace";
        class TraceAPI {
          constructor() {
            this._proxyTracerProvider = new a5.ProxyTracerProvider();
            this.wrapSpanContext = o5.wrapSpanContext;
            this.isSpanContextValid = o5.isSpanContextValid;
            this.deleteSpan = i5.deleteSpan;
            this.getSpan = i5.getSpan;
            this.getActiveSpan = i5.getActiveSpan;
            this.getSpanContext = i5.getSpanContext;
            this.setSpan = i5.setSpan;
            this.setSpanContext = i5.setSpanContext;
          }
          static getInstance() {
            if (!this._instance) {
              this._instance = new TraceAPI();
            }
            return this._instance;
          }
          setGlobalTracerProvider(e7) {
            const t7 = (0, n5.registerGlobal)(s5, this._proxyTracerProvider, c5.DiagAPI.instance());
            if (t7) {
              this._proxyTracerProvider.setDelegate(e7);
            }
            return t7;
          }
          getTracerProvider() {
            return (0, n5.getGlobal)(s5) || this._proxyTracerProvider;
          }
          getTracer(e7, t7) {
            return this.getTracerProvider().getTracer(e7, t7);
          }
          disable() {
            (0, n5.unregisterGlobal)(s5, c5.DiagAPI.instance());
            this._proxyTracerProvider = new a5.ProxyTracerProvider();
          }
        }
        t6.TraceAPI = TraceAPI;
      }, 277: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.deleteBaggage = t6.setBaggage = t6.getActiveBaggage = t6.getBaggage = void 0;
        const n5 = r6(491);
        const a5 = r6(780);
        const o5 = (0, a5.createContextKey)("OpenTelemetry Baggage Key");
        function getBaggage(e7) {
          return e7.getValue(o5) || void 0;
        }
        t6.getBaggage = getBaggage;
        function getActiveBaggage() {
          return getBaggage(n5.ContextAPI.getInstance().active());
        }
        t6.getActiveBaggage = getActiveBaggage;
        function setBaggage(e7, t7) {
          return e7.setValue(o5, t7);
        }
        t6.setBaggage = setBaggage;
        function deleteBaggage(e7) {
          return e7.deleteValue(o5);
        }
        t6.deleteBaggage = deleteBaggage;
      }, 993: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.BaggageImpl = void 0;
        class BaggageImpl {
          constructor(e7) {
            this._entries = e7 ? new Map(e7) : /* @__PURE__ */ new Map();
          }
          getEntry(e7) {
            const t7 = this._entries.get(e7);
            if (!t7) {
              return void 0;
            }
            return Object.assign({}, t7);
          }
          getAllEntries() {
            return Array.from(this._entries.entries()).map(([e7, t7]) => [e7, t7]);
          }
          setEntry(e7, t7) {
            const r6 = new BaggageImpl(this._entries);
            r6._entries.set(e7, t7);
            return r6;
          }
          removeEntry(e7) {
            const t7 = new BaggageImpl(this._entries);
            t7._entries.delete(e7);
            return t7;
          }
          removeEntries(...e7) {
            const t7 = new BaggageImpl(this._entries);
            for (const r6 of e7) {
              t7._entries.delete(r6);
            }
            return t7;
          }
          clear() {
            return new BaggageImpl();
          }
        }
        t6.BaggageImpl = BaggageImpl;
      }, 830: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.baggageEntryMetadataSymbol = void 0;
        t6.baggageEntryMetadataSymbol = Symbol("BaggageEntryMetadata");
      }, 369: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.baggageEntryMetadataFromString = t6.createBaggage = void 0;
        const n5 = r6(930);
        const a5 = r6(993);
        const o5 = r6(830);
        const i5 = n5.DiagAPI.instance();
        function createBaggage(e7 = {}) {
          return new a5.BaggageImpl(new Map(Object.entries(e7)));
        }
        t6.createBaggage = createBaggage;
        function baggageEntryMetadataFromString(e7) {
          if (typeof e7 !== "string") {
            i5.error(`Cannot create baggage metadata from unknown type: ${typeof e7}`);
            e7 = "";
          }
          return { __TYPE__: o5.baggageEntryMetadataSymbol, toString() {
            return e7;
          } };
        }
        t6.baggageEntryMetadataFromString = baggageEntryMetadataFromString;
      }, 67: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.context = void 0;
        const n5 = r6(491);
        t6.context = n5.ContextAPI.getInstance();
      }, 223: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NoopContextManager = void 0;
        const n5 = r6(780);
        class NoopContextManager {
          active() {
            return n5.ROOT_CONTEXT;
          }
          with(e7, t7, r7, ...n6) {
            return t7.call(r7, ...n6);
          }
          bind(e7, t7) {
            return t7;
          }
          enable() {
            return this;
          }
          disable() {
            return this;
          }
        }
        t6.NoopContextManager = NoopContextManager;
      }, 780: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.ROOT_CONTEXT = t6.createContextKey = void 0;
        function createContextKey(e7) {
          return Symbol.for(e7);
        }
        t6.createContextKey = createContextKey;
        class BaseContext {
          constructor(e7) {
            const t7 = this;
            t7._currentContext = e7 ? new Map(e7) : /* @__PURE__ */ new Map();
            t7.getValue = (e8) => t7._currentContext.get(e8);
            t7.setValue = (e8, r6) => {
              const n5 = new BaseContext(t7._currentContext);
              n5._currentContext.set(e8, r6);
              return n5;
            };
            t7.deleteValue = (e8) => {
              const r6 = new BaseContext(t7._currentContext);
              r6._currentContext.delete(e8);
              return r6;
            };
          }
        }
        t6.ROOT_CONTEXT = new BaseContext();
      }, 506: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.diag = void 0;
        const n5 = r6(930);
        t6.diag = n5.DiagAPI.instance();
      }, 56: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.DiagComponentLogger = void 0;
        const n5 = r6(172);
        class DiagComponentLogger {
          constructor(e7) {
            this._namespace = e7.namespace || "DiagComponentLogger";
          }
          debug(...e7) {
            return logProxy("debug", this._namespace, e7);
          }
          error(...e7) {
            return logProxy("error", this._namespace, e7);
          }
          info(...e7) {
            return logProxy("info", this._namespace, e7);
          }
          warn(...e7) {
            return logProxy("warn", this._namespace, e7);
          }
          verbose(...e7) {
            return logProxy("verbose", this._namespace, e7);
          }
        }
        t6.DiagComponentLogger = DiagComponentLogger;
        function logProxy(e7, t7, r7) {
          const a5 = (0, n5.getGlobal)("diag");
          if (!a5) {
            return;
          }
          r7.unshift(t7);
          return a5[e7](...r7);
        }
      }, 972: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.DiagConsoleLogger = void 0;
        const r6 = [{ n: "error", c: "error" }, { n: "warn", c: "warn" }, { n: "info", c: "info" }, { n: "debug", c: "debug" }, { n: "verbose", c: "trace" }];
        class DiagConsoleLogger {
          constructor() {
            function _consoleFunc(e7) {
              return function(...t7) {
                if (console) {
                  let r7 = console[e7];
                  if (typeof r7 !== "function") {
                    r7 = console.log;
                  }
                  if (typeof r7 === "function") {
                    return r7.apply(console, t7);
                  }
                }
              };
            }
            for (let e7 = 0; e7 < r6.length; e7++) {
              this[r6[e7].n] = _consoleFunc(r6[e7].c);
            }
          }
        }
        t6.DiagConsoleLogger = DiagConsoleLogger;
      }, 912: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.createLogLevelDiagLogger = void 0;
        const n5 = r6(957);
        function createLogLevelDiagLogger(e7, t7) {
          if (e7 < n5.DiagLogLevel.NONE) {
            e7 = n5.DiagLogLevel.NONE;
          } else if (e7 > n5.DiagLogLevel.ALL) {
            e7 = n5.DiagLogLevel.ALL;
          }
          t7 = t7 || {};
          function _filterFunc(r7, n6) {
            const a5 = t7[r7];
            if (typeof a5 === "function" && e7 >= n6) {
              return a5.bind(t7);
            }
            return function() {
            };
          }
          return { error: _filterFunc("error", n5.DiagLogLevel.ERROR), warn: _filterFunc("warn", n5.DiagLogLevel.WARN), info: _filterFunc("info", n5.DiagLogLevel.INFO), debug: _filterFunc("debug", n5.DiagLogLevel.DEBUG), verbose: _filterFunc("verbose", n5.DiagLogLevel.VERBOSE) };
        }
        t6.createLogLevelDiagLogger = createLogLevelDiagLogger;
      }, 957: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.DiagLogLevel = void 0;
        var r6;
        (function(e7) {
          e7[e7["NONE"] = 0] = "NONE";
          e7[e7["ERROR"] = 30] = "ERROR";
          e7[e7["WARN"] = 50] = "WARN";
          e7[e7["INFO"] = 60] = "INFO";
          e7[e7["DEBUG"] = 70] = "DEBUG";
          e7[e7["VERBOSE"] = 80] = "VERBOSE";
          e7[e7["ALL"] = 9999] = "ALL";
        })(r6 = t6.DiagLogLevel || (t6.DiagLogLevel = {}));
      }, 172: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.unregisterGlobal = t6.getGlobal = t6.registerGlobal = void 0;
        const n5 = r6(200);
        const a5 = r6(521);
        const o5 = r6(130);
        const i5 = a5.VERSION.split(".")[0];
        const c5 = Symbol.for(`opentelemetry.js.api.${i5}`);
        const s5 = n5._globalThis;
        function registerGlobal(e7, t7, r7, n6 = false) {
          var o6;
          const i6 = s5[c5] = (o6 = s5[c5]) !== null && o6 !== void 0 ? o6 : { version: a5.VERSION };
          if (!n6 && i6[e7]) {
            const t8 = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e7}`);
            r7.error(t8.stack || t8.message);
            return false;
          }
          if (i6.version !== a5.VERSION) {
            const t8 = new Error(`@opentelemetry/api: Registration of version v${i6.version} for ${e7} does not match previously registered API v${a5.VERSION}`);
            r7.error(t8.stack || t8.message);
            return false;
          }
          i6[e7] = t7;
          r7.debug(`@opentelemetry/api: Registered a global for ${e7} v${a5.VERSION}.`);
          return true;
        }
        t6.registerGlobal = registerGlobal;
        function getGlobal(e7) {
          var t7, r7;
          const n6 = (t7 = s5[c5]) === null || t7 === void 0 ? void 0 : t7.version;
          if (!n6 || !(0, o5.isCompatible)(n6)) {
            return;
          }
          return (r7 = s5[c5]) === null || r7 === void 0 ? void 0 : r7[e7];
        }
        t6.getGlobal = getGlobal;
        function unregisterGlobal(e7, t7) {
          t7.debug(`@opentelemetry/api: Unregistering a global for ${e7} v${a5.VERSION}.`);
          const r7 = s5[c5];
          if (r7) {
            delete r7[e7];
          }
        }
        t6.unregisterGlobal = unregisterGlobal;
      }, 130: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.isCompatible = t6._makeCompatibilityCheck = void 0;
        const n5 = r6(521);
        const a5 = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
        function _makeCompatibilityCheck(e7) {
          const t7 = /* @__PURE__ */ new Set([e7]);
          const r7 = /* @__PURE__ */ new Set();
          const n6 = e7.match(a5);
          if (!n6) {
            return () => false;
          }
          const o5 = { major: +n6[1], minor: +n6[2], patch: +n6[3], prerelease: n6[4] };
          if (o5.prerelease != null) {
            return function isExactmatch(t8) {
              return t8 === e7;
            };
          }
          function _reject(e8) {
            r7.add(e8);
            return false;
          }
          function _accept(e8) {
            t7.add(e8);
            return true;
          }
          return function isCompatible(e8) {
            if (t7.has(e8)) {
              return true;
            }
            if (r7.has(e8)) {
              return false;
            }
            const n7 = e8.match(a5);
            if (!n7) {
              return _reject(e8);
            }
            const i5 = { major: +n7[1], minor: +n7[2], patch: +n7[3], prerelease: n7[4] };
            if (i5.prerelease != null) {
              return _reject(e8);
            }
            if (o5.major !== i5.major) {
              return _reject(e8);
            }
            if (o5.major === 0) {
              if (o5.minor === i5.minor && o5.patch <= i5.patch) {
                return _accept(e8);
              }
              return _reject(e8);
            }
            if (o5.minor <= i5.minor) {
              return _accept(e8);
            }
            return _reject(e8);
          };
        }
        t6._makeCompatibilityCheck = _makeCompatibilityCheck;
        t6.isCompatible = _makeCompatibilityCheck(n5.VERSION);
      }, 886: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.metrics = void 0;
        const n5 = r6(653);
        t6.metrics = n5.MetricsAPI.getInstance();
      }, 901: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.ValueType = void 0;
        var r6;
        (function(e7) {
          e7[e7["INT"] = 0] = "INT";
          e7[e7["DOUBLE"] = 1] = "DOUBLE";
        })(r6 = t6.ValueType || (t6.ValueType = {}));
      }, 102: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.createNoopMeter = t6.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t6.NOOP_OBSERVABLE_GAUGE_METRIC = t6.NOOP_OBSERVABLE_COUNTER_METRIC = t6.NOOP_UP_DOWN_COUNTER_METRIC = t6.NOOP_HISTOGRAM_METRIC = t6.NOOP_COUNTER_METRIC = t6.NOOP_METER = t6.NoopObservableUpDownCounterMetric = t6.NoopObservableGaugeMetric = t6.NoopObservableCounterMetric = t6.NoopObservableMetric = t6.NoopHistogramMetric = t6.NoopUpDownCounterMetric = t6.NoopCounterMetric = t6.NoopMetric = t6.NoopMeter = void 0;
        class NoopMeter {
          constructor() {
          }
          createHistogram(e7, r6) {
            return t6.NOOP_HISTOGRAM_METRIC;
          }
          createCounter(e7, r6) {
            return t6.NOOP_COUNTER_METRIC;
          }
          createUpDownCounter(e7, r6) {
            return t6.NOOP_UP_DOWN_COUNTER_METRIC;
          }
          createObservableGauge(e7, r6) {
            return t6.NOOP_OBSERVABLE_GAUGE_METRIC;
          }
          createObservableCounter(e7, r6) {
            return t6.NOOP_OBSERVABLE_COUNTER_METRIC;
          }
          createObservableUpDownCounter(e7, r6) {
            return t6.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;
          }
          addBatchObservableCallback(e7, t7) {
          }
          removeBatchObservableCallback(e7) {
          }
        }
        t6.NoopMeter = NoopMeter;
        class NoopMetric {
        }
        t6.NoopMetric = NoopMetric;
        class NoopCounterMetric extends NoopMetric {
          add(e7, t7) {
          }
        }
        t6.NoopCounterMetric = NoopCounterMetric;
        class NoopUpDownCounterMetric extends NoopMetric {
          add(e7, t7) {
          }
        }
        t6.NoopUpDownCounterMetric = NoopUpDownCounterMetric;
        class NoopHistogramMetric extends NoopMetric {
          record(e7, t7) {
          }
        }
        t6.NoopHistogramMetric = NoopHistogramMetric;
        class NoopObservableMetric {
          addCallback(e7) {
          }
          removeCallback(e7) {
          }
        }
        t6.NoopObservableMetric = NoopObservableMetric;
        class NoopObservableCounterMetric extends NoopObservableMetric {
        }
        t6.NoopObservableCounterMetric = NoopObservableCounterMetric;
        class NoopObservableGaugeMetric extends NoopObservableMetric {
        }
        t6.NoopObservableGaugeMetric = NoopObservableGaugeMetric;
        class NoopObservableUpDownCounterMetric extends NoopObservableMetric {
        }
        t6.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;
        t6.NOOP_METER = new NoopMeter();
        t6.NOOP_COUNTER_METRIC = new NoopCounterMetric();
        t6.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();
        t6.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();
        t6.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();
        t6.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();
        t6.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();
        function createNoopMeter() {
          return t6.NOOP_METER;
        }
        t6.createNoopMeter = createNoopMeter;
      }, 660: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NOOP_METER_PROVIDER = t6.NoopMeterProvider = void 0;
        const n5 = r6(102);
        class NoopMeterProvider {
          getMeter(e7, t7, r7) {
            return n5.NOOP_METER;
          }
        }
        t6.NoopMeterProvider = NoopMeterProvider;
        t6.NOOP_METER_PROVIDER = new NoopMeterProvider();
      }, 200: function(e6, t6, r6) {
        var n5 = this && this.__createBinding || (Object.create ? function(e7, t7, r7, n6) {
          if (n6 === void 0) n6 = r7;
          Object.defineProperty(e7, n6, { enumerable: true, get: function() {
            return t7[r7];
          } });
        } : function(e7, t7, r7, n6) {
          if (n6 === void 0) n6 = r7;
          e7[n6] = t7[r7];
        });
        var a5 = this && this.__exportStar || function(e7, t7) {
          for (var r7 in e7) if (r7 !== "default" && !Object.prototype.hasOwnProperty.call(t7, r7)) n5(t7, e7, r7);
        };
        Object.defineProperty(t6, "__esModule", { value: true });
        a5(r6(46), t6);
      }, 651: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6._globalThis = void 0;
        t6._globalThis = typeof globalThis === "object" ? globalThis : global;
      }, 46: function(e6, t6, r6) {
        var n5 = this && this.__createBinding || (Object.create ? function(e7, t7, r7, n6) {
          if (n6 === void 0) n6 = r7;
          Object.defineProperty(e7, n6, { enumerable: true, get: function() {
            return t7[r7];
          } });
        } : function(e7, t7, r7, n6) {
          if (n6 === void 0) n6 = r7;
          e7[n6] = t7[r7];
        });
        var a5 = this && this.__exportStar || function(e7, t7) {
          for (var r7 in e7) if (r7 !== "default" && !Object.prototype.hasOwnProperty.call(t7, r7)) n5(t7, e7, r7);
        };
        Object.defineProperty(t6, "__esModule", { value: true });
        a5(r6(651), t6);
      }, 939: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.propagation = void 0;
        const n5 = r6(181);
        t6.propagation = n5.PropagationAPI.getInstance();
      }, 874: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NoopTextMapPropagator = void 0;
        class NoopTextMapPropagator {
          inject(e7, t7) {
          }
          extract(e7, t7) {
            return e7;
          }
          fields() {
            return [];
          }
        }
        t6.NoopTextMapPropagator = NoopTextMapPropagator;
      }, 194: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.defaultTextMapSetter = t6.defaultTextMapGetter = void 0;
        t6.defaultTextMapGetter = { get(e7, t7) {
          if (e7 == null) {
            return void 0;
          }
          return e7[t7];
        }, keys(e7) {
          if (e7 == null) {
            return [];
          }
          return Object.keys(e7);
        } };
        t6.defaultTextMapSetter = { set(e7, t7, r6) {
          if (e7 == null) {
            return;
          }
          e7[t7] = r6;
        } };
      }, 845: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.trace = void 0;
        const n5 = r6(997);
        t6.trace = n5.TraceAPI.getInstance();
      }, 403: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NonRecordingSpan = void 0;
        const n5 = r6(476);
        class NonRecordingSpan {
          constructor(e7 = n5.INVALID_SPAN_CONTEXT) {
            this._spanContext = e7;
          }
          spanContext() {
            return this._spanContext;
          }
          setAttribute(e7, t7) {
            return this;
          }
          setAttributes(e7) {
            return this;
          }
          addEvent(e7, t7) {
            return this;
          }
          setStatus(e7) {
            return this;
          }
          updateName(e7) {
            return this;
          }
          end(e7) {
          }
          isRecording() {
            return false;
          }
          recordException(e7, t7) {
          }
        }
        t6.NonRecordingSpan = NonRecordingSpan;
      }, 614: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NoopTracer = void 0;
        const n5 = r6(491);
        const a5 = r6(607);
        const o5 = r6(403);
        const i5 = r6(139);
        const c5 = n5.ContextAPI.getInstance();
        class NoopTracer {
          startSpan(e7, t7, r7 = c5.active()) {
            const n6 = Boolean(t7 === null || t7 === void 0 ? void 0 : t7.root);
            if (n6) {
              return new o5.NonRecordingSpan();
            }
            const s5 = r7 && (0, a5.getSpanContext)(r7);
            if (isSpanContext(s5) && (0, i5.isSpanContextValid)(s5)) {
              return new o5.NonRecordingSpan(s5);
            } else {
              return new o5.NonRecordingSpan();
            }
          }
          startActiveSpan(e7, t7, r7, n6) {
            let o6;
            let i6;
            let s5;
            if (arguments.length < 2) {
              return;
            } else if (arguments.length === 2) {
              s5 = t7;
            } else if (arguments.length === 3) {
              o6 = t7;
              s5 = r7;
            } else {
              o6 = t7;
              i6 = r7;
              s5 = n6;
            }
            const u5 = i6 !== null && i6 !== void 0 ? i6 : c5.active();
            const l5 = this.startSpan(e7, o6, u5);
            const g5 = (0, a5.setSpan)(u5, l5);
            return c5.with(g5, s5, void 0, l5);
          }
        }
        t6.NoopTracer = NoopTracer;
        function isSpanContext(e7) {
          return typeof e7 === "object" && typeof e7["spanId"] === "string" && typeof e7["traceId"] === "string" && typeof e7["traceFlags"] === "number";
        }
      }, 124: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.NoopTracerProvider = void 0;
        const n5 = r6(614);
        class NoopTracerProvider {
          getTracer(e7, t7, r7) {
            return new n5.NoopTracer();
          }
        }
        t6.NoopTracerProvider = NoopTracerProvider;
      }, 125: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.ProxyTracer = void 0;
        const n5 = r6(614);
        const a5 = new n5.NoopTracer();
        class ProxyTracer {
          constructor(e7, t7, r7, n6) {
            this._provider = e7;
            this.name = t7;
            this.version = r7;
            this.options = n6;
          }
          startSpan(e7, t7, r7) {
            return this._getTracer().startSpan(e7, t7, r7);
          }
          startActiveSpan(e7, t7, r7, n6) {
            const a6 = this._getTracer();
            return Reflect.apply(a6.startActiveSpan, a6, arguments);
          }
          _getTracer() {
            if (this._delegate) {
              return this._delegate;
            }
            const e7 = this._provider.getDelegateTracer(this.name, this.version, this.options);
            if (!e7) {
              return a5;
            }
            this._delegate = e7;
            return this._delegate;
          }
        }
        t6.ProxyTracer = ProxyTracer;
      }, 846: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.ProxyTracerProvider = void 0;
        const n5 = r6(125);
        const a5 = r6(124);
        const o5 = new a5.NoopTracerProvider();
        class ProxyTracerProvider {
          getTracer(e7, t7, r7) {
            var a6;
            return (a6 = this.getDelegateTracer(e7, t7, r7)) !== null && a6 !== void 0 ? a6 : new n5.ProxyTracer(this, e7, t7, r7);
          }
          getDelegate() {
            var e7;
            return (e7 = this._delegate) !== null && e7 !== void 0 ? e7 : o5;
          }
          setDelegate(e7) {
            this._delegate = e7;
          }
          getDelegateTracer(e7, t7, r7) {
            var n6;
            return (n6 = this._delegate) === null || n6 === void 0 ? void 0 : n6.getTracer(e7, t7, r7);
          }
        }
        t6.ProxyTracerProvider = ProxyTracerProvider;
      }, 996: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.SamplingDecision = void 0;
        var r6;
        (function(e7) {
          e7[e7["NOT_RECORD"] = 0] = "NOT_RECORD";
          e7[e7["RECORD"] = 1] = "RECORD";
          e7[e7["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
        })(r6 = t6.SamplingDecision || (t6.SamplingDecision = {}));
      }, 607: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.getSpanContext = t6.setSpanContext = t6.deleteSpan = t6.setSpan = t6.getActiveSpan = t6.getSpan = void 0;
        const n5 = r6(780);
        const a5 = r6(403);
        const o5 = r6(491);
        const i5 = (0, n5.createContextKey)("OpenTelemetry Context Key SPAN");
        function getSpan(e7) {
          return e7.getValue(i5) || void 0;
        }
        t6.getSpan = getSpan;
        function getActiveSpan() {
          return getSpan(o5.ContextAPI.getInstance().active());
        }
        t6.getActiveSpan = getActiveSpan;
        function setSpan(e7, t7) {
          return e7.setValue(i5, t7);
        }
        t6.setSpan = setSpan;
        function deleteSpan(e7) {
          return e7.deleteValue(i5);
        }
        t6.deleteSpan = deleteSpan;
        function setSpanContext(e7, t7) {
          return setSpan(e7, new a5.NonRecordingSpan(t7));
        }
        t6.setSpanContext = setSpanContext;
        function getSpanContext(e7) {
          var t7;
          return (t7 = getSpan(e7)) === null || t7 === void 0 ? void 0 : t7.spanContext();
        }
        t6.getSpanContext = getSpanContext;
      }, 325: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.TraceStateImpl = void 0;
        const n5 = r6(564);
        const a5 = 32;
        const o5 = 512;
        const i5 = ",";
        const c5 = "=";
        class TraceStateImpl {
          constructor(e7) {
            this._internalState = /* @__PURE__ */ new Map();
            if (e7) this._parse(e7);
          }
          set(e7, t7) {
            const r7 = this._clone();
            if (r7._internalState.has(e7)) {
              r7._internalState.delete(e7);
            }
            r7._internalState.set(e7, t7);
            return r7;
          }
          unset(e7) {
            const t7 = this._clone();
            t7._internalState.delete(e7);
            return t7;
          }
          get(e7) {
            return this._internalState.get(e7);
          }
          serialize() {
            return this._keys().reduce((e7, t7) => {
              e7.push(t7 + c5 + this.get(t7));
              return e7;
            }, []).join(i5);
          }
          _parse(e7) {
            if (e7.length > o5) return;
            this._internalState = e7.split(i5).reverse().reduce((e8, t7) => {
              const r7 = t7.trim();
              const a6 = r7.indexOf(c5);
              if (a6 !== -1) {
                const o6 = r7.slice(0, a6);
                const i6 = r7.slice(a6 + 1, t7.length);
                if ((0, n5.validateKey)(o6) && (0, n5.validateValue)(i6)) {
                  e8.set(o6, i6);
                } else {
                }
              }
              return e8;
            }, /* @__PURE__ */ new Map());
            if (this._internalState.size > a5) {
              this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a5));
            }
          }
          _keys() {
            return Array.from(this._internalState.keys()).reverse();
          }
          _clone() {
            const e7 = new TraceStateImpl();
            e7._internalState = new Map(this._internalState);
            return e7;
          }
        }
        t6.TraceStateImpl = TraceStateImpl;
      }, 564: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.validateValue = t6.validateKey = void 0;
        const r6 = "[_0-9a-z-*/]";
        const n5 = `[a-z]${r6}{0,255}`;
        const a5 = `[a-z0-9]${r6}{0,240}@[a-z]${r6}{0,13}`;
        const o5 = new RegExp(`^(?:${n5}|${a5})$`);
        const i5 = /^[ -~]{0,255}[!-~]$/;
        const c5 = /,|=/;
        function validateKey(e7) {
          return o5.test(e7);
        }
        t6.validateKey = validateKey;
        function validateValue(e7) {
          return i5.test(e7) && !c5.test(e7);
        }
        t6.validateValue = validateValue;
      }, 98: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.createTraceState = void 0;
        const n5 = r6(325);
        function createTraceState(e7) {
          return new n5.TraceStateImpl(e7);
        }
        t6.createTraceState = createTraceState;
      }, 476: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.INVALID_SPAN_CONTEXT = t6.INVALID_TRACEID = t6.INVALID_SPANID = void 0;
        const n5 = r6(475);
        t6.INVALID_SPANID = "0000000000000000";
        t6.INVALID_TRACEID = "00000000000000000000000000000000";
        t6.INVALID_SPAN_CONTEXT = { traceId: t6.INVALID_TRACEID, spanId: t6.INVALID_SPANID, traceFlags: n5.TraceFlags.NONE };
      }, 357: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.SpanKind = void 0;
        var r6;
        (function(e7) {
          e7[e7["INTERNAL"] = 0] = "INTERNAL";
          e7[e7["SERVER"] = 1] = "SERVER";
          e7[e7["CLIENT"] = 2] = "CLIENT";
          e7[e7["PRODUCER"] = 3] = "PRODUCER";
          e7[e7["CONSUMER"] = 4] = "CONSUMER";
        })(r6 = t6.SpanKind || (t6.SpanKind = {}));
      }, 139: (e6, t6, r6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.wrapSpanContext = t6.isSpanContextValid = t6.isValidSpanId = t6.isValidTraceId = void 0;
        const n5 = r6(476);
        const a5 = r6(403);
        const o5 = /^([0-9a-f]{32})$/i;
        const i5 = /^[0-9a-f]{16}$/i;
        function isValidTraceId(e7) {
          return o5.test(e7) && e7 !== n5.INVALID_TRACEID;
        }
        t6.isValidTraceId = isValidTraceId;
        function isValidSpanId(e7) {
          return i5.test(e7) && e7 !== n5.INVALID_SPANID;
        }
        t6.isValidSpanId = isValidSpanId;
        function isSpanContextValid(e7) {
          return isValidTraceId(e7.traceId) && isValidSpanId(e7.spanId);
        }
        t6.isSpanContextValid = isSpanContextValid;
        function wrapSpanContext(e7) {
          return new a5.NonRecordingSpan(e7);
        }
        t6.wrapSpanContext = wrapSpanContext;
      }, 847: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.SpanStatusCode = void 0;
        var r6;
        (function(e7) {
          e7[e7["UNSET"] = 0] = "UNSET";
          e7[e7["OK"] = 1] = "OK";
          e7[e7["ERROR"] = 2] = "ERROR";
        })(r6 = t6.SpanStatusCode || (t6.SpanStatusCode = {}));
      }, 475: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.TraceFlags = void 0;
        var r6;
        (function(e7) {
          e7[e7["NONE"] = 0] = "NONE";
          e7[e7["SAMPLED"] = 1] = "SAMPLED";
        })(r6 = t6.TraceFlags || (t6.TraceFlags = {}));
      }, 521: (e6, t6) => {
        Object.defineProperty(t6, "__esModule", { value: true });
        t6.VERSION = void 0;
        t6.VERSION = "1.6.0";
      } };
      var t5 = {};
      function __nccwpck_require__(r6) {
        var n5 = t5[r6];
        if (n5 !== void 0) {
          return n5.exports;
        }
        var a5 = t5[r6] = { exports: {} };
        var o5 = true;
        try {
          e5[r6].call(a5.exports, a5, a5.exports, __nccwpck_require__);
          o5 = false;
        } finally {
          if (o5) delete t5[r6];
        }
        return a5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var r5 = {};
      (() => {
        var e6 = r5;
        Object.defineProperty(e6, "__esModule", { value: true });
        e6.trace = e6.propagation = e6.metrics = e6.diag = e6.context = e6.INVALID_SPAN_CONTEXT = e6.INVALID_TRACEID = e6.INVALID_SPANID = e6.isValidSpanId = e6.isValidTraceId = e6.isSpanContextValid = e6.createTraceState = e6.TraceFlags = e6.SpanStatusCode = e6.SpanKind = e6.SamplingDecision = e6.ProxyTracerProvider = e6.ProxyTracer = e6.defaultTextMapSetter = e6.defaultTextMapGetter = e6.ValueType = e6.createNoopMeter = e6.DiagLogLevel = e6.DiagConsoleLogger = e6.ROOT_CONTEXT = e6.createContextKey = e6.baggageEntryMetadataFromString = void 0;
        var t6 = __nccwpck_require__(369);
        Object.defineProperty(e6, "baggageEntryMetadataFromString", { enumerable: true, get: function() {
          return t6.baggageEntryMetadataFromString;
        } });
        var n5 = __nccwpck_require__(780);
        Object.defineProperty(e6, "createContextKey", { enumerable: true, get: function() {
          return n5.createContextKey;
        } });
        Object.defineProperty(e6, "ROOT_CONTEXT", { enumerable: true, get: function() {
          return n5.ROOT_CONTEXT;
        } });
        var a5 = __nccwpck_require__(972);
        Object.defineProperty(e6, "DiagConsoleLogger", { enumerable: true, get: function() {
          return a5.DiagConsoleLogger;
        } });
        var o5 = __nccwpck_require__(957);
        Object.defineProperty(e6, "DiagLogLevel", { enumerable: true, get: function() {
          return o5.DiagLogLevel;
        } });
        var i5 = __nccwpck_require__(102);
        Object.defineProperty(e6, "createNoopMeter", { enumerable: true, get: function() {
          return i5.createNoopMeter;
        } });
        var c5 = __nccwpck_require__(901);
        Object.defineProperty(e6, "ValueType", { enumerable: true, get: function() {
          return c5.ValueType;
        } });
        var s5 = __nccwpck_require__(194);
        Object.defineProperty(e6, "defaultTextMapGetter", { enumerable: true, get: function() {
          return s5.defaultTextMapGetter;
        } });
        Object.defineProperty(e6, "defaultTextMapSetter", { enumerable: true, get: function() {
          return s5.defaultTextMapSetter;
        } });
        var u5 = __nccwpck_require__(125);
        Object.defineProperty(e6, "ProxyTracer", { enumerable: true, get: function() {
          return u5.ProxyTracer;
        } });
        var l5 = __nccwpck_require__(846);
        Object.defineProperty(e6, "ProxyTracerProvider", { enumerable: true, get: function() {
          return l5.ProxyTracerProvider;
        } });
        var g5 = __nccwpck_require__(996);
        Object.defineProperty(e6, "SamplingDecision", { enumerable: true, get: function() {
          return g5.SamplingDecision;
        } });
        var p5 = __nccwpck_require__(357);
        Object.defineProperty(e6, "SpanKind", { enumerable: true, get: function() {
          return p5.SpanKind;
        } });
        var d5 = __nccwpck_require__(847);
        Object.defineProperty(e6, "SpanStatusCode", { enumerable: true, get: function() {
          return d5.SpanStatusCode;
        } });
        var _2 = __nccwpck_require__(475);
        Object.defineProperty(e6, "TraceFlags", { enumerable: true, get: function() {
          return _2.TraceFlags;
        } });
        var f5 = __nccwpck_require__(98);
        Object.defineProperty(e6, "createTraceState", { enumerable: true, get: function() {
          return f5.createTraceState;
        } });
        var b5 = __nccwpck_require__(139);
        Object.defineProperty(e6, "isSpanContextValid", { enumerable: true, get: function() {
          return b5.isSpanContextValid;
        } });
        Object.defineProperty(e6, "isValidTraceId", { enumerable: true, get: function() {
          return b5.isValidTraceId;
        } });
        Object.defineProperty(e6, "isValidSpanId", { enumerable: true, get: function() {
          return b5.isValidSpanId;
        } });
        var v6 = __nccwpck_require__(476);
        Object.defineProperty(e6, "INVALID_SPANID", { enumerable: true, get: function() {
          return v6.INVALID_SPANID;
        } });
        Object.defineProperty(e6, "INVALID_TRACEID", { enumerable: true, get: function() {
          return v6.INVALID_TRACEID;
        } });
        Object.defineProperty(e6, "INVALID_SPAN_CONTEXT", { enumerable: true, get: function() {
          return v6.INVALID_SPAN_CONTEXT;
        } });
        const O2 = __nccwpck_require__(67);
        Object.defineProperty(e6, "context", { enumerable: true, get: function() {
          return O2.context;
        } });
        const P2 = __nccwpck_require__(506);
        Object.defineProperty(e6, "diag", { enumerable: true, get: function() {
          return P2.diag;
        } });
        const N2 = __nccwpck_require__(886);
        Object.defineProperty(e6, "metrics", { enumerable: true, get: function() {
          return N2.metrics;
        } });
        const S2 = __nccwpck_require__(939);
        Object.defineProperty(e6, "propagation", { enumerable: true, get: function() {
          return S2.propagation;
        } });
        const C3 = __nccwpck_require__(845);
        Object.defineProperty(e6, "trace", { enumerable: true, get: function() {
          return C3.trace;
        } });
        e6["default"] = { context: O2.context, diag: P2.diag, metrics: N2.metrics, propagation: S2.propagation, trace: C3.trace };
      })();
      module.exports = r5;
    })();
  }
});

// node_modules/next/dist/server/lib/trace/tracer.js
var require_tracer = __commonJS({
  "node_modules/next/dist/server/lib/trace/tracer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      BubbledError: function() {
        return BubbledError;
      },
      SpanKind: function() {
        return SpanKind;
      },
      SpanStatusCode: function() {
        return SpanStatusCode;
      },
      getTracer: function() {
        return getTracer;
      },
      isBubbledError: function() {
        return isBubbledError;
      }
    });
    var _constants = require_constants2();
    var _isthenable = require_is_thenable();
    var api;
    if (process.env.NEXT_RUNTIME === "edge") {
      api = __require("@opentelemetry/api");
    } else {
      try {
        api = __require("@opentelemetry/api");
      } catch (err) {
        api = require_api();
      }
    }
    var { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;
    var BubbledError = class extends Error {
      constructor(bubble, result) {
        super(), this.bubble = bubble, this.result = result;
      }
    };
    function isBubbledError(error2) {
      if (typeof error2 !== "object" || error2 === null) return false;
      return error2 instanceof BubbledError;
    }
    var closeSpanWithError = (span, error2) => {
      if (isBubbledError(error2) && error2.bubble) {
        span.setAttribute("next.bubble", true);
      } else {
        if (error2) {
          span.recordException(error2);
          span.setAttribute("error.type", error2.name);
        }
        span.setStatus({
          code: SpanStatusCode.ERROR,
          message: error2 == null ? void 0 : error2.message
        });
      }
      span.end();
    };
    var rootSpanAttributesStore = /* @__PURE__ */ new Map();
    var rootSpanIdKey = api.createContextKey("next.rootSpanId");
    var lastSpanId = 0;
    var getSpanId = () => lastSpanId++;
    var clientTraceDataSetter = {
      set(carrier, key, value) {
        carrier.push({
          key,
          value
        });
      }
    };
    var NextTracerImpl = class {
      /**
      * Returns an instance to the trace with configured name.
      * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,
      * This should be lazily evaluated.
      */
      getTracerInstance() {
        return trace.getTracer("next.js", "0.0.1");
      }
      getContext() {
        return context;
      }
      getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
      }
      getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
      }
      withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
          return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
      }
      trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === "function" ? {
          fn: fnOrOptions,
          options: {}
        } : {
          fn: fnOrEmpty,
          options: {
            ...fnOrOptions
          }
        };
        const spanName = options.spanName ?? type;
        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== "1" || options.hideSpan) {
          return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
          spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
          isRootSpan = true;
        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {
          isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
          "next.span_name": spanName,
          "next.span_type": type,
          ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), () => this.getTracerInstance().startActiveSpan(spanName, options, (span) => {
          const startTime = "performance" in globalThis && "measure" in performance ? globalThis.performance.now() : void 0;
          const onCleanup = () => {
            rootSpanAttributesStore.delete(spanId);
            if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && _constants.LogSpanAllowList.includes(type || "")) {
              performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split(".").pop() || "").replace(/[A-Z]/g, (match) => "-" + match.toLowerCase())}`, {
                start: startTime,
                end: performance.now()
              });
            }
          };
          if (isRootSpan) {
            rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
          }
          try {
            if (fn.length > 1) {
              return fn(span, (err) => closeSpanWithError(span, err));
            }
            const result = fn(span);
            if ((0, _isthenable.isThenable)(result)) {
              return result.then((res) => {
                span.end();
                return res;
              }).catch((err) => {
                closeSpanWithError(span, err);
                throw err;
              }).finally(onCleanup);
            } else {
              span.end();
              onCleanup();
            }
            return result;
          } catch (err) {
            closeSpanWithError(span, err);
            onCleanup();
            throw err;
          }
        }));
      }
      wrap(...args) {
        const tracer = this;
        const [name, options, fn] = args.length === 3 ? args : [
          args[0],
          {},
          args[1]
        ];
        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== "1") {
          return fn;
        }
        return function() {
          let optionsObj = options;
          if (typeof optionsObj === "function" && typeof fn === "function") {
            optionsObj = optionsObj.apply(this, arguments);
          }
          const lastArgId = arguments.length - 1;
          const cb2 = arguments[lastArgId];
          if (typeof cb2 === "function") {
            const scopeBoundCb = tracer.getContext().bind(context.active(), cb2);
            return tracer.trace(name, optionsObj, (_span, done) => {
              arguments[lastArgId] = function(err) {
                done == null ? void 0 : done(err);
                return scopeBoundCb.apply(this, arguments);
              };
              return fn.apply(this, arguments);
            });
          } else {
            return tracer.trace(name, optionsObj, () => fn.apply(this, arguments));
          }
        };
      }
      startSpan(...args) {
        const [type, options] = args;
        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        return this.getTracerInstance().startSpan(type, options, spanContext);
      }
      getSpanContext(parentSpan) {
        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : void 0;
        return spanContext;
      }
      getRootSpanAttributes() {
        const spanId = context.active().getValue(rootSpanIdKey);
        return rootSpanAttributesStore.get(spanId);
      }
      setRootSpanAttribute(key, value) {
        const spanId = context.active().getValue(rootSpanIdKey);
        const attributes = rootSpanAttributesStore.get(spanId);
        if (attributes) {
          attributes.set(key, value);
        }
      }
    };
    var getTracer = (() => {
      const tracer = new NextTracerImpl();
      return () => tracer;
    })();
  }
});

// node_modules/next/dist/server/stream-utils/encoded-tags.js
var require_encoded_tags = __commonJS({
  "node_modules/next/dist/server/stream-utils/encoded-tags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ENCODED_TAGS", {
      enumerable: true,
      get: function() {
        return ENCODED_TAGS;
      }
    });
    var ENCODED_TAGS = {
      // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`
      OPENING: {
        // <html
        HTML: new Uint8Array([
          60,
          104,
          116,
          109,
          108
        ]),
        // <body
        BODY: new Uint8Array([
          60,
          98,
          111,
          100,
          121
        ])
      },
      CLOSED: {
        // </head>
        HEAD: new Uint8Array([
          60,
          47,
          104,
          101,
          97,
          100,
          62
        ]),
        // </body>
        BODY: new Uint8Array([
          60,
          47,
          98,
          111,
          100,
          121,
          62
        ]),
        // </html>
        HTML: new Uint8Array([
          60,
          47,
          104,
          116,
          109,
          108,
          62
        ]),
        // </body></html>
        BODY_AND_HTML: new Uint8Array([
          60,
          47,
          98,
          111,
          100,
          121,
          62,
          60,
          47,
          104,
          116,
          109,
          108,
          62
        ])
      },
      META: {
        // Only the match the prefix cause the suffix can be different wether it's xml compatible or not ">" or "/>"
        // <meta name="«nxt-icon»"
        // This is a special mark that will be replaced by the icon insertion script tag.
        ICON_MARK: new Uint8Array([
          60,
          109,
          101,
          116,
          97,
          32,
          110,
          97,
          109,
          101,
          61,
          34,
          194,
          171,
          110,
          120,
          116,
          45,
          105,
          99,
          111,
          110,
          194,
          187,
          34
        ])
      }
    };
  }
});

// node_modules/next/dist/server/stream-utils/uint8array-helpers.js
var require_uint8array_helpers = __commonJS({
  "node_modules/next/dist/server/stream-utils/uint8array-helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      indexOfUint8Array: function() {
        return indexOfUint8Array;
      },
      isEquivalentUint8Arrays: function() {
        return isEquivalentUint8Arrays;
      },
      removeFromUint8Array: function() {
        return removeFromUint8Array;
      }
    });
    function indexOfUint8Array(a5, b5) {
      if (b5.length === 0) return 0;
      if (a5.length === 0 || b5.length > a5.length) return -1;
      for (let i5 = 0; i5 <= a5.length - b5.length; i5++) {
        let completeMatch = true;
        for (let j5 = 0; j5 < b5.length; j5++) {
          if (a5[i5 + j5] !== b5[j5]) {
            completeMatch = false;
            break;
          }
        }
        if (completeMatch) {
          return i5;
        }
      }
      return -1;
    }
    function isEquivalentUint8Arrays(a5, b5) {
      if (a5.length !== b5.length) return false;
      for (let i5 = 0; i5 < a5.length; i5++) {
        if (a5[i5] !== b5[i5]) return false;
      }
      return true;
    }
    function removeFromUint8Array(a5, b5) {
      const tagIndex = indexOfUint8Array(a5, b5);
      if (tagIndex === 0) return a5.subarray(b5.length);
      if (tagIndex > -1) {
        const removed = new Uint8Array(a5.length - b5.length);
        removed.set(a5.slice(0, tagIndex));
        removed.set(a5.slice(tagIndex + b5.length), tagIndex);
        return removed;
      } else {
        return a5;
      }
    }
  }
});

// node_modules/next/dist/shared/lib/errors/constants.js
var require_constants3 = __commonJS({
  "node_modules/next/dist/shared/lib/errors/constants.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "MISSING_ROOT_TAGS_ERROR", {
      enumerable: true,
      get: function() {
        return MISSING_ROOT_TAGS_ERROR;
      }
    });
    var MISSING_ROOT_TAGS_ERROR = "NEXT_MISSING_ROOT_TAGS";
    if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
      Object.defineProperty(exports.default, "__esModule", { value: true });
      Object.assign(exports.default, exports);
      module.exports = exports.default;
    }
  }
});

// node_modules/next/dist/shared/lib/segment-cache/output-export-prefetch-encoding.js
var require_output_export_prefetch_encoding = __commonJS({
  "node_modules/next/dist/shared/lib/segment-cache/output-export-prefetch-encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      DOC_PREFETCH_RANGE_HEADER_VALUE: function() {
        return DOC_PREFETCH_RANGE_HEADER_VALUE;
      },
      doesExportedHtmlMatchBuildId: function() {
        return doesExportedHtmlMatchBuildId;
      },
      insertBuildIdComment: function() {
        return insertBuildIdComment;
      }
    });
    var DOCTYPE_PREFIX = "<!DOCTYPE html>";
    var MAX_BUILD_ID_LENGTH = 24;
    var DOC_PREFETCH_RANGE_HEADER_VALUE = "bytes=0-63";
    function escapeBuildId(buildId2) {
      const truncated = buildId2.slice(0, MAX_BUILD_ID_LENGTH);
      return truncated.replace(/-/g, "_");
    }
    function insertBuildIdComment(originalHtml, buildId2) {
      if (
        // Skip if the build id contains a closing comment marker.
        buildId2.includes("-->") || // React always inserts a doctype at the start of the document. Skip if it
        // isn't present. Shouldn't happen; suggests an issue elsewhere.
        !originalHtml.startsWith(DOCTYPE_PREFIX)
      ) {
        return originalHtml;
      }
      return originalHtml.replace(DOCTYPE_PREFIX, DOCTYPE_PREFIX + "<!--" + escapeBuildId(buildId2) + "-->");
    }
    function doesExportedHtmlMatchBuildId(partialHtmlDocument, buildId2) {
      return partialHtmlDocument.startsWith(DOCTYPE_PREFIX + "<!--" + escapeBuildId(buildId2) + "-->");
    }
  }
});

// node_modules/next/dist/server/stream-utils/node-web-streams-helper.js
var require_node_web_streams_helper = __commonJS({
  "node_modules/next/dist/server/stream-utils/node-web-streams-helper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      chainStreams: function() {
        return chainStreams;
      },
      continueDynamicHTMLResume: function() {
        return continueDynamicHTMLResume;
      },
      continueDynamicPrerender: function() {
        return continueDynamicPrerender;
      },
      continueFizzStream: function() {
        return continueFizzStream;
      },
      continueStaticPrerender: function() {
        return continueStaticPrerender;
      },
      createBufferedTransformStream: function() {
        return createBufferedTransformStream;
      },
      createDocumentClosingStream: function() {
        return createDocumentClosingStream;
      },
      createRootLayoutValidatorStream: function() {
        return createRootLayoutValidatorStream;
      },
      renderToInitialFizzStream: function() {
        return renderToInitialFizzStream;
      },
      streamFromBuffer: function() {
        return streamFromBuffer;
      },
      streamFromString: function() {
        return streamFromString;
      },
      streamToBuffer: function() {
        return streamToBuffer;
      },
      streamToString: function() {
        return streamToString;
      }
    });
    var _tracer = require_tracer();
    var _constants = require_constants2();
    var _detachedpromise = require_detached_promise();
    var _scheduler = require_scheduler();
    var _encodedtags = require_encoded_tags();
    var _uint8arrayhelpers = require_uint8array_helpers();
    var _constants1 = require_constants3();
    var _outputexportprefetchencoding = require_output_export_prefetch_encoding();
    function voidCatch() {
    }
    var encoder = new TextEncoder();
    function chainStreams(...streams) {
      if (streams.length === 0) {
        return new ReadableStream({
          start(controller) {
            controller.close();
          }
        });
      }
      if (streams.length === 1) {
        return streams[0];
      }
      const { readable, writable } = new TransformStream();
      let promise = streams[0].pipeTo(writable, {
        preventClose: true
      });
      let i5 = 1;
      for (; i5 < streams.length - 1; i5++) {
        const nextStream = streams[i5];
        promise = promise.then(() => nextStream.pipeTo(writable, {
          preventClose: true
        }));
      }
      const lastStream = streams[i5];
      promise = promise.then(() => lastStream.pipeTo(writable));
      promise.catch(voidCatch);
      return readable;
    }
    function streamFromString(str) {
      return new ReadableStream({
        start(controller) {
          controller.enqueue(encoder.encode(str));
          controller.close();
        }
      });
    }
    function streamFromBuffer(chunk) {
      return new ReadableStream({
        start(controller) {
          controller.enqueue(chunk);
          controller.close();
        }
      });
    }
    async function streamToBuffer(stream) {
      const reader = stream.getReader();
      const chunks = [];
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        chunks.push(value);
      }
      return Buffer.concat(chunks);
    }
    async function streamToString(stream, signal) {
      const decoder = new TextDecoder("utf-8", {
        fatal: true
      });
      let string = "";
      for await (const chunk of stream) {
        if (signal == null ? void 0 : signal.aborted) {
          return string;
        }
        string += decoder.decode(chunk, {
          stream: true
        });
      }
      string += decoder.decode();
      return string;
    }
    function createBufferedTransformStream() {
      let bufferedChunks = [];
      let bufferByteLength = 0;
      let pending;
      const flush2 = (controller) => {
        if (pending) return;
        const detached = new _detachedpromise.DetachedPromise();
        pending = detached;
        (0, _scheduler.scheduleImmediate)(() => {
          try {
            const chunk = new Uint8Array(bufferByteLength);
            let copiedBytes = 0;
            for (let i5 = 0; i5 < bufferedChunks.length; i5++) {
              const bufferedChunk = bufferedChunks[i5];
              chunk.set(bufferedChunk, copiedBytes);
              copiedBytes += bufferedChunk.byteLength;
            }
            bufferedChunks.length = 0;
            bufferByteLength = 0;
            controller.enqueue(chunk);
          } catch {
          } finally {
            pending = void 0;
            detached.resolve();
          }
        });
      };
      return new TransformStream({
        transform(chunk, controller) {
          bufferedChunks.push(chunk);
          bufferByteLength += chunk.byteLength;
          flush2(controller);
        },
        flush() {
          if (!pending) return;
          return pending.promise;
        }
      });
    }
    function createPrefetchCommentStream(isBuildTimePrerendering, buildId2) {
      let didTransformFirstChunk = false;
      return new TransformStream({
        transform(chunk, controller) {
          if (isBuildTimePrerendering && !didTransformFirstChunk) {
            didTransformFirstChunk = true;
            const decoder = new TextDecoder("utf-8", {
              fatal: true
            });
            const chunkStr = decoder.decode(chunk, {
              stream: true
            });
            const updatedChunkStr = (0, _outputexportprefetchencoding.insertBuildIdComment)(chunkStr, buildId2);
            controller.enqueue(encoder.encode(updatedChunkStr));
            return;
          }
          controller.enqueue(chunk);
        }
      });
    }
    function renderToInitialFizzStream({ ReactDOMServer, element, streamOptions }) {
      return (0, _tracer.getTracer)().trace(_constants.AppRenderSpan.renderToReadableStream, async () => ReactDOMServer.renderToReadableStream(element, streamOptions));
    }
    function createMetadataTransformStream(insert) {
      let chunkIndex = -1;
      let isMarkRemoved = false;
      return new TransformStream({
        async transform(chunk, controller) {
          let iconMarkIndex = -1;
          let closedHeadIndex = -1;
          chunkIndex++;
          if (isMarkRemoved) {
            controller.enqueue(chunk);
            return;
          }
          let iconMarkLength = 0;
          if (iconMarkIndex === -1) {
            iconMarkIndex = (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.META.ICON_MARK);
            if (iconMarkIndex === -1) {
              controller.enqueue(chunk);
              return;
            } else {
              iconMarkLength = _encodedtags.ENCODED_TAGS.META.ICON_MARK.length;
              if (chunk[iconMarkIndex + iconMarkLength] === 47) {
                iconMarkLength += 2;
              } else {
                iconMarkLength++;
              }
            }
          }
          if (chunkIndex === 0) {
            closedHeadIndex = (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.HEAD);
            if (iconMarkIndex !== -1) {
              if (iconMarkIndex < closedHeadIndex) {
                const replaced = new Uint8Array(chunk.length - iconMarkLength);
                replaced.set(chunk.subarray(0, iconMarkIndex));
                replaced.set(chunk.subarray(iconMarkIndex + iconMarkLength), iconMarkIndex);
                chunk = replaced;
              } else {
                const insertion = await insert();
                const encodedInsertion = encoder.encode(insertion);
                const insertionLength = encodedInsertion.length;
                const replaced = new Uint8Array(chunk.length - iconMarkLength + insertionLength);
                replaced.set(chunk.subarray(0, iconMarkIndex));
                replaced.set(encodedInsertion, iconMarkIndex);
                replaced.set(chunk.subarray(iconMarkIndex + iconMarkLength), iconMarkIndex + insertionLength);
                chunk = replaced;
              }
              isMarkRemoved = true;
            }
          } else {
            const insertion = await insert();
            const encodedInsertion = encoder.encode(insertion);
            const insertionLength = encodedInsertion.length;
            const replaced = new Uint8Array(chunk.length - iconMarkLength + insertionLength);
            replaced.set(chunk.subarray(0, iconMarkIndex));
            replaced.set(encodedInsertion, iconMarkIndex);
            replaced.set(chunk.subarray(iconMarkIndex + iconMarkLength), iconMarkIndex + insertionLength);
            chunk = replaced;
            isMarkRemoved = true;
          }
          controller.enqueue(chunk);
        }
      });
    }
    function createHeadInsertionTransformStream(insert) {
      let inserted = false;
      let hasBytes = false;
      return new TransformStream({
        async transform(chunk, controller) {
          hasBytes = true;
          const insertion = await insert();
          if (inserted) {
            if (insertion) {
              const encodedInsertion = encoder.encode(insertion);
              controller.enqueue(encodedInsertion);
            }
            controller.enqueue(chunk);
          } else {
            const index = (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.HEAD);
            if (index !== -1) {
              if (insertion) {
                const encodedInsertion = encoder.encode(insertion);
                const insertedHeadContent = new Uint8Array(chunk.length + encodedInsertion.length);
                insertedHeadContent.set(chunk.slice(0, index));
                insertedHeadContent.set(encodedInsertion, index);
                insertedHeadContent.set(chunk.slice(index), index + encodedInsertion.length);
                controller.enqueue(insertedHeadContent);
              } else {
                controller.enqueue(chunk);
              }
              inserted = true;
            } else {
              if (insertion) {
                controller.enqueue(encoder.encode(insertion));
              }
              controller.enqueue(chunk);
              inserted = true;
            }
          }
        },
        async flush(controller) {
          if (hasBytes) {
            const insertion = await insert();
            if (insertion) {
              controller.enqueue(encoder.encode(insertion));
            }
          }
        }
      });
    }
    function createDeferredSuffixStream(suffix) {
      let flushed = false;
      let pending;
      const flush2 = (controller) => {
        const detached = new _detachedpromise.DetachedPromise();
        pending = detached;
        (0, _scheduler.scheduleImmediate)(() => {
          try {
            controller.enqueue(encoder.encode(suffix));
          } catch {
          } finally {
            pending = void 0;
            detached.resolve();
          }
        });
      };
      return new TransformStream({
        transform(chunk, controller) {
          controller.enqueue(chunk);
          if (flushed) return;
          flushed = true;
          flush2(controller);
        },
        flush(controller) {
          if (pending) return pending.promise;
          if (flushed) return;
          controller.enqueue(encoder.encode(suffix));
        }
      });
    }
    function createFlightDataInjectionTransformStream(stream, delayDataUntilFirstHtmlChunk) {
      let htmlStreamFinished = false;
      let pull = null;
      let donePulling = false;
      function startOrContinuePulling(controller) {
        if (!pull) {
          pull = startPulling(controller);
        }
        return pull;
      }
      async function startPulling(controller) {
        const reader = stream.getReader();
        if (delayDataUntilFirstHtmlChunk) {
          await (0, _scheduler.atLeastOneTask)();
        }
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) {
              donePulling = true;
              return;
            }
            if (!delayDataUntilFirstHtmlChunk && !htmlStreamFinished) {
              await (0, _scheduler.atLeastOneTask)();
            }
            controller.enqueue(value);
          }
        } catch (err) {
          controller.error(err);
        }
      }
      return new TransformStream({
        start(controller) {
          if (!delayDataUntilFirstHtmlChunk) {
            startOrContinuePulling(controller);
          }
        },
        transform(chunk, controller) {
          controller.enqueue(chunk);
          if (delayDataUntilFirstHtmlChunk) {
            startOrContinuePulling(controller);
          }
        },
        flush(controller) {
          htmlStreamFinished = true;
          if (donePulling) {
            return;
          }
          return startOrContinuePulling(controller);
        }
      });
    }
    var CLOSE_TAG = "</body></html>";
    function createMoveSuffixStream() {
      let foundSuffix = false;
      return new TransformStream({
        transform(chunk, controller) {
          if (foundSuffix) {
            return controller.enqueue(chunk);
          }
          const index = (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML);
          if (index > -1) {
            foundSuffix = true;
            if (chunk.length === _encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML.length) {
              return;
            }
            const before = chunk.slice(0, index);
            controller.enqueue(before);
            if (chunk.length > _encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML.length + index) {
              const after = chunk.slice(index + _encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML.length);
              controller.enqueue(after);
            }
          } else {
            controller.enqueue(chunk);
          }
        },
        flush(controller) {
          controller.enqueue(_encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML);
        }
      });
    }
    function createStripDocumentClosingTagsTransform() {
      return new TransformStream({
        transform(chunk, controller) {
          if ((0, _uint8arrayhelpers.isEquivalentUint8Arrays)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.BODY_AND_HTML) || (0, _uint8arrayhelpers.isEquivalentUint8Arrays)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.BODY) || (0, _uint8arrayhelpers.isEquivalentUint8Arrays)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.HTML)) {
            return;
          }
          chunk = (0, _uint8arrayhelpers.removeFromUint8Array)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.BODY);
          chunk = (0, _uint8arrayhelpers.removeFromUint8Array)(chunk, _encodedtags.ENCODED_TAGS.CLOSED.HTML);
          controller.enqueue(chunk);
        }
      });
    }
    function createRootLayoutValidatorStream() {
      let foundHtml = false;
      let foundBody = false;
      return new TransformStream({
        async transform(chunk, controller) {
          if (!foundHtml && (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.OPENING.HTML) > -1) {
            foundHtml = true;
          }
          if (!foundBody && (0, _uint8arrayhelpers.indexOfUint8Array)(chunk, _encodedtags.ENCODED_TAGS.OPENING.BODY) > -1) {
            foundBody = true;
          }
          controller.enqueue(chunk);
        },
        flush(controller) {
          const missingTags = [];
          if (!foundHtml) missingTags.push("html");
          if (!foundBody) missingTags.push("body");
          if (!missingTags.length) return;
          controller.enqueue(encoder.encode(`<html id="__next_error__">
            <template
              data-next-error-message="Missing ${missingTags.map((c5) => `<${c5}>`).join(missingTags.length > 1 ? " and " : "")} tags in the root layout.
Read more at https://nextjs.org/docs/messages/missing-root-layout-tags"
              data-next-error-digest="${_constants1.MISSING_ROOT_TAGS_ERROR}"
              data-next-error-stack=""
            ></template>
          `));
        }
      });
    }
    function chainTransformers(readable, transformers) {
      let stream = readable;
      for (const transformer of transformers) {
        if (!transformer) continue;
        stream = stream.pipeThrough(transformer);
      }
      return stream;
    }
    async function continueFizzStream(renderStream, { suffix, inlinedDataStream, isStaticGeneration, isBuildTimePrerendering, buildId: buildId2, getServerInsertedHTML, getServerInsertedMetadata, validateRootLayout }) {
      const suffixUnclosed = suffix ? suffix.split(CLOSE_TAG, 1)[0] : null;
      if (isStaticGeneration) {
        await renderStream.allReady;
      }
      return chainTransformers(renderStream, [
        // Buffer everything to avoid flushing too frequently
        createBufferedTransformStream(),
        // Add build id comment to start of the HTML document (in export mode)
        createPrefetchCommentStream(isBuildTimePrerendering, buildId2),
        // Transform metadata
        createMetadataTransformStream(getServerInsertedMetadata),
        // Insert suffix content
        suffixUnclosed != null && suffixUnclosed.length > 0 ? createDeferredSuffixStream(suffixUnclosed) : null,
        // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
        inlinedDataStream ? createFlightDataInjectionTransformStream(inlinedDataStream, true) : null,
        // Validate the root layout for missing html or body tags
        validateRootLayout ? createRootLayoutValidatorStream() : null,
        // Close tags should always be deferred to the end
        createMoveSuffixStream(),
        // Special head insertions
        // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid
        // hydration errors. Remove this once it's ready to be handled by react itself.
        createHeadInsertionTransformStream(getServerInsertedHTML)
      ]);
    }
    async function continueDynamicPrerender(prerenderStream, { getServerInsertedHTML, getServerInsertedMetadata }) {
      return prerenderStream.pipeThrough(createBufferedTransformStream()).pipeThrough(createStripDocumentClosingTagsTransform()).pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML)).pipeThrough(createMetadataTransformStream(getServerInsertedMetadata));
    }
    async function continueStaticPrerender(prerenderStream, { inlinedDataStream, getServerInsertedHTML, getServerInsertedMetadata, isBuildTimePrerendering, buildId: buildId2 }) {
      return prerenderStream.pipeThrough(createBufferedTransformStream()).pipeThrough(createPrefetchCommentStream(isBuildTimePrerendering, buildId2)).pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML)).pipeThrough(createMetadataTransformStream(getServerInsertedMetadata)).pipeThrough(createFlightDataInjectionTransformStream(inlinedDataStream, true)).pipeThrough(createMoveSuffixStream());
    }
    async function continueDynamicHTMLResume(renderStream, { delayDataUntilFirstHtmlChunk, inlinedDataStream, getServerInsertedHTML, getServerInsertedMetadata }) {
      return renderStream.pipeThrough(createBufferedTransformStream()).pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML)).pipeThrough(createMetadataTransformStream(getServerInsertedMetadata)).pipeThrough(createFlightDataInjectionTransformStream(inlinedDataStream, delayDataUntilFirstHtmlChunk)).pipeThrough(createMoveSuffixStream());
    }
    function createDocumentClosingStream() {
      return streamFromString(CLOSE_TAG);
    }
  }
});

// node_modules/next/dist/server/request-meta.js
var require_request_meta = __commonJS({
  "node_modules/next/dist/server/request-meta.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      NEXT_REQUEST_META: function() {
        return NEXT_REQUEST_META;
      },
      addRequestMeta: function() {
        return addRequestMeta;
      },
      getRequestMeta: function() {
        return getRequestMeta;
      },
      removeRequestMeta: function() {
        return removeRequestMeta;
      },
      setRequestMeta: function() {
        return setRequestMeta;
      }
    });
    var NEXT_REQUEST_META = Symbol.for("NextInternalRequestMeta");
    function getRequestMeta(req, key) {
      const meta = req[NEXT_REQUEST_META] || {};
      return typeof key === "string" ? meta[key] : meta;
    }
    function setRequestMeta(req, meta) {
      req[NEXT_REQUEST_META] = meta;
      return meta;
    }
    function addRequestMeta(request3, key, value) {
      const meta = getRequestMeta(request3);
      meta[key] = value;
      return setRequestMeta(request3, meta);
    }
    function removeRequestMeta(request3, key) {
      const meta = getRequestMeta(request3);
      delete meta[key];
      return setRequestMeta(request3, meta);
    }
  }
});

// node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js
var require_detect_domain_locale = __commonJS({
  "node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "detectDomainLocale", {
      enumerable: true,
      get: function() {
        return detectDomainLocale;
      }
    });
    function detectDomainLocale(domainItems, hostname, detectedLocale) {
      if (!domainItems) return;
      if (detectedLocale) {
        detectedLocale = detectedLocale.toLowerCase();
      }
      for (const item of domainItems) {
        var _item_domain, _item_locales;
        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(":", 1)[0].toLowerCase();
        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale) => locale.toLowerCase() === detectedLocale))) {
          return item;
        }
      }
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js
var require_remove_trailing_slash = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "removeTrailingSlash", {
      enumerable: true,
      get: function() {
        return removeTrailingSlash;
      }
    });
    function removeTrailingSlash(route) {
      return route.replace(/\/$/, "") || "/";
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/parse-path.js
var require_parse_path = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/parse-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "parsePath", {
      enumerable: true,
      get: function() {
        return parsePath;
      }
    });
    function parsePath(path4) {
      const hashIndex = path4.indexOf("#");
      const queryIndex = path4.indexOf("?");
      const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);
      if (hasQuery || hashIndex > -1) {
        return {
          pathname: path4.substring(0, hasQuery ? queryIndex : hashIndex),
          query: hasQuery ? path4.substring(queryIndex, hashIndex > -1 ? hashIndex : void 0) : "",
          hash: hashIndex > -1 ? path4.slice(hashIndex) : ""
        };
      }
      return {
        pathname: path4,
        query: "",
        hash: ""
      };
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js
var require_add_path_prefix = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "addPathPrefix", {
      enumerable: true,
      get: function() {
        return addPathPrefix;
      }
    });
    var _parsepath = require_parse_path();
    function addPathPrefix(path4, prefix) {
      if (!path4.startsWith("/") || !prefix) {
        return path4;
      }
      const { pathname, query, hash } = (0, _parsepath.parsePath)(path4);
      return "" + prefix + pathname + query + hash;
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js
var require_add_path_suffix = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "addPathSuffix", {
      enumerable: true,
      get: function() {
        return addPathSuffix;
      }
    });
    var _parsepath = require_parse_path();
    function addPathSuffix(path4, suffix) {
      if (!path4.startsWith("/") || !suffix) {
        return path4;
      }
      const { pathname, query, hash } = (0, _parsepath.parsePath)(path4);
      return "" + pathname + suffix + query + hash;
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js
var require_path_has_prefix = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "pathHasPrefix", {
      enumerable: true,
      get: function() {
        return pathHasPrefix;
      }
    });
    var _parsepath = require_parse_path();
    function pathHasPrefix(path4, prefix) {
      if (typeof path4 !== "string") {
        return false;
      }
      const { pathname } = (0, _parsepath.parsePath)(path4);
      return pathname === prefix || pathname.startsWith(prefix + "/");
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/add-locale.js
var require_add_locale = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/add-locale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "addLocale", {
      enumerable: true,
      get: function() {
        return addLocale;
      }
    });
    var _addpathprefix = require_add_path_prefix();
    var _pathhasprefix = require_path_has_prefix();
    function addLocale(path4, locale, defaultLocale, ignorePrefix) {
      if (!locale || locale === defaultLocale) return path4;
      const lower = path4.toLowerCase();
      if (!ignorePrefix) {
        if ((0, _pathhasprefix.pathHasPrefix)(lower, "/api")) return path4;
        if ((0, _pathhasprefix.pathHasPrefix)(lower, "/" + locale.toLowerCase())) return path4;
      }
      return (0, _addpathprefix.addPathPrefix)(path4, "/" + locale);
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js
var require_format_next_pathname_info = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "formatNextPathnameInfo", {
      enumerable: true,
      get: function() {
        return formatNextPathnameInfo;
      }
    });
    var _removetrailingslash = require_remove_trailing_slash();
    var _addpathprefix = require_add_path_prefix();
    var _addpathsuffix = require_add_path_suffix();
    var _addlocale = require_add_locale();
    function formatNextPathnameInfo(info) {
      let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? void 0 : info.defaultLocale, info.ignorePrefix);
      if (info.buildId || !info.trailingSlash) {
        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);
      }
      if (info.buildId) {
        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, "/_next/data/" + info.buildId), info.pathname === "/" ? "index.json" : ".json");
      }
      pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);
      return !info.buildId && info.trailingSlash ? !pathname.endsWith("/") ? (0, _addpathsuffix.addPathSuffix)(pathname, "/") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);
    }
  }
});

// node_modules/next/dist/shared/lib/get-hostname.js
var require_get_hostname = __commonJS({
  "node_modules/next/dist/shared/lib/get-hostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getHostname", {
      enumerable: true,
      get: function() {
        return getHostname;
      }
    });
    function getHostname(parsed, headers) {
      let hostname;
      if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {
        hostname = headers.host.toString().split(":", 1)[0];
      } else if (parsed.hostname) {
        hostname = parsed.hostname;
      } else return;
      return hostname.toLowerCase();
    }
  }
});

// node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js
var require_normalize_locale_path = __commonJS({
  "node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "normalizeLocalePath", {
      enumerable: true,
      get: function() {
        return normalizeLocalePath;
      }
    });
    var cache5 = /* @__PURE__ */ new WeakMap();
    function normalizeLocalePath(pathname, locales) {
      if (!locales) return {
        pathname
      };
      let lowercasedLocales = cache5.get(locales);
      if (!lowercasedLocales) {
        lowercasedLocales = locales.map((locale) => locale.toLowerCase());
        cache5.set(locales, lowercasedLocales);
      }
      let detectedLocale;
      const segments = pathname.split("/", 2);
      if (!segments[1]) return {
        pathname
      };
      const segment = segments[1].toLowerCase();
      const index = lowercasedLocales.indexOf(segment);
      if (index < 0) return {
        pathname
      };
      detectedLocale = locales[index];
      pathname = pathname.slice(detectedLocale.length + 1) || "/";
      return {
        pathname,
        detectedLocale
      };
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js
var require_remove_path_prefix = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "removePathPrefix", {
      enumerable: true,
      get: function() {
        return removePathPrefix;
      }
    });
    var _pathhasprefix = require_path_has_prefix();
    function removePathPrefix(path4, prefix) {
      if (!(0, _pathhasprefix.pathHasPrefix)(path4, prefix)) {
        return path4;
      }
      const withoutPrefix = path4.slice(prefix.length);
      if (withoutPrefix.startsWith("/")) {
        return withoutPrefix;
      }
      return "/" + withoutPrefix;
    }
  }
});

// node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js
var require_get_next_pathname_info = __commonJS({
  "node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getNextPathnameInfo", {
      enumerable: true,
      get: function() {
        return getNextPathnameInfo;
      }
    });
    var _normalizelocalepath = require_normalize_locale_path();
    var _removepathprefix = require_remove_path_prefix();
    var _pathhasprefix = require_path_has_prefix();
    function getNextPathnameInfo(pathname, options) {
      var _options_nextConfig;
      const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};
      const info = {
        pathname,
        trailingSlash: pathname !== "/" ? pathname.endsWith("/") : trailingSlash
      };
      if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {
        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);
        info.basePath = basePath;
      }
      let pathnameNoDataPrefix = info.pathname;
      if (info.pathname.startsWith("/_next/data/") && info.pathname.endsWith(".json")) {
        const paths = info.pathname.replace(/^\/_next\/data\//, "").replace(/\.json$/, "").split("/");
        const buildId2 = paths[0];
        info.buildId = buildId2;
        pathnameNoDataPrefix = paths[1] !== "index" ? "/" + paths.slice(1).join("/") : "/";
        if (options.parseData === true) {
          info.pathname = pathnameNoDataPrefix;
        }
      }
      if (i18n) {
        let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);
        info.locale = result.detectedLocale;
        var _result_pathname;
        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;
        if (!result.detectedLocale && info.buildId) {
          result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0, _normalizelocalepath.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);
          if (result.detectedLocale) {
            info.locale = result.detectedLocale;
          }
        }
      }
      return info;
    }
  }
});

// node_modules/next/dist/server/web/next-url.js
var require_next_url = __commonJS({
  "node_modules/next/dist/server/web/next-url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NextURL", {
      enumerable: true,
      get: function() {
        return NextURL;
      }
    });
    var _detectdomainlocale = require_detect_domain_locale();
    var _formatnextpathnameinfo = require_format_next_pathname_info();
    var _gethostname = require_get_hostname();
    var _getnextpathnameinfo = require_get_next_pathname_info();
    var REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\/\/)(127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|\[::1\]|localhost)/;
    function parseURL2(url, base) {
      return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, "localhost"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, "localhost"));
    }
    var Internal = Symbol("NextURLInternal");
    var NextURL = class _NextURL {
      constructor(input, baseOrOpts, opts) {
        let base;
        let options;
        if (typeof baseOrOpts === "object" && "pathname" in baseOrOpts || typeof baseOrOpts === "string") {
          base = baseOrOpts;
          options = opts || {};
        } else {
          options = opts || baseOrOpts || {};
        }
        this[Internal] = {
          url: parseURL2(input, base ?? options.base),
          options,
          basePath: ""
        };
        this.analyze();
      }
      analyze() {
        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig, _this_Internal_domainLocale, _this_Internal_options_nextConfig_i18n1, _this_Internal_options_nextConfig1;
        const info = (0, _getnextpathnameinfo.getNextPathnameInfo)(this[Internal].url.pathname, {
          nextConfig: this[Internal].options.nextConfig,
          parseData: !process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE,
          i18nProvider: this[Internal].options.i18nProvider
        });
        const hostname = (0, _gethostname.getHostname)(this[Internal].url, this[Internal].options.headers);
        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0, _detectdomainlocale.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);
        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);
        this[Internal].url.pathname = info.pathname;
        this[Internal].defaultLocale = defaultLocale;
        this[Internal].basePath = info.basePath ?? "";
        this[Internal].buildId = info.buildId;
        this[Internal].locale = info.locale ?? defaultLocale;
        this[Internal].trailingSlash = info.trailingSlash;
      }
      formatPathname() {
        return (0, _formatnextpathnameinfo.formatNextPathnameInfo)({
          basePath: this[Internal].basePath,
          buildId: this[Internal].buildId,
          defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : void 0,
          locale: this[Internal].locale,
          pathname: this[Internal].url.pathname,
          trailingSlash: this[Internal].trailingSlash
        });
      }
      formatSearch() {
        return this[Internal].url.search;
      }
      get buildId() {
        return this[Internal].buildId;
      }
      set buildId(buildId2) {
        this[Internal].buildId = buildId2;
      }
      get locale() {
        return this[Internal].locale ?? "";
      }
      set locale(locale) {
        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig;
        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {
          throw Object.defineProperty(new TypeError(`The NextURL configuration includes no locale "${locale}"`), "__NEXT_ERROR_CODE", {
            value: "E597",
            enumerable: false,
            configurable: true
          });
        }
        this[Internal].locale = locale;
      }
      get defaultLocale() {
        return this[Internal].defaultLocale;
      }
      get domainLocale() {
        return this[Internal].domainLocale;
      }
      get searchParams() {
        return this[Internal].url.searchParams;
      }
      get host() {
        return this[Internal].url.host;
      }
      set host(value) {
        this[Internal].url.host = value;
      }
      get hostname() {
        return this[Internal].url.hostname;
      }
      set hostname(value) {
        this[Internal].url.hostname = value;
      }
      get port() {
        return this[Internal].url.port;
      }
      set port(value) {
        this[Internal].url.port = value;
      }
      get protocol() {
        return this[Internal].url.protocol;
      }
      set protocol(value) {
        this[Internal].url.protocol = value;
      }
      get href() {
        const pathname = this.formatPathname();
        const search = this.formatSearch();
        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;
      }
      set href(url) {
        this[Internal].url = parseURL2(url);
        this.analyze();
      }
      get origin() {
        return this[Internal].url.origin;
      }
      get pathname() {
        return this[Internal].url.pathname;
      }
      set pathname(value) {
        this[Internal].url.pathname = value;
      }
      get hash() {
        return this[Internal].url.hash;
      }
      set hash(value) {
        this[Internal].url.hash = value;
      }
      get search() {
        return this[Internal].url.search;
      }
      set search(value) {
        this[Internal].url.search = value;
      }
      get password() {
        return this[Internal].url.password;
      }
      set password(value) {
        this[Internal].url.password = value;
      }
      get username() {
        return this[Internal].url.username;
      }
      set username(value) {
        this[Internal].url.username = value;
      }
      get basePath() {
        return this[Internal].basePath;
      }
      set basePath(value) {
        this[Internal].basePath = value.startsWith("/") ? value : `/${value}`;
      }
      toString() {
        return this.href;
      }
      toJSON() {
        return this.href;
      }
      [Symbol.for("edge-runtime.inspect.custom")]() {
        return {
          href: this.href,
          origin: this.origin,
          protocol: this.protocol,
          username: this.username,
          password: this.password,
          host: this.host,
          hostname: this.hostname,
          port: this.port,
          pathname: this.pathname,
          search: this.search,
          searchParams: this.searchParams,
          hash: this.hash
        };
      }
      clone() {
        return new _NextURL(String(this), this[Internal].options);
      }
    };
  }
});

// node_modules/next/dist/server/web/error.js
var require_error = __commonJS({
  "node_modules/next/dist/server/web/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      PageSignatureError: function() {
        return PageSignatureError;
      },
      RemovedPageError: function() {
        return RemovedPageError;
      },
      RemovedUAError: function() {
        return RemovedUAError;
      }
    });
    var PageSignatureError = class extends Error {
      constructor({ page }) {
        super(`The middleware "${page}" accepts an async API directly with the form:
  
  export function middleware(request, event) {
    return NextResponse.redirect('/new-location')
  }
  
  Read more: https://nextjs.org/docs/messages/middleware-new-signature
  `);
      }
    };
    var RemovedPageError = class extends Error {
      constructor() {
        super(`The request.page has been deprecated in favour of \`URLPattern\`.
  Read more: https://nextjs.org/docs/messages/middleware-request-page
  `);
      }
    };
    var RemovedUAError = class extends Error {
      constructor() {
        super(`The request.ua has been removed in favour of \`userAgent\` function.
  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent
  `);
      }
    };
  }
});

// node_modules/next/dist/compiled/@edge-runtime/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/next/dist/compiled/@edge-runtime/cookies/index.js"(exports, module) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export3(src_exports, {
      RequestCookies: () => RequestCookies,
      ResponseCookies: () => ResponseCookies,
      parseCookie: () => parseCookie,
      parseSetCookie: () => parseSetCookie,
      stringifyCookie: () => stringifyCookie
    });
    module.exports = __toCommonJS(src_exports);
    function stringifyCookie(c5) {
      var _a3;
      const attrs = [
        "path" in c5 && c5.path && `Path=${c5.path}`,
        "expires" in c5 && (c5.expires || c5.expires === 0) && `Expires=${(typeof c5.expires === "number" ? new Date(c5.expires) : c5.expires).toUTCString()}`,
        "maxAge" in c5 && typeof c5.maxAge === "number" && `Max-Age=${c5.maxAge}`,
        "domain" in c5 && c5.domain && `Domain=${c5.domain}`,
        "secure" in c5 && c5.secure && "Secure",
        "httpOnly" in c5 && c5.httpOnly && "HttpOnly",
        "sameSite" in c5 && c5.sameSite && `SameSite=${c5.sameSite}`,
        "partitioned" in c5 && c5.partitioned && "Partitioned",
        "priority" in c5 && c5.priority && `Priority=${c5.priority}`
      ].filter(Boolean);
      const stringified = `${c5.name}=${encodeURIComponent((_a3 = c5.value) != null ? _a3 : "")}`;
      return attrs.length === 0 ? stringified : `${stringified}; ${attrs.join("; ")}`;
    }
    function parseCookie(cookie) {
      const map3 = /* @__PURE__ */ new Map();
      for (const pair of cookie.split(/; */)) {
        if (!pair)
          continue;
        const splitAt = pair.indexOf("=");
        if (splitAt === -1) {
          map3.set(pair, "true");
          continue;
        }
        const [key, value] = [pair.slice(0, splitAt), pair.slice(splitAt + 1)];
        try {
          map3.set(key, decodeURIComponent(value != null ? value : "true"));
        } catch {
        }
      }
      return map3;
    }
    function parseSetCookie(setCookie) {
      if (!setCookie) {
        return void 0;
      }
      const [[name, value], ...attributes] = parseCookie(setCookie);
      const {
        domain,
        expires,
        httponly,
        maxage,
        path: path4,
        samesite,
        secure,
        partitioned,
        priority
      } = Object.fromEntries(
        attributes.map(([key, value2]) => [
          key.toLowerCase().replace(/-/g, ""),
          value2
        ])
      );
      const cookie = {
        name,
        value: decodeURIComponent(value),
        domain,
        ...expires && { expires: new Date(expires) },
        ...httponly && { httpOnly: true },
        ...typeof maxage === "string" && { maxAge: Number(maxage) },
        path: path4,
        ...samesite && { sameSite: parseSameSite(samesite) },
        ...secure && { secure: true },
        ...priority && { priority: parsePriority(priority) },
        ...partitioned && { partitioned: true }
      };
      return compact(cookie);
    }
    function compact(t5) {
      const newT = {};
      for (const key in t5) {
        if (t5[key]) {
          newT[key] = t5[key];
        }
      }
      return newT;
    }
    var SAME_SITE = ["strict", "lax", "none"];
    function parseSameSite(string) {
      string = string.toLowerCase();
      return SAME_SITE.includes(string) ? string : void 0;
    }
    var PRIORITY = ["low", "medium", "high"];
    function parsePriority(string) {
      string = string.toLowerCase();
      return PRIORITY.includes(string) ? string : void 0;
    }
    function splitCookiesString(cookiesString) {
      if (!cookiesString)
        return [];
      var cookiesStrings = [];
      var pos = 0;
      var start;
      var ch2;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace2() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch2 = cookiesString.charAt(pos);
        return ch2 !== "=" && ch2 !== ";" && ch2 !== ",";
      }
      while (pos < cookiesString.length) {
        start = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace2()) {
          ch2 = cookiesString.charAt(pos);
          if (ch2 === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace2();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start, lastComma));
              start = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    var RequestCookies = class {
      constructor(requestHeaders) {
        this._parsed = /* @__PURE__ */ new Map();
        this._headers = requestHeaders;
        const header = requestHeaders.get("cookie");
        if (header) {
          const parsed = parseCookie(header);
          for (const [name, value] of parsed) {
            this._parsed.set(name, { name, value });
          }
        }
      }
      [Symbol.iterator]() {
        return this._parsed[Symbol.iterator]();
      }
      /**
       * The amount of cookies received from the client
       */
      get size() {
        return this._parsed.size;
      }
      get(...args) {
        const name = typeof args[0] === "string" ? args[0] : args[0].name;
        return this._parsed.get(name);
      }
      getAll(...args) {
        var _a3;
        const all = Array.from(this._parsed);
        if (!args.length) {
          return all.map(([_2, value]) => value);
        }
        const name = typeof args[0] === "string" ? args[0] : (_a3 = args[0]) == null ? void 0 : _a3.name;
        return all.filter(([n5]) => n5 === name).map(([_2, value]) => value);
      }
      has(name) {
        return this._parsed.has(name);
      }
      set(...args) {
        const [name, value] = args.length === 1 ? [args[0].name, args[0].value] : args;
        const map3 = this._parsed;
        map3.set(name, { name, value });
        this._headers.set(
          "cookie",
          Array.from(map3).map(([_2, value2]) => stringifyCookie(value2)).join("; ")
        );
        return this;
      }
      /**
       * Delete the cookies matching the passed name or names in the request.
       */
      delete(names) {
        const map3 = this._parsed;
        const result = !Array.isArray(names) ? map3.delete(names) : names.map((name) => map3.delete(name));
        this._headers.set(
          "cookie",
          Array.from(map3).map(([_2, value]) => stringifyCookie(value)).join("; ")
        );
        return result;
      }
      /**
       * Delete all the cookies in the cookies in the request.
       */
      clear() {
        this.delete(Array.from(this._parsed.keys()));
        return this;
      }
      /**
       * Format the cookies in the request as a string for logging
       */
      [Symbol.for("edge-runtime.inspect.custom")]() {
        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;
      }
      toString() {
        return [...this._parsed.values()].map((v6) => `${v6.name}=${encodeURIComponent(v6.value)}`).join("; ");
      }
    };
    var ResponseCookies = class {
      constructor(responseHeaders) {
        this._parsed = /* @__PURE__ */ new Map();
        var _a3, _b, _c2;
        this._headers = responseHeaders;
        const setCookie = (_c2 = (_b = (_a3 = responseHeaders.getSetCookie) == null ? void 0 : _a3.call(responseHeaders)) != null ? _b : responseHeaders.get("set-cookie")) != null ? _c2 : [];
        const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);
        for (const cookieString of cookieStrings) {
          const parsed = parseSetCookie(cookieString);
          if (parsed)
            this._parsed.set(parsed.name, parsed);
        }
      }
      /**
       * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.
       */
      get(...args) {
        const key = typeof args[0] === "string" ? args[0] : args[0].name;
        return this._parsed.get(key);
      }
      /**
       * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.
       */
      getAll(...args) {
        var _a3;
        const all = Array.from(this._parsed.values());
        if (!args.length) {
          return all;
        }
        const key = typeof args[0] === "string" ? args[0] : (_a3 = args[0]) == null ? void 0 : _a3.name;
        return all.filter((c5) => c5.name === key);
      }
      has(name) {
        return this._parsed.has(name);
      }
      /**
       * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.
       */
      set(...args) {
        const [name, value, cookie] = args.length === 1 ? [args[0].name, args[0].value, args[0]] : args;
        const map3 = this._parsed;
        map3.set(name, normalizeCookie({ name, value, ...cookie }));
        replace(map3, this._headers);
        return this;
      }
      /**
       * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.
       */
      delete(...args) {
        const [name, options] = typeof args[0] === "string" ? [args[0]] : [args[0].name, args[0]];
        return this.set({ ...options, name, value: "", expires: /* @__PURE__ */ new Date(0) });
      }
      [Symbol.for("edge-runtime.inspect.custom")]() {
        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;
      }
      toString() {
        return [...this._parsed.values()].map(stringifyCookie).join("; ");
      }
    };
    function replace(bag, headers) {
      headers.delete("set-cookie");
      for (const [, value] of bag) {
        const serialized = stringifyCookie(value);
        headers.append("set-cookie", serialized);
      }
    }
    function normalizeCookie(cookie = { name: "", value: "" }) {
      if (typeof cookie.expires === "number") {
        cookie.expires = new Date(cookie.expires);
      }
      if (cookie.maxAge) {
        cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);
      }
      if (cookie.path === null || cookie.path === void 0) {
        cookie.path = "/";
      }
      return cookie;
    }
  }
});

// node_modules/next/dist/server/web/spec-extension/cookies.js
var require_cookies2 = __commonJS({
  "node_modules/next/dist/server/web/spec-extension/cookies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      RequestCookies: function() {
        return _cookies.RequestCookies;
      },
      ResponseCookies: function() {
        return _cookies.ResponseCookies;
      },
      stringifyCookie: function() {
        return _cookies.stringifyCookie;
      }
    });
    var _cookies = require_cookies();
  }
});

// node_modules/next/dist/server/web/spec-extension/request.js
var require_request = __commonJS({
  "node_modules/next/dist/server/web/spec-extension/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      INTERNALS: function() {
        return INTERNALS;
      },
      NextRequest: function() {
        return NextRequest;
      }
    });
    var _nexturl = require_next_url();
    var _utils = require_utils();
    var _error = require_error();
    var _cookies = require_cookies2();
    var INTERNALS = Symbol("internal request");
    var NextRequest = class extends Request {
      constructor(input, init = {}) {
        const url = typeof input !== "string" && "url" in input ? input.url : String(input);
        (0, _utils.validateURL)(url);
        if (process.env.NEXT_RUNTIME !== "edge") {
          if (init.body && init.duplex !== "half") {
            init.duplex = "half";
          }
        }
        if (input instanceof Request) super(input, init);
        else super(url, init);
        const nextUrl = new _nexturl.NextURL(url, {
          headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),
          nextConfig: init.nextConfig
        });
        this[INTERNALS] = {
          cookies: new _cookies.RequestCookies(this.headers),
          nextUrl,
          url: process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE ? url : nextUrl.toString()
        };
      }
      [Symbol.for("edge-runtime.inspect.custom")]() {
        return {
          cookies: this.cookies,
          nextUrl: this.nextUrl,
          url: this.url,
          // rest of props come from Request
          bodyUsed: this.bodyUsed,
          cache: this.cache,
          credentials: this.credentials,
          destination: this.destination,
          headers: Object.fromEntries(this.headers),
          integrity: this.integrity,
          keepalive: this.keepalive,
          method: this.method,
          mode: this.mode,
          redirect: this.redirect,
          referrer: this.referrer,
          referrerPolicy: this.referrerPolicy,
          signal: this.signal
        };
      }
      get cookies() {
        return this[INTERNALS].cookies;
      }
      get nextUrl() {
        return this[INTERNALS].nextUrl;
      }
      /**
      * @deprecated
      * `page` has been deprecated in favour of `URLPattern`.
      * Read more: https://nextjs.org/docs/messages/middleware-request-page
      */
      get page() {
        throw new _error.RemovedPageError();
      }
      /**
      * @deprecated
      * `ua` has been removed in favour of \`userAgent\` function.
      * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent
      */
      get ua() {
        throw new _error.RemovedUAError();
      }
      get url() {
        return this[INTERNALS].url;
      }
    };
  }
});

// node_modules/next/dist/server/base-http/helpers.js
var require_helpers = __commonJS({
  "node_modules/next/dist/server/base-http/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      isNodeNextRequest: function() {
        return isNodeNextRequest;
      },
      isNodeNextResponse: function() {
        return isNodeNextResponse;
      },
      isWebNextRequest: function() {
        return isWebNextRequest;
      },
      isWebNextResponse: function() {
        return isWebNextResponse;
      }
    });
    var isWebNextRequest = (req) => process.env.NEXT_RUNTIME === "edge";
    var isWebNextResponse = (res) => process.env.NEXT_RUNTIME === "edge";
    var isNodeNextRequest = (req) => process.env.NEXT_RUNTIME !== "edge";
    var isNodeNextResponse = (res) => process.env.NEXT_RUNTIME !== "edge";
  }
});

// node_modules/next/dist/server/web/spec-extension/adapters/next-request.js
var require_next_request = __commonJS({
  "node_modules/next/dist/server/web/spec-extension/adapters/next-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      NextRequestAdapter: function() {
        return NextRequestAdapter;
      },
      ResponseAborted: function() {
        return ResponseAborted;
      },
      ResponseAbortedName: function() {
        return ResponseAbortedName;
      },
      createAbortController: function() {
        return createAbortController;
      },
      signalFromNodeResponse: function() {
        return signalFromNodeResponse;
      }
    });
    var _requestmeta = require_request_meta();
    var _utils = require_utils();
    var _request = require_request();
    var _helpers = require_helpers();
    var ResponseAbortedName = "ResponseAborted";
    var ResponseAborted = class extends Error {
      constructor(...args) {
        super(...args), this.name = ResponseAbortedName;
      }
    };
    function createAbortController(response) {
      const controller = new AbortController();
      response.once("close", () => {
        if (response.writableFinished) return;
        controller.abort(new ResponseAborted());
      });
      return controller;
    }
    function signalFromNodeResponse(response) {
      const { errored, destroyed } = response;
      if (errored || destroyed) {
        return AbortSignal.abort(errored ?? new ResponseAborted());
      }
      const { signal } = createAbortController(response);
      return signal;
    }
    var NextRequestAdapter = class _NextRequestAdapter {
      static fromBaseNextRequest(request3, signal) {
        if (
          // The type check here ensures that `req` is correctly typed, and the
          // environment variable check provides dead code elimination.
          process.env.NEXT_RUNTIME === "edge" && (0, _helpers.isWebNextRequest)(request3)
        ) {
          return _NextRequestAdapter.fromWebNextRequest(request3);
        } else if (
          // The type check here ensures that `req` is correctly typed, and the
          // environment variable check provides dead code elimination.
          process.env.NEXT_RUNTIME !== "edge" && (0, _helpers.isNodeNextRequest)(request3)
        ) {
          return _NextRequestAdapter.fromNodeNextRequest(request3, signal);
        } else {
          throw Object.defineProperty(new Error("Invariant: Unsupported NextRequest type"), "__NEXT_ERROR_CODE", {
            value: "E345",
            enumerable: false,
            configurable: true
          });
        }
      }
      static fromNodeNextRequest(request3, signal) {
        let body = null;
        if (request3.method !== "GET" && request3.method !== "HEAD" && request3.body) {
          body = request3.body;
        }
        let url;
        if (request3.url.startsWith("http")) {
          url = new URL(request3.url);
        } else {
          const base = (0, _requestmeta.getRequestMeta)(request3, "initURL");
          if (!base || !base.startsWith("http")) {
            url = new URL(request3.url, "http://n");
          } else {
            url = new URL(request3.url, base);
          }
        }
        return new _request.NextRequest(url, {
          method: request3.method,
          headers: (0, _utils.fromNodeOutgoingHttpHeaders)(request3.headers),
          duplex: "half",
          signal,
          // geo
          // ip
          // nextConfig
          // body can not be passed if request was aborted
          // or we get a Request body was disturbed error
          ...signal.aborted ? {} : {
            body
          }
        });
      }
      static fromWebNextRequest(request3) {
        let body = null;
        if (request3.method !== "GET" && request3.method !== "HEAD") {
          body = request3.body;
        }
        return new _request.NextRequest(request3.url, {
          method: request3.method,
          headers: (0, _utils.fromNodeOutgoingHttpHeaders)(request3.headers),
          duplex: "half",
          signal: request3.request.signal,
          // geo
          // ip
          // nextConfig
          // body can not be passed if request was aborted
          // or we get a Request body was disturbed error
          ...request3.request.signal.aborted ? {} : {
            body
          }
        });
      }
    };
  }
});

// node_modules/next/dist/server/client-component-renderer-logger.js
var require_client_component_renderer_logger = __commonJS({
  "node_modules/next/dist/server/client-component-renderer-logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      getClientComponentLoaderMetrics: function() {
        return getClientComponentLoaderMetrics;
      },
      wrapClientComponentLoader: function() {
        return wrapClientComponentLoader;
      }
    });
    var clientComponentLoadStart = 0;
    var clientComponentLoadTimes = 0;
    var clientComponentLoadCount = 0;
    function wrapClientComponentLoader(ComponentMod) {
      if (!("performance" in globalThis)) {
        return ComponentMod.__next_app__;
      }
      return {
        require: (...args) => {
          const startTime = performance.now();
          if (clientComponentLoadStart === 0) {
            clientComponentLoadStart = startTime;
          }
          try {
            clientComponentLoadCount += 1;
            return ComponentMod.__next_app__.require(...args);
          } finally {
            clientComponentLoadTimes += performance.now() - startTime;
          }
        },
        loadChunk: (...args) => {
          const startTime = performance.now();
          const result = ComponentMod.__next_app__.loadChunk(...args);
          result.finally(() => {
            clientComponentLoadTimes += performance.now() - startTime;
          });
          return result;
        }
      };
    }
    function getClientComponentLoaderMetrics(options = {}) {
      const metrics = clientComponentLoadStart === 0 ? void 0 : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
      };
      if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
      }
      return metrics;
    }
  }
});

// node_modules/next/dist/server/pipe-readable.js
var require_pipe_readable = __commonJS({
  "node_modules/next/dist/server/pipe-readable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      isAbortError: function() {
        return isAbortError;
      },
      pipeToNodeResponse: function() {
        return pipeToNodeResponse;
      }
    });
    var _nextrequest = require_next_request();
    var _detachedpromise = require_detached_promise();
    var _tracer = require_tracer();
    var _constants = require_constants2();
    var _clientcomponentrendererlogger = require_client_component_renderer_logger();
    function isAbortError(e5) {
      return (e5 == null ? void 0 : e5.name) === "AbortError" || (e5 == null ? void 0 : e5.name) === _nextrequest.ResponseAbortedName;
    }
    function createWriterFromResponse(res, waitUntilForEnd) {
      let started = false;
      let drained = new _detachedpromise.DetachedPromise();
      function onDrain() {
        drained.resolve();
      }
      res.on("drain", onDrain);
      res.once("close", () => {
        res.off("drain", onDrain);
        drained.resolve();
      });
      const finished = new _detachedpromise.DetachedPromise();
      res.once("finish", () => {
        finished.resolve();
      });
      return new WritableStream({
        write: async (chunk) => {
          if (!started) {
            started = true;
            if ("performance" in globalThis && process.env.NEXT_OTEL_PERFORMANCE_PREFIX) {
              const metrics = (0, _clientcomponentrendererlogger.getClientComponentLoaderMetrics)();
              if (metrics) {
                performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-client-component-loading`, {
                  start: metrics.clientComponentLoadStart,
                  end: metrics.clientComponentLoadStart + metrics.clientComponentLoadTimes
                });
              }
            }
            res.flushHeaders();
            (0, _tracer.getTracer)().trace(_constants.NextNodeServerSpan.startResponse, {
              spanName: "start response"
            }, () => void 0);
          }
          try {
            const ok = res.write(chunk);
            if ("flush" in res && typeof res.flush === "function") {
              res.flush();
            }
            if (!ok) {
              await drained.promise;
              drained = new _detachedpromise.DetachedPromise();
            }
          } catch (err) {
            res.end();
            throw Object.defineProperty(new Error("failed to write chunk to response", {
              cause: err
            }), "__NEXT_ERROR_CODE", {
              value: "E321",
              enumerable: false,
              configurable: true
            });
          }
        },
        abort: (err) => {
          if (res.writableFinished) return;
          res.destroy(err);
        },
        close: async () => {
          if (waitUntilForEnd) {
            await waitUntilForEnd;
          }
          if (res.writableFinished) return;
          res.end();
          return finished.promise;
        }
      });
    }
    async function pipeToNodeResponse(readable, res, waitUntilForEnd) {
      try {
        const { errored, destroyed } = res;
        if (errored || destroyed) return;
        const controller = (0, _nextrequest.createAbortController)(res);
        const writer = createWriterFromResponse(res, waitUntilForEnd);
        await readable.pipeTo(writer, {
          signal: controller.signal
        });
      } catch (err) {
        if (isAbortError(err)) return;
        throw Object.defineProperty(new Error("failed to pipe response", {
          cause: err
        }), "__NEXT_ERROR_CODE", {
          value: "E180",
          enumerable: false,
          configurable: true
        });
      }
    }
  }
});

// node_modules/next/dist/shared/lib/invariant-error.js
var require_invariant_error = __commonJS({
  "node_modules/next/dist/shared/lib/invariant-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InvariantError", {
      enumerable: true,
      get: function() {
        return InvariantError;
      }
    });
    var InvariantError = class extends Error {
      constructor(message, options) {
        super("Invariant: " + (message.endsWith(".") ? message : message + ".") + " This is a bug in Next.js.", options);
        this.name = "InvariantError";
      }
    };
  }
});

// node_modules/next/dist/server/render-result.js
var require_render_result = __commonJS({
  "node_modules/next/dist/server/render-result.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return RenderResult;
      }
    });
    var _nodewebstreamshelper = require_node_web_streams_helper();
    var _pipereadable = require_pipe_readable();
    var _invarianterror = require_invariant_error();
    var RenderResult = class _RenderResult {
      static #_ = (
        /**
        * A render result that represents an empty response. This is used to
        * represent a response that was not found or was already sent.
        */
        this.EMPTY = new _RenderResult(null, {
          metadata: {},
          contentType: null
        })
      );
      /**
      * Creates a new RenderResult instance from a static response.
      *
      * @param value the static response value
      * @param contentType the content type of the response
      * @returns a new RenderResult instance
      */
      static fromStatic(value, contentType) {
        return new _RenderResult(value, {
          metadata: {},
          contentType
        });
      }
      constructor(response, { contentType, waitUntil, metadata }) {
        this.response = response;
        this.contentType = contentType;
        this.metadata = metadata;
        this.waitUntil = waitUntil;
      }
      assignMetadata(metadata) {
        Object.assign(this.metadata, metadata);
      }
      /**
      * Returns true if the response is null. It can be null if the response was
      * not found or was already sent.
      */
      get isNull() {
        return this.response === null;
      }
      /**
      * Returns false if the response is a string. It can be a string if the page
      * was prerendered. If it's not, then it was generated dynamically.
      */
      get isDynamic() {
        return typeof this.response !== "string";
      }
      toUnchunkedString(stream = false) {
        if (this.response === null) {
          return "";
        }
        if (typeof this.response !== "string") {
          if (!stream) {
            throw Object.defineProperty(new _invarianterror.InvariantError("dynamic responses cannot be unchunked. This is a bug in Next.js"), "__NEXT_ERROR_CODE", {
              value: "E732",
              enumerable: false,
              configurable: true
            });
          }
          return (0, _nodewebstreamshelper.streamToString)(this.readable);
        }
        return this.response;
      }
      /**
      * Returns a readable stream of the response.
      */
      get readable() {
        if (this.response === null) {
          return new ReadableStream({
            start(controller) {
              controller.close();
            }
          });
        }
        if (typeof this.response === "string") {
          return (0, _nodewebstreamshelper.streamFromString)(this.response);
        }
        if (Buffer.isBuffer(this.response)) {
          return (0, _nodewebstreamshelper.streamFromBuffer)(this.response);
        }
        if (Array.isArray(this.response)) {
          return (0, _nodewebstreamshelper.chainStreams)(...this.response);
        }
        return this.response;
      }
      /**
      * Coerces the response to an array of streams. This will convert the response
      * to an array of streams if it is not already one.
      *
      * @returns An array of streams
      */
      coerce() {
        if (this.response === null) {
          return [];
        }
        if (typeof this.response === "string") {
          return [
            (0, _nodewebstreamshelper.streamFromString)(this.response)
          ];
        } else if (Array.isArray(this.response)) {
          return this.response;
        } else if (Buffer.isBuffer(this.response)) {
          return [
            (0, _nodewebstreamshelper.streamFromBuffer)(this.response)
          ];
        } else {
          return [
            this.response
          ];
        }
      }
      /**
      * Unshifts a new stream to the response. This will convert the response to an
      * array of streams if it is not already one and will add the new stream to
      * the start of the array. When this response is piped, all of the streams
      * will be piped one after the other.
      *
      * @param readable The new stream to unshift
      */
      unshift(readable) {
        this.response = this.coerce();
        this.response.unshift(readable);
      }
      /**
      * Chains a new stream to the response. This will convert the response to an
      * array of streams if it is not already one and will add the new stream to
      * the end. When this response is piped, all of the streams will be piped
      * one after the other.
      *
      * @param readable The new stream to chain
      */
      push(readable) {
        this.response = this.coerce();
        this.response.push(readable);
      }
      /**
      * Pipes the response to a writable stream. This will close/cancel the
      * writable stream if an error is encountered. If this doesn't throw, then
      * the writable stream will be closed or aborted.
      *
      * @param writable Writable stream to pipe the response to
      */
      async pipeTo(writable) {
        try {
          await this.readable.pipeTo(writable, {
            // We want to close the writable stream ourselves so that we can wait
            // for the waitUntil promise to resolve before closing it. If an error
            // is encountered, we'll abort the writable stream if we swallowed the
            // error.
            preventClose: true
          });
          if (this.waitUntil) await this.waitUntil;
          await writable.close();
        } catch (err) {
          if ((0, _pipereadable.isAbortError)(err)) {
            await writable.abort(err);
            return;
          }
          throw err;
        }
      }
      /**
      * Pipes the response to a node response. This will close/cancel the node
      * response if an error is encountered.
      *
      * @param res
      */
      async pipeToNodeResponse(res) {
        await (0, _pipereadable.pipeToNodeResponse)(this.readable, res, this.waitUntil);
      }
    };
  }
});

// node_modules/next/dist/server/route-kind.js
var require_route_kind = __commonJS({
  "node_modules/next/dist/server/route-kind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RouteKind", {
      enumerable: true,
      get: function() {
        return RouteKind;
      }
    });
    var RouteKind = /* @__PURE__ */ function(RouteKind2) {
      RouteKind2["PAGES"] = "PAGES";
      RouteKind2["PAGES_API"] = "PAGES_API";
      RouteKind2["APP_PAGE"] = "APP_PAGE";
      RouteKind2["APP_ROUTE"] = "APP_ROUTE";
      RouteKind2["IMAGE"] = "IMAGE";
      return RouteKind2;
    }({});
  }
});

// node_modules/next/dist/server/response-cache/utils.js
var require_utils2 = __commonJS({
  "node_modules/next/dist/server/response-cache/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      fromResponseCacheEntry: function() {
        return fromResponseCacheEntry;
      },
      routeKindToIncrementalCacheKind: function() {
        return routeKindToIncrementalCacheKind;
      },
      toResponseCacheEntry: function() {
        return toResponseCacheEntry;
      }
    });
    var _types = require_types();
    var _renderresult = /* @__PURE__ */ _interop_require_default(require_render_result());
    var _routekind = require_route_kind();
    var _constants = require_constants();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    async function fromResponseCacheEntry(cacheEntry) {
      var _cacheEntry_value, _cacheEntry_value1;
      return {
        ...cacheEntry,
        value: ((_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) === _types.CachedRouteKind.PAGES ? {
          kind: _types.CachedRouteKind.PAGES,
          html: await cacheEntry.value.html.toUnchunkedString(true),
          pageData: cacheEntry.value.pageData,
          headers: cacheEntry.value.headers,
          status: cacheEntry.value.status
        } : ((_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind) === _types.CachedRouteKind.APP_PAGE ? {
          kind: _types.CachedRouteKind.APP_PAGE,
          html: await cacheEntry.value.html.toUnchunkedString(true),
          postponed: cacheEntry.value.postponed,
          rscData: cacheEntry.value.rscData,
          headers: cacheEntry.value.headers,
          status: cacheEntry.value.status,
          segmentData: cacheEntry.value.segmentData
        } : cacheEntry.value
      };
    }
    async function toResponseCacheEntry(response) {
      var _response_value, _response_value1;
      if (!response) return null;
      return {
        isMiss: response.isMiss,
        isStale: response.isStale,
        cacheControl: response.cacheControl,
        value: ((_response_value = response.value) == null ? void 0 : _response_value.kind) === _types.CachedRouteKind.PAGES ? {
          kind: _types.CachedRouteKind.PAGES,
          html: _renderresult.default.fromStatic(response.value.html, _constants.HTML_CONTENT_TYPE_HEADER),
          pageData: response.value.pageData,
          headers: response.value.headers,
          status: response.value.status
        } : ((_response_value1 = response.value) == null ? void 0 : _response_value1.kind) === _types.CachedRouteKind.APP_PAGE ? {
          kind: _types.CachedRouteKind.APP_PAGE,
          html: _renderresult.default.fromStatic(response.value.html, _constants.HTML_CONTENT_TYPE_HEADER),
          rscData: response.value.rscData,
          headers: response.value.headers,
          status: response.value.status,
          postponed: response.value.postponed,
          segmentData: response.value.segmentData
        } : response.value
      };
    }
    function routeKindToIncrementalCacheKind(routeKind) {
      switch (routeKind) {
        case _routekind.RouteKind.PAGES:
          return _types.IncrementalCacheKind.PAGES;
        case _routekind.RouteKind.APP_PAGE:
          return _types.IncrementalCacheKind.APP_PAGE;
        case _routekind.RouteKind.IMAGE:
          return _types.IncrementalCacheKind.IMAGE;
        case _routekind.RouteKind.APP_ROUTE:
          return _types.IncrementalCacheKind.APP_ROUTE;
        case _routekind.RouteKind.PAGES_API:
          throw Object.defineProperty(new Error(`Unexpected route kind ${routeKind}`), "__NEXT_ERROR_CODE", {
            value: "E64",
            enumerable: false,
            configurable: true
          });
        default:
          return routeKind;
      }
    }
  }
});

// node_modules/next/dist/server/response-cache/index.js
var require_response_cache = __commonJS({
  "node_modules/next/dist/server/response-cache/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return ResponseCache;
      }
    });
    var _batcher = require_batcher();
    var _scheduler = require_scheduler();
    var _utils = require_utils2();
    _export_star(require_types(), exports);
    function _export_star(from, to) {
      Object.keys(from).forEach(function(k5) {
        if (k5 !== "default" && !Object.prototype.hasOwnProperty.call(to, k5)) {
          Object.defineProperty(to, k5, {
            enumerable: true,
            get: function() {
              return from[k5];
            }
          });
        }
      });
      return from;
    }
    var ResponseCache = class {
      constructor(minimal_mode) {
        this.batcher = _batcher.Batcher.create({
          // Ensure on-demand revalidate doesn't block normal requests, it should be
          // safe to run an on-demand revalidate for the same key as a normal request.
          cacheKeyFn: ({ key, isOnDemandRevalidate }) => `${key}-${isOnDemandRevalidate ? "1" : "0"}`,
          // We wait to do any async work until after we've added our promise to
          // `pendingResponses` to ensure that any any other calls will reuse the
          // same promise until we've fully finished our work.
          schedulerFn: _scheduler.scheduleOnNextTick
        });
        this.minimal_mode = minimal_mode;
      }
      async get(key, responseGenerator, context) {
        if (!key) {
          return responseGenerator({
            hasResolved: false,
            previousCacheEntry: null
          });
        }
        const { incrementalCache, isOnDemandRevalidate = false, isFallback = false, isRoutePPREnabled = false, waitUntil } = context;
        const response = await this.batcher.batch({
          key,
          isOnDemandRevalidate
        }, (cacheKey, resolve) => {
          const prom = (async () => {
            var _this_previousCacheItem;
            if (this.minimal_mode && ((_this_previousCacheItem = this.previousCacheItem) == null ? void 0 : _this_previousCacheItem.key) === cacheKey && this.previousCacheItem.expiresAt > Date.now()) {
              return this.previousCacheItem.entry;
            }
            const kind = (0, _utils.routeKindToIncrementalCacheKind)(context.routeKind);
            let resolved = false;
            let cachedResponse = null;
            try {
              cachedResponse = !this.minimal_mode ? await incrementalCache.get(key, {
                kind,
                isRoutePPREnabled: context.isRoutePPREnabled,
                isFallback
              }) : null;
              if (cachedResponse && !isOnDemandRevalidate) {
                resolve(cachedResponse);
                resolved = true;
                if (!cachedResponse.isStale || context.isPrefetch) {
                  return null;
                }
              }
              const cacheEntry = await responseGenerator({
                hasResolved: resolved,
                previousCacheEntry: cachedResponse,
                isRevalidating: true
              });
              if (!cacheEntry) {
                if (this.minimal_mode) this.previousCacheItem = void 0;
                return null;
              }
              const resolveValue = await (0, _utils.fromResponseCacheEntry)({
                ...cacheEntry,
                isMiss: !cachedResponse
              });
              if (!resolveValue) {
                if (this.minimal_mode) this.previousCacheItem = void 0;
                return null;
              }
              if (!isOnDemandRevalidate && !resolved) {
                resolve(resolveValue);
                resolved = true;
              }
              if (resolveValue.cacheControl) {
                if (this.minimal_mode) {
                  this.previousCacheItem = {
                    key: cacheKey,
                    entry: resolveValue,
                    expiresAt: Date.now() + 1e3
                  };
                } else {
                  await incrementalCache.set(key, resolveValue.value, {
                    cacheControl: resolveValue.cacheControl,
                    isRoutePPREnabled,
                    isFallback
                  });
                }
              }
              return resolveValue;
            } catch (err) {
              if (cachedResponse == null ? void 0 : cachedResponse.cacheControl) {
                const newRevalidate = Math.min(Math.max(cachedResponse.cacheControl.revalidate || 3, 3), 30);
                const newExpire = cachedResponse.cacheControl.expire === void 0 ? void 0 : Math.max(newRevalidate + 3, cachedResponse.cacheControl.expire);
                await incrementalCache.set(key, cachedResponse.value, {
                  cacheControl: {
                    revalidate: newRevalidate,
                    expire: newExpire
                  },
                  isRoutePPREnabled,
                  isFallback
                });
              }
              if (resolved) {
                console.error(err);
                return null;
              }
              throw err;
            }
          })();
          if (waitUntil) {
            waitUntil(prom);
          }
          return prom;
        });
        return (0, _utils.toResponseCacheEntry)(response);
      }
    };
  }
});

// node_modules/next/dist/shared/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/next/dist/shared/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      DecodeError: function() {
        return DecodeError;
      },
      MiddlewareNotFoundError: function() {
        return MiddlewareNotFoundError;
      },
      MissingStaticPage: function() {
        return MissingStaticPage;
      },
      NormalizeError: function() {
        return NormalizeError;
      },
      PageNotFoundError: function() {
        return PageNotFoundError;
      },
      SP: function() {
        return SP;
      },
      ST: function() {
        return ST;
      },
      WEB_VITALS: function() {
        return WEB_VITALS;
      },
      execOnce: function() {
        return execOnce;
      },
      getDisplayName: function() {
        return getDisplayName;
      },
      getLocationOrigin: function() {
        return getLocationOrigin;
      },
      getURL: function() {
        return getURL;
      },
      isAbsoluteUrl: function() {
        return isAbsoluteUrl;
      },
      isResSent: function() {
        return isResSent;
      },
      loadGetInitialProps: function() {
        return loadGetInitialProps;
      },
      normalizeRepeatedSlashes: function() {
        return normalizeRepeatedSlashes;
      },
      stringifyError: function() {
        return stringifyError;
      }
    });
    var WEB_VITALS = [
      "CLS",
      "FCP",
      "FID",
      "INP",
      "LCP",
      "TTFB"
    ];
    function execOnce(fn) {
      let used = false;
      let result;
      return function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (!used) {
          used = true;
          result = fn(...args);
        }
        return result;
      };
    }
    var ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
    var isAbsoluteUrl = (url) => ABSOLUTE_URL_REGEX.test(url);
    function getLocationOrigin() {
      const { protocol, hostname, port } = window.location;
      return protocol + "//" + hostname + (port ? ":" + port : "");
    }
    function getURL() {
      const { href } = window.location;
      const origin = getLocationOrigin();
      return href.substring(origin.length);
    }
    function getDisplayName(Component) {
      return typeof Component === "string" ? Component : Component.displayName || Component.name || "Unknown";
    }
    function isResSent(res) {
      return res.finished || res.headersSent;
    }
    function normalizeRepeatedSlashes(url) {
      const urlParts = url.split("?");
      const urlNoQuery = urlParts[0];
      return urlNoQuery.replace(/\\/g, "/").replace(/\/\/+/g, "/") + (urlParts[1] ? "?" + urlParts.slice(1).join("?") : "");
    }
    async function loadGetInitialProps(App, ctx) {
      if (process.env.NODE_ENV !== "production") {
        var _App_prototype;
        if ((_App_prototype = App.prototype) == null ? void 0 : _App_prototype.getInitialProps) {
          const message = '"' + getDisplayName(App) + '.getInitialProps()" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
          throw Object.defineProperty(new Error(message), "__NEXT_ERROR_CODE", {
            value: "E394",
            enumerable: false,
            configurable: true
          });
        }
      }
      const res = ctx.res || ctx.ctx && ctx.ctx.res;
      if (!App.getInitialProps) {
        if (ctx.ctx && ctx.Component) {
          return {
            pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
          };
        }
        return {};
      }
      const props = await App.getInitialProps(ctx);
      if (res && isResSent(res)) {
        return props;
      }
      if (!props) {
        const message = '"' + getDisplayName(App) + '.getInitialProps()" should resolve to an object. But found "' + props + '" instead.';
        throw Object.defineProperty(new Error(message), "__NEXT_ERROR_CODE", {
          value: "E394",
          enumerable: false,
          configurable: true
        });
      }
      if (process.env.NODE_ENV !== "production") {
        if (Object.keys(props).length === 0 && !ctx.ctx) {
          console.warn("" + getDisplayName(App) + " returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps");
        }
      }
      return props;
    }
    var SP = typeof performance !== "undefined";
    var ST = SP && [
      "mark",
      "measure",
      "getEntriesByName"
    ].every((method) => typeof performance[method] === "function");
    var DecodeError = class extends Error {
    };
    var NormalizeError = class extends Error {
    };
    var PageNotFoundError = class extends Error {
      constructor(page) {
        super();
        this.code = "ENOENT";
        this.name = "PageNotFoundError";
        this.message = "Cannot find module for page: " + page;
      }
    };
    var MissingStaticPage = class extends Error {
      constructor(page, message) {
        super();
        this.message = "Failed to load static file for page: " + page + " " + message;
      }
    };
    var MiddlewareNotFoundError = class extends Error {
      constructor() {
        super();
        this.code = "ENOENT";
        this.message = "Cannot find the middleware module";
      }
    };
    function stringifyError(error2) {
      return JSON.stringify({
        message: error2.message,
        stack: error2.stack
      });
    }
  }
});

// node_modules/next/dist/server/lib/etag.js
var require_etag = __commonJS({
  "node_modules/next/dist/server/lib/etag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      fnv1a52: function() {
        return fnv1a52;
      },
      generateETag: function() {
        return generateETag;
      }
    });
    var fnv1a52 = (str) => {
      const len = str.length;
      let i5 = 0, t0 = 0, v0 = 8997, t1 = 0, v1 = 33826, t22 = 0, v22 = 40164, t32 = 0, v32 = 52210;
      while (i5 < len) {
        v0 ^= str.charCodeAt(i5++);
        t0 = v0 * 435;
        t1 = v1 * 435;
        t22 = v22 * 435;
        t32 = v32 * 435;
        t22 += v0 << 8;
        t32 += v1 << 8;
        t1 += t0 >>> 16;
        v0 = t0 & 65535;
        t22 += t1 >>> 16;
        v1 = t1 & 65535;
        v32 = t32 + (t22 >>> 16) & 65535;
        v22 = t22 & 65535;
      }
      return (v32 & 15) * 281474976710656 + v22 * 4294967296 + v1 * 65536 + (v0 ^ v32 >> 4);
    };
    var generateETag = (payload, weak = false) => {
      const prefix = weak ? 'W/"' : '"';
      return prefix + fnv1a52(payload).toString(36) + payload.length.toString(36) + '"';
    };
  }
});

// node_modules/next/dist/compiled/fresh/index.js
var require_fresh = __commonJS({
  "node_modules/next/dist/compiled/fresh/index.js"(exports, module) {
    (() => {
      "use strict";
      var e5 = { 695: (e6) => {
        var r6 = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;
        e6.exports = fresh;
        function fresh(e7, a6) {
          var t5 = e7["if-modified-since"];
          var s5 = e7["if-none-match"];
          if (!t5 && !s5) {
            return false;
          }
          var i5 = e7["cache-control"];
          if (i5 && r6.test(i5)) {
            return false;
          }
          if (s5 && s5 !== "*") {
            var f5 = a6["etag"];
            if (!f5) {
              return false;
            }
            var n5 = true;
            var u5 = parseTokenList(s5);
            for (var _2 = 0; _2 < u5.length; _2++) {
              var o5 = u5[_2];
              if (o5 === f5 || o5 === "W/" + f5 || "W/" + o5 === f5) {
                n5 = false;
                break;
              }
            }
            if (n5) {
              return false;
            }
          }
          if (t5) {
            var p5 = a6["last-modified"];
            var v6 = !p5 || !(parseHttpDate(p5) <= parseHttpDate(t5));
            if (v6) {
              return false;
            }
          }
          return true;
        }
        function parseHttpDate(e7) {
          var r7 = e7 && Date.parse(e7);
          return typeof r7 === "number" ? r7 : NaN;
        }
        function parseTokenList(e7) {
          var r7 = 0;
          var a6 = [];
          var t5 = 0;
          for (var s5 = 0, i5 = e7.length; s5 < i5; s5++) {
            switch (e7.charCodeAt(s5)) {
              case 32:
                if (t5 === r7) {
                  t5 = r7 = s5 + 1;
                }
                break;
              case 44:
                a6.push(e7.substring(t5, r7));
                t5 = r7 = s5 + 1;
                break;
              default:
                r7 = s5 + 1;
                break;
            }
          }
          a6.push(e7.substring(t5, r7));
          return a6;
        }
      } };
      var r5 = {};
      function __nccwpck_require__(a6) {
        var t5 = r5[a6];
        if (t5 !== void 0) {
          return t5.exports;
        }
        var s5 = r5[a6] = { exports: {} };
        var i5 = true;
        try {
          e5[a6](s5, s5.exports, __nccwpck_require__);
          i5 = false;
        } finally {
          if (i5) delete r5[a6];
        }
        return s5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var a5 = __nccwpck_require__(695);
      module.exports = a5;
    })();
  }
});

// node_modules/next/dist/server/lib/cache-control.js
var require_cache_control = __commonJS({
  "node_modules/next/dist/server/lib/cache-control.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getCacheControlHeader", {
      enumerable: true,
      get: function() {
        return getCacheControlHeader;
      }
    });
    var _constants = require_constants();
    function getCacheControlHeader({ revalidate, expire }) {
      const swrHeader = typeof revalidate === "number" && expire !== void 0 && revalidate < expire ? `, stale-while-revalidate=${expire - revalidate}` : "";
      if (revalidate === 0) {
        return "private, no-cache, no-store, max-age=0, must-revalidate";
      } else if (typeof revalidate === "number") {
        return `s-maxage=${revalidate}${swrHeader}`;
      }
      return `s-maxage=${_constants.CACHE_ONE_YEAR}${swrHeader}`;
    }
  }
});

// node_modules/next/dist/server/send-payload.js
var require_send_payload = __commonJS({
  "node_modules/next/dist/server/send-payload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      sendEtagResponse: function() {
        return sendEtagResponse;
      },
      sendRenderResult: function() {
        return sendRenderResult;
      }
    });
    var _utils = require_utils3();
    var _etag = require_etag();
    var _fresh = /* @__PURE__ */ _interop_require_default(require_fresh());
    var _cachecontrol = require_cache_control();
    var _constants = require_constants();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function sendEtagResponse(req, res, etag) {
      if (etag) {
        res.setHeader("ETag", etag);
      }
      if ((0, _fresh.default)(req.headers, {
        etag
      })) {
        res.statusCode = 304;
        res.end();
        return true;
      }
      return false;
    }
    async function sendRenderResult({ req, res, result, generateEtags, poweredByHeader, cacheControl }) {
      if ((0, _utils.isResSent)(res)) {
        return;
      }
      if (poweredByHeader && result.contentType === _constants.HTML_CONTENT_TYPE_HEADER) {
        res.setHeader("X-Powered-By", "Next.js");
      }
      if (cacheControl && !res.getHeader("Cache-Control")) {
        res.setHeader("Cache-Control", (0, _cachecontrol.getCacheControlHeader)(cacheControl));
      }
      const payload = result.isDynamic ? null : result.toUnchunkedString();
      if (generateEtags && payload !== null) {
        const etag = (0, _etag.generateETag)(payload);
        if (sendEtagResponse(req, res, etag)) {
          return;
        }
      }
      if (!res.getHeader("Content-Type") && result.contentType) {
        res.setHeader("Content-Type", result.contentType);
      }
      if (payload) {
        res.setHeader("Content-Length", Buffer.byteLength(payload));
      }
      if (req.method === "HEAD") {
        res.end(null);
        return;
      }
      if (payload !== null) {
        res.end(payload);
        return;
      }
      await result.pipeToNodeResponse(res);
    }
  }
});

// node_modules/next/dist/compiled/debug/index.js
var require_debug = __commonJS({
  "node_modules/next/dist/compiled/debug/index.js"(exports, module) {
    (() => {
      var e5 = { 237: (e6, t6, r6) => {
        t6.log = log;
        t6.formatArgs = formatArgs;
        t6.save = save;
        t6.load = load;
        t6.useColors = useColors;
        t6.storage = localstorage();
        t6.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
        function useColors() {
          if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
            return true;
          }
          if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          }
          return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        function formatArgs(t7) {
          t7[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t7[0] + (this.useColors ? "%c " : " ") + "+" + e6.exports.humanize(this.diff);
          if (!this.useColors) {
            return;
          }
          const r7 = "color: " + this.color;
          t7.splice(1, 0, r7, "color: inherit");
          let s6 = 0;
          let n5 = 0;
          t7[0].replace(/%[a-zA-Z%]/g, (e7) => {
            if (e7 === "%%") {
              return;
            }
            s6++;
            if (e7 === "%c") {
              n5 = s6;
            }
          });
          t7.splice(n5, 0, r7);
        }
        function log(...e7) {
          return typeof console === "object" && console.log && console.log(...e7);
        }
        function save(e7) {
          try {
            if (e7) {
              t6.storage.setItem("debug", e7);
            } else {
              t6.storage.removeItem("debug");
            }
          } catch (e8) {
          }
        }
        function load() {
          let e7;
          try {
            e7 = t6.storage.getItem("debug");
          } catch (e8) {
          }
          if (!e7 && typeof process !== "undefined" && "env" in process) {
            e7 = process.env.DEBUG;
          }
          return e7;
        }
        function localstorage() {
          try {
            return localStorage;
          } catch (e7) {
          }
        }
        e6.exports = r6(573)(t6);
        const { formatters: s5 } = e6.exports;
        s5.j = function(e7) {
          try {
            return JSON.stringify(e7);
          } catch (e8) {
            return "[UnexpectedJSONParseError]: " + e8.message;
          }
        };
      }, 573: (e6, t6, r6) => {
        function setup(e7) {
          createDebug.debug = createDebug;
          createDebug.default = createDebug;
          createDebug.coerce = coerce;
          createDebug.disable = disable;
          createDebug.enable = enable;
          createDebug.enabled = enabled;
          createDebug.humanize = r6(958);
          Object.keys(e7).forEach((t7) => {
            createDebug[t7] = e7[t7];
          });
          createDebug.instances = [];
          createDebug.names = [];
          createDebug.skips = [];
          createDebug.formatters = {};
          function selectColor(e8) {
            let t7 = 0;
            for (let r7 = 0; r7 < e8.length; r7++) {
              t7 = (t7 << 5) - t7 + e8.charCodeAt(r7);
              t7 |= 0;
            }
            return createDebug.colors[Math.abs(t7) % createDebug.colors.length];
          }
          createDebug.selectColor = selectColor;
          function createDebug(e8) {
            let t7;
            function debug2(...e9) {
              if (!debug2.enabled) {
                return;
              }
              const r7 = debug2;
              const s5 = Number(/* @__PURE__ */ new Date());
              const n5 = s5 - (t7 || s5);
              r7.diff = n5;
              r7.prev = t7;
              r7.curr = s5;
              t7 = s5;
              e9[0] = createDebug.coerce(e9[0]);
              if (typeof e9[0] !== "string") {
                e9.unshift("%O");
              }
              let o5 = 0;
              e9[0] = e9[0].replace(/%([a-zA-Z%])/g, (t8, s6) => {
                if (t8 === "%%") {
                  return t8;
                }
                o5++;
                const n6 = createDebug.formatters[s6];
                if (typeof n6 === "function") {
                  const s7 = e9[o5];
                  t8 = n6.call(r7, s7);
                  e9.splice(o5, 1);
                  o5--;
                }
                return t8;
              });
              createDebug.formatArgs.call(r7, e9);
              const c5 = r7.log || createDebug.log;
              c5.apply(r7, e9);
            }
            debug2.namespace = e8;
            debug2.enabled = createDebug.enabled(e8);
            debug2.useColors = createDebug.useColors();
            debug2.color = selectColor(e8);
            debug2.destroy = destroy;
            debug2.extend = extend;
            if (typeof createDebug.init === "function") {
              createDebug.init(debug2);
            }
            createDebug.instances.push(debug2);
            return debug2;
          }
          function destroy() {
            const e8 = createDebug.instances.indexOf(this);
            if (e8 !== -1) {
              createDebug.instances.splice(e8, 1);
              return true;
            }
            return false;
          }
          function extend(e8, t7) {
            const r7 = createDebug(this.namespace + (typeof t7 === "undefined" ? ":" : t7) + e8);
            r7.log = this.log;
            return r7;
          }
          function enable(e8) {
            createDebug.save(e8);
            createDebug.names = [];
            createDebug.skips = [];
            let t7;
            const r7 = (typeof e8 === "string" ? e8 : "").split(/[\s,]+/);
            const s5 = r7.length;
            for (t7 = 0; t7 < s5; t7++) {
              if (!r7[t7]) {
                continue;
              }
              e8 = r7[t7].replace(/\*/g, ".*?");
              if (e8[0] === "-") {
                createDebug.skips.push(new RegExp("^" + e8.substr(1) + "$"));
              } else {
                createDebug.names.push(new RegExp("^" + e8 + "$"));
              }
            }
            for (t7 = 0; t7 < createDebug.instances.length; t7++) {
              const e9 = createDebug.instances[t7];
              e9.enabled = createDebug.enabled(e9.namespace);
            }
          }
          function disable() {
            const e8 = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((e9) => "-" + e9)].join(",");
            createDebug.enable("");
            return e8;
          }
          function enabled(e8) {
            if (e8[e8.length - 1] === "*") {
              return true;
            }
            let t7;
            let r7;
            for (t7 = 0, r7 = createDebug.skips.length; t7 < r7; t7++) {
              if (createDebug.skips[t7].test(e8)) {
                return false;
              }
            }
            for (t7 = 0, r7 = createDebug.names.length; t7 < r7; t7++) {
              if (createDebug.names[t7].test(e8)) {
                return true;
              }
            }
            return false;
          }
          function toNamespace(e8) {
            return e8.toString().substring(2, e8.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          function coerce(e8) {
            if (e8 instanceof Error) {
              return e8.stack || e8.message;
            }
            return e8;
          }
          createDebug.enable(createDebug.load());
          return createDebug;
        }
        e6.exports = setup;
      }, 792: (e6, t6, r6) => {
        if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
          e6.exports = r6(237);
        } else {
          e6.exports = r6(354);
        }
      }, 354: (e6, t6, r6) => {
        const s5 = r6(224);
        const n5 = r6(837);
        t6.init = init;
        t6.log = log;
        t6.formatArgs = formatArgs;
        t6.save = save;
        t6.load = load;
        t6.useColors = useColors;
        t6.colors = [6, 2, 3, 4, 5, 1];
        try {
          const e7 = r6(178);
          if (e7 && (e7.stderr || e7).level >= 2) {
            t6.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
          }
        } catch (e7) {
        }
        t6.inspectOpts = Object.keys(process.env).filter((e7) => /^debug_/i.test(e7)).reduce((e7, t7) => {
          const r7 = t7.substring(6).toLowerCase().replace(/_([a-z])/g, (e8, t8) => t8.toUpperCase());
          let s6 = process.env[t7];
          if (/^(yes|on|true|enabled)$/i.test(s6)) {
            s6 = true;
          } else if (/^(no|off|false|disabled)$/i.test(s6)) {
            s6 = false;
          } else if (s6 === "null") {
            s6 = null;
          } else {
            s6 = Number(s6);
          }
          e7[r7] = s6;
          return e7;
        }, {});
        function useColors() {
          return "colors" in t6.inspectOpts ? Boolean(t6.inspectOpts.colors) : s5.isatty(process.stderr.fd);
        }
        function formatArgs(t7) {
          const { namespace: r7, useColors: s6 } = this;
          if (s6) {
            const s7 = this.color;
            const n6 = "\x1B[3" + (s7 < 8 ? s7 : "8;5;" + s7);
            const o6 = `  ${n6};1m${r7} \x1B[0m`;
            t7[0] = o6 + t7[0].split("\n").join("\n" + o6);
            t7.push(n6 + "m+" + e6.exports.humanize(this.diff) + "\x1B[0m");
          } else {
            t7[0] = getDate() + r7 + " " + t7[0];
          }
        }
        function getDate() {
          if (t6.inspectOpts.hideDate) {
            return "";
          }
          return (/* @__PURE__ */ new Date()).toISOString() + " ";
        }
        function log(...e7) {
          return process.stderr.write(n5.format(...e7) + "\n");
        }
        function save(e7) {
          if (e7) {
            process.env.DEBUG = e7;
          } else {
            delete process.env.DEBUG;
          }
        }
        function load() {
          return process.env.DEBUG;
        }
        function init(e7) {
          e7.inspectOpts = {};
          const r7 = Object.keys(t6.inspectOpts);
          for (let s6 = 0; s6 < r7.length; s6++) {
            e7.inspectOpts[r7[s6]] = t6.inspectOpts[r7[s6]];
          }
        }
        e6.exports = r6(573)(t6);
        const { formatters: o5 } = e6.exports;
        o5.o = function(e7) {
          this.inspectOpts.colors = this.useColors;
          return n5.inspect(e7, this.inspectOpts).replace(/\s*\n\s*/g, " ");
        };
        o5.O = function(e7) {
          this.inspectOpts.colors = this.useColors;
          return n5.inspect(e7, this.inspectOpts);
        };
      }, 914: (e6) => {
        "use strict";
        e6.exports = (e7, t6 = process.argv) => {
          const r6 = e7.startsWith("-") ? "" : e7.length === 1 ? "-" : "--";
          const s5 = t6.indexOf(r6 + e7);
          const n5 = t6.indexOf("--");
          return s5 !== -1 && (n5 === -1 || s5 < n5);
        };
      }, 958: (e6) => {
        var t6 = 1e3;
        var r6 = t6 * 60;
        var s5 = r6 * 60;
        var n5 = s5 * 24;
        var o5 = n5 * 7;
        var c5 = n5 * 365.25;
        e6.exports = function(e7, t7) {
          t7 = t7 || {};
          var r7 = typeof e7;
          if (r7 === "string" && e7.length > 0) {
            return parse3(e7);
          } else if (r7 === "number" && isFinite(e7)) {
            return t7.long ? fmtLong(e7) : fmtShort(e7);
          }
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e7));
        };
        function parse3(e7) {
          e7 = String(e7);
          if (e7.length > 100) {
            return;
          }
          var a5 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e7);
          if (!a5) {
            return;
          }
          var u5 = parseFloat(a5[1]);
          var i5 = (a5[2] || "ms").toLowerCase();
          switch (i5) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return u5 * c5;
            case "weeks":
            case "week":
            case "w":
              return u5 * o5;
            case "days":
            case "day":
            case "d":
              return u5 * n5;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return u5 * s5;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return u5 * r6;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return u5 * t6;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return u5;
            default:
              return void 0;
          }
        }
        function fmtShort(e7) {
          var o6 = Math.abs(e7);
          if (o6 >= n5) {
            return Math.round(e7 / n5) + "d";
          }
          if (o6 >= s5) {
            return Math.round(e7 / s5) + "h";
          }
          if (o6 >= r6) {
            return Math.round(e7 / r6) + "m";
          }
          if (o6 >= t6) {
            return Math.round(e7 / t6) + "s";
          }
          return e7 + "ms";
        }
        function fmtLong(e7) {
          var o6 = Math.abs(e7);
          if (o6 >= n5) {
            return plural(e7, o6, n5, "day");
          }
          if (o6 >= s5) {
            return plural(e7, o6, s5, "hour");
          }
          if (o6 >= r6) {
            return plural(e7, o6, r6, "minute");
          }
          if (o6 >= t6) {
            return plural(e7, o6, t6, "second");
          }
          return e7 + " ms";
        }
        function plural(e7, t7, r7, s6) {
          var n6 = t7 >= r7 * 1.5;
          return Math.round(e7 / r7) + " " + s6 + (n6 ? "s" : "");
        }
      }, 178: (e6, t6, r6) => {
        "use strict";
        const s5 = r6(37);
        const n5 = r6(224);
        const o5 = r6(914);
        const { env: c5 } = process;
        let a5;
        if (o5("no-color") || o5("no-colors") || o5("color=false") || o5("color=never")) {
          a5 = 0;
        } else if (o5("color") || o5("colors") || o5("color=true") || o5("color=always")) {
          a5 = 1;
        }
        function envForceColor() {
          if ("FORCE_COLOR" in c5) {
            if (c5.FORCE_COLOR === "true") {
              return 1;
            }
            if (c5.FORCE_COLOR === "false") {
              return 0;
            }
            return c5.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(c5.FORCE_COLOR, 10), 3);
          }
        }
        function translateLevel(e7) {
          if (e7 === 0) {
            return false;
          }
          return { level: e7, hasBasic: true, has256: e7 >= 2, has16m: e7 >= 3 };
        }
        function supportsColor(e7, { streamIsTTY: t7, sniffFlags: r7 = true } = {}) {
          const n6 = envForceColor();
          if (n6 !== void 0) {
            a5 = n6;
          }
          const u5 = r7 ? a5 : n6;
          if (u5 === 0) {
            return 0;
          }
          if (r7) {
            if (o5("color=16m") || o5("color=full") || o5("color=truecolor")) {
              return 3;
            }
            if (o5("color=256")) {
              return 2;
            }
          }
          if (e7 && !t7 && u5 === void 0) {
            return 0;
          }
          const i5 = u5 || 0;
          if (c5.TERM === "dumb") {
            return i5;
          }
          if (process.platform === "win32") {
            const e8 = s5.release().split(".");
            if (Number(e8[0]) >= 10 && Number(e8[2]) >= 10586) {
              return Number(e8[2]) >= 14931 ? 3 : 2;
            }
            return 1;
          }
          if ("CI" in c5) {
            if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((e8) => e8 in c5) || c5.CI_NAME === "codeship") {
              return 1;
            }
            return i5;
          }
          if ("TEAMCITY_VERSION" in c5) {
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(c5.TEAMCITY_VERSION) ? 1 : 0;
          }
          if (c5.COLORTERM === "truecolor") {
            return 3;
          }
          if ("TERM_PROGRAM" in c5) {
            const e8 = Number.parseInt((c5.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (c5.TERM_PROGRAM) {
              case "iTerm.app":
                return e8 >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          if (/-256(color)?$/i.test(c5.TERM)) {
            return 2;
          }
          if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(c5.TERM)) {
            return 1;
          }
          if ("COLORTERM" in c5) {
            return 1;
          }
          return i5;
        }
        function getSupportLevel(e7, t7 = {}) {
          const r7 = supportsColor(e7, { streamIsTTY: e7 && e7.isTTY, ...t7 });
          return translateLevel(r7);
        }
        e6.exports = { supportsColor: getSupportLevel, stdout: getSupportLevel({ isTTY: n5.isatty(1) }), stderr: getSupportLevel({ isTTY: n5.isatty(2) }) };
      }, 37: (e6) => {
        "use strict";
        e6.exports = __require("os");
      }, 224: (e6) => {
        "use strict";
        e6.exports = __require("tty");
      }, 837: (e6) => {
        "use strict";
        e6.exports = __require("util");
      } };
      var t5 = {};
      function __nccwpck_require__(r6) {
        var s5 = t5[r6];
        if (s5 !== void 0) {
          return s5.exports;
        }
        var n5 = t5[r6] = { exports: {} };
        var o5 = true;
        try {
          e5[r6](n5, n5.exports, __nccwpck_require__);
          o5 = false;
        } finally {
          if (o5) delete t5[r6];
        }
        return n5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var r5 = __nccwpck_require__(792);
      module.exports = r5;
    })();
  }
});

// node_modules/next/dist/compiled/send/index.js
var require_send = __commonJS({
  "node_modules/next/dist/compiled/send/index.js"(exports, module) {
    (() => {
      var e5 = { 186: (e6, t6, a6) => {
        var i5 = a6(17).relative;
        e6.exports = depd;
        var n5 = process.cwd();
        function containsNamespace(e7, t7) {
          var a7 = e7.split(/[ ,]+/);
          var i6 = String(t7).toLowerCase();
          for (var n6 = 0; n6 < a7.length; n6++) {
            var r5 = a7[n6];
            if (r5 && (r5 === "*" || r5.toLowerCase() === i6)) {
              return true;
            }
          }
          return false;
        }
        function convertDataDescriptorToAccessor(e7, t7, a7) {
          var i6 = Object.getOwnPropertyDescriptor(e7, t7);
          var n6 = i6.value;
          i6.get = function getter() {
            return n6;
          };
          if (i6.writable) {
            i6.set = function setter(e8) {
              return n6 = e8;
            };
          }
          delete i6.value;
          delete i6.writable;
          Object.defineProperty(e7, t7, i6);
          return i6;
        }
        function createArgumentsString(e7) {
          var t7 = "";
          for (var a7 = 0; a7 < e7; a7++) {
            t7 += ", arg" + a7;
          }
          return t7.substr(2);
        }
        function createStackString(e7) {
          var t7 = this.name + ": " + this.namespace;
          if (this.message) {
            t7 += " deprecated " + this.message;
          }
          for (var a7 = 0; a7 < e7.length; a7++) {
            t7 += "\n    at " + e7[a7].toString();
          }
          return t7;
        }
        function depd(e7) {
          if (!e7) {
            throw new TypeError("argument namespace is required");
          }
          var t7 = getStack();
          var a7 = callSiteLocation(t7[1]);
          var i6 = a7[0];
          function deprecate(e8) {
            log.call(deprecate, e8);
          }
          deprecate._file = i6;
          deprecate._ignored = isignored(e7);
          deprecate._namespace = e7;
          deprecate._traced = istraced(e7);
          deprecate._warned = /* @__PURE__ */ Object.create(null);
          deprecate.function = wrapfunction;
          deprecate.property = wrapproperty;
          return deprecate;
        }
        function eehaslisteners(e7, t7) {
          var a7 = typeof e7.listenerCount !== "function" ? e7.listeners(t7).length : e7.listenerCount(t7);
          return a7 > 0;
        }
        function isignored(e7) {
          if (process.noDeprecation) {
            return true;
          }
          var t7 = process.env.NO_DEPRECATION || "";
          return containsNamespace(t7, e7);
        }
        function istraced(e7) {
          if (process.traceDeprecation) {
            return true;
          }
          var t7 = process.env.TRACE_DEPRECATION || "";
          return containsNamespace(t7, e7);
        }
        function log(e7, t7) {
          var a7 = eehaslisteners(process, "deprecation");
          if (!a7 && this._ignored) {
            return;
          }
          var i6;
          var n6;
          var r5;
          var o5;
          var p5 = 0;
          var s5 = false;
          var c5 = getStack();
          var l5 = this._file;
          if (t7) {
            o5 = t7;
            r5 = callSiteLocation(c5[1]);
            r5.name = o5.name;
            l5 = r5[0];
          } else {
            p5 = 2;
            o5 = callSiteLocation(c5[p5]);
            r5 = o5;
          }
          for (; p5 < c5.length; p5++) {
            i6 = callSiteLocation(c5[p5]);
            n6 = i6[0];
            if (n6 === l5) {
              s5 = true;
            } else if (n6 === this._file) {
              l5 = this._file;
            } else if (s5) {
              break;
            }
          }
          var d5 = i6 ? o5.join(":") + "__" + i6.join(":") : void 0;
          if (d5 !== void 0 && d5 in this._warned) {
            return;
          }
          this._warned[d5] = true;
          var m5 = e7;
          if (!m5) {
            m5 = r5 === o5 || !r5.name ? defaultMessage(o5) : defaultMessage(r5);
          }
          if (a7) {
            var u5 = DeprecationError(this._namespace, m5, c5.slice(p5));
            process.emit("deprecation", u5);
            return;
          }
          var v6 = process.stderr.isTTY ? formatColor : formatPlain;
          var f5 = v6.call(this, m5, i6, c5.slice(p5));
          process.stderr.write(f5 + "\n", "utf8");
        }
        function callSiteLocation(e7) {
          var t7 = e7.getFileName() || "<anonymous>";
          var a7 = e7.getLineNumber();
          var i6 = e7.getColumnNumber();
          if (e7.isEval()) {
            t7 = e7.getEvalOrigin() + ", " + t7;
          }
          var n6 = [t7, a7, i6];
          n6.callSite = e7;
          n6.name = e7.getFunctionName();
          return n6;
        }
        function defaultMessage(e7) {
          var t7 = e7.callSite;
          var a7 = e7.name;
          if (!a7) {
            a7 = "<anonymous@" + formatLocation(e7) + ">";
          }
          var i6 = t7.getThis();
          var n6 = i6 && t7.getTypeName();
          if (n6 === "Object") {
            n6 = void 0;
          }
          if (n6 === "Function") {
            n6 = i6.name || n6;
          }
          return n6 && t7.getMethodName() ? n6 + "." + a7 : a7;
        }
        function formatPlain(e7, t7, a7) {
          var i6 = (/* @__PURE__ */ new Date()).toUTCString();
          var n6 = i6 + " " + this._namespace + " deprecated " + e7;
          if (this._traced) {
            for (var r5 = 0; r5 < a7.length; r5++) {
              n6 += "\n    at " + a7[r5].toString();
            }
            return n6;
          }
          if (t7) {
            n6 += " at " + formatLocation(t7);
          }
          return n6;
        }
        function formatColor(e7, t7, a7) {
          var i6 = "\x1B[36;1m" + this._namespace + "\x1B[22;39m \x1B[33;1mdeprecated\x1B[22;39m \x1B[0m" + e7 + "\x1B[39m";
          if (this._traced) {
            for (var n6 = 0; n6 < a7.length; n6++) {
              i6 += "\n    \x1B[36mat " + a7[n6].toString() + "\x1B[39m";
            }
            return i6;
          }
          if (t7) {
            i6 += " \x1B[36m" + formatLocation(t7) + "\x1B[39m";
          }
          return i6;
        }
        function formatLocation(e7) {
          return i5(n5, e7[0]) + ":" + e7[1] + ":" + e7[2];
        }
        function getStack() {
          var e7 = Error.stackTraceLimit;
          var t7 = {};
          var a7 = Error.prepareStackTrace;
          Error.prepareStackTrace = prepareObjectStackTrace;
          Error.stackTraceLimit = Math.max(10, e7);
          Error.captureStackTrace(t7);
          var i6 = t7.stack.slice(1);
          Error.prepareStackTrace = a7;
          Error.stackTraceLimit = e7;
          return i6;
        }
        function prepareObjectStackTrace(e7, t7) {
          return t7;
        }
        function wrapfunction(e7, t7) {
          if (typeof e7 !== "function") {
            throw new TypeError("argument fn must be a function");
          }
          var a7 = createArgumentsString(e7.length);
          var i6 = getStack();
          var n6 = callSiteLocation(i6[1]);
          n6.name = e7.name;
          var r5 = new Function("fn", "log", "deprecate", "message", "site", '"use strict"\nreturn function (' + a7 + ") {log.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n}")(e7, log, this, t7, n6);
          return r5;
        }
        function wrapproperty(e7, t7, a7) {
          if (!e7 || typeof e7 !== "object" && typeof e7 !== "function") {
            throw new TypeError("argument obj must be object");
          }
          var i6 = Object.getOwnPropertyDescriptor(e7, t7);
          if (!i6) {
            throw new TypeError("must call property on owner object");
          }
          if (!i6.configurable) {
            throw new TypeError("property must be configurable");
          }
          var n6 = this;
          var r5 = getStack();
          var o5 = callSiteLocation(r5[1]);
          o5.name = t7;
          if ("value" in i6) {
            i6 = convertDataDescriptorToAccessor(e7, t7, a7);
          }
          var p5 = i6.get;
          var s5 = i6.set;
          if (typeof p5 === "function") {
            i6.get = function getter() {
              log.call(n6, a7, o5);
              return p5.apply(this, arguments);
            };
          }
          if (typeof s5 === "function") {
            i6.set = function setter() {
              log.call(n6, a7, o5);
              return s5.apply(this, arguments);
            };
          }
          Object.defineProperty(e7, t7, i6);
        }
        function DeprecationError(e7, t7, a7) {
          var i6 = new Error();
          var n6;
          Object.defineProperty(i6, "constructor", { value: DeprecationError });
          Object.defineProperty(i6, "message", { configurable: true, enumerable: false, value: t7, writable: true });
          Object.defineProperty(i6, "name", { enumerable: false, configurable: true, value: "DeprecationError", writable: true });
          Object.defineProperty(i6, "namespace", { configurable: true, enumerable: false, value: e7, writable: true });
          Object.defineProperty(i6, "stack", { configurable: true, enumerable: false, get: function() {
            if (n6 !== void 0) {
              return n6;
            }
            return n6 = createStackString.call(this, a7);
          }, set: function setter(e8) {
            n6 = e8;
          } });
          return i6;
        }
      }, 397: (e6, t6, a6) => {
        "use strict";
        var i5 = a6(361).EventEmitter;
        var n5 = a6(147).ReadStream;
        var r5 = a6(781);
        var o5 = a6(796);
        e6.exports = destroy;
        function destroy(e7, t7) {
          if (isFsReadStream(e7)) {
            destroyReadStream(e7);
          } else if (isZlibStream(e7)) {
            destroyZlibStream(e7);
          } else if (hasDestroy(e7)) {
            e7.destroy();
          }
          if (isEventEmitter(e7) && t7) {
            e7.removeAllListeners("error");
            e7.addListener("error", noop);
          }
          return e7;
        }
        function destroyReadStream(e7) {
          e7.destroy();
          if (typeof e7.close === "function") {
            e7.on("open", onOpenClose);
          }
        }
        function closeZlibStream(e7) {
          if (e7._hadError === true) {
            var t7 = e7._binding === null ? "_binding" : "_handle";
            e7[t7] = { close: function() {
              this[t7] = null;
            } };
          }
          e7.close();
        }
        function destroyZlibStream(e7) {
          if (typeof e7.destroy === "function") {
            if (e7._binding) {
              e7.destroy();
              if (e7._processing) {
                e7._needDrain = true;
                e7.once("drain", onDrainClearBinding);
              } else {
                e7._binding.clear();
              }
            } else if (e7._destroy && e7._destroy !== r5.Transform.prototype._destroy) {
              e7.destroy();
            } else if (e7._destroy && typeof e7.close === "function") {
              e7.destroyed = true;
              e7.close();
            } else {
              e7.destroy();
            }
          } else if (typeof e7.close === "function") {
            closeZlibStream(e7);
          }
        }
        function hasDestroy(e7) {
          return e7 instanceof r5 && typeof e7.destroy === "function";
        }
        function isEventEmitter(e7) {
          return e7 instanceof i5;
        }
        function isFsReadStream(e7) {
          return e7 instanceof n5;
        }
        function isZlibStream(e7) {
          return e7 instanceof o5.Gzip || e7 instanceof o5.Gunzip || e7 instanceof o5.Deflate || e7 instanceof o5.DeflateRaw || e7 instanceof o5.Inflate || e7 instanceof o5.InflateRaw || e7 instanceof o5.Unzip;
        }
        function noop() {
        }
        function onDrainClearBinding() {
          this._binding.clear();
        }
        function onOpenClose() {
          if (typeof this.fd === "number") {
            this.close();
          }
        }
      }, 481: (e6) => {
        "use strict";
        e6.exports = first;
        function first(e7, t6) {
          if (!Array.isArray(e7)) throw new TypeError("arg must be an array of [ee, events...] arrays");
          var a6 = [];
          for (var i5 = 0; i5 < e7.length; i5++) {
            var n5 = e7[i5];
            if (!Array.isArray(n5) || n5.length < 2) throw new TypeError("each array member must be [ee, events...]");
            var r5 = n5[0];
            for (var o5 = 1; o5 < n5.length; o5++) {
              var p5 = n5[o5];
              var s5 = listener(p5, callback);
              r5.on(p5, s5);
              a6.push({ ee: r5, event: p5, fn: s5 });
            }
          }
          function callback() {
            cleanup();
            t6.apply(null, arguments);
          }
          function cleanup() {
            var e8;
            for (var t7 = 0; t7 < a6.length; t7++) {
              e8 = a6[t7];
              e8.ee.removeListener(e8.event, e8.fn);
            }
          }
          function thunk(e8) {
            t6 = e8;
          }
          thunk.cancel = cleanup;
          return thunk;
        }
        function listener(e7, t6) {
          return function onevent(a6) {
            var i5 = new Array(arguments.length);
            var n5 = this;
            var r5 = e7 === "error" ? a6 : null;
            for (var o5 = 0; o5 < i5.length; o5++) {
              i5[o5] = arguments[o5];
            }
            t6(r5, n5, e7, i5);
          };
        }
      }, 927: (e6) => {
        "use strict";
        e6.exports = encodeUrl;
        var t6 = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
        var a6 = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
        var i5 = "$1\uFFFD$2";
        function encodeUrl(e7) {
          return String(e7).replace(a6, i5).replace(t6, encodeURI);
        }
      }, 354: (e6) => {
        "use strict";
        var t6 = /["'&<>]/;
        e6.exports = escapeHtml;
        function escapeHtml(e7) {
          var a6 = "" + e7;
          var i5 = t6.exec(a6);
          if (!i5) {
            return a6;
          }
          var n5;
          var r5 = "";
          var o5 = 0;
          var p5 = 0;
          for (o5 = i5.index; o5 < a6.length; o5++) {
            switch (a6.charCodeAt(o5)) {
              case 34:
                n5 = "&quot;";
                break;
              case 38:
                n5 = "&amp;";
                break;
              case 39:
                n5 = "&#39;";
                break;
              case 60:
                n5 = "&lt;";
                break;
              case 62:
                n5 = "&gt;";
                break;
              default:
                continue;
            }
            if (p5 !== o5) {
              r5 += a6.substring(p5, o5);
            }
            p5 = o5 + 1;
            r5 += n5;
          }
          return p5 !== o5 ? r5 + a6.substring(p5, o5) : r5;
        }
      }, 516: (e6, t6, a6) => {
        "use strict";
        e6.exports = etag;
        var i5 = a6(113);
        var n5 = a6(147).Stats;
        var r5 = Object.prototype.toString;
        function entitytag(e7) {
          if (e7.length === 0) {
            return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
          }
          var t7 = i5.createHash("sha1").update(e7, "utf8").digest("base64").substring(0, 27);
          var a7 = typeof e7 === "string" ? Buffer.byteLength(e7, "utf8") : e7.length;
          return '"' + a7.toString(16) + "-" + t7 + '"';
        }
        function etag(e7, t7) {
          if (e7 == null) {
            throw new TypeError("argument entity is required");
          }
          var a7 = isstats(e7);
          var i6 = t7 && typeof t7.weak === "boolean" ? t7.weak : a7;
          if (!a7 && typeof e7 !== "string" && !Buffer.isBuffer(e7)) {
            throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
          }
          var n6 = a7 ? stattag(e7) : entitytag(e7);
          return i6 ? "W/" + n6 : n6;
        }
        function isstats(e7) {
          if (typeof n5 === "function" && e7 instanceof n5) {
            return true;
          }
          return e7 && typeof e7 === "object" && "ctime" in e7 && r5.call(e7.ctime) === "[object Date]" && "mtime" in e7 && r5.call(e7.mtime) === "[object Date]" && "ino" in e7 && typeof e7.ino === "number" && "size" in e7 && typeof e7.size === "number";
        }
        function stattag(e7) {
          var t7 = e7.mtime.getTime().toString(16);
          var a7 = e7.size.toString(16);
          return '"' + a7 + "-" + t7 + '"';
        }
      }, 546: (e6, t6, a6) => {
        "use strict";
        var i5 = a6(186)("http-errors");
        var n5 = a6(832);
        var r5 = a6(596);
        var o5 = a6(842);
        var p5 = a6(637);
        e6.exports = createError;
        e6.exports.HttpError = createHttpErrorConstructor();
        e6.exports.isHttpError = createIsHttpErrorFunction(e6.exports.HttpError);
        populateConstructorExports(e6.exports, r5.codes, e6.exports.HttpError);
        function codeClass(e7) {
          return Number(String(e7).charAt(0) + "00");
        }
        function createError() {
          var e7;
          var t7;
          var a7 = 500;
          var n6 = {};
          for (var o6 = 0; o6 < arguments.length; o6++) {
            var p6 = arguments[o6];
            var s5 = typeof p6;
            if (s5 === "object" && p6 instanceof Error) {
              e7 = p6;
              a7 = e7.status || e7.statusCode || a7;
            } else if (s5 === "number" && o6 === 0) {
              a7 = p6;
            } else if (s5 === "string") {
              t7 = p6;
            } else if (s5 === "object") {
              n6 = p6;
            } else {
              throw new TypeError("argument #" + (o6 + 1) + " unsupported type " + s5);
            }
          }
          if (typeof a7 === "number" && (a7 < 400 || a7 >= 600)) {
            i5("non-error status code; use only 4xx or 5xx status codes");
          }
          if (typeof a7 !== "number" || !r5.message[a7] && (a7 < 400 || a7 >= 600)) {
            a7 = 500;
          }
          var c5 = createError[a7] || createError[codeClass(a7)];
          if (!e7) {
            e7 = c5 ? new c5(t7) : new Error(t7 || r5.message[a7]);
            Error.captureStackTrace(e7, createError);
          }
          if (!c5 || !(e7 instanceof c5) || e7.status !== a7) {
            e7.expose = a7 < 500;
            e7.status = e7.statusCode = a7;
          }
          for (var l5 in n6) {
            if (l5 !== "status" && l5 !== "statusCode") {
              e7[l5] = n6[l5];
            }
          }
          return e7;
        }
        function createHttpErrorConstructor() {
          function HttpError() {
            throw new TypeError("cannot construct abstract class");
          }
          o5(HttpError, Error);
          return HttpError;
        }
        function createClientErrorConstructor(e7, t7, a7) {
          var i6 = toClassName(t7);
          function ClientError(e8) {
            var t8 = e8 != null ? e8 : r5.message[a7];
            var o6 = new Error(t8);
            Error.captureStackTrace(o6, ClientError);
            n5(o6, ClientError.prototype);
            Object.defineProperty(o6, "message", { enumerable: true, configurable: true, value: t8, writable: true });
            Object.defineProperty(o6, "name", { enumerable: false, configurable: true, value: i6, writable: true });
            return o6;
          }
          o5(ClientError, e7);
          nameFunc(ClientError, i6);
          ClientError.prototype.status = a7;
          ClientError.prototype.statusCode = a7;
          ClientError.prototype.expose = true;
          return ClientError;
        }
        function createIsHttpErrorFunction(e7) {
          return function isHttpError(t7) {
            if (!t7 || typeof t7 !== "object") {
              return false;
            }
            if (t7 instanceof e7) {
              return true;
            }
            return t7 instanceof Error && typeof t7.expose === "boolean" && typeof t7.statusCode === "number" && t7.status === t7.statusCode;
          };
        }
        function createServerErrorConstructor(e7, t7, a7) {
          var i6 = toClassName(t7);
          function ServerError(e8) {
            var t8 = e8 != null ? e8 : r5.message[a7];
            var o6 = new Error(t8);
            Error.captureStackTrace(o6, ServerError);
            n5(o6, ServerError.prototype);
            Object.defineProperty(o6, "message", { enumerable: true, configurable: true, value: t8, writable: true });
            Object.defineProperty(o6, "name", { enumerable: false, configurable: true, value: i6, writable: true });
            return o6;
          }
          o5(ServerError, e7);
          nameFunc(ServerError, i6);
          ServerError.prototype.status = a7;
          ServerError.prototype.statusCode = a7;
          ServerError.prototype.expose = false;
          return ServerError;
        }
        function nameFunc(e7, t7) {
          var a7 = Object.getOwnPropertyDescriptor(e7, "name");
          if (a7 && a7.configurable) {
            a7.value = t7;
            Object.defineProperty(e7, "name", a7);
          }
        }
        function populateConstructorExports(e7, t7, a7) {
          t7.forEach(function forEachCode(t8) {
            var i6;
            var n6 = p5(r5.message[t8]);
            switch (codeClass(t8)) {
              case 400:
                i6 = createClientErrorConstructor(a7, n6, t8);
                break;
              case 500:
                i6 = createServerErrorConstructor(a7, n6, t8);
                break;
            }
            if (i6) {
              e7[t8] = i6;
              e7[n6] = i6;
            }
          });
        }
        function toClassName(e7) {
          return e7.substr(-5) !== "Error" ? e7 + "Error" : e7;
        }
      }, 842: (e6, t6, a6) => {
        try {
          var i5 = a6(837);
          if (typeof i5.inherits !== "function") throw "";
          e6.exports = i5.inherits;
        } catch (t7) {
          e6.exports = a6(782);
        }
      }, 782: (e6) => {
        if (typeof Object.create === "function") {
          e6.exports = function inherits(e7, t6) {
            if (t6) {
              e7.super_ = t6;
              e7.prototype = Object.create(t6.prototype, { constructor: { value: e7, enumerable: false, writable: true, configurable: true } });
            }
          };
        } else {
          e6.exports = function inherits(e7, t6) {
            if (t6) {
              e7.super_ = t6;
              var TempCtor = function() {
              };
              TempCtor.prototype = t6.prototype;
              e7.prototype = new TempCtor();
              e7.prototype.constructor = e7;
            }
          };
        }
      }, 396: (e6, t6, a6) => {
        var i5 = a6(17);
        var n5 = a6(147);
        function Mime() {
          this.types = /* @__PURE__ */ Object.create(null);
          this.extensions = /* @__PURE__ */ Object.create(null);
        }
        Mime.prototype.define = function(e7) {
          for (var t7 in e7) {
            var a7 = e7[t7];
            for (var i6 = 0; i6 < a7.length; i6++) {
              if (process.env.DEBUG_MIME && this.types[a7[i6]]) {
                console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + a7[i6] + '" extension type from ' + this.types[a7[i6]] + " to " + t7);
              }
              this.types[a7[i6]] = t7;
            }
            if (!this.extensions[t7]) {
              this.extensions[t7] = a7[0];
            }
          }
        };
        Mime.prototype.load = function(e7) {
          this._loading = e7;
          var t7 = {}, a7 = n5.readFileSync(e7, "ascii"), i6 = a7.split(/[\r\n]+/);
          i6.forEach(function(e8) {
            var a8 = e8.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
            t7[a8.shift()] = a8;
          });
          this.define(t7);
          this._loading = null;
        };
        Mime.prototype.lookup = function(e7, t7) {
          var a7 = e7.replace(/^.*[\.\/\\]/, "").toLowerCase();
          return this.types[a7] || t7 || this.default_type;
        };
        Mime.prototype.extension = function(e7) {
          var t7 = e7.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
          return this.extensions[t7];
        };
        var r5 = new Mime();
        r5.define(a6(598));
        r5.default_type = r5.lookup("bin");
        r5.Mime = Mime;
        r5.charsets = { lookup: function(e7, t7) {
          return /^text\/|^application\/(javascript|json)/.test(e7) ? "UTF-8" : t7;
        } };
        e6.exports = r5;
      }, 958: (e6) => {
        var t6 = 1e3;
        var a6 = t6 * 60;
        var i5 = a6 * 60;
        var n5 = i5 * 24;
        var r5 = n5 * 7;
        var o5 = n5 * 365.25;
        e6.exports = function(e7, t7) {
          t7 = t7 || {};
          var a7 = typeof e7;
          if (a7 === "string" && e7.length > 0) {
            return parse3(e7);
          } else if (a7 === "number" && isFinite(e7)) {
            return t7.long ? fmtLong(e7) : fmtShort(e7);
          }
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e7));
        };
        function parse3(e7) {
          e7 = String(e7);
          if (e7.length > 100) {
            return;
          }
          var p5 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e7);
          if (!p5) {
            return;
          }
          var s5 = parseFloat(p5[1]);
          var c5 = (p5[2] || "ms").toLowerCase();
          switch (c5) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return s5 * o5;
            case "weeks":
            case "week":
            case "w":
              return s5 * r5;
            case "days":
            case "day":
            case "d":
              return s5 * n5;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return s5 * i5;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return s5 * a6;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return s5 * t6;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return s5;
            default:
              return void 0;
          }
        }
        function fmtShort(e7) {
          var r6 = Math.abs(e7);
          if (r6 >= n5) {
            return Math.round(e7 / n5) + "d";
          }
          if (r6 >= i5) {
            return Math.round(e7 / i5) + "h";
          }
          if (r6 >= a6) {
            return Math.round(e7 / a6) + "m";
          }
          if (r6 >= t6) {
            return Math.round(e7 / t6) + "s";
          }
          return e7 + "ms";
        }
        function fmtLong(e7) {
          var r6 = Math.abs(e7);
          if (r6 >= n5) {
            return plural(e7, r6, n5, "day");
          }
          if (r6 >= i5) {
            return plural(e7, r6, i5, "hour");
          }
          if (r6 >= a6) {
            return plural(e7, r6, a6, "minute");
          }
          if (r6 >= t6) {
            return plural(e7, r6, t6, "second");
          }
          return e7 + " ms";
        }
        function plural(e7, t7, a7, i6) {
          var n6 = t7 >= a7 * 1.5;
          return Math.round(e7 / a7) + " " + i6 + (n6 ? "s" : "");
        }
      }, 71: (e6, t6, a6) => {
        "use strict";
        e6.exports = onFinished;
        e6.exports.isFinished = isFinished;
        var i5 = tryRequireAsyncHooks();
        var n5 = a6(481);
        var r5 = typeof setImmediate === "function" ? setImmediate : function(e7) {
          process.nextTick(e7.bind.apply(e7, arguments));
        };
        function onFinished(e7, t7) {
          if (isFinished(e7) !== false) {
            r5(t7, null, e7);
            return e7;
          }
          attachListener(e7, wrap(t7));
          return e7;
        }
        function isFinished(e7) {
          var t7 = e7.socket;
          if (typeof e7.finished === "boolean") {
            return Boolean(e7.finished || t7 && !t7.writable);
          }
          if (typeof e7.complete === "boolean") {
            return Boolean(e7.upgrade || !t7 || !t7.readable || e7.complete && !e7.readable);
          }
          return void 0;
        }
        function attachFinishedListener(e7, t7) {
          var a7;
          var i6;
          var r6 = false;
          function onFinish(e8) {
            a7.cancel();
            i6.cancel();
            r6 = true;
            t7(e8);
          }
          a7 = i6 = n5([[e7, "end", "finish"]], onFinish);
          function onSocket(t8) {
            e7.removeListener("socket", onSocket);
            if (r6) return;
            if (a7 !== i6) return;
            i6 = n5([[t8, "error", "close"]], onFinish);
          }
          if (e7.socket) {
            onSocket(e7.socket);
            return;
          }
          e7.on("socket", onSocket);
          if (e7.socket === void 0) {
            patchAssignSocket(e7, onSocket);
          }
        }
        function attachListener(e7, t7) {
          var a7 = e7.__onFinished;
          if (!a7 || !a7.queue) {
            a7 = e7.__onFinished = createListener(e7);
            attachFinishedListener(e7, a7);
          }
          a7.queue.push(t7);
        }
        function createListener(e7) {
          function listener(t7) {
            if (e7.__onFinished === listener) e7.__onFinished = null;
            if (!listener.queue) return;
            var a7 = listener.queue;
            listener.queue = null;
            for (var i6 = 0; i6 < a7.length; i6++) {
              a7[i6](t7, e7);
            }
          }
          listener.queue = [];
          return listener;
        }
        function patchAssignSocket(e7, t7) {
          var a7 = e7.assignSocket;
          if (typeof a7 !== "function") return;
          e7.assignSocket = function _assignSocket(e8) {
            a7.call(this, e8);
            t7(e8);
          };
        }
        function tryRequireAsyncHooks() {
          try {
            return a6(852);
          } catch (e7) {
            return {};
          }
        }
        function wrap(e7) {
          var t7;
          if (i5.AsyncResource) {
            t7 = new i5.AsyncResource(e7.name || "bound-anonymous-fn");
          }
          if (!t7 || !t7.runInAsyncScope) {
            return e7;
          }
          return t7.runInAsyncScope.bind(t7, e7, null);
        }
      }, 953: (e6) => {
        "use strict";
        e6.exports = rangeParser;
        function rangeParser(e7, t6, a6) {
          if (typeof t6 !== "string") {
            throw new TypeError("argument str must be a string");
          }
          var i5 = t6.indexOf("=");
          if (i5 === -1) {
            return -2;
          }
          var n5 = t6.slice(i5 + 1).split(",");
          var r5 = [];
          r5.type = t6.slice(0, i5);
          for (var o5 = 0; o5 < n5.length; o5++) {
            var p5 = n5[o5].split("-");
            var s5 = parseInt(p5[0], 10);
            var c5 = parseInt(p5[1], 10);
            if (isNaN(s5)) {
              s5 = e7 - c5;
              c5 = e7 - 1;
            } else if (isNaN(c5)) {
              c5 = e7 - 1;
            }
            if (c5 > e7 - 1) {
              c5 = e7 - 1;
            }
            if (isNaN(s5) || isNaN(c5) || s5 > c5 || s5 < 0) {
              continue;
            }
            r5.push({ start: s5, end: c5 });
          }
          if (r5.length < 1) {
            return -1;
          }
          return a6 && a6.combine ? combineRanges(r5) : r5;
        }
        function combineRanges(e7) {
          var t6 = e7.map(mapWithIndex).sort(sortByRangeStart);
          for (var a6 = 0, i5 = 1; i5 < t6.length; i5++) {
            var n5 = t6[i5];
            var r5 = t6[a6];
            if (n5.start > r5.end + 1) {
              t6[++a6] = n5;
            } else if (n5.end > r5.end) {
              r5.end = n5.end;
              r5.index = Math.min(r5.index, n5.index);
            }
          }
          t6.length = a6 + 1;
          var o5 = t6.sort(sortByRangeIndex).map(mapWithoutIndex);
          o5.type = e7.type;
          return o5;
        }
        function mapWithIndex(e7, t6) {
          return { start: e7.start, end: e7.end, index: t6 };
        }
        function mapWithoutIndex(e7) {
          return { start: e7.start, end: e7.end };
        }
        function sortByRangeIndex(e7, t6) {
          return e7.index - t6.index;
        }
        function sortByRangeStart(e7, t6) {
          return e7.start - t6.start;
        }
      }, 228: (e6, t6, a6) => {
        "use strict";
        var i5 = a6(546);
        var n5 = a6(937)("send");
        var r5 = a6(186)("send");
        var o5 = a6(397);
        var p5 = a6(927);
        var s5 = a6(354);
        var c5 = a6(516);
        var l5 = a6(890);
        var d5 = a6(147);
        var m5 = a6(396);
        var u5 = a6(958);
        var v6 = a6(71);
        var f5 = a6(953);
        var x5 = a6(17);
        var g5 = a6(596);
        var h5 = a6(781);
        var b5 = a6(837);
        var y3 = x5.extname;
        var w5 = x5.join;
        var k5 = x5.normalize;
        var S2 = x5.resolve;
        var j5 = x5.sep;
        var _2 = /^ *bytes=/;
        var E3 = 60 * 60 * 24 * 365 * 1e3;
        var C3 = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
        e6.exports = send;
        e6.exports.mime = m5;
        function send(e7, t7, a7) {
          return new SendStream(e7, t7, a7);
        }
        function SendStream(e7, t7, a7) {
          h5.call(this);
          var i6 = a7 || {};
          this.options = i6;
          this.path = t7;
          this.req = e7;
          this._acceptRanges = i6.acceptRanges !== void 0 ? Boolean(i6.acceptRanges) : true;
          this._cacheControl = i6.cacheControl !== void 0 ? Boolean(i6.cacheControl) : true;
          this._etag = i6.etag !== void 0 ? Boolean(i6.etag) : true;
          this._dotfiles = i6.dotfiles !== void 0 ? i6.dotfiles : "ignore";
          if (this._dotfiles !== "ignore" && this._dotfiles !== "allow" && this._dotfiles !== "deny") {
            throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
          }
          this._hidden = Boolean(i6.hidden);
          if (i6.hidden !== void 0) {
            r5("hidden: use dotfiles: '" + (this._hidden ? "allow" : "ignore") + "' instead");
          }
          if (i6.dotfiles === void 0) {
            this._dotfiles = void 0;
          }
          this._extensions = i6.extensions !== void 0 ? normalizeList(i6.extensions, "extensions option") : [];
          this._immutable = i6.immutable !== void 0 ? Boolean(i6.immutable) : false;
          this._index = i6.index !== void 0 ? normalizeList(i6.index, "index option") : ["index.html"];
          this._lastModified = i6.lastModified !== void 0 ? Boolean(i6.lastModified) : true;
          this._maxage = i6.maxAge || i6.maxage;
          this._maxage = typeof this._maxage === "string" ? u5(this._maxage) : Number(this._maxage);
          this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), E3) : 0;
          this._root = i6.root ? S2(i6.root) : null;
          if (!this._root && i6.from) {
            this.from(i6.from);
          }
        }
        b5.inherits(SendStream, h5);
        SendStream.prototype.etag = r5.function(function etag(e7) {
          this._etag = Boolean(e7);
          n5("etag %s", this._etag);
          return this;
        }, "send.etag: pass etag as option");
        SendStream.prototype.hidden = r5.function(function hidden(e7) {
          this._hidden = Boolean(e7);
          this._dotfiles = void 0;
          n5("hidden %s", this._hidden);
          return this;
        }, "send.hidden: use dotfiles option");
        SendStream.prototype.index = r5.function(function index(e7) {
          var index2 = !e7 ? [] : normalizeList(e7, "paths argument");
          n5("index %o", e7);
          this._index = index2;
          return this;
        }, "send.index: pass index as option");
        SendStream.prototype.root = function root(e7) {
          this._root = S2(String(e7));
          n5("root %s", this._root);
          return this;
        };
        SendStream.prototype.from = r5.function(SendStream.prototype.root, "send.from: pass root as option");
        SendStream.prototype.root = r5.function(SendStream.prototype.root, "send.root: pass root as option");
        SendStream.prototype.maxage = r5.function(function maxage(e7) {
          this._maxage = typeof e7 === "string" ? u5(e7) : Number(e7);
          this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), E3) : 0;
          n5("max-age %d", this._maxage);
          return this;
        }, "send.maxage: pass maxAge as option");
        SendStream.prototype.error = function error2(e7, t7) {
          if (hasListeners(this, "error")) {
            return this.emit("error", createHttpError(e7, t7));
          }
          var a7 = this.res;
          var i6 = g5.message[e7] || String(e7);
          var n6 = createHtmlDocument("Error", s5(i6));
          clearHeaders(a7);
          if (t7 && t7.headers) {
            setHeaders(a7, t7.headers);
          }
          a7.statusCode = e7;
          a7.setHeader("Content-Type", "text/html; charset=UTF-8");
          a7.setHeader("Content-Length", Buffer.byteLength(n6));
          a7.setHeader("Content-Security-Policy", "default-src 'none'");
          a7.setHeader("X-Content-Type-Options", "nosniff");
          a7.end(n6);
        };
        SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
          return this.path[this.path.length - 1] === "/";
        };
        SendStream.prototype.isConditionalGET = function isConditionalGET() {
          return this.req.headers["if-match"] || this.req.headers["if-unmodified-since"] || this.req.headers["if-none-match"] || this.req.headers["if-modified-since"];
        };
        SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
          var e7 = this.req;
          var t7 = this.res;
          var a7 = e7.headers["if-match"];
          if (a7) {
            var i6 = t7.getHeader("ETag");
            return !i6 || a7 !== "*" && parseTokenList(a7).every(function(e8) {
              return e8 !== i6 && e8 !== "W/" + i6 && "W/" + e8 !== i6;
            });
          }
          var n6 = parseHttpDate(e7.headers["if-unmodified-since"]);
          if (!isNaN(n6)) {
            var r6 = parseHttpDate(t7.getHeader("Last-Modified"));
            return isNaN(r6) || r6 > n6;
          }
          return false;
        };
        SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
          var e7 = this.res;
          e7.removeHeader("Content-Encoding");
          e7.removeHeader("Content-Language");
          e7.removeHeader("Content-Length");
          e7.removeHeader("Content-Range");
          e7.removeHeader("Content-Type");
        };
        SendStream.prototype.notModified = function notModified() {
          var e7 = this.res;
          n5("not modified");
          this.removeContentHeaderFields();
          e7.statusCode = 304;
          e7.end();
        };
        SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
          var e7 = new Error("Can't set headers after they are sent.");
          n5("headers already sent");
          this.error(500, e7);
        };
        SendStream.prototype.isCachable = function isCachable() {
          var e7 = this.res.statusCode;
          return e7 >= 200 && e7 < 300 || e7 === 304;
        };
        SendStream.prototype.onStatError = function onStatError(e7) {
          switch (e7.code) {
            case "ENAMETOOLONG":
            case "ENOENT":
            case "ENOTDIR":
              this.error(404, e7);
              break;
            default:
              this.error(500, e7);
              break;
          }
        };
        SendStream.prototype.isFresh = function isFresh() {
          return l5(this.req.headers, { etag: this.res.getHeader("ETag"), "last-modified": this.res.getHeader("Last-Modified") });
        };
        SendStream.prototype.isRangeFresh = function isRangeFresh() {
          var e7 = this.req.headers["if-range"];
          if (!e7) {
            return true;
          }
          if (e7.indexOf('"') !== -1) {
            var t7 = this.res.getHeader("ETag");
            return Boolean(t7 && e7.indexOf(t7) !== -1);
          }
          var a7 = this.res.getHeader("Last-Modified");
          return parseHttpDate(a7) <= parseHttpDate(e7);
        };
        SendStream.prototype.redirect = function redirect(e7) {
          var t7 = this.res;
          if (hasListeners(this, "directory")) {
            this.emit("directory", t7, e7);
            return;
          }
          if (this.hasTrailingSlash()) {
            this.error(403);
            return;
          }
          var a7 = p5(collapseLeadingSlashes(this.path + "/"));
          var i6 = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + s5(a7) + '">' + s5(a7) + "</a>");
          t7.statusCode = 301;
          t7.setHeader("Content-Type", "text/html; charset=UTF-8");
          t7.setHeader("Content-Length", Buffer.byteLength(i6));
          t7.setHeader("Content-Security-Policy", "default-src 'none'");
          t7.setHeader("X-Content-Type-Options", "nosniff");
          t7.setHeader("Location", a7);
          t7.end(i6);
        };
        SendStream.prototype.pipe = function pipe(e7) {
          var t7 = this._root;
          this.res = e7;
          var a7 = decode(this.path);
          if (a7 === -1) {
            this.error(400);
            return e7;
          }
          if (~a7.indexOf("\0")) {
            this.error(400);
            return e7;
          }
          var i6;
          if (t7 !== null) {
            if (a7) {
              a7 = k5("." + j5 + a7);
            }
            if (C3.test(a7)) {
              n5('malicious path "%s"', a7);
              this.error(403);
              return e7;
            }
            i6 = a7.split(j5);
            a7 = k5(w5(t7, a7));
          } else {
            if (C3.test(a7)) {
              n5('malicious path "%s"', a7);
              this.error(403);
              return e7;
            }
            i6 = k5(a7).split(j5);
            a7 = S2(a7);
          }
          if (containsDotFile(i6)) {
            var r6 = this._dotfiles;
            if (r6 === void 0) {
              r6 = i6[i6.length - 1][0] === "." ? this._hidden ? "allow" : "ignore" : "allow";
            }
            n5('%s dotfile "%s"', r6, a7);
            switch (r6) {
              case "allow":
                break;
              case "deny":
                this.error(403);
                return e7;
              case "ignore":
              default:
                this.error(404);
                return e7;
            }
          }
          if (this._index.length && this.hasTrailingSlash()) {
            this.sendIndex(a7);
            return e7;
          }
          this.sendFile(a7);
          return e7;
        };
        SendStream.prototype.send = function send2(e7, t7) {
          var a7 = t7.size;
          var i6 = this.options;
          var r6 = {};
          var o6 = this.res;
          var p6 = this.req;
          var s6 = p6.headers.range;
          var c6 = i6.start || 0;
          if (headersSent(o6)) {
            this.headersAlreadySent();
            return;
          }
          n5('pipe "%s"', e7);
          this.setHeader(e7, t7);
          this.type(e7);
          if (this.isConditionalGET()) {
            if (this.isPreconditionFailure()) {
              this.error(412);
              return;
            }
            if (this.isCachable() && this.isFresh()) {
              this.notModified();
              return;
            }
          }
          a7 = Math.max(0, a7 - c6);
          if (i6.end !== void 0) {
            var l6 = i6.end - c6 + 1;
            if (a7 > l6) a7 = l6;
          }
          if (this._acceptRanges && _2.test(s6)) {
            s6 = f5(a7, s6, { combine: true });
            if (!this.isRangeFresh()) {
              n5("range stale");
              s6 = -2;
            }
            if (s6 === -1) {
              n5("range unsatisfiable");
              o6.setHeader("Content-Range", contentRange("bytes", a7));
              return this.error(416, { headers: { "Content-Range": o6.getHeader("Content-Range") } });
            }
            if (s6 !== -2 && s6.length === 1) {
              n5("range %j", s6);
              o6.statusCode = 206;
              o6.setHeader("Content-Range", contentRange("bytes", a7, s6[0]));
              c6 += s6[0].start;
              a7 = s6[0].end - s6[0].start + 1;
            }
          }
          for (var d6 in i6) {
            r6[d6] = i6[d6];
          }
          r6.start = c6;
          r6.end = Math.max(c6, c6 + a7 - 1);
          o6.setHeader("Content-Length", a7);
          if (p6.method === "HEAD") {
            o6.end();
            return;
          }
          this.stream(e7, r6);
        };
        SendStream.prototype.sendFile = function sendFile(e7) {
          var t7 = 0;
          var a7 = this;
          n5('stat "%s"', e7);
          d5.stat(e7, function onstat(t8, i6) {
            if (t8 && t8.code === "ENOENT" && !y3(e7) && e7[e7.length - 1] !== j5) {
              return next(t8);
            }
            if (t8) return a7.onStatError(t8);
            if (i6.isDirectory()) return a7.redirect(e7);
            a7.emit("file", e7, i6);
            a7.send(e7, i6);
          });
          function next(i6) {
            if (a7._extensions.length <= t7) {
              return i6 ? a7.onStatError(i6) : a7.error(404);
            }
            var r6 = e7 + "." + a7._extensions[t7++];
            n5('stat "%s"', r6);
            d5.stat(r6, function(e8, t8) {
              if (e8) return next(e8);
              if (t8.isDirectory()) return next();
              a7.emit("file", r6, t8);
              a7.send(r6, t8);
            });
          }
        };
        SendStream.prototype.sendIndex = function sendIndex(e7) {
          var t7 = -1;
          var a7 = this;
          function next(i6) {
            if (++t7 >= a7._index.length) {
              if (i6) return a7.onStatError(i6);
              return a7.error(404);
            }
            var r6 = w5(e7, a7._index[t7]);
            n5('stat "%s"', r6);
            d5.stat(r6, function(e8, t8) {
              if (e8) return next(e8);
              if (t8.isDirectory()) return next();
              a7.emit("file", r6, t8);
              a7.send(r6, t8);
            });
          }
          next();
        };
        SendStream.prototype.stream = function stream(e7, t7) {
          var a7 = this;
          var i6 = this.res;
          var stream2 = d5.createReadStream(e7, t7);
          this.emit("stream", stream2);
          stream2.pipe(i6);
          function cleanup() {
            o5(stream2, true);
          }
          v6(i6, cleanup);
          stream2.on("error", function onerror(e8) {
            cleanup();
            a7.onStatError(e8);
          });
          stream2.on("end", function onend() {
            a7.emit("end");
          });
        };
        SendStream.prototype.type = function type(e7) {
          var t7 = this.res;
          if (t7.getHeader("Content-Type")) return;
          var type2 = m5.lookup(e7);
          if (!type2) {
            n5("no content-type");
            return;
          }
          var a7 = m5.charsets.lookup(type2);
          n5("content-type %s", type2);
          t7.setHeader("Content-Type", type2 + (a7 ? "; charset=" + a7 : ""));
        };
        SendStream.prototype.setHeader = function setHeader(e7, t7) {
          var a7 = this.res;
          this.emit("headers", a7, e7, t7);
          if (this._acceptRanges && !a7.getHeader("Accept-Ranges")) {
            n5("accept ranges");
            a7.setHeader("Accept-Ranges", "bytes");
          }
          if (this._cacheControl && !a7.getHeader("Cache-Control")) {
            var i6 = "public, max-age=" + Math.floor(this._maxage / 1e3);
            if (this._immutable) {
              i6 += ", immutable";
            }
            n5("cache-control %s", i6);
            a7.setHeader("Cache-Control", i6);
          }
          if (this._lastModified && !a7.getHeader("Last-Modified")) {
            var r6 = t7.mtime.toUTCString();
            n5("modified %s", r6);
            a7.setHeader("Last-Modified", r6);
          }
          if (this._etag && !a7.getHeader("ETag")) {
            var o6 = c5(t7);
            n5("etag %s", o6);
            a7.setHeader("ETag", o6);
          }
        };
        function clearHeaders(e7) {
          var t7 = getHeaderNames(e7);
          for (var a7 = 0; a7 < t7.length; a7++) {
            e7.removeHeader(t7[a7]);
          }
        }
        function collapseLeadingSlashes(e7) {
          for (var t7 = 0; t7 < e7.length; t7++) {
            if (e7[t7] !== "/") {
              break;
            }
          }
          return t7 > 1 ? "/" + e7.substr(t7) : e7;
        }
        function containsDotFile(e7) {
          for (var t7 = 0; t7 < e7.length; t7++) {
            var a7 = e7[t7];
            if (a7.length > 1 && a7[0] === ".") {
              return true;
            }
          }
          return false;
        }
        function contentRange(e7, t7, a7) {
          return e7 + " " + (a7 ? a7.start + "-" + a7.end : "*") + "/" + t7;
        }
        function createHtmlDocument(e7, t7) {
          return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + e7 + "</title>\n</head>\n<body>\n<pre>" + t7 + "</pre>\n</body>\n</html>\n";
        }
        function createHttpError(e7, t7) {
          if (!t7) {
            return i5(e7);
          }
          return t7 instanceof Error ? i5(e7, t7, { expose: false }) : i5(e7, t7);
        }
        function decode(e7) {
          try {
            return decodeURIComponent(e7);
          } catch (e8) {
            return -1;
          }
        }
        function getHeaderNames(e7) {
          return typeof e7.getHeaderNames !== "function" ? Object.keys(e7._headers || {}) : e7.getHeaderNames();
        }
        function hasListeners(e7, t7) {
          var a7 = typeof e7.listenerCount !== "function" ? e7.listeners(t7).length : e7.listenerCount(t7);
          return a7 > 0;
        }
        function headersSent(e7) {
          return typeof e7.headersSent !== "boolean" ? Boolean(e7._header) : e7.headersSent;
        }
        function normalizeList(e7, t7) {
          var a7 = [].concat(e7 || []);
          for (var i6 = 0; i6 < a7.length; i6++) {
            if (typeof a7[i6] !== "string") {
              throw new TypeError(t7 + " must be array of strings or false");
            }
          }
          return a7;
        }
        function parseHttpDate(e7) {
          var t7 = e7 && Date.parse(e7);
          return typeof t7 === "number" ? t7 : NaN;
        }
        function parseTokenList(e7) {
          var t7 = 0;
          var a7 = [];
          var i6 = 0;
          for (var n6 = 0, r6 = e7.length; n6 < r6; n6++) {
            switch (e7.charCodeAt(n6)) {
              case 32:
                if (i6 === t7) {
                  i6 = t7 = n6 + 1;
                }
                break;
              case 44:
                if (i6 !== t7) {
                  a7.push(e7.substring(i6, t7));
                }
                i6 = t7 = n6 + 1;
                break;
              default:
                t7 = n6 + 1;
                break;
            }
          }
          if (i6 !== t7) {
            a7.push(e7.substring(i6, t7));
          }
          return a7;
        }
        function setHeaders(e7, t7) {
          var a7 = Object.keys(t7);
          for (var i6 = 0; i6 < a7.length; i6++) {
            var n6 = a7[i6];
            e7.setHeader(n6, t7[n6]);
          }
        }
      }, 832: (e6) => {
        "use strict";
        e6.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
        function setProtoOf(e7, t6) {
          e7.__proto__ = t6;
          return e7;
        }
        function mixinProperties(e7, t6) {
          for (var a6 in t6) {
            if (!Object.prototype.hasOwnProperty.call(e7, a6)) {
              e7[a6] = t6[a6];
            }
          }
          return e7;
        }
      }, 596: (e6, t6, a6) => {
        "use strict";
        var i5 = a6(64);
        e6.exports = status;
        status.message = i5;
        status.code = createMessageToStatusCodeMap(i5);
        status.codes = createStatusCodeList(i5);
        status.redirect = { 300: true, 301: true, 302: true, 303: true, 305: true, 307: true, 308: true };
        status.empty = { 204: true, 205: true, 304: true };
        status.retry = { 502: true, 503: true, 504: true };
        function createMessageToStatusCodeMap(e7) {
          var t7 = {};
          Object.keys(e7).forEach(function forEachCode(a7) {
            var i6 = e7[a7];
            var n5 = Number(a7);
            t7[i6.toLowerCase()] = n5;
          });
          return t7;
        }
        function createStatusCodeList(e7) {
          return Object.keys(e7).map(function mapCode(e8) {
            return Number(e8);
          });
        }
        function getStatusCode(e7) {
          var t7 = e7.toLowerCase();
          if (!Object.prototype.hasOwnProperty.call(status.code, t7)) {
            throw new Error('invalid status message: "' + e7 + '"');
          }
          return status.code[t7];
        }
        function getStatusMessage(e7) {
          if (!Object.prototype.hasOwnProperty.call(status.message, e7)) {
            throw new Error("invalid status code: " + e7);
          }
          return status.message[e7];
        }
        function status(e7) {
          if (typeof e7 === "number") {
            return getStatusMessage(e7);
          }
          if (typeof e7 !== "string") {
            throw new TypeError("code must be a number or string");
          }
          var t7 = parseInt(e7, 10);
          if (!isNaN(t7)) {
            return getStatusMessage(t7);
          }
          return getStatusCode(e7);
        }
      }, 637: (e6) => {
        "use strict";
        e6.exports = toIdentifier;
        function toIdentifier(e7) {
          return e7.split(" ").map(function(e8) {
            return e8.slice(0, 1).toUpperCase() + e8.slice(1);
          }).join("").replace(/[^ _0-9a-z]/gi, "");
        }
      }, 852: (e6) => {
        "use strict";
        e6.exports = __require("async_hooks");
      }, 113: (e6) => {
        "use strict";
        e6.exports = __require("crypto");
      }, 361: (e6) => {
        "use strict";
        e6.exports = __require("events");
      }, 147: (e6) => {
        "use strict";
        e6.exports = __require("fs");
      }, 937: (e6) => {
        "use strict";
        e6.exports = require_debug();
      }, 890: (e6) => {
        "use strict";
        e6.exports = require_fresh();
      }, 17: (e6) => {
        "use strict";
        e6.exports = __require("path");
      }, 781: (e6) => {
        "use strict";
        e6.exports = __require("stream");
      }, 837: (e6) => {
        "use strict";
        e6.exports = __require("util");
      }, 796: (e6) => {
        "use strict";
        e6.exports = __require("zlib");
      }, 598: (e6) => {
        "use strict";
        e6.exports = JSON.parse('{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}');
      }, 64: (e6) => {
        "use strict";
        e6.exports = JSON.parse(`{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I'm a Teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Too Early","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}`);
      } };
      var t5 = {};
      function __nccwpck_require__(a6) {
        var i5 = t5[a6];
        if (i5 !== void 0) {
          return i5.exports;
        }
        var n5 = t5[a6] = { exports: {} };
        var r5 = true;
        try {
          e5[a6](n5, n5.exports, __nccwpck_require__);
          r5 = false;
        } finally {
          if (r5) delete t5[a6];
        }
        return n5.exports;
      }
      if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
      var a5 = __nccwpck_require__(228);
      module.exports = a5;
    })();
  }
});

// node_modules/next/dist/server/serve-static.js
var require_serve_static = __commonJS({
  "node_modules/next/dist/server/serve-static.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      getContentType: function() {
        return getContentType;
      },
      getExtension: function() {
        return getExtension;
      },
      serveStatic: function() {
        return serveStatic;
      }
    });
    var _send = /* @__PURE__ */ _interop_require_default(require_send());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    _send.default.mime.define({
      "image/avif": [
        "avif"
      ],
      "image/x-icns": [
        "icns"
      ],
      "image/jxl": [
        "jxl"
      ],
      "image/heic": [
        "heic"
      ]
    });
    function serveStatic(req, res, path4, opts) {
      return new Promise((resolve, reject) => {
        (0, _send.default)(req, path4, opts).on("directory", () => {
          const err = Object.defineProperty(new Error("No directory access"), "__NEXT_ERROR_CODE", {
            value: "E340",
            enumerable: false,
            configurable: true
          });
          err.code = "ENOENT";
          reject(err);
        }).on("error", reject).pipe(res).on("finish", resolve);
      });
    }
    var getContentType = "getType" in _send.default.mime ? (extWithoutDot) => _send.default.mime.getType(extWithoutDot) : (extWithoutDot) => _send.default.mime.lookup(extWithoutDot);
    var getExtension = "getExtension" in _send.default.mime ? (contentType) => _send.default.mime.getExtension(contentType) : (contentType) => _send.default.mime.extension(contentType);
  }
});

// node_modules/next/dist/lib/picocolors.js
var require_picocolors = __commonJS({
  "node_modules/next/dist/lib/picocolors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      bgBlack: function() {
        return bgBlack;
      },
      bgBlue: function() {
        return bgBlue;
      },
      bgCyan: function() {
        return bgCyan;
      },
      bgGreen: function() {
        return bgGreen;
      },
      bgMagenta: function() {
        return bgMagenta;
      },
      bgRed: function() {
        return bgRed;
      },
      bgWhite: function() {
        return bgWhite;
      },
      bgYellow: function() {
        return bgYellow;
      },
      black: function() {
        return black;
      },
      blue: function() {
        return blue;
      },
      bold: function() {
        return bold;
      },
      cyan: function() {
        return cyan;
      },
      dim: function() {
        return dim;
      },
      gray: function() {
        return gray;
      },
      green: function() {
        return green;
      },
      hidden: function() {
        return hidden;
      },
      inverse: function() {
        return inverse;
      },
      italic: function() {
        return italic;
      },
      magenta: function() {
        return magenta;
      },
      purple: function() {
        return purple;
      },
      red: function() {
        return red;
      },
      reset: function() {
        return reset;
      },
      strikethrough: function() {
        return strikethrough;
      },
      underline: function() {
        return underline;
      },
      white: function() {
        return white;
      },
      yellow: function() {
        return yellow;
      }
    });
    var _globalThis;
    var { env: env3, stdout } = ((_globalThis = globalThis) == null ? void 0 : _globalThis.process) ?? {};
    var enabled = env3 && !env3.NO_COLOR && (env3.FORCE_COLOR || (stdout == null ? void 0 : stdout.isTTY) && !env3.CI && env3.TERM !== "dumb");
    var replaceClose = (str, close, replace, index) => {
      const start = str.substring(0, index) + replace;
      const end = str.substring(index + close.length);
      const nextIndex = end.indexOf(close);
      return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;
    };
    var formatter = (open, close, replace = open) => {
      if (!enabled) return String;
      return (input) => {
        const string = "" + input;
        const index = string.indexOf(close, open.length);
        return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
      };
    };
    var reset = enabled ? (s5) => `\x1B[0m${s5}\x1B[0m` : String;
    var bold = formatter("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m");
    var dim = formatter("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m");
    var italic = formatter("\x1B[3m", "\x1B[23m");
    var underline = formatter("\x1B[4m", "\x1B[24m");
    var inverse = formatter("\x1B[7m", "\x1B[27m");
    var hidden = formatter("\x1B[8m", "\x1B[28m");
    var strikethrough = formatter("\x1B[9m", "\x1B[29m");
    var black = formatter("\x1B[30m", "\x1B[39m");
    var red = formatter("\x1B[31m", "\x1B[39m");
    var green = formatter("\x1B[32m", "\x1B[39m");
    var yellow = formatter("\x1B[33m", "\x1B[39m");
    var blue = formatter("\x1B[34m", "\x1B[39m");
    var magenta = formatter("\x1B[35m", "\x1B[39m");
    var purple = formatter("\x1B[38;2;173;127;168m", "\x1B[39m");
    var cyan = formatter("\x1B[36m", "\x1B[39m");
    var white = formatter("\x1B[37m", "\x1B[39m");
    var gray = formatter("\x1B[90m", "\x1B[39m");
    var bgBlack = formatter("\x1B[40m", "\x1B[49m");
    var bgRed = formatter("\x1B[41m", "\x1B[49m");
    var bgGreen = formatter("\x1B[42m", "\x1B[49m");
    var bgYellow = formatter("\x1B[43m", "\x1B[49m");
    var bgBlue = formatter("\x1B[44m", "\x1B[49m");
    var bgMagenta = formatter("\x1B[45m", "\x1B[49m");
    var bgCyan = formatter("\x1B[46m", "\x1B[49m");
    var bgWhite = formatter("\x1B[47m", "\x1B[49m");
  }
});

// node_modules/next/dist/server/lib/lru-cache.js
var require_lru_cache = __commonJS({
  "node_modules/next/dist/server/lib/lru-cache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "LRUCache", {
      enumerable: true,
      get: function() {
        return LRUCache;
      }
    });
    var LRUNode = class {
      constructor(key, data, size) {
        this.prev = null;
        this.next = null;
        this.key = key;
        this.data = data;
        this.size = size;
      }
    };
    var SentinelNode = class {
      constructor() {
        this.prev = null;
        this.next = null;
      }
    };
    var LRUCache = class {
      constructor(maxSize, calculateSize) {
        this.cache = /* @__PURE__ */ new Map();
        this.totalSize = 0;
        this.maxSize = maxSize;
        this.calculateSize = calculateSize;
        this.head = new SentinelNode();
        this.tail = new SentinelNode();
        this.head.next = this.tail;
        this.tail.prev = this.head;
      }
      /**
      * Adds a node immediately after the head (marks as most recently used).
      * Used when inserting new items or when an item is accessed.
      * PRECONDITION: node must be disconnected (prev/next should be null)
      */
      addToHead(node) {
        node.prev = this.head;
        node.next = this.head.next;
        this.head.next.prev = node;
        this.head.next = node;
      }
      /**
      * Removes a node from its current position in the doubly-linked list.
      * Updates the prev/next pointers of adjacent nodes to maintain list integrity.
      * PRECONDITION: node must be connected (prev/next are non-null)
      */
      removeNode(node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
      }
      /**
      * Moves an existing node to the head position (marks as most recently used).
      * This is the core LRU operation - accessed items become most recent.
      */
      moveToHead(node) {
        this.removeNode(node);
        this.addToHead(node);
      }
      /**
      * Removes and returns the least recently used node (the one before tail).
      * This is called during eviction when the cache exceeds capacity.
      * PRECONDITION: cache is not empty (ensured by caller)
      */
      removeTail() {
        const lastNode = this.tail.prev;
        this.removeNode(lastNode);
        return lastNode;
      }
      /**
      * Sets a key-value pair in the cache.
      * If the key exists, updates the value and moves to head.
      * If new, adds at head and evicts from tail if necessary.
      *
      * Time Complexity:
      * - O(1) for uniform item sizes
      * - O(k) where k is the number of items evicted (can be O(N) for variable sizes)
      */
      set(key, value) {
        const size = (this.calculateSize == null ? void 0 : this.calculateSize.call(this, value)) ?? 1;
        if (size > this.maxSize) {
          console.warn("Single item size exceeds maxSize");
          return;
        }
        const existing = this.cache.get(key);
        if (existing) {
          existing.data = value;
          this.totalSize = this.totalSize - existing.size + size;
          existing.size = size;
          this.moveToHead(existing);
        } else {
          const newNode = new LRUNode(key, value, size);
          this.cache.set(key, newNode);
          this.addToHead(newNode);
          this.totalSize += size;
        }
        while (this.totalSize > this.maxSize && this.cache.size > 0) {
          const tail = this.removeTail();
          this.cache.delete(tail.key);
          this.totalSize -= tail.size;
        }
      }
      /**
      * Checks if a key exists in the cache.
      * This is a pure query operation - does NOT update LRU order.
      *
      * Time Complexity: O(1)
      */
      has(key) {
        return this.cache.has(key);
      }
      /**
      * Retrieves a value by key and marks it as most recently used.
      * Moving to head maintains the LRU property for future evictions.
      *
      * Time Complexity: O(1)
      */
      get(key) {
        const node = this.cache.get(key);
        if (!node) return void 0;
        this.moveToHead(node);
        return node.data;
      }
      /**
      * Returns an iterator over the cache entries. The order is outputted in the
      * order of most recently used to least recently used.
      */
      *[Symbol.iterator]() {
        let current = this.head.next;
        while (current && current !== this.tail) {
          const node = current;
          yield [
            node.key,
            node.data
          ];
          current = current.next;
        }
      }
      /**
      * Removes a specific key from the cache.
      * Updates both the hash map and doubly-linked list.
      *
      * Time Complexity: O(1)
      */
      remove(key) {
        const node = this.cache.get(key);
        if (!node) return;
        this.removeNode(node);
        this.cache.delete(key);
        this.totalSize -= node.size;
      }
      /**
      * Returns the number of items in the cache.
      */
      get size() {
        return this.cache.size;
      }
      /**
      * Returns the current total size of all cached items.
      * This uses the custom size calculation if provided.
      */
      get currentSize() {
        return this.totalSize;
      }
    };
  }
});

// node_modules/next/dist/build/output/log.js
var require_log = __commonJS({
  "node_modules/next/dist/build/output/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      bootstrap: function() {
        return bootstrap;
      },
      error: function() {
        return error2;
      },
      event: function() {
        return event;
      },
      info: function() {
        return info;
      },
      prefixes: function() {
        return prefixes;
      },
      ready: function() {
        return ready;
      },
      trace: function() {
        return trace;
      },
      wait: function() {
        return wait;
      },
      warn: function() {
        return warn2;
      },
      warnOnce: function() {
        return warnOnce;
      }
    });
    var _picocolors = require_picocolors();
    var _lrucache = require_lru_cache();
    var prefixes = {
      wait: (0, _picocolors.white)((0, _picocolors.bold)("\u25CB")),
      error: (0, _picocolors.red)((0, _picocolors.bold)("\u2A2F")),
      warn: (0, _picocolors.yellow)((0, _picocolors.bold)("\u26A0")),
      ready: "\u25B2",
      info: (0, _picocolors.white)((0, _picocolors.bold)(" ")),
      event: (0, _picocolors.green)((0, _picocolors.bold)("\u2713")),
      trace: (0, _picocolors.magenta)((0, _picocolors.bold)("\xBB"))
    };
    var LOGGING_METHOD = {
      log: "log",
      warn: "warn",
      error: "error"
    };
    function prefixedLog(prefixType, ...message) {
      if ((message[0] === "" || message[0] === void 0) && message.length === 1) {
        message.shift();
      }
      const consoleMethod = prefixType in LOGGING_METHOD ? LOGGING_METHOD[prefixType] : "log";
      const prefix = prefixes[prefixType];
      if (message.length === 0) {
        console[consoleMethod]("");
      } else {
        if (message.length === 1 && typeof message[0] === "string") {
          console[consoleMethod](" " + prefix + " " + message[0]);
        } else {
          console[consoleMethod](" " + prefix, ...message);
        }
      }
    }
    function bootstrap(...message) {
      console.log("   " + message.join(" "));
    }
    function wait(...message) {
      prefixedLog("wait", ...message);
    }
    function error2(...message) {
      prefixedLog("error", ...message);
    }
    function warn2(...message) {
      prefixedLog("warn", ...message);
    }
    function ready(...message) {
      prefixedLog("ready", ...message);
    }
    function info(...message) {
      prefixedLog("info", ...message);
    }
    function event(...message) {
      prefixedLog("event", ...message);
    }
    function trace(...message) {
      prefixedLog("trace", ...message);
    }
    var warnOnceCache = new _lrucache.LRUCache(1e4, (value) => value.length);
    function warnOnce(...message) {
      const key = message.join(" ");
      if (!warnOnceCache.has(key)) {
        warnOnceCache.set(key, key);
        warn2(...message);
      }
    }
  }
});

// node_modules/next/dist/shared/lib/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/next/dist/shared/lib/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      getObjectClassLabel: function() {
        return getObjectClassLabel;
      },
      isPlainObject: function() {
        return isPlainObject;
      }
    });
    function getObjectClassLabel(value) {
      return Object.prototype.toString.call(value);
    }
    function isPlainObject(value) {
      if (getObjectClassLabel(value) !== "[object Object]") {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return prototype === null || prototype.hasOwnProperty("isPrototypeOf");
    }
  }
});

// node_modules/next/dist/lib/is-error.js
var require_is_error = __commonJS({
  "node_modules/next/dist/lib/is-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      /**
      * Checks whether the given value is a NextError.
      * This can be used to print a more detailed error message with properties like `code` & `digest`.
      */
      default: function() {
        return isError;
      },
      getProperError: function() {
        return getProperError;
      }
    });
    var _isplainobject = require_is_plain_object();
    function isError(err) {
      return typeof err === "object" && err !== null && "name" in err && "message" in err;
    }
    function safeStringify(obj) {
      const seen = /* @__PURE__ */ new WeakSet();
      return JSON.stringify(obj, (_key, value) => {
        if (typeof value === "object" && value !== null) {
          if (seen.has(value)) {
            return "[Circular]";
          }
          seen.add(value);
        }
        return value;
      });
    }
    function getProperError(err) {
      if (isError(err)) {
        return err;
      }
      if (process.env.NODE_ENV === "development") {
        if (typeof err === "undefined") {
          return Object.defineProperty(new Error("An undefined error was thrown, see here for more info: https://nextjs.org/docs/messages/threw-undefined"), "__NEXT_ERROR_CODE", {
            value: "E98",
            enumerable: false,
            configurable: true
          });
        }
        if (err === null) {
          return Object.defineProperty(new Error("A null error was thrown, see here for more info: https://nextjs.org/docs/messages/threw-undefined"), "__NEXT_ERROR_CODE", {
            value: "E336",
            enumerable: false,
            configurable: true
          });
        }
      }
      return Object.defineProperty(new Error((0, _isplainobject.isPlainObject)(err) ? safeStringify(err) : err + ""), "__NEXT_ERROR_CODE", {
        value: "E394",
        enumerable: false,
        configurable: true
      });
    }
  }
});

// node_modules/next/dist/client/components/app-router-headers.js
var require_app_router_headers = __commonJS({
  "node_modules/next/dist/client/components/app-router-headers.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      ACTION_HEADER: function() {
        return ACTION_HEADER;
      },
      FLIGHT_HEADERS: function() {
        return FLIGHT_HEADERS;
      },
      NEXT_ACTION_NOT_FOUND_HEADER: function() {
        return NEXT_ACTION_NOT_FOUND_HEADER;
      },
      NEXT_DID_POSTPONE_HEADER: function() {
        return NEXT_DID_POSTPONE_HEADER;
      },
      NEXT_HMR_REFRESH_HASH_COOKIE: function() {
        return NEXT_HMR_REFRESH_HASH_COOKIE;
      },
      NEXT_HMR_REFRESH_HEADER: function() {
        return NEXT_HMR_REFRESH_HEADER;
      },
      NEXT_IS_PRERENDER_HEADER: function() {
        return NEXT_IS_PRERENDER_HEADER;
      },
      NEXT_REWRITTEN_PATH_HEADER: function() {
        return NEXT_REWRITTEN_PATH_HEADER;
      },
      NEXT_REWRITTEN_QUERY_HEADER: function() {
        return NEXT_REWRITTEN_QUERY_HEADER;
      },
      NEXT_ROUTER_PREFETCH_HEADER: function() {
        return NEXT_ROUTER_PREFETCH_HEADER;
      },
      NEXT_ROUTER_SEGMENT_PREFETCH_HEADER: function() {
        return NEXT_ROUTER_SEGMENT_PREFETCH_HEADER;
      },
      NEXT_ROUTER_STALE_TIME_HEADER: function() {
        return NEXT_ROUTER_STALE_TIME_HEADER;
      },
      NEXT_ROUTER_STATE_TREE_HEADER: function() {
        return NEXT_ROUTER_STATE_TREE_HEADER;
      },
      NEXT_RSC_UNION_QUERY: function() {
        return NEXT_RSC_UNION_QUERY;
      },
      NEXT_URL: function() {
        return NEXT_URL;
      },
      RSC_CONTENT_TYPE_HEADER: function() {
        return RSC_CONTENT_TYPE_HEADER;
      },
      RSC_HEADER: function() {
        return RSC_HEADER;
      }
    });
    var RSC_HEADER = "rsc";
    var ACTION_HEADER = "next-action";
    var NEXT_ROUTER_STATE_TREE_HEADER = "next-router-state-tree";
    var NEXT_ROUTER_PREFETCH_HEADER = "next-router-prefetch";
    var NEXT_ROUTER_SEGMENT_PREFETCH_HEADER = "next-router-segment-prefetch";
    var NEXT_HMR_REFRESH_HEADER = "next-hmr-refresh";
    var NEXT_HMR_REFRESH_HASH_COOKIE = "__next_hmr_refresh_hash__";
    var NEXT_URL = "next-url";
    var RSC_CONTENT_TYPE_HEADER = "text/x-component";
    var FLIGHT_HEADERS = [
      RSC_HEADER,
      NEXT_ROUTER_STATE_TREE_HEADER,
      NEXT_ROUTER_PREFETCH_HEADER,
      NEXT_HMR_REFRESH_HEADER,
      NEXT_ROUTER_SEGMENT_PREFETCH_HEADER
    ];
    var NEXT_RSC_UNION_QUERY = "_rsc";
    var NEXT_ROUTER_STALE_TIME_HEADER = "x-nextjs-stale-time";
    var NEXT_DID_POSTPONE_HEADER = "x-nextjs-postponed";
    var NEXT_REWRITTEN_PATH_HEADER = "x-nextjs-rewritten-path";
    var NEXT_REWRITTEN_QUERY_HEADER = "x-nextjs-rewritten-query";
    var NEXT_IS_PRERENDER_HEADER = "x-nextjs-prerender";
    var NEXT_ACTION_NOT_FOUND_HEADER = "x-nextjs-action-not-found";
    if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
      Object.defineProperty(exports.default, "__esModule", { value: true });
      Object.assign(exports.default, exports);
      module.exports = exports.default;
    }
  }
});

// node_modules/next/dist/lib/url.js
var require_url = __commonJS({
  "node_modules/next/dist/lib/url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      isFullStringUrl: function() {
        return isFullStringUrl;
      },
      parseReqUrl: function() {
        return parseReqUrl;
      },
      parseUrl: function() {
        return parseUrl3;
      },
      stripNextRscUnionQuery: function() {
        return stripNextRscUnionQuery;
      }
    });
    var _approuterheaders = require_app_router_headers();
    var DUMMY_ORIGIN = "http://n";
    function isFullStringUrl(url) {
      return /https?:\/\//.test(url);
    }
    function parseUrl3(url) {
      let parsed = void 0;
      try {
        parsed = new URL(url, DUMMY_ORIGIN);
      } catch {
      }
      return parsed;
    }
    function parseReqUrl(url) {
      const parsedUrl = parseUrl3(url);
      if (!parsedUrl) {
        return;
      }
      const query = {};
      for (const key of parsedUrl.searchParams.keys()) {
        const values = parsedUrl.searchParams.getAll(key);
        query[key] = values.length > 1 ? values : values[0];
      }
      const legacyUrl = {
        query,
        hash: parsedUrl.hash,
        search: parsedUrl.search,
        path: parsedUrl.pathname,
        pathname: parsedUrl.pathname,
        href: `${parsedUrl.pathname}${parsedUrl.search}${parsedUrl.hash}`,
        host: "",
        hostname: "",
        auth: "",
        protocol: "",
        slashes: null,
        port: ""
      };
      return legacyUrl;
    }
    function stripNextRscUnionQuery(relativeUrl) {
      const urlInstance = new URL(relativeUrl, DUMMY_ORIGIN);
      urlInstance.searchParams.delete(_approuterheaders.NEXT_RSC_UNION_QUERY);
      return urlInstance.pathname + urlInstance.search;
    }
  }
});

// node_modules/next/dist/server/image-optimizer.js
var require_image_optimizer = __commonJS({
  "node_modules/next/dist/server/image-optimizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      ImageError: function() {
        return ImageError;
      },
      ImageOptimizerCache: function() {
        return ImageOptimizerCache2;
      },
      detectContentType: function() {
        return detectContentType;
      },
      extractEtag: function() {
        return extractEtag;
      },
      fetchExternalImage: function() {
        return fetchExternalImage2;
      },
      fetchInternalImage: function() {
        return fetchInternalImage2;
      },
      getHash: function() {
        return getHash;
      },
      getImageEtag: function() {
        return getImageEtag;
      },
      getImageSize: function() {
        return getImageSize;
      },
      getMaxAge: function() {
        return getMaxAge;
      },
      getPreviouslyCachedImageOrNull: function() {
        return getPreviouslyCachedImageOrNull;
      },
      getSharp: function() {
        return getSharp;
      },
      imageOptimizer: function() {
        return imageOptimizer2;
      },
      optimizeImage: function() {
        return optimizeImage2;
      },
      sendResponse: function() {
        return sendResponse;
      }
    });
    var _crypto = __require("crypto");
    var _fs = __require("fs");
    var _accept = require_accept();
    var _contentdisposition = /* @__PURE__ */ _interop_require_default(require_content_disposition());
    var _imagesize = /* @__PURE__ */ _interop_require_default(require_image_size());
    var _detector = require_detector();
    var _isanimated = /* @__PURE__ */ _interop_require_default(require_is_animated());
    var _path = __require("path");
    var _url = /* @__PURE__ */ _interop_require_default(__require("url"));
    var _imageblursvg = require_image_blur_svg();
    var _matchlocalpattern = require_match_local_pattern();
    var _matchremotepattern = require_match_remote_pattern();
    var _mockrequest = require_mock_request();
    var _responsecache = require_response_cache();
    var _sendpayload = require_send_payload();
    var _servestatic = require_serve_static();
    var _log2 = /* @__PURE__ */ _interop_require_wildcard(require_log());
    var _iserror = /* @__PURE__ */ _interop_require_default(require_is_error());
    var _url1 = require_url();
    var _invarianterror = require_invariant_error();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache5 = _getRequireWildcardCache(nodeInterop);
      if (cache5 && cache5.has(obj)) {
        return cache5.get(obj);
      }
      var newObj = {
        __proto__: null
      };
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache5) {
        cache5.set(obj, newObj);
      }
      return newObj;
    }
    var AVIF = "image/avif";
    var WEBP = "image/webp";
    var PNG = "image/png";
    var JPEG = "image/jpeg";
    var JXL = "image/jxl";
    var JP2 = "image/jp2";
    var HEIC = "image/heic";
    var GIF = "image/gif";
    var SVG = "image/svg+xml";
    var ICO = "image/x-icon";
    var ICNS = "image/x-icns";
    var TIFF = "image/tiff";
    var BMP = "image/bmp";
    var PDF = "application/pdf";
    var CACHE_VERSION = 4;
    var ANIMATABLE_TYPES = [
      WEBP,
      PNG,
      GIF
    ];
    var BYPASS_TYPES = [
      SVG,
      ICO,
      ICNS,
      BMP,
      JXL,
      HEIC
    ];
    var BLUR_IMG_SIZE = 8;
    var BLUR_QUALITY = 70;
    var _sharp;
    function getSharp(concurrency) {
      if (_sharp) {
        return _sharp;
      }
      try {
        _sharp = __require("sharp");
        if (_sharp && _sharp.concurrency() > 1) {
          const divisor = process.env.NODE_ENV === "development" ? 4 : 2;
          _sharp.concurrency(concurrency ?? Math.floor(Math.max(_sharp.concurrency() / divisor, 1)));
        }
      } catch (e5) {
        if ((0, _iserror.default)(e5) && e5.code === "MODULE_NOT_FOUND") {
          throw Object.defineProperty(new Error("Module `sharp` not found. Please run `npm install --cpu=wasm32 sharp` to install it."), "__NEXT_ERROR_CODE", {
            value: "E47",
            enumerable: false,
            configurable: true
          });
        }
        throw e5;
      }
      return _sharp;
    }
    function getSupportedMimeType(options, accept = "") {
      const mimeType = (0, _accept.mediaType)(accept, options);
      return accept.includes(mimeType) ? mimeType : "";
    }
    function getHash(items) {
      const hash = (0, _crypto.createHash)("sha256");
      for (let item of items) {
        if (typeof item === "number") hash.update(String(item));
        else {
          hash.update(item);
        }
      }
      return hash.digest("base64url");
    }
    function extractEtag(etag, imageBuffer) {
      if (etag) {
        return Buffer.from(etag).toString("base64url");
      }
      return getImageEtag(imageBuffer);
    }
    function getImageEtag(image) {
      return getHash([
        image
      ]);
    }
    async function writeToCacheDir(dir, extension, maxAge, expireAt, buffer, etag, upstreamEtag) {
      const filename = (0, _path.join)(dir, `${maxAge}.${expireAt}.${etag}.${upstreamEtag}.${extension}`);
      await _fs.promises.rm(dir, {
        recursive: true,
        force: true
      }).catch(() => {
      });
      await _fs.promises.mkdir(dir, {
        recursive: true
      });
      await _fs.promises.writeFile(filename, buffer);
    }
    async function detectContentType(buffer, skipMetadata, concurrency) {
      if (buffer.byteLength === 0) {
        return null;
      }
      if ([
        255,
        216,
        255
      ].every((b5, i5) => buffer[i5] === b5)) {
        return JPEG;
      }
      if ([
        137,
        80,
        78,
        71,
        13,
        10,
        26,
        10
      ].every((b5, i5) => buffer[i5] === b5)) {
        return PNG;
      }
      if ([
        71,
        73,
        70,
        56
      ].every((b5, i5) => buffer[i5] === b5)) {
        return GIF;
      }
      if ([
        82,
        73,
        70,
        70,
        0,
        0,
        0,
        0,
        87,
        69,
        66,
        80
      ].every((b5, i5) => !b5 || buffer[i5] === b5)) {
        return WEBP;
      }
      if ([
        60,
        63,
        120,
        109,
        108
      ].every((b5, i5) => buffer[i5] === b5)) {
        return SVG;
      }
      if ([
        60,
        115,
        118,
        103
      ].every((b5, i5) => buffer[i5] === b5)) {
        return SVG;
      }
      if ([
        0,
        0,
        0,
        0,
        102,
        116,
        121,
        112,
        97,
        118,
        105,
        102
      ].every((b5, i5) => !b5 || buffer[i5] === b5)) {
        return AVIF;
      }
      if ([
        0,
        0,
        1,
        0
      ].every((b5, i5) => buffer[i5] === b5)) {
        return ICO;
      }
      if ([
        105,
        99,
        110,
        115
      ].every((b5, i5) => buffer[i5] === b5)) {
        return ICNS;
      }
      if ([
        73,
        73,
        42,
        0
      ].every((b5, i5) => buffer[i5] === b5)) {
        return TIFF;
      }
      if ([
        66,
        77
      ].every((b5, i5) => buffer[i5] === b5)) {
        return BMP;
      }
      if ([
        255,
        10
      ].every((b5, i5) => buffer[i5] === b5)) {
        return JXL;
      }
      if ([
        0,
        0,
        0,
        12,
        74,
        88,
        76,
        32,
        13,
        10,
        135,
        10
      ].every((b5, i5) => buffer[i5] === b5)) {
        return JXL;
      }
      if ([
        0,
        0,
        0,
        0,
        102,
        116,
        121,
        112,
        104,
        101,
        105,
        99
      ].every((b5, i5) => !b5 || buffer[i5] === b5)) {
        return HEIC;
      }
      if ([
        37,
        80,
        68,
        70,
        45
      ].every((b5, i5) => buffer[i5] === b5)) {
        return PDF;
      }
      if ([
        0,
        0,
        0,
        12,
        106,
        80,
        32,
        32,
        13,
        10,
        135,
        10
      ].every((b5, i5) => buffer[i5] === b5)) {
        return JP2;
      }
      let format;
      format = (0, _detector.detector)(buffer);
      if (!format && !skipMetadata) {
        const sharp = getSharp(concurrency);
        const meta = await sharp(buffer).metadata().catch((_2) => null);
        format = meta == null ? void 0 : meta.format;
      }
      switch (format) {
        case "avif":
          return AVIF;
        case "webp":
          return WEBP;
        case "png":
          return PNG;
        case "jpeg":
        case "jpg":
          return JPEG;
        case "gif":
          return GIF;
        case "svg":
          return SVG;
        case "jxl":
        case "jxl-stream":
          return JXL;
        case "jp2":
          return JP2;
        case "tiff":
        case "tif":
          return TIFF;
        case "pdf":
          return PDF;
        case "bmp":
          return BMP;
        case "ico":
          return ICO;
        case "icns":
          return ICNS;
        case "dcraw":
        case "dz":
        case "exr":
        case "fits":
        case "heif":
        case "input":
        case "magick":
        case "openslide":
        case "ppm":
        case "rad":
        case "raw":
        case "v":
        case "cur":
        case "dds":
        case "j2c":
        case "ktx":
        case "pnm":
        case "psd":
        case "tga":
        case void 0:
        default:
          return null;
      }
    }
    var ImageOptimizerCache2 = class {
      static validateParams(req, query, nextConfig2, isDev) {
        var _nextConfig_images, _nextConfig_images1, _nextConfig_images2;
        const imageData = nextConfig2.images;
        const { deviceSizes = [], imageSizes = [], domains = [], minimumCacheTTL = 60, formats = [
          "image/webp"
        ] } = imageData;
        const remotePatterns = ((_nextConfig_images = nextConfig2.images) == null ? void 0 : _nextConfig_images.remotePatterns) || [];
        const localPatterns = (_nextConfig_images1 = nextConfig2.images) == null ? void 0 : _nextConfig_images1.localPatterns;
        const qualities = (_nextConfig_images2 = nextConfig2.images) == null ? void 0 : _nextConfig_images2.qualities;
        const { url, w: w5, q: q5 } = query;
        let href;
        if (domains.length > 0) {
          _log2.warnOnce('The "images.domains" configuration is deprecated. Please use "images.remotePatterns" configuration instead.');
        }
        if (!url) {
          return {
            errorMessage: '"url" parameter is required'
          };
        } else if (Array.isArray(url)) {
          return {
            errorMessage: '"url" parameter cannot be an array'
          };
        }
        if (url.length > 3072) {
          return {
            errorMessage: '"url" parameter is too long'
          };
        }
        if (url.startsWith("//")) {
          return {
            errorMessage: '"url" parameter cannot be a protocol-relative URL (//)'
          };
        }
        let isAbsolute;
        if (url.startsWith("/")) {
          var _parseUrl;
          href = url;
          isAbsolute = false;
          if (/\/_next\/image($|\/)/.test(decodeURIComponent(((_parseUrl = (0, _url1.parseUrl)(url)) == null ? void 0 : _parseUrl.pathname) ?? ""))) {
            return {
              errorMessage: '"url" parameter cannot be recursive'
            };
          }
          if (!(0, _matchlocalpattern.hasLocalMatch)(localPatterns, url)) {
            return {
              errorMessage: '"url" parameter is not allowed'
            };
          }
        } else {
          let hrefParsed;
          try {
            hrefParsed = new URL(url);
            href = hrefParsed.toString();
            isAbsolute = true;
          } catch (_error) {
            return {
              errorMessage: '"url" parameter is invalid'
            };
          }
          if (![
            "http:",
            "https:"
          ].includes(hrefParsed.protocol)) {
            return {
              errorMessage: '"url" parameter is invalid'
            };
          }
          if (!(0, _matchremotepattern.hasRemoteMatch)(domains, remotePatterns, hrefParsed)) {
            return {
              errorMessage: '"url" parameter is not allowed'
            };
          }
        }
        if (!w5) {
          return {
            errorMessage: '"w" parameter (width) is required'
          };
        } else if (Array.isArray(w5)) {
          return {
            errorMessage: '"w" parameter (width) cannot be an array'
          };
        } else if (!/^[0-9]+$/.test(w5)) {
          return {
            errorMessage: '"w" parameter (width) must be an integer greater than 0'
          };
        }
        if (!q5) {
          return {
            errorMessage: '"q" parameter (quality) is required'
          };
        } else if (Array.isArray(q5)) {
          return {
            errorMessage: '"q" parameter (quality) cannot be an array'
          };
        } else if (!/^[0-9]+$/.test(q5)) {
          return {
            errorMessage: '"q" parameter (quality) must be an integer between 1 and 100'
          };
        }
        const width = parseInt(w5, 10);
        if (width <= 0 || isNaN(width)) {
          return {
            errorMessage: '"w" parameter (width) must be an integer greater than 0'
          };
        }
        const sizes = [
          ...deviceSizes || [],
          ...imageSizes || []
        ];
        if (isDev) {
          sizes.push(BLUR_IMG_SIZE);
        }
        const isValidSize = sizes.includes(width) || isDev && width <= BLUR_IMG_SIZE;
        if (!isValidSize) {
          return {
            errorMessage: `"w" parameter (width) of ${width} is not allowed`
          };
        }
        const quality = parseInt(q5, 10);
        if (isNaN(quality) || quality < 1 || quality > 100) {
          return {
            errorMessage: '"q" parameter (quality) must be an integer between 1 and 100'
          };
        }
        if (qualities) {
          if (isDev) {
            qualities.push(BLUR_QUALITY);
          }
          if (!qualities.includes(quality)) {
            return {
              errorMessage: `"q" parameter (quality) of ${q5} is not allowed`
            };
          }
        }
        const mimeType = getSupportedMimeType(formats || [], req.headers["accept"]);
        const isStatic = url.startsWith(`${nextConfig2.basePath || ""}/_next/static/media`);
        return {
          href,
          sizes,
          isAbsolute,
          isStatic,
          width,
          quality,
          mimeType,
          minimumCacheTTL
        };
      }
      static getCacheKey({ href, width, quality, mimeType }) {
        return getHash([
          CACHE_VERSION,
          href,
          width,
          quality,
          mimeType
        ]);
      }
      constructor({ distDir, nextConfig: nextConfig2 }) {
        this.cacheDir = (0, _path.join)(distDir, "cache", "images");
        this.nextConfig = nextConfig2;
      }
      async get(cacheKey) {
        try {
          const cacheDir = (0, _path.join)(this.cacheDir, cacheKey);
          const files = await _fs.promises.readdir(cacheDir);
          const now = Date.now();
          for (const file of files) {
            const [maxAgeSt, expireAtSt, etag, upstreamEtag, extension] = file.split(".", 5);
            const buffer = await _fs.promises.readFile((0, _path.join)(cacheDir, file));
            const expireAt = Number(expireAtSt);
            const maxAge = Number(maxAgeSt);
            return {
              value: {
                kind: _responsecache.CachedRouteKind.IMAGE,
                etag,
                buffer,
                extension,
                upstreamEtag
              },
              revalidateAfter: Math.max(maxAge, this.nextConfig.images.minimumCacheTTL) * 1e3 + Date.now(),
              cacheControl: {
                revalidate: maxAge,
                expire: void 0
              },
              isStale: now > expireAt
            };
          }
        } catch (_2) {
        }
        return null;
      }
      async set(cacheKey, value, { cacheControl }) {
        if (!this.nextConfig.experimental.isrFlushToDisk) {
          return;
        }
        if ((value == null ? void 0 : value.kind) !== _responsecache.CachedRouteKind.IMAGE) {
          throw Object.defineProperty(new Error("invariant attempted to set non-image to image-cache"), "__NEXT_ERROR_CODE", {
            value: "E366",
            enumerable: false,
            configurable: true
          });
        }
        const revalidate = cacheControl == null ? void 0 : cacheControl.revalidate;
        if (typeof revalidate !== "number") {
          throw Object.defineProperty(new _invarianterror.InvariantError("revalidate must be a number for image-cache"), "__NEXT_ERROR_CODE", {
            value: "E657",
            enumerable: false,
            configurable: true
          });
        }
        const expireAt = Math.max(revalidate, this.nextConfig.images.minimumCacheTTL) * 1e3 + Date.now();
        try {
          await writeToCacheDir((0, _path.join)(this.cacheDir, cacheKey), value.extension, revalidate, expireAt, value.buffer, value.etag, value.upstreamEtag);
        } catch (err) {
          _log2.error(`Failed to write image to cache ${cacheKey}`, err);
        }
      }
    };
    var ImageError = class extends Error {
      constructor(statusCode, message) {
        super(message);
        if (statusCode >= 400) {
          this.statusCode = statusCode;
        } else {
          this.statusCode = 500;
        }
      }
    };
    function parseCacheControl(str) {
      const map3 = /* @__PURE__ */ new Map();
      if (!str) {
        return map3;
      }
      for (let directive of str.split(",")) {
        let [key, value] = directive.trim().split("=", 2);
        key = key.toLowerCase();
        if (value) {
          value = value.toLowerCase();
        }
        map3.set(key, value);
      }
      return map3;
    }
    function getMaxAge(str) {
      const map3 = parseCacheControl(str);
      if (map3) {
        let age = map3.get("s-maxage") || map3.get("max-age") || "";
        if (age.startsWith('"') && age.endsWith('"')) {
          age = age.slice(1, -1);
        }
        const n5 = parseInt(age, 10);
        if (!isNaN(n5)) {
          return n5;
        }
      }
      return 0;
    }
    function getPreviouslyCachedImageOrNull(upstreamImage, previousCacheEntry) {
      var _previousCacheEntry_value;
      if ((previousCacheEntry == null ? void 0 : (_previousCacheEntry_value = previousCacheEntry.value) == null ? void 0 : _previousCacheEntry_value.kind) === "IMAGE" && // Images that are SVGs, animated or failed the optimization previously end up using upstreamEtag as their etag as well,
      // in these cases we want to trigger a new "optimization" attempt.
      previousCacheEntry.value.upstreamEtag !== previousCacheEntry.value.etag && // and the upstream etag is the same as the previous cache entry's
      upstreamImage.etag === previousCacheEntry.value.upstreamEtag) {
        return previousCacheEntry.value;
      }
      return null;
    }
    async function optimizeImage2({ buffer, contentType, quality, width, height, concurrency, limitInputPixels, sequentialRead, timeoutInSeconds }) {
      const sharp = getSharp(concurrency);
      const transformer = sharp(buffer, {
        limitInputPixels,
        sequentialRead: sequentialRead ?? void 0
      }).timeout({
        seconds: timeoutInSeconds ?? 7
      }).rotate();
      if (height) {
        transformer.resize(width, height);
      } else {
        transformer.resize(width, void 0, {
          withoutEnlargement: true
        });
      }
      if (contentType === AVIF) {
        transformer.avif({
          quality: Math.max(quality - 20, 1),
          effort: 3
        });
      } else if (contentType === WEBP) {
        transformer.webp({
          quality
        });
      } else if (contentType === PNG) {
        transformer.png({
          quality
        });
      } else if (contentType === JPEG) {
        transformer.jpeg({
          quality,
          mozjpeg: true
        });
      }
      const optimizedBuffer = await transformer.toBuffer();
      return optimizedBuffer;
    }
    async function fetchExternalImage2(href) {
      const res = await fetch(href, {
        signal: AbortSignal.timeout(7e3)
      }).catch((err) => err);
      if (res instanceof Error) {
        const err = res;
        if (err.name === "TimeoutError") {
          _log2.error("upstream image response timed out for", href);
          throw Object.defineProperty(new ImageError(504, '"url" parameter is valid but upstream response timed out'), "__NEXT_ERROR_CODE", {
            value: "E394",
            enumerable: false,
            configurable: true
          });
        }
        throw err;
      }
      if (!res.ok) {
        _log2.error("upstream image response failed for", href, res.status);
        throw Object.defineProperty(new ImageError(res.status, '"url" parameter is valid but upstream response is invalid'), "__NEXT_ERROR_CODE", {
          value: "E394",
          enumerable: false,
          configurable: true
        });
      }
      const buffer = Buffer.from(await res.arrayBuffer());
      const contentType = res.headers.get("Content-Type");
      const cacheControl = res.headers.get("Cache-Control");
      const etag = extractEtag(res.headers.get("ETag"), buffer);
      return {
        buffer,
        contentType,
        cacheControl,
        etag
      };
    }
    async function fetchInternalImage2(href, _req, _res2, handleRequest) {
      try {
        const mocked = (0, _mockrequest.createRequestResponseMocks)({
          url: href,
          method: _req.method || "GET",
          socket: _req.socket
        });
        await handleRequest(mocked.req, mocked.res, _url.default.parse(href, true));
        await mocked.res.hasStreamed;
        if (!mocked.res.statusCode) {
          _log2.error("image response failed for", href, mocked.res.statusCode);
          throw Object.defineProperty(new ImageError(mocked.res.statusCode, '"url" parameter is valid but internal response is invalid'), "__NEXT_ERROR_CODE", {
            value: "E394",
            enumerable: false,
            configurable: true
          });
        }
        const buffer = Buffer.concat(mocked.res.buffers);
        const contentType = mocked.res.getHeader("Content-Type");
        const cacheControl = mocked.res.getHeader("Cache-Control");
        const etag = extractEtag(mocked.res.getHeader("ETag"), buffer);
        return {
          buffer,
          contentType,
          cacheControl,
          etag
        };
      } catch (err) {
        _log2.error("upstream image response failed for", href, err);
        throw Object.defineProperty(new ImageError(500, '"url" parameter is valid but upstream response is invalid'), "__NEXT_ERROR_CODE", {
          value: "E394",
          enumerable: false,
          configurable: true
        });
      }
    }
    async function imageOptimizer2(imageUpstream, paramsResult, nextConfig2, opts) {
      const { href, quality, width, mimeType } = paramsResult;
      const { buffer: upstreamBuffer, etag: upstreamEtag } = imageUpstream;
      const maxAge = Math.max(nextConfig2.images.minimumCacheTTL, getMaxAge(imageUpstream.cacheControl));
      const upstreamType = await detectContentType(upstreamBuffer, nextConfig2.experimental.imgOptSkipMetadata, nextConfig2.experimental.imgOptConcurrency);
      if (!upstreamType || !upstreamType.startsWith("image/") || upstreamType.includes(",")) {
        if (!opts.silent) {
          _log2.error("The requested resource isn't a valid image for", href, "received", upstreamType);
        }
        throw Object.defineProperty(new ImageError(400, "The requested resource isn't a valid image."), "__NEXT_ERROR_CODE", {
          value: "E394",
          enumerable: false,
          configurable: true
        });
      }
      if (upstreamType.startsWith("image/svg") && !nextConfig2.images.dangerouslyAllowSVG) {
        if (!opts.silent) {
          _log2.error(`The requested resource "${href}" has type "${upstreamType}" but dangerouslyAllowSVG is disabled. Consider adding the "unoptimized" property to the <Image>.`);
        }
        throw Object.defineProperty(new ImageError(400, '"url" parameter is valid but image type is not allowed'), "__NEXT_ERROR_CODE", {
          value: "E394",
          enumerable: false,
          configurable: true
        });
      }
      if (ANIMATABLE_TYPES.includes(upstreamType) && (0, _isanimated.default)(upstreamBuffer)) {
        if (!opts.silent) {
          _log2.warnOnce(`The requested resource "${href}" is an animated image so it will not be optimized. Consider adding the "unoptimized" property to the <Image>.`);
        }
        return {
          buffer: upstreamBuffer,
          contentType: upstreamType,
          maxAge,
          etag: upstreamEtag,
          upstreamEtag
        };
      }
      if (BYPASS_TYPES.includes(upstreamType)) {
        return {
          buffer: upstreamBuffer,
          contentType: upstreamType,
          maxAge,
          etag: upstreamEtag,
          upstreamEtag
        };
      }
      let contentType;
      if (mimeType) {
        contentType = mimeType;
      } else if ((0, _servestatic.getExtension)(upstreamType) && upstreamType !== WEBP && upstreamType !== AVIF) {
        contentType = upstreamType;
      } else {
        contentType = JPEG;
      }
      const previouslyCachedImage = getPreviouslyCachedImageOrNull(imageUpstream, opts.previousCacheEntry);
      if (previouslyCachedImage) {
        var _opts_previousCacheEntry_cacheControl, _opts_previousCacheEntry;
        return {
          buffer: previouslyCachedImage.buffer,
          contentType,
          maxAge: (opts == null ? void 0 : (_opts_previousCacheEntry = opts.previousCacheEntry) == null ? void 0 : (_opts_previousCacheEntry_cacheControl = _opts_previousCacheEntry.cacheControl) == null ? void 0 : _opts_previousCacheEntry_cacheControl.revalidate) || maxAge,
          etag: previouslyCachedImage.etag,
          upstreamEtag: previouslyCachedImage.upstreamEtag
        };
      }
      try {
        let optimizedBuffer = await optimizeImage2({
          buffer: upstreamBuffer,
          contentType,
          quality,
          width,
          concurrency: nextConfig2.experimental.imgOptConcurrency,
          limitInputPixels: nextConfig2.experimental.imgOptMaxInputPixels,
          sequentialRead: nextConfig2.experimental.imgOptSequentialRead,
          timeoutInSeconds: nextConfig2.experimental.imgOptTimeoutInSeconds
        });
        if (opts.isDev && width <= BLUR_IMG_SIZE && quality === BLUR_QUALITY) {
          const meta = await getImageSize(optimizedBuffer);
          const blurOpts = {
            blurWidth: meta.width,
            blurHeight: meta.height,
            blurDataURL: `data:${contentType};base64,${optimizedBuffer.toString("base64")}`
          };
          optimizedBuffer = Buffer.from(unescape((0, _imageblursvg.getImageBlurSvg)(blurOpts)));
          contentType = "image/svg+xml";
        }
        return {
          buffer: optimizedBuffer,
          contentType,
          maxAge,
          etag: getImageEtag(optimizedBuffer),
          upstreamEtag
        };
      } catch (error2) {
        if (upstreamType) {
          return {
            buffer: upstreamBuffer,
            contentType: upstreamType,
            maxAge: nextConfig2.images.minimumCacheTTL,
            etag: upstreamEtag,
            upstreamEtag,
            error: error2
          };
        } else {
          throw Object.defineProperty(new ImageError(400, "Unable to optimize image and unable to fallback to upstream image"), "__NEXT_ERROR_CODE", {
            value: "E394",
            enumerable: false,
            configurable: true
          });
        }
      }
    }
    function getFileNameWithExtension(url, contentType) {
      const [urlWithoutQueryParams] = url.split("?", 1);
      const fileNameWithExtension = urlWithoutQueryParams.split("/").pop();
      if (!contentType || !fileNameWithExtension) {
        return "image.bin";
      }
      const [fileName] = fileNameWithExtension.split(".", 1);
      const extension = (0, _servestatic.getExtension)(contentType);
      return `${fileName}.${extension}`;
    }
    function setResponseHeaders(req, res, url, etag, contentType, isStatic, xCache, imagesConfig, maxAge, isDev) {
      res.setHeader("Vary", "Accept");
      res.setHeader("Cache-Control", isStatic ? "public, max-age=315360000, immutable" : `public, max-age=${isDev ? 0 : maxAge}, must-revalidate`);
      if ((0, _sendpayload.sendEtagResponse)(req, res, etag)) {
        return {
          finished: true
        };
      }
      if (contentType) {
        res.setHeader("Content-Type", contentType);
      }
      const fileName = getFileNameWithExtension(url, contentType);
      res.setHeader("Content-Disposition", (0, _contentdisposition.default)(fileName, {
        type: imagesConfig.contentDispositionType
      }));
      res.setHeader("Content-Security-Policy", imagesConfig.contentSecurityPolicy);
      res.setHeader("X-Nextjs-Cache", xCache);
      return {
        finished: false
      };
    }
    function sendResponse(req, res, url, extension, buffer, etag, isStatic, xCache, imagesConfig, maxAge, isDev) {
      const contentType = (0, _servestatic.getContentType)(extension);
      const result = setResponseHeaders(req, res, url, etag, contentType, isStatic, xCache, imagesConfig, maxAge, isDev);
      if (!result.finished) {
        res.setHeader("Content-Length", Buffer.byteLength(buffer));
        res.end(buffer);
      }
    }
    async function getImageSize(buffer) {
      const { width, height } = (0, _imagesize.default)(buffer);
      return {
        width,
        height
      };
    }
  }
});

// .open-next/image-optimization-function/index.mjs
var import_config_shared = __toESM(require_config_shared(), 1);
var import_image_optimizer = __toESM(require_image_optimizer(), 1);
var import_image_optimizer2 = __toESM(require_image_optimizer(), 1);
import fs from "node:fs";
import path from "node:path";
import { Transform } from "node:stream";
import { Readable } from "node:stream";
import path2 from "node:path";
import { Writable } from "node:stream";
import { Buffer as Buffer2 } from "buffer";
import crypto from "crypto";
import crypto2 from "crypto";
import { Buffer as Buffer3 } from "buffer";
import { Buffer as Buffer4 } from "buffer";
import { Buffer as Buffer5 } from "buffer";
import { Buffer as Buffer6 } from "buffer";
import { Duplex } from "stream";
import { Readable as Readable2 } from "node:stream";
import { Buffer as Buffer7 } from "buffer";
import * as zlib from "zlib";
import { Writable as Writable2 } from "stream";
import { PassThrough } from "stream";
import { homedir } from "os";
import { sep } from "path";
import { createHash } from "crypto";
import { join } from "path";
import { promises as fsPromises } from "fs";
import { join as join2 } from "path";
import { join as join3 } from "path";
import { promises as fsPromises2 } from "fs";
import { join as join4 } from "path";
import { Readable as Readable3 } from "stream";
import { Buffer as Buffer8 } from "buffer";
import { request } from "http";
import { parse } from "url";
import { Readable as Readable4 } from "stream";
import { Agent as hAgent, request as hRequest } from "http";
import { Agent as hsAgent, request as hsRequest } from "https";
import { Writable as Writable3 } from "stream";
import { Buffer as Buffer9 } from "buffer";
import { Readable as Readable5 } from "stream";
import fs2 from "fs/promises";
import { homedir as homedir2 } from "os";
import { sep as sep2 } from "path";
import { promises as fsPromises3 } from "fs";
import { join as join5 } from "path";
import { join as join6 } from "path";
import { promises as fsPromises4 } from "fs";
import { join as join7 } from "path";
import { Readable as Readable6 } from "stream";
import { platform, release } from "os";
import { env, versions } from "process";
import { Buffer as Buffer10 } from "buffer";
import { Buffer as Buffer11 } from "buffer";
import { Buffer as Buffer12 } from "buffer";
import { createHash as createHash2, createHmac } from "crypto";
import { Readable as Readable7 } from "stream";
import { Agent as hAgent2, request as hRequest2 } from "http";
import { Agent as hsAgent2, request as hsRequest2 } from "https";
import { Writable as Writable4 } from "stream";
import { fstatSync, lstatSync } from "fs";
import { Buffer as Buffer13 } from "buffer";
import { Buffer as Buffer14 } from "buffer";
import { request as request2 } from "http";
import { parse as parse2 } from "url";
import { promises as fsPromises5 } from "fs";
import { platform as platform2, release as release2 } from "os";
import { env as env2, versions as versions2 } from "process";
import { Buffer as Buffer15 } from "buffer";
import { Buffer as Buffer16 } from "buffer";
import { Buffer as Buffer17 } from "buffer";
import { createHash as createHash3, createHmac as createHmac2 } from "crypto";
import { Readable as Readable8 } from "stream";
import { Agent as hAgent3, request as hRequest3 } from "http";
import { Agent as hsAgent3, request as hsRequest3 } from "https";
import { Writable as Writable5 } from "stream";
import { fstatSync as fstatSync2, lstatSync as lstatSync2 } from "fs";
import { Buffer as Buffer18 } from "buffer";
import { exec } from "child_process";
import { promisify } from "util";
import { readFileSync } from "fs";
import { Readable as Readable9 } from "stream";
import { Buffer as Buffer19 } from "buffer";
import { Writable as Writable6 } from "stream";
import { Readable as Readable10 } from "stream";
import { Buffer as Buffer20 } from "buffer";
import { Readable as Readable11 } from "stream";
import { createHash as createHash4 } from "node:crypto";
import https from "node:https";
import path3 from "node:path";
globalThis.openNextDebug = true;
globalThis.openNextVersion = "3.7.6";
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __require2 = /* @__PURE__ */ ((x5) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x5, {
  get: (a5, b5) => (typeof __require !== "undefined" ? __require : a5)[b5]
}) : x5)(function(x5) {
  if (typeof __require !== "undefined") return __require.apply(this, arguments);
  throw Error('Dynamic require of "' + x5 + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
var __commonJS2 = (cb2, mod) => function __require22() {
  return mod || (0, cb2[__getOwnPropNames2(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
function loadConfig(nextDir2) {
  const filePath = path.join(nextDir2, "required-server-files.json");
  const json = fs.readFileSync(filePath, "utf-8");
  const { config: config2 } = JSON.parse(json);
  return config2;
}
function loadBuildId(nextDir2) {
  const filePath = path.join(nextDir2, "BUILD_ID");
  return fs.readFileSync(filePath, "utf-8").trim();
}
var init_util = __esm({
  "node_modules/@opennextjs/aws/dist/adapters/config/util.js"() {
  }
});
function isOpenNextError(e5) {
  try {
    return "__openNextInternal" in e5;
  } catch {
    return false;
  }
}
var FatalError;
var init_error = __esm({
  "node_modules/@opennextjs/aws/dist/utils/error.js"() {
    FatalError = class extends Error {
      __openNextInternal = true;
      canIgnore = false;
      logLevel = 2;
      constructor(message) {
        super(message);
        this.name = "FatalError";
      }
    };
  }
});
function debug(...args) {
  if (globalThis.openNextDebug) {
    console.log(...args);
  }
}
function warn(...args) {
  console.warn(...args);
}
function error(...args) {
  if (args.some((arg) => isDownplayedErrorLog(arg))) {
    return debug(...args);
  }
  if (args.some((arg) => isOpenNextError(arg))) {
    const error2 = args.find((arg) => isOpenNextError(arg));
    if (error2.logLevel < getOpenNextErrorLogLevel()) {
      return;
    }
    if (error2.logLevel === 0) {
      return console.log(...args.map((arg) => isOpenNextError(arg) ? `${arg.name}: ${arg.message}` : arg));
    }
    if (error2.logLevel === 1) {
      return warn(...args.map((arg) => isOpenNextError(arg) ? `${arg.name}: ${arg.message}` : arg));
    }
    return console.error(...args);
  }
  console.error(...args);
}
function getOpenNextErrorLogLevel() {
  const strLevel = process.env.OPEN_NEXT_ERROR_LOG_LEVEL ?? "1";
  switch (strLevel.toLowerCase()) {
    case "debug":
    case "0":
      return 0;
    case "error":
    case "2":
      return 2;
    default:
      return 1;
  }
}
var DOWNPLAYED_ERROR_LOGS;
var isDownplayedErrorLog;
var awsLogger;
var init_logger = __esm({
  "node_modules/@opennextjs/aws/dist/adapters/logger.js"() {
    init_error();
    DOWNPLAYED_ERROR_LOGS = [
      {
        clientName: "S3Client",
        commandName: "GetObjectCommand",
        errorName: "NoSuchKey"
      }
    ];
    isDownplayedErrorLog = (errorLog) => DOWNPLAYED_ERROR_LOGS.some((downplayedInput) => downplayedInput.clientName === errorLog?.clientName && downplayedInput.commandName === errorLog?.commandName && (downplayedInput.errorName === errorLog?.error?.name || downplayedInput.errorName === errorLog?.error?.Code));
    awsLogger = {
      trace: () => {
      },
      debug: () => {
      },
      info: debug,
      warn,
      error
    };
  }
});
function parseSetCookieHeader(cookies) {
  if (!cookies) {
    return [];
  }
  if (typeof cookies === "string") {
    return cookies.split(/(?<!Expires=\w+),/i).map((c5) => c5.trim());
  }
  return cookies;
}
var parseHeaders;
var convertHeader;
var init_util2 = __esm({
  "node_modules/@opennextjs/aws/dist/http/util.js"() {
    parseHeaders = (headers) => {
      const result = {};
      if (!headers) {
        return result;
      }
      for (const [key, value] of Object.entries(headers)) {
        if (value === void 0) {
          continue;
        }
        result[key.toLowerCase()] = convertHeader(value);
      }
      return result;
    };
    convertHeader = (header) => {
      if (typeof header === "string") {
        return header;
      }
      if (Array.isArray(header)) {
        return header.join(",");
      }
      return String(header);
    };
  }
});
var SET_COOKIE_HEADER;
var CANNOT_BE_USED;
var OpenNextNodeResponse;
var init_openNextResponse = __esm({
  "node_modules/@opennextjs/aws/dist/http/openNextResponse.js"() {
    init_logger();
    init_util2();
    SET_COOKIE_HEADER = "set-cookie";
    CANNOT_BE_USED = "This cannot be used in OpenNext";
    OpenNextNodeResponse = class extends Transform {
      fixHeaders;
      onEnd;
      streamCreator;
      initialHeaders;
      statusCode;
      statusMessage = "";
      headers = {};
      _cookies = [];
      responseStream;
      headersSent = false;
      _chunks = [];
      // To comply with the ServerResponse interface :
      strictContentLength = false;
      assignSocket(_socket) {
        throw new Error(CANNOT_BE_USED);
      }
      detachSocket(_socket) {
        throw new Error(CANNOT_BE_USED);
      }
      // We might have to revisit those 3 in the future
      writeContinue(_callback) {
        throw new Error(CANNOT_BE_USED);
      }
      writeEarlyHints(_hints, _callback) {
        throw new Error(CANNOT_BE_USED);
      }
      writeProcessing() {
        throw new Error(CANNOT_BE_USED);
      }
      /**
       * This is a dummy request object to comply with the ServerResponse interface
       * It will never be defined
       */
      req;
      chunkedEncoding = false;
      shouldKeepAlive = true;
      useChunkedEncodingByDefault = true;
      sendDate = false;
      connection = null;
      socket = null;
      setTimeout(_msecs, _callback) {
        throw new Error(CANNOT_BE_USED);
      }
      addTrailers(_headers) {
        throw new Error(CANNOT_BE_USED);
      }
      constructor(fixHeaders, onEnd, streamCreator, initialHeaders, statusCode) {
        super();
        this.fixHeaders = fixHeaders;
        this.onEnd = onEnd;
        this.streamCreator = streamCreator;
        this.initialHeaders = initialHeaders;
        if (statusCode && Number.isInteger(statusCode) && statusCode >= 100 && statusCode <= 599) {
          this.statusCode = statusCode;
        }
        streamCreator?.abortSignal?.addEventListener("abort", () => {
          this.destroy();
        });
      }
      // Necessary for next 12
      // We might have to implement all the methods here
      get originalResponse() {
        return this;
      }
      get finished() {
        return this.responseStream ? this.responseStream?.writableFinished : this.writableFinished;
      }
      setHeader(name, value) {
        const key = name.toLowerCase();
        if (key === SET_COOKIE_HEADER) {
          if (Array.isArray(value)) {
            this._cookies = value;
          } else {
            this._cookies = [value];
          }
        }
        this.headers[key] = value;
        return this;
      }
      removeHeader(name) {
        const key = name.toLowerCase();
        if (key === SET_COOKIE_HEADER) {
          this._cookies = [];
        } else {
          delete this.headers[key];
        }
        return this;
      }
      hasHeader(name) {
        const key = name.toLowerCase();
        if (key === SET_COOKIE_HEADER) {
          return this._cookies.length > 0;
        }
        return this.headers[key] !== void 0;
      }
      getHeaders() {
        return this.headers;
      }
      getHeader(name) {
        return this.headers[name.toLowerCase()];
      }
      getHeaderNames() {
        return Object.keys(this.headers);
      }
      // Only used directly in next@14+
      flushHeaders() {
        this.headersSent = true;
        const mergeHeadersPriority = globalThis.__openNextAls?.getStore()?.mergeHeadersPriority ?? "middleware";
        if (this.initialHeaders) {
          this.headers = mergeHeadersPriority === "middleware" ? {
            ...this.headers,
            ...this.initialHeaders
          } : {
            ...this.initialHeaders,
            ...this.headers
          };
          const initialCookies = parseSetCookieHeader(this.initialHeaders[SET_COOKIE_HEADER]?.toString());
          this._cookies = mergeHeadersPriority === "middleware" ? [...this._cookies, ...initialCookies] : [...initialCookies, ...this._cookies];
        }
        this.fixHeaders(this.headers);
        this.fixHeadersForError();
        this.headers[SET_COOKIE_HEADER] = this._cookies;
        const parsedHeaders = parseHeaders(this.headers);
        delete parsedHeaders[SET_COOKIE_HEADER];
        if (this.streamCreator) {
          this.responseStream = this.streamCreator?.writeHeaders({
            statusCode: this.statusCode ?? 200,
            cookies: this._cookies,
            headers: parsedHeaders
          });
          this.pipe(this.responseStream);
        }
      }
      appendHeader(name, value) {
        const key = name.toLowerCase();
        if (!this.hasHeader(key)) {
          return this.setHeader(key, value);
        }
        const existingHeader = this.getHeader(key);
        const toAppend = Array.isArray(value) ? value : [value];
        const newValue = Array.isArray(existingHeader) ? [...existingHeader, ...toAppend] : [existingHeader, ...toAppend];
        return this.setHeader(key, newValue);
      }
      writeHead(statusCode, statusMessage, headers) {
        let _headers = headers;
        let _statusMessage;
        if (typeof statusMessage === "string") {
          _statusMessage = statusMessage;
        } else {
          _headers = statusMessage;
        }
        const finalHeaders = this.headers;
        if (_headers) {
          if (Array.isArray(_headers)) {
            for (let i5 = 0; i5 < _headers.length; i5 += 2) {
              finalHeaders[_headers[i5]] = _headers[i5 + 1];
            }
          } else {
            for (const key of Object.keys(_headers)) {
              finalHeaders[key] = _headers[key];
            }
          }
        }
        this.statusCode = statusCode;
        if (headers) {
          this.headers = finalHeaders;
        }
        this.flushHeaders();
        return this;
      }
      /**
       * OpenNext specific method
       */
      getFixedHeaders() {
        this.fixHeaders(this.headers);
        this.fixHeadersForError();
        this.headers[SET_COOKIE_HEADER] = this._cookies;
        return this.headers;
      }
      getBody() {
        return Buffer.concat(this._chunks);
      }
      _internalWrite(chunk, encoding) {
        this._chunks.push(Buffer.from(chunk, encoding));
        this.push(chunk, encoding);
        this.streamCreator?.onWrite?.();
      }
      _transform(chunk, encoding, callback) {
        if (!this.headersSent) {
          this.flushHeaders();
        }
        this._internalWrite(chunk, encoding);
        callback();
      }
      _flush(callback) {
        if (!this.headersSent) {
          this.flushHeaders();
        }
        globalThis.__openNextAls?.getStore()?.pendingPromiseRunner.add(this.onEnd(this.headers));
        const bodyLength = this.getBody().length;
        this.streamCreator?.onFinish?.(bodyLength);
        if (bodyLength === 0 && // We use an env variable here because not all aws account have the same behavior
        // On some aws accounts the response will hang if the body is empty
        // We are modifying the response body here, this is not a good practice
        process.env.OPEN_NEXT_FORCE_NON_EMPTY_RESPONSE === "true") {
          debug('Force writing "SOMETHING" to the response body');
          this.push("SOMETHING");
        }
        callback();
      }
      /**
       * New method in Node 18.15+
       * There are probably not used right now in Next.js, but better be safe than sorry
       */
      setHeaders(headers) {
        headers.forEach((value, key) => {
          this.setHeader(key, Array.isArray(value) ? value : value.toString());
        });
        return this;
      }
      /**
       * Next specific methods
       * On earlier versions of next.js, those methods are mandatory to make everything work
       */
      get sent() {
        return this.finished || this.headersSent;
      }
      getHeaderValues(name) {
        const values = this.getHeader(name);
        if (values === void 0)
          return void 0;
        return (Array.isArray(values) ? values : [values]).map((value) => value.toString());
      }
      send() {
        const body = this.getBody();
        this.end(body);
      }
      body(value) {
        this.write(value);
        return this;
      }
      onClose(callback) {
        this.on("close", callback);
      }
      redirect(destination, statusCode) {
        this.setHeader("Location", destination);
        this.statusCode = statusCode;
        if (statusCode === 308) {
          this.setHeader("Refresh", `0;url=${destination}`);
        }
        return this;
      }
      // For some reason, next returns the 500 error page with some cache-control headers
      // We need to fix that
      fixHeadersForError() {
        if (process.env.OPEN_NEXT_DANGEROUSLY_SET_ERROR_HEADERS === "true") {
          return;
        }
        if (this.statusCode === 404 || this.statusCode === 500) {
          this.headers["cache-control"] = "private, no-cache, no-store, max-age=0, must-revalidate";
        }
      }
    };
  }
});
function fromReadableStream(stream, base64) {
  const reader = stream.getReader();
  const chunks = [];
  return new Promise((resolve, reject) => {
    function pump() {
      reader.read().then(({ done, value }) => {
        if (done) {
          resolve(Buffer.concat(chunks).toString(base64 ? "base64" : "utf8"));
          return;
        }
        chunks.push(value);
        pump();
      }).catch(reject);
    }
    pump();
  });
}
function toReadableStream(value, isBase64) {
  return Readable.toWeb(Readable.from(Buffer.from(value, isBase64 ? "base64" : "utf8")));
}
function emptyReadableStream() {
  if (process.env.OPEN_NEXT_FORCE_NON_EMPTY_RESPONSE === "true") {
    return Readable.toWeb(Readable.from([Buffer.from("SOMETHING")]));
  }
  return Readable.toWeb(Readable.from([]));
}
var init_stream = __esm({
  "node_modules/@opennextjs/aws/dist/utils/stream.js"() {
  }
});
var NEXT_DIR;
var OPEN_NEXT_DIR;
var init_config = __esm({
  "node_modules/@opennextjs/aws/dist/adapters/config/index.js"() {
    init_logger();
    init_util();
    NEXT_DIR = path2.join(__dirname, ".next");
    OPEN_NEXT_DIR = path2.join(__dirname, ".open-next");
    debug({ NEXT_DIR, OPEN_NEXT_DIR });
  }
});
var init_binary = __esm({
  "node_modules/@opennextjs/aws/dist/utils/binary.js"() {
  }
});
var init_accept_header = __esm({
  "node_modules/@opennextjs/aws/dist/core/routing/i18n/accept-header.js"() {
  }
});
var init_i18n = __esm({
  "node_modules/@opennextjs/aws/dist/core/routing/i18n/index.js"() {
    init_config();
    init_stream();
    init_logger();
    init_util3();
    init_accept_header();
  }
});
var init_queue = __esm({
  "node_modules/@opennextjs/aws/dist/core/routing/queue.js"() {
  }
});
function convertToQuery(querystring) {
  const query = new URLSearchParams(querystring);
  const queryObject = {};
  for (const key of query.keys()) {
    const queries = query.getAll(key);
    queryObject[key] = queries.length > 1 ? queries : queries[0];
  }
  return queryObject;
}
var CommonHeaders;
var init_util3 = __esm({
  "node_modules/@opennextjs/aws/dist/core/routing/util.js"() {
    init_config();
    init_openNextResponse();
    init_util2();
    init_logger();
    init_binary();
    init_i18n();
    init_queue();
    (function(CommonHeaders2) {
      CommonHeaders2["CACHE_CONTROL"] = "cache-control";
      CommonHeaders2["NEXT_CACHE"] = "x-nextjs-cache";
    })(CommonHeaders || (CommonHeaders = {}));
  }
});
function removeUndefinedFromQuery(query) {
  const newQuery = {};
  for (const [key, value] of Object.entries(query)) {
    if (value !== void 0) {
      newQuery[key] = value;
    }
  }
  return newQuery;
}
function extractHostFromHeaders(headers) {
  return headers["x-forwarded-host"] ?? headers.host ?? "on";
}
var init_utils = __esm({
  "node_modules/@opennextjs/aws/dist/overrides/converters/utils.js"() {
    init_util2();
  }
});
var aws_apigw_v2_exports = {};
__export2(aws_apigw_v2_exports, {
  default: () => aws_apigw_v2_default
});
function normalizeAPIGatewayProxyEventV2Body(event) {
  const { body, isBase64Encoded } = event;
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (typeof body === "string") {
    return Buffer.from(body, isBase64Encoded ? "base64" : "utf8");
  }
  if (typeof body === "object") {
    return Buffer.from(JSON.stringify(body));
  }
  return Buffer.from("", "utf8");
}
function normalizeAPIGatewayProxyEventV2Headers(event) {
  const { headers: rawHeaders, cookies } = event;
  const headers = {};
  if (Array.isArray(cookies)) {
    headers.cookie = cookies.join("; ");
  }
  for (const [key, value] of Object.entries(rawHeaders || {})) {
    headers[key.toLowerCase()] = value;
  }
  return headers;
}
async function convertFromAPIGatewayProxyEventV2(event) {
  const { rawPath, rawQueryString, requestContext } = event;
  const headers = normalizeAPIGatewayProxyEventV2Headers(event);
  return {
    type: "core",
    method: requestContext.http.method,
    rawPath,
    url: `https://${extractHostFromHeaders(headers)}${rawPath}${rawQueryString ? `?${rawQueryString}` : ""}`,
    body: normalizeAPIGatewayProxyEventV2Body(event),
    headers,
    remoteAddress: requestContext.http.sourceIp,
    query: removeUndefinedFromQuery(convertToQuery(rawQueryString)),
    cookies: event.cookies?.reduce((acc, cur) => {
      const [key, value] = cur.split("=");
      acc[key] = value;
      return acc;
    }, {}) ?? {}
  };
}
async function convertToApiGatewayProxyResultV2(result) {
  const headers = {};
  Object.entries(result.headers).map(([key, value]) => [key.toLowerCase(), value]).filter(([key]) => !CloudFrontBlacklistedHeaders.some((header) => typeof header === "string" ? header === key : header.test(key))).forEach(([key, value]) => {
    if (value === null || value === void 0) {
      headers[key] = "";
      return;
    }
    headers[key] = Array.isArray(value) ? value.join(", ") : `${value}`;
  });
  const body = await fromReadableStream(result.body, result.isBase64Encoded);
  const response = {
    statusCode: result.statusCode,
    headers,
    cookies: parseSetCookieHeader(result.headers["set-cookie"]),
    body,
    isBase64Encoded: result.isBase64Encoded
  };
  debug(response);
  return response;
}
var CloudFrontBlacklistedHeaders;
var aws_apigw_v2_default;
var init_aws_apigw_v2 = __esm({
  "node_modules/@opennextjs/aws/dist/overrides/converters/aws-apigw-v2.js"() {
    init_util2();
    init_stream();
    init_logger();
    init_util3();
    init_utils();
    CloudFrontBlacklistedHeaders = [
      "connection",
      "expect",
      "keep-alive",
      "proxy-authenticate",
      "proxy-authorization",
      "proxy-connection",
      "trailer",
      "upgrade",
      "x-accel-buffering",
      "x-accel-charset",
      "x-accel-limit-rate",
      "x-accel-redirect",
      /x-amz-cf-(.*)/,
      /x-amzn-(.*)/,
      /x-edge-(.*)/,
      "x-cache",
      "x-forwarded-proto",
      "x-real-ip",
      "set-cookie",
      "age",
      "via"
    ];
    aws_apigw_v2_default = {
      convertFrom: convertFromAPIGatewayProxyEventV2,
      convertTo: convertToApiGatewayProxyResultV2,
      name: "aws-apigw-v2"
    };
  }
});
var aws_lambda_exports = {};
__export2(aws_lambda_exports, {
  default: () => aws_lambda_default,
  formatWarmerResponse: () => formatWarmerResponse
});
function formatWarmerResponse(event) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({ serverId, type: "warmer" });
    }, event.delay);
  });
}
var handler;
var aws_lambda_default;
var init_aws_lambda = __esm({
  "node_modules/@opennextjs/aws/dist/overrides/wrappers/aws-lambda.js"() {
    handler = async (handler3, converter) => async (event) => {
      if ("type" in event) {
        return formatWarmerResponse(event);
      }
      const internalEvent = await converter.convertFrom(event);
      const fakeStream = {
        writeHeaders: () => {
          return new Writable({
            write: (_chunk, _encoding, callback) => {
              callback();
            }
          });
        }
      };
      const response = await handler3(internalEvent, {
        streamCreator: fakeStream
      });
      return converter.convertTo(response, event);
    };
    aws_lambda_default = {
      wrapper: handler,
      name: "aws-lambda",
      supportStreaming: false
    };
  }
});
var init_httpExtensionConfiguration = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration();
  }
});
var init_Field = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest;
var init_httpRequest = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var init_httpResponse = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
  }
});
var init_isValidHostname = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions();
    init_Field();
    init_Fields();
    init_httpHandler();
    init_httpRequest();
    init_httpResponse();
    init_isValidHostname();
    init_types();
  }
});
function addExpectContinueMiddleware(options) {
  return (next) => async (args) => {
    const { request: request3 } = args;
    if (HttpRequest.isInstance(request3) && request3.body && options.runtime === "node") {
      if (options.requestHandler?.constructor?.name !== "FetchHttpHandler") {
        request3.headers = {
          ...request3.headers,
          Expect: "100-continue"
        };
      }
    }
    return next({
      ...args,
      request: request3
    });
  };
}
var addExpectContinueMiddlewareOptions;
var getAddExpectContinuePlugin;
var init_dist_es2 = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js"() {
    init_dist_es();
    addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    getAddExpectContinuePlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
      }
    });
  }
});
var RequestChecksumCalculation;
var DEFAULT_REQUEST_CHECKSUM_CALCULATION;
var ResponseChecksumValidation;
var DEFAULT_RESPONSE_CHECKSUM_VALIDATION;
var ChecksumAlgorithm;
var ChecksumLocation;
var DEFAULT_CHECKSUM_ALGORITHM;
var init_constants = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js"() {
    RequestChecksumCalculation = {
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    DEFAULT_REQUEST_CHECKSUM_CALCULATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    ResponseChecksumValidation = {
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    DEFAULT_RESPONSE_CHECKSUM_VALIDATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    (function(ChecksumAlgorithm2) {
      ChecksumAlgorithm2["MD5"] = "MD5";
      ChecksumAlgorithm2["CRC32"] = "CRC32";
      ChecksumAlgorithm2["CRC32C"] = "CRC32C";
      ChecksumAlgorithm2["CRC64NVME"] = "CRC64NVME";
      ChecksumAlgorithm2["SHA1"] = "SHA1";
      ChecksumAlgorithm2["SHA256"] = "SHA256";
    })(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
    (function(ChecksumLocation2) {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
    })(ChecksumLocation || (ChecksumLocation = {}));
    DEFAULT_CHECKSUM_ALGORITHM = ChecksumAlgorithm.CRC32;
  }
});
var SelectorType;
var stringUnionSelector;
var init_stringUnionSelector = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringUnionSelector.js"() {
    (function(SelectorType3) {
      SelectorType3["ENV"] = "env";
      SelectorType3["CONFIG"] = "shared config entry";
    })(SelectorType || (SelectorType = {}));
    stringUnionSelector = (obj, key, union, type) => {
      if (!(key in obj))
        return void 0;
      const value = obj[key].toUpperCase();
      if (!Object.values(union).includes(value)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected one of ${Object.values(union)}, got '${obj[key]}'.`);
      }
      return value;
    };
  }
});
var ENV_REQUEST_CHECKSUM_CALCULATION;
var CONFIG_REQUEST_CHECKSUM_CALCULATION;
var NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS;
var init_NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS.js"() {
    init_constants();
    init_stringUnionSelector();
    ENV_REQUEST_CHECKSUM_CALCULATION = "AWS_REQUEST_CHECKSUM_CALCULATION";
    CONFIG_REQUEST_CHECKSUM_CALCULATION = "request_checksum_calculation";
    NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => stringUnionSelector(env3, ENV_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, SelectorType.ENV),
      configFileSelector: (profile) => stringUnionSelector(profile, CONFIG_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, SelectorType.CONFIG),
      default: DEFAULT_REQUEST_CHECKSUM_CALCULATION
    };
  }
});
var ENV_RESPONSE_CHECKSUM_VALIDATION;
var CONFIG_RESPONSE_CHECKSUM_VALIDATION;
var NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS;
var init_NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS.js"() {
    init_constants();
    init_stringUnionSelector();
    ENV_RESPONSE_CHECKSUM_VALIDATION = "AWS_RESPONSE_CHECKSUM_VALIDATION";
    CONFIG_RESPONSE_CHECKSUM_VALIDATION = "response_checksum_validation";
    NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => stringUnionSelector(env3, ENV_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, SelectorType.ENV),
      configFileSelector: (profile) => stringUnionSelector(profile, CONFIG_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, SelectorType.CONFIG),
      default: DEFAULT_RESPONSE_CHECKSUM_VALIDATION
    };
  }
});
var crc64NvmeCrtContainer;
var init_crc64_nvme_crt_container = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/crc64-nvme-crt-container.js"() {
    crc64NvmeCrtContainer = {
      CrtCrc64Nvme: null
    };
  }
});
var state;
var emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    state = {
      warningEmitted: false
    };
    emitWarningIfUnsupportedVersion = (version) => {
      if (version && !state.warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
var init_setCredentialFeature = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
  }
});
function setFeature(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
var init_setFeature = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
  }
});
var init_setTokenFeature = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setTokenFeature.js"() {
  }
});
var init_client = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_emitWarningIfUnsupportedVersion();
    init_setCredentialFeature();
    init_setFeature();
    init_setTokenFeature();
  }
});
var init_httpExtensionConfiguration2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration2();
  }
});
var init_Field2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery2(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest2;
var init_httpRequest2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest2 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery2(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var HttpResponse;
var init_httpResponse2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
var init_isValidHostname2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es3 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions2();
    init_Field2();
    init_Fields2();
    init_httpHandler2();
    init_httpRequest2();
    init_httpResponse2();
    init_isValidHostname2();
    init_types2();
  }
});
var getDateHeader;
var init_getDateHeader = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    init_dist_es3();
    getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});
var isClockSkewed;
var init_isClockSkewed = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});
var init_utils2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});
var throwSigningPropertyError;
var validateSigningProperties;
var AwsSdkSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    init_dist_es3();
    init_utils2();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config2 = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config2.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config: config2,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest3, identity, signingProperties) {
        if (!HttpRequest2.isInstance(httpRequest3)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config: config2, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest3, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error2) => {
          const serverTime = error2.ServerTime ?? getDateHeader(error2.$response);
          if (serverTime) {
            const config2 = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config2.systemClockOffset;
            config2.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config2.systemClockOffset);
            const clockSkewCorrected = config2.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error2.$metadata) {
              error2.$metadata.clockSkewCorrected = true;
            }
          }
          throw error2;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config2 = throwSigningPropertyError("config", signingProperties.config);
          config2.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config2.systemClockOffset);
        }
      }
    };
  }
});
var AwsSdkSigV4ASigner;
var init_AwsSdkSigV4ASigner = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    init_dist_es3();
    init_utils2();
    init_AwsSdkSigV4Signer();
    AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
      async sign(httpRequest3, identity, signingProperties) {
        if (!HttpRequest2.isInstance(httpRequest3)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config: config2, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
        const configResolvedSigningRegionSet = await config2.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest3, {
          signingDate: getSkewCorrectedDate(config2.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});
var getArrayForCommaSeparatedString;
var init_getArrayForCommaSeparatedString = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getArrayForCommaSeparatedString.js"() {
    getArrayForCommaSeparatedString = (str) => typeof str === "string" && str.length > 0 ? str.split(",").map((item) => item.trim()) : [];
  }
});
var getBearerTokenEnvKey;
var init_getBearerTokenEnvKey = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getBearerTokenEnvKey.js"() {
    getBearerTokenEnvKey = (signingName) => `AWS_BEARER_TOKEN_${signingName.replace(/[\s-]/g, "_").toUpperCase()}`;
  }
});
var NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY;
var NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY;
var NODE_AUTH_SCHEME_PREFERENCE_OPTIONS;
var init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js"() {
    init_getArrayForCommaSeparatedString();
    init_getBearerTokenEnvKey();
    NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = "AWS_AUTH_SCHEME_PREFERENCE";
    NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = "auth_scheme_preference";
    NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {
      environmentVariableSelector: (env3, options) => {
        if (options?.signingName) {
          const bearerTokenKey = getBearerTokenEnvKey(options.signingName);
          if (bearerTokenKey in env3)
            return ["httpBearerAuth"];
        }
        if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env3))
          return void 0;
        return getArrayForCommaSeparatedString(env3[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);
      },
      configFileSelector: (profile) => {
        if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile))
          return void 0;
        return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);
      },
      default: []
    };
  }
});
var init_getSmithyContext = __esm({
  "node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
  }
});
var init_abort = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/abort.js"() {
  }
});
var HttpAuthLocation;
var init_auth = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/auth.js"() {
    (function(HttpAuthLocation5) {
      HttpAuthLocation5["HEADER"] = "header";
      HttpAuthLocation5["QUERY"] = "query";
    })(HttpAuthLocation || (HttpAuthLocation = {}));
  }
});
var HttpApiKeyAuthLocation;
var init_HttpApiKeyAuth = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    (function(HttpApiKeyAuthLocation5) {
      HttpApiKeyAuthLocation5["HEADER"] = "header";
      HttpApiKeyAuthLocation5["QUERY"] = "query";
    })(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));
  }
});
var init_HttpAuthScheme = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
  }
});
var init_HttpAuthSchemeProvider = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
  }
});
var init_HttpSigner = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
  }
});
var init_IdentityProviderConfig = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
  }
});
var init_auth2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/auth/index.js"() {
    init_auth();
    init_HttpApiKeyAuth();
    init_HttpAuthScheme();
    init_HttpAuthSchemeProvider();
    init_HttpSigner();
    init_IdentityProviderConfig();
  }
});
var init_blob_payload_input_types = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
  }
});
var init_checksum = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/checksum.js"() {
  }
});
var init_client2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/client.js"() {
  }
});
var init_command = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/command.js"() {
  }
});
var init_config2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/connection/config.js"() {
  }
});
var init_manager = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/connection/manager.js"() {
  }
});
var init_pool = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/connection/pool.js"() {
  }
});
var init_connection = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/connection/index.js"() {
    init_config2();
    init_manager();
    init_pool();
  }
});
var init_crypto = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/crypto.js"() {
  }
});
var init_encode = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/encode.js"() {
  }
});
var EndpointURLScheme;
var init_endpoint = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoint.js"() {
    (function(EndpointURLScheme5) {
      EndpointURLScheme5["HTTP"] = "http";
      EndpointURLScheme5["HTTPS"] = "https";
    })(EndpointURLScheme || (EndpointURLScheme = {}));
  }
});
var init_EndpointRuleObject = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
  }
});
var init_shared = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
  }
});
var init_TreeRuleObject = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
  }
});
var init_endpoints = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    init_EndpointRuleObject();
    init_ErrorRuleObject();
    init_RuleSetObject();
    init_shared();
    init_TreeRuleObject();
  }
});
var init_eventStream = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/eventStream.js"() {
  }
});
var init_defaultClientConfiguration = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
  }
});
var init_defaultExtensionConfiguration = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions3 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/extensions/index.js"() {
    init_defaultClientConfiguration();
    init_defaultExtensionConfiguration();
  }
});
var init_feature_ids = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/feature-ids.js"() {
  }
});
var FieldPosition;
var init_http = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/http.js"() {
    (function(FieldPosition5) {
      FieldPosition5[FieldPosition5["HEADER"] = 0] = "HEADER";
      FieldPosition5[FieldPosition5["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition || (FieldPosition = {}));
  }
});
var init_httpHandlerInitialization = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
  }
});
var init_apiKeyIdentity = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
  }
});
var init_awsCredentialIdentity = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
  }
});
var init_identity = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/identity/identity.js"() {
  }
});
var init_tokenIdentity = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
  }
});
var init_identity2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/identity/index.js"() {
    init_apiKeyIdentity();
    init_awsCredentialIdentity();
    init_identity();
    init_tokenIdentity();
  }
});
var init_logger2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/logger.js"() {
  }
});
var SMITHY_CONTEXT_KEY;
var init_middleware = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/middleware.js"() {
    SMITHY_CONTEXT_KEY = "__smithy_context";
  }
});
var init_pagination = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/pagination.js"() {
  }
});
var IniSectionType;
var init_profile = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/profile.js"() {
    (function(IniSectionType5) {
      IniSectionType5["PROFILE"] = "profile";
      IniSectionType5["SSO_SESSION"] = "sso-session";
      IniSectionType5["SERVICES"] = "services";
    })(IniSectionType || (IniSectionType = {}));
  }
});
var init_response = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/response.js"() {
  }
});
var init_retry = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/retry.js"() {
  }
});
var init_schema = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/schema/schema.js"() {
  }
});
var init_sentinels = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/schema/sentinels.js"() {
  }
});
var init_serde = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/serde.js"() {
  }
});
var init_shapes = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/shapes.js"() {
  }
});
var init_signature = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/signature.js"() {
  }
});
var init_stream2 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/stream.js"() {
  }
});
var init_streaming_blob_common_types = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
  }
});
var init_streaming_blob_payload_input_types = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
  }
});
var init_streaming_blob_payload_output_types = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
  }
});
var RequestHandlerProtocol;
var init_transfer = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/transfer.js"() {
    (function(RequestHandlerProtocol5) {
      RequestHandlerProtocol5["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol5["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol5["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol || (RequestHandlerProtocol = {}));
  }
});
var init_client_payload_blob_type_narrow = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
  }
});
var init_mutable = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/transform/mutable.js"() {
  }
});
var init_no_undefined = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
  }
});
var init_type_transform = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
  }
});
var init_uri = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/uri.js"() {
  }
});
var init_util4 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/util.js"() {
  }
});
var init_waiter = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/waiter.js"() {
  }
});
var init_dist_es4 = __esm({
  "node_modules/@smithy/util-middleware/node_modules/@smithy/types/dist-es/index.js"() {
    init_abort();
    init_auth2();
    init_blob_payload_input_types();
    init_checksum();
    init_client2();
    init_command();
    init_connection();
    init_crypto();
    init_encode();
    init_endpoint();
    init_endpoints();
    init_eventStream();
    init_extensions3();
    init_feature_ids();
    init_http();
    init_httpHandlerInitialization();
    init_identity2();
    init_logger2();
    init_middleware();
    init_pagination();
    init_profile();
    init_response();
    init_retry();
    init_schema();
    init_sentinels();
    init_serde();
    init_shapes();
    init_signature();
    init_stream2();
    init_streaming_blob_common_types();
    init_streaming_blob_payload_input_types();
    init_streaming_blob_payload_output_types();
    init_transfer();
    init_client_payload_blob_type_narrow();
    init_mutable();
    init_no_undefined();
    init_type_transform();
    init_uri();
    init_util4();
    init_waiter();
  }
});
var getSmithyContext;
var init_getSmithyContext2 = __esm({
  "node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js"() {
    init_dist_es4();
    getSmithyContext = (context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});
  }
});
var normalizeProvider;
var init_normalizeProvider = __esm({
  "node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js"() {
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});
var init_dist_es5 = __esm({
  "node_modules/@smithy/util-middleware/dist-es/index.js"() {
    init_getSmithyContext2();
    init_normalizeProvider();
  }
});
var resolveAuthOptions;
var init_resolveAuthOptions = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/resolveAuthOptions.js"() {
    resolveAuthOptions = (candidateAuthOptions, authSchemePreference) => {
      if (!authSchemePreference || authSchemePreference.length === 0) {
        return candidateAuthOptions;
      }
      const preferredAuthOptions = [];
      for (const preferredSchemeName of authSchemePreference) {
        for (const candidateAuthOption of candidateAuthOptions) {
          const candidateAuthSchemeName = candidateAuthOption.schemeId.split("#")[1];
          if (candidateAuthSchemeName === preferredSchemeName) {
            preferredAuthOptions.push(candidateAuthOption);
          }
        }
      }
      for (const candidateAuthOption of candidateAuthOptions) {
        if (!preferredAuthOptions.find(({ schemeId }) => schemeId === candidateAuthOption.schemeId)) {
          preferredAuthOptions.push(candidateAuthOption);
        }
      }
      return preferredAuthOptions;
    };
  }
});
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map3 = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map3.set(scheme.schemeId, scheme);
  }
  return map3;
}
var httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    init_dist_es5();
    init_resolveAuthOptions();
    httpAuthSchemeMiddleware = (config2, mwOptions) => (next, context) => async (args) => {
      const options = config2.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config2, context, args.input));
      const authSchemePreference = config2.authSchemePreference ? await config2.authSchemePreference() : [];
      const resolvedOptions = resolveAuthOptions(options, authSchemePreference);
      const authSchemes = convertHttpAuthSchemesToMap(config2.httpAuthSchemes);
      const smithyContext = getSmithyContext(context);
      const failureReasons = [];
      for (const option of resolvedOptions) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config2));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config2, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});
var httpAuthSchemeEndpointRuleSetMiddlewareOptions;
var getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config2, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config2, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});
var init_httpExtensionConfiguration3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions4 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration3();
  }
});
var init_Field3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery3(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest3;
var init_httpRequest3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest3 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery3(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var init_httpResponse3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
  }
});
var init_isValidHostname3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types3 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es6 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions4();
    init_Field3();
    init_Fields3();
    init_httpHandler3();
    init_httpRequest3();
    init_httpResponse3();
    init_isValidHostname3();
    init_types3();
  }
});
var init_deserializerMiddleware = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
  }
});
var init_serializerMiddleware = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
  }
});
var serializerMiddlewareOption;
var init_serdePlugin = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
  }
});
var init_dist_es7 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    init_deserializerMiddleware();
    init_serdePlugin();
    init_serializerMiddleware();
  }
});
var httpAuthSchemeMiddlewareOptions;
var init_getHttpAuthSchemePlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    init_dist_es7();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
  }
});
var init_middleware_http_auth_scheme = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});
var defaultErrorHandler;
var defaultSuccessHandler;
var httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    init_dist_es6();
    init_dist_es5();
    defaultErrorHandler = (signingProperties) => (error2) => {
      throw error2;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config2) => (next, context) => async (args) => {
      if (!HttpRequest3.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = getSmithyContext(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});
var httpSigningMiddlewareOptions;
var getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: "retryMiddleware"
    };
    getHttpSigningPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config2), httpSigningMiddlewareOptions);
      }
    });
  }
});
var init_middleware_http_signing = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});
var normalizeProvider2;
var init_normalizeProvider2 = __esm({
  "node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    normalizeProvider2 = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config2, input, ...additionalArguments) {
    const _input = input;
    let token = config2.startingToken ?? _input[inputTokenName];
    let hasNext = true;
    let page;
    while (hasNext) {
      _input[inputTokenName] = token;
      if (pageSizeTokenName) {
        _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config2.pageSize;
      }
      if (config2.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config2.client, input, config2.withCommand, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config2.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest;
var get;
var init_createPaginator = __esm({
  "node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    makePagedClientRequest = async (CommandCtor, client, input, withCommand = (_2) => _2, ...args) => {
      let command = new CommandCtor(input);
      command = withCommand(command) ?? command;
      return await client.send(command, ...args);
    };
    get = (fromObject, path4) => {
      let cursor = fromObject;
      const pathComponents = path4.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});
var isArrayBuffer;
var init_dist_es8 = __esm({
  "node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
    isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
  }
});
var fromArrayBuffer;
var fromString;
var init_dist_es9 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer2.from(input, offset, length);
    };
    fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer2.from(input, encoding) : Buffer2.from(input);
    };
  }
});
var BASE64_REGEX;
var fromBase64;
var init_fromBase64 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    init_dist_es9();
    BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});
var fromUtf8;
var init_fromUtf8 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es9();
    fromUtf8 = (input) => {
      const buf = fromString(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var init_toUint8Array = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
  }
});
var toUtf8;
var init_toUtf8 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es9();
    toUtf8 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});
var init_dist_es10 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf8();
    init_toUint8Array();
    init_toUtf8();
  }
});
var toBase64;
var init_toBase64 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    init_dist_es9();
    init_dist_es10();
    toBase64 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf8(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});
var init_dist_es11 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_fromBase64();
    init_toBase64();
  }
});
function transformToString(payload, encoding = "utf-8") {
  if (encoding === "base64") {
    return toBase64(payload);
  }
  return toUtf8(payload);
}
function transformFromString(str, encoding) {
  if (encoding === "base64") {
    return Uint8ArrayBlobAdapter.mutate(fromBase64(str));
  }
  return Uint8ArrayBlobAdapter.mutate(fromUtf8(str));
}
var init_transforms = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/blob/transforms.js"() {
    init_dist_es11();
    init_dist_es10();
    init_Uint8ArrayBlobAdapter();
  }
});
var Uint8ArrayBlobAdapter;
var init_Uint8ArrayBlobAdapter = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
    init_transforms();
    Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
  }
});
var init_ChecksumStream = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js"() {
  }
});
var init_stream_type_check = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
  }
});
var init_createChecksumStream = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js"() {
  }
});
var init_createBufferedReadable = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js"() {
  }
});
var init_getAwsChunkedEncodingStream = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
  }
});
var init_headStream = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/headStream.js"() {
  }
});
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i5 = 0; i5 < encoded.length; i5 += 2) {
    const encodedByte = encoded.slice(i5, i5 + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i5 / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
}
function toHex(bytes) {
  let out = "";
  for (let i5 = 0; i5 < bytes.byteLength; i5++) {
    out += SHORT_TO_HEX[bytes[i5]];
  }
  return out;
}
var SHORT_TO_HEX;
var HEX_TO_SHORT;
var init_dist_es12 = __esm({
  "node_modules/@smithy/util-hex-encoding/dist-es/index.js"() {
    SHORT_TO_HEX = {};
    HEX_TO_SHORT = {};
    for (let i5 = 0; i5 < 256; i5++) {
      let encodedByte = i5.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i5] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i5;
    }
  }
});
var init_sdk_stream_mixin = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
  }
});
var init_splitStream = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/splitStream.js"() {
  }
});
var init_dist_es13 = __esm({
  "node_modules/@smithy/core/node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_Uint8ArrayBlobAdapter();
    init_ChecksumStream();
    init_createChecksumStream();
    init_createBufferedReadable();
    init_getAwsChunkedEncodingStream();
    init_headStream();
    init_sdk_stream_mixin();
    init_splitStream();
    init_stream_type_check();
  }
});
var collectBody;
var init_collect_stream_body = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js"() {
    init_dist_es13();
    collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
  }
});
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c5) {
    return "%" + c5.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js"() {
  }
});
var deref;
var init_deref = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/deref.js"() {
    deref = (schemaRef) => {
      if (typeof schemaRef === "function") {
        return schemaRef();
      }
      return schemaRef;
    };
  }
});
var init_getSchemaSerdePlugin = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/middleware/getSchemaSerdePlugin.js"() {
  }
});
var TypeRegistry;
var init_TypeRegistry = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/TypeRegistry.js"() {
    TypeRegistry = class _TypeRegistry {
      constructor(namespace, schemas = /* @__PURE__ */ new Map()) {
        this.namespace = namespace;
        this.schemas = schemas;
      }
      static for(namespace) {
        if (!_TypeRegistry.registries.has(namespace)) {
          _TypeRegistry.registries.set(namespace, new _TypeRegistry(namespace));
        }
        return _TypeRegistry.registries.get(namespace);
      }
      register(shapeId, schema) {
        const qualifiedName = this.normalizeShapeId(shapeId);
        const registry = _TypeRegistry.for(this.getNamespace(shapeId));
        registry.schemas.set(qualifiedName, schema);
      }
      getSchema(shapeId) {
        const id = this.normalizeShapeId(shapeId);
        if (!this.schemas.has(id)) {
          throw new Error(`@smithy/core/schema - schema not found for ${id}`);
        }
        return this.schemas.get(id);
      }
      getBaseException() {
        for (const [id, schema] of this.schemas.entries()) {
          if (id.startsWith("smithy.ts.sdk.synthetic.") && id.endsWith("ServiceException")) {
            return schema;
          }
        }
        return void 0;
      }
      find(predicate) {
        return [...this.schemas.values()].find(predicate);
      }
      destroy() {
        _TypeRegistry.registries.delete(this.namespace);
        this.schemas.clear();
      }
      normalizeShapeId(shapeId) {
        if (shapeId.includes("#")) {
          return shapeId;
        }
        return this.namespace + "#" + shapeId;
      }
      getNamespace(shapeId) {
        return this.normalizeShapeId(shapeId).split("#")[0];
      }
    };
    TypeRegistry.registries = /* @__PURE__ */ new Map();
  }
});
var Schema;
var init_Schema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/Schema.js"() {
    init_TypeRegistry();
    Schema = class {
      static assign(instance, values) {
        const schema = Object.assign(instance, values);
        TypeRegistry.for(schema.namespace).register(schema.name, schema);
        return schema;
      }
      static [Symbol.hasInstance](lhs) {
        const isPrototype = this.prototype.isPrototypeOf(lhs);
        if (!isPrototype && typeof lhs === "object" && lhs !== null) {
          const list = lhs;
          return list.symbol === this.symbol;
        }
        return isPrototype;
      }
      getName() {
        return this.namespace + "#" + this.name;
      }
    };
  }
});
var ListSchema;
var init_ListSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/ListSchema.js"() {
    init_Schema();
    ListSchema = class _ListSchema extends Schema {
      constructor() {
        super(...arguments);
        this.symbol = _ListSchema.symbol;
      }
    };
    ListSchema.symbol = Symbol.for("@smithy/lis");
  }
});
var MapSchema;
var init_MapSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/MapSchema.js"() {
    init_Schema();
    MapSchema = class _MapSchema extends Schema {
      constructor() {
        super(...arguments);
        this.symbol = _MapSchema.symbol;
      }
    };
    MapSchema.symbol = Symbol.for("@smithy/map");
  }
});
var OperationSchema;
var init_OperationSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/OperationSchema.js"() {
    init_Schema();
    OperationSchema = class _OperationSchema extends Schema {
      constructor() {
        super(...arguments);
        this.symbol = _OperationSchema.symbol;
      }
    };
    OperationSchema.symbol = Symbol.for("@smithy/ope");
  }
});
var StructureSchema;
var init_StructureSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/StructureSchema.js"() {
    init_Schema();
    StructureSchema = class _StructureSchema extends Schema {
      constructor() {
        super(...arguments);
        this.symbol = _StructureSchema.symbol;
      }
    };
    StructureSchema.symbol = Symbol.for("@smithy/str");
  }
});
var ErrorSchema;
var init_ErrorSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/ErrorSchema.js"() {
    init_StructureSchema();
    ErrorSchema = class _ErrorSchema extends StructureSchema {
      constructor() {
        super(...arguments);
        this.symbol = _ErrorSchema.symbol;
      }
    };
    ErrorSchema.symbol = Symbol.for("@smithy/err");
  }
});
var SCHEMA;
var init_sentinels2 = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/sentinels.js"() {
    SCHEMA = {
      BLOB: 21,
      STREAMING_BLOB: 42,
      BOOLEAN: 2,
      STRING: 0,
      NUMERIC: 1,
      BIG_INTEGER: 17,
      BIG_DECIMAL: 19,
      DOCUMENT: 15,
      TIMESTAMP_DEFAULT: 4,
      TIMESTAMP_DATE_TIME: 5,
      TIMESTAMP_HTTP_DATE: 6,
      TIMESTAMP_EPOCH_SECONDS: 7,
      LIST_MODIFIER: 64,
      MAP_MODIFIER: 128
    };
  }
});
var SimpleSchema;
var init_SimpleSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/SimpleSchema.js"() {
    init_Schema();
    SimpleSchema = class _SimpleSchema extends Schema {
      constructor() {
        super(...arguments);
        this.symbol = _SimpleSchema.symbol;
      }
    };
    SimpleSchema.symbol = Symbol.for("@smithy/sim");
  }
});
var NormalizedSchema;
var init_NormalizedSchema = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"() {
    init_deref();
    init_ListSchema();
    init_MapSchema();
    init_Schema();
    init_sentinels2();
    init_SimpleSchema();
    init_StructureSchema();
    NormalizedSchema = class _NormalizedSchema {
      constructor(ref, memberName) {
        this.ref = ref;
        this.memberName = memberName;
        this.symbol = _NormalizedSchema.symbol;
        const traitStack = [];
        let _ref = ref;
        let schema = ref;
        this._isMemberSchema = false;
        while (Array.isArray(_ref)) {
          traitStack.push(_ref[1]);
          _ref = _ref[0];
          schema = deref(_ref);
          this._isMemberSchema = true;
        }
        if (traitStack.length > 0) {
          this.memberTraits = {};
          for (let i5 = traitStack.length - 1; i5 >= 0; --i5) {
            const traitSet = traitStack[i5];
            Object.assign(this.memberTraits, _NormalizedSchema.translateTraits(traitSet));
          }
        } else {
          this.memberTraits = 0;
        }
        if (schema instanceof _NormalizedSchema) {
          Object.assign(this, schema);
          this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());
          this.normalizedTraits = void 0;
          this.memberName = memberName ?? schema.memberName;
          return;
        }
        this.schema = deref(schema);
        if (this.schema && typeof this.schema === "object") {
          this.traits = this.schema?.traits ?? {};
        } else {
          this.traits = 0;
        }
        this.name = (this.schema instanceof Schema ? this.schema.getName?.() : void 0) ?? this.memberName ?? this.getSchemaName();
        if (this._isMemberSchema && !memberName) {
          throw new Error(`@smithy/core/schema - NormalizedSchema member init ${this.getName(true)} missing member name.`);
        }
      }
      static [Symbol.hasInstance](lhs) {
        return Schema[Symbol.hasInstance].bind(this)(lhs);
      }
      static of(ref) {
        if (ref instanceof _NormalizedSchema) {
          return ref;
        }
        if (Array.isArray(ref)) {
          const [ns, traits] = ref;
          if (ns instanceof _NormalizedSchema) {
            Object.assign(ns.getMergedTraits(), _NormalizedSchema.translateTraits(traits));
            return ns;
          }
          throw new Error(`@smithy/core/schema - may not init unwrapped member schema=${JSON.stringify(ref, null, 2)}.`);
        }
        return new _NormalizedSchema(ref);
      }
      static translateTraits(indicator) {
        if (typeof indicator === "object") {
          return indicator;
        }
        indicator = indicator | 0;
        const traits = {};
        let i5 = 0;
        for (const trait of [
          "httpLabel",
          "idempotent",
          "idempotencyToken",
          "sensitive",
          "httpPayload",
          "httpResponseCode",
          "httpQueryParams"
        ]) {
          if ((indicator >> i5++ & 1) === 1) {
            traits[trait] = 1;
          }
        }
        return traits;
      }
      getSchema() {
        if (this.schema instanceof _NormalizedSchema) {
          Object.assign(this, { schema: this.schema.getSchema() });
          return this.schema;
        }
        if (this.schema instanceof SimpleSchema) {
          return deref(this.schema.schemaRef);
        }
        return deref(this.schema);
      }
      getName(withNamespace = false) {
        if (!withNamespace) {
          if (this.name && this.name.includes("#")) {
            return this.name.split("#")[1];
          }
        }
        return this.name || void 0;
      }
      getMemberName() {
        if (!this.isMemberSchema()) {
          throw new Error(`@smithy/core/schema - non-member schema: ${this.getName(true)}`);
        }
        return this.memberName;
      }
      isMemberSchema() {
        return this._isMemberSchema;
      }
      isUnitSchema() {
        return this.getSchema() === "unit";
      }
      isListSchema() {
        const inner = this.getSchema();
        if (typeof inner === "number") {
          return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;
        }
        return inner instanceof ListSchema;
      }
      isMapSchema() {
        const inner = this.getSchema();
        if (typeof inner === "number") {
          return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;
        }
        return inner instanceof MapSchema;
      }
      isStructSchema() {
        const inner = this.getSchema();
        return inner !== null && typeof inner === "object" && "members" in inner || inner instanceof StructureSchema;
      }
      isBlobSchema() {
        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;
      }
      isTimestampSchema() {
        const schema = this.getSchema();
        return typeof schema === "number" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;
      }
      isDocumentSchema() {
        return this.getSchema() === SCHEMA.DOCUMENT;
      }
      isStringSchema() {
        return this.getSchema() === SCHEMA.STRING;
      }
      isBooleanSchema() {
        return this.getSchema() === SCHEMA.BOOLEAN;
      }
      isNumericSchema() {
        return this.getSchema() === SCHEMA.NUMERIC;
      }
      isBigIntegerSchema() {
        return this.getSchema() === SCHEMA.BIG_INTEGER;
      }
      isBigDecimalSchema() {
        return this.getSchema() === SCHEMA.BIG_DECIMAL;
      }
      isStreaming() {
        const streaming = !!this.getMergedTraits().streaming;
        if (streaming) {
          return true;
        }
        return this.getSchema() === SCHEMA.STREAMING_BLOB;
      }
      isIdempotencyToken() {
        if (typeof this.traits === "number") {
          return (this.traits & 4) === 4;
        } else if (typeof this.traits === "object") {
          return !!this.traits.idempotencyToken;
        }
        return false;
      }
      getMergedTraits() {
        return this.normalizedTraits ?? (this.normalizedTraits = {
          ...this.getOwnTraits(),
          ...this.getMemberTraits()
        });
      }
      getMemberTraits() {
        return _NormalizedSchema.translateTraits(this.memberTraits);
      }
      getOwnTraits() {
        return _NormalizedSchema.translateTraits(this.traits);
      }
      getKeySchema() {
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], "key");
        }
        if (!this.isMapSchema()) {
          throw new Error(`@smithy/core/schema - cannot get key for non-map: ${this.getName(true)}`);
        }
        const schema = this.getSchema();
        if (typeof schema === "number") {
          return this.memberFrom([63 & schema, 0], "key");
        }
        return this.memberFrom([schema.keySchema, 0], "key");
      }
      getValueSchema() {
        const schema = this.getSchema();
        if (typeof schema === "number") {
          if (this.isMapSchema()) {
            return this.memberFrom([63 & schema, 0], "value");
          } else if (this.isListSchema()) {
            return this.memberFrom([63 & schema, 0], "member");
          }
        }
        if (schema && typeof schema === "object") {
          if (this.isStructSchema()) {
            throw new Error(`may not getValueSchema() on structure ${this.getName(true)}`);
          }
          const collection = schema;
          if ("valueSchema" in collection) {
            if (this.isMapSchema()) {
              return this.memberFrom([collection.valueSchema, 0], "value");
            } else if (this.isListSchema()) {
              return this.memberFrom([collection.valueSchema, 0], "member");
            }
          }
        }
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], "value");
        }
        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no value member.`);
      }
      hasMemberSchema(member) {
        if (this.isStructSchema()) {
          const struct = this.getSchema();
          return struct.memberNames.includes(member);
        }
        return false;
      }
      getMemberSchema(member) {
        if (this.isStructSchema()) {
          const struct = this.getSchema();
          if (!struct.memberNames.includes(member)) {
            throw new Error(`@smithy/core/schema - ${this.getName(true)} has no member=${member}.`);
          }
          const i5 = struct.memberNames.indexOf(member);
          const memberSchema = struct.memberList[i5];
          return this.memberFrom(Array.isArray(memberSchema) ? memberSchema : [memberSchema, 0], member);
        }
        if (this.isDocumentSchema()) {
          return this.memberFrom([SCHEMA.DOCUMENT, 0], member);
        }
        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no members.`);
      }
      getMemberSchemas() {
        const buffer = {};
        try {
          for (const [k5, v6] of this.structIterator()) {
            buffer[k5] = v6;
          }
        } catch (ignored) {
        }
        return buffer;
      }
      getEventStreamMember() {
        if (this.isStructSchema()) {
          for (const [memberName, memberSchema] of this.structIterator()) {
            if (memberSchema.isStreaming() && memberSchema.isStructSchema()) {
              return memberName;
            }
          }
        }
        return "";
      }
      *structIterator() {
        if (this.isUnitSchema()) {
          return;
        }
        if (!this.isStructSchema()) {
          throw new Error("@smithy/core/schema - cannot iterate non-struct schema.");
        }
        const struct = this.getSchema();
        for (let i5 = 0; i5 < struct.memberNames.length; ++i5) {
          yield [struct.memberNames[i5], this.memberFrom([struct.memberList[i5], 0], struct.memberNames[i5])];
        }
      }
      memberFrom(memberSchema, memberName) {
        if (memberSchema instanceof _NormalizedSchema) {
          return Object.assign(memberSchema, {
            memberName,
            _isMemberSchema: true
          });
        }
        return new _NormalizedSchema(memberSchema, memberName);
      }
      getSchemaName() {
        const schema = this.getSchema();
        if (typeof schema === "number") {
          const _schema = 63 & schema;
          const container = 192 & schema;
          const type = Object.entries(SCHEMA).find(([, value]) => {
            return value === _schema;
          })?.[0] ?? "Unknown";
          switch (container) {
            case SCHEMA.MAP_MODIFIER:
              return `${type}Map`;
            case SCHEMA.LIST_MODIFIER:
              return `${type}List`;
            case 0:
              return type;
          }
        }
        return "Unknown";
      }
    };
    NormalizedSchema.symbol = Symbol.for("@smithy/nor");
  }
});
var init_schema2 = __esm({
  "node_modules/@smithy/core/dist-es/submodules/schema/index.js"() {
    init_deref();
    init_getSchemaSerdePlugin();
    init_ListSchema();
    init_MapSchema();
    init_OperationSchema();
    init_ErrorSchema();
    init_NormalizedSchema();
    init_Schema();
    init_SimpleSchema();
    init_StructureSchema();
    init_sentinels2();
    init_TypeRegistry();
  }
});
var init_copyDocumentWithTransform = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/copyDocumentWithTransform.js"() {
  }
});
var parseBoolean;
var expectNumber;
var MAX_FLOAT;
var expectFloat32;
var expectLong;
var expectInt32;
var expectShort;
var expectByte;
var expectSizedInt;
var castInt;
var expectNonNull;
var expectObject;
var expectString;
var expectUnion;
var strictParseFloat32;
var NUMBER_REGEX;
var parseNumber;
var strictParseLong;
var strictParseInt32;
var strictParseShort;
var strictParseByte;
var stackTraceWarning;
var logger;
var init_parse_utils = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/parse-utils.js"() {
    parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    expectFloat32 = (value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    expectInt32 = (value) => expectSizedInt(value, 32);
    expectShort = (value) => expectSizedInt(value, 16);
    expectByte = (value) => expectSizedInt(value, 8);
    expectSizedInt = (value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v6]) => v6 != null).map(([k5]) => k5);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    };
    NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    strictParseLong = (value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    };
    strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    };
    strictParseShort = (value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    };
    strictParseByte = (value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    };
    stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s5) => !s5.includes("stackTraceWarning")).join("\n");
    };
    logger = {
      warn: console.warn
    };
  }
});
function dateToUtcString(date) {
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth();
  const dayOfWeek = date.getUTCDay();
  const dayOfMonthInt = date.getUTCDate();
  const hoursInt = date.getUTCHours();
  const minutesInt = date.getUTCMinutes();
  const secondsInt = date.getUTCSeconds();
  const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
  const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
  const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
  const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
  return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
var DAYS;
var MONTHS;
var RFC3339;
var parseRfc3339DateTime;
var RFC3339_WITH_OFFSET;
var parseRfc3339DateTimeWithOffset;
var IMF_FIXDATE;
var RFC_850_DATE;
var ASC_TIME;
var parseRfc7231DateTime;
var buildDate;
var parseTwoDigitYear;
var FIFTY_YEARS_IN_MILLIS;
var adjustRfc850Year;
var parseMonthByShortName;
var DAYS_IN_MONTH;
var validateDayOfMonth;
var isLeapYear;
var parseDateValue;
var parseMilliseconds;
var parseOffsetToMilliseconds;
var stripLeadingZeroes;
var init_date_utils = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/date-utils.js"() {
    init_parse_utils();
    DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_2, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_2, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_2, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_2, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_2, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    parseDateValue = (value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    };
    parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool;
var poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
var byteToHex;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    byteToHex = [];
    for (let i5 = 0; i5 < 256; ++i5) {
      byteToHex.push((i5 + 256).toString(16).slice(1));
    }
  }
});
var native_default;
var init_native = __esm({
  "node_modules/uuid/dist/esm-node/native.js"() {
    native_default = {
      randomUUID: crypto2.randomUUID
    };
  }
});
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i5 = 0; i5 < 16; ++i5) {
      buf[offset + i5] = rnds[i5];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v4();
  }
});
var init_generateIdempotencyToken = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/generateIdempotencyToken.js"() {
  }
});
var LazyJsonString;
var init_lazy_json = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/lazy-json.js"() {
    LazyJsonString = function LazyJsonString2(val) {
      const str = Object.assign(new String(val), {
        deserializeJSON() {
          return JSON.parse(String(val));
        },
        toString() {
          return String(val);
        },
        toJSON() {
          return String(val);
        }
      });
      return str;
    };
    LazyJsonString.from = (object) => {
      if (object && typeof object === "object" && (object instanceof LazyJsonString || "deserializeJSON" in object)) {
        return object;
      } else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString(String(object));
      }
      return LazyJsonString(JSON.stringify(object));
    };
    LazyJsonString.fromObject = LazyJsonString.from;
  }
});
function quoteHeader(part) {
  if (part.includes(",") || part.includes('"')) {
    part = `"${part.replace(/"/g, '\\"')}"`;
  }
  return part;
}
var init_quote_header = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/quote-header.js"() {
  }
});
var init_split_every = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/split-every.js"() {
  }
});
var init_split_header = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/split-header.js"() {
  }
});
var init_NumericValue = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/value/NumericValue.js"() {
  }
});
var init_serde2 = __esm({
  "node_modules/@smithy/core/dist-es/submodules/serde/index.js"() {
    init_copyDocumentWithTransform();
    init_date_utils();
    init_generateIdempotencyToken();
    init_lazy_json();
    init_parse_utils();
    init_quote_header();
    init_split_every();
    init_split_header();
    init_NumericValue();
  }
});
var init_HttpProtocol = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/HttpProtocol.js"() {
  }
});
var init_HttpBindingProtocol = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/HttpBindingProtocol.js"() {
  }
});
var init_RpcProtocol = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/RpcProtocol.js"() {
  }
});
var resolvedPath;
var init_resolve_path = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js"() {
    init_extended_encode_uri_component();
    resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
  }
});
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var RequestBuilder;
var init_requestBuilder = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js"() {
    init_dist_es6();
    init_resolve_path();
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new HttpRequest3({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path4) => {
          this.path = resolvedPath(path4, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});
var init_determineTimestampFormat = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/serde/determineTimestampFormat.js"() {
  }
});
var init_FromStringShapeDeserializer = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/serde/FromStringShapeDeserializer.js"() {
  }
});
var init_HttpInterceptingShapeDeserializer = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/serde/HttpInterceptingShapeDeserializer.js"() {
  }
});
var init_ToStringShapeSerializer = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/serde/ToStringShapeSerializer.js"() {
  }
});
var init_HttpInterceptingShapeSerializer = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/serde/HttpInterceptingShapeSerializer.js"() {
  }
});
var init_protocols = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/index.js"() {
    init_collect_stream_body();
    init_extended_encode_uri_component();
    init_HttpBindingProtocol();
    init_HttpProtocol();
    init_RpcProtocol();
    init_requestBuilder();
    init_resolve_path();
    init_FromStringShapeDeserializer();
    init_HttpInterceptingShapeDeserializer();
    init_HttpInterceptingShapeSerializer();
    init_ToStringShapeSerializer();
    init_determineTimestampFormat();
  }
});
var init_requestBuilder2 = __esm({
  "node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    init_protocols();
  }
});
function setFeature2(context, feature, value) {
  if (!context.__smithy_context) {
    context.__smithy_context = {
      features: {}
    };
  } else if (!context.__smithy_context.features) {
    context.__smithy_context.features = {};
  }
  context.__smithy_context.features[feature] = value;
}
var init_setFeature2 = __esm({
  "node_modules/@smithy/core/dist-es/setFeature.js"() {
  }
});
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    DefaultIdentityProviderConfig = class {
      constructor(config2) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config2)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});
var init_httpApiKeyAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
  }
});
var init_httpBearerAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
  }
});
var NoAuthSigner;
var init_noAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    NoAuthSigner = class {
      async sign(httpRequest3, identity, signingProperties) {
        return httpRequest3;
      }
    };
  }
});
var init_httpAuthSchemes = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});
var createIsIdentityExpiredFunction;
var EXPIRATION_MS;
var isIdentityExpired;
var doesIdentityRequireRefresh;
var memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});
var init_util_identity_and_auth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});
var init_dist_es14 = __esm({
  "node_modules/@smithy/core/dist-es/index.js"() {
    init_getSmithyContext();
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_normalizeProvider2();
    init_createPaginator();
    init_requestBuilder2();
    init_setFeature2();
    init_util_identity_and_auth();
  }
});
var ProviderError;
var init_ProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/ProviderError.js"() {
    ProviderError = class _ProviderError extends Error {
      constructor(message, options = true) {
        let logger2;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger2 = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger2 = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError.prototype);
        logger2?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      static from(error2, options = true) {
        return Object.assign(new this(error2.message, options), error2);
      }
    };
  }
});
var CredentialsProviderError;
var init_CredentialsProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js"() {
    init_ProviderError();
    CredentialsProviderError = class _CredentialsProviderError extends ProviderError {
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
  }
});
var TokenProviderError;
var init_TokenProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/TokenProviderError.js"() {
    init_ProviderError();
    TokenProviderError = class _TokenProviderError extends ProviderError {
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
  }
});
var chain;
var init_chain = __esm({
  "node_modules/@smithy/property-provider/dist-es/chain.js"() {
    init_ProviderError();
    chain = (...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err?.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    };
  }
});
var fromStatic;
var init_fromStatic = __esm({
  "node_modules/@smithy/property-provider/dist-es/fromStatic.js"() {
    fromStatic = (staticValue) => () => Promise.resolve(staticValue);
  }
});
var memoize;
var init_memoize = __esm({
  "node_modules/@smithy/property-provider/dist-es/memoize.js"() {
    memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
  }
});
var init_dist_es15 = __esm({
  "node_modules/@smithy/property-provider/dist-es/index.js"() {
    init_CredentialsProviderError();
    init_ProviderError();
    init_TokenProviderError();
    init_chain();
    init_fromStatic();
    init_memoize();
  }
});
var resolveAwsSdkSigV4AConfig;
var NODE_SIGV4A_CONFIG_OPTIONS;
var init_resolveAwsSdkSigV4AConfig = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_dist_es14();
    init_dist_es15();
    resolveAwsSdkSigV4AConfig = (config2) => {
      config2.sigv4aSigningRegionSet = normalizeProvider2(config2.sigv4aSigningRegionSet);
      return config2;
    };
    NODE_SIGV4A_CONFIG_OPTIONS = {
      environmentVariableSelector(env3) {
        if (env3.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env3.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_2) => _2.trim());
        }
        throw new ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
          tryNextLink: true
        });
      },
      configFileSelector(profile) {
        if (profile.sigv4a_signing_region_set) {
          return (profile.sigv4a_signing_region_set ?? "").split(",").map((_2) => _2.trim());
        }
        throw new ProviderError("sigv4a_signing_region_set not set in profile.", {
          tryNextLink: true
        });
      },
      default: void 0
    };
  }
});
var fromString2;
var init_dist_es16 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    fromString2 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer3.from(input, encoding) : Buffer3.from(input);
    };
  }
});
var fromUtf82;
var init_fromUtf82 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es16();
    fromUtf82 = (input) => {
      const buf = fromString2(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var toUint8Array;
var init_toUint8Array2 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf82();
    toUint8Array = (data) => {
      if (typeof data === "string") {
        return fromUtf82(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});
var init_toUtf82 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
  }
});
var init_dist_es17 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf82();
    init_toUint8Array2();
    init_toUtf82();
  }
});
var ALGORITHM_QUERY_PARAM;
var CREDENTIAL_QUERY_PARAM;
var AMZ_DATE_QUERY_PARAM;
var SIGNED_HEADERS_QUERY_PARAM;
var EXPIRES_QUERY_PARAM;
var SIGNATURE_QUERY_PARAM;
var TOKEN_QUERY_PARAM;
var AUTH_HEADER;
var AMZ_DATE_HEADER;
var DATE_HEADER;
var GENERATED_HEADERS;
var SIGNATURE_HEADER;
var SHA256_HEADER;
var TOKEN_HEADER;
var ALWAYS_UNSIGNABLE_HEADERS;
var PROXY_HEADER_PATTERN;
var SEC_HEADER_PATTERN;
var ALGORITHM_IDENTIFIER;
var EVENT_ALGORITHM_IDENTIFIER;
var UNSIGNED_PAYLOAD;
var MAX_CACHE_SIZE;
var KEY_TYPE_IDENTIFIER;
var MAX_PRESIGNED_TTL;
var init_constants2 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/constants.js"() {
    ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    AUTH_HEADER = "authorization";
    AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    DATE_HEADER = "date";
    GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    SHA256_HEADER = "x-amz-content-sha256";
    TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    PROXY_HEADER_PATTERN = /^proxy-/;
    SEC_HEADER_PATTERN = /^sec-/;
    ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    MAX_CACHE_SIZE = 50;
    KEY_TYPE_IDENTIFIER = "aws4_request";
    MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});
var signingKeyCache;
var cacheQueue;
var createScope;
var getSigningKey;
var hmac;
var init_credentialDerivation = __esm({
  "node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"() {
    init_dist_es12();
    init_dist_es17();
    init_constants2();
    signingKeyCache = {};
    cacheQueue = [];
    createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
    getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(toUint8Array(data));
      return hash.digest();
    };
  }
});
var getCanonicalHeaders;
var init_getCanonicalHeaders = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js"() {
    init_constants2();
    getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
  }
});
var getPayloadHash;
var init_getPayloadHash = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"() {
    init_dist_es8();
    init_dist_es12();
    init_dist_es17();
    init_constants2();
    getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array(body));
        return toHex(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    };
  }
});
function negate(bytes) {
  for (let i5 = 0; i5 < 8; i5++) {
    bytes[i5] ^= 255;
  }
  for (let i5 = 7; i5 > -1; i5--) {
    bytes[i5]++;
    if (bytes[i5] !== 0)
      break;
  }
}
var HeaderFormatter;
var HEADER_VALUE_TYPE;
var UUID_PATTERN;
var Int64;
var init_HeaderFormatter = __esm({
  "node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js"() {
    init_dist_es12();
    init_dist_es17();
    HeaderFormatter = class {
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = fromUtf82(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = fromUtf82(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i5 = 7, remaining = Math.abs(Math.round(number)); i5 > -1 && remaining > 0; i5--, remaining /= 256) {
          bytes[i5] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
  }
});
var hasHeader;
var init_headerUtil = __esm({
  "node_modules/@smithy/signature-v4/dist-es/headerUtil.js"() {
    hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});
var init_httpExtensionConfiguration4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions5 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration4();
  }
});
var init_Field4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery4(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest4;
var init_httpRequest4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest4 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery4(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var init_httpResponse4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
  }
});
var init_isValidHostname4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types4 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es18 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions5();
    init_Field4();
    init_Fields4();
    init_httpHandler4();
    init_httpRequest4();
    init_httpResponse4();
    init_isValidHostname4();
    init_types4();
  }
});
var moveHeadersToQuery;
var init_moveHeadersToQuery = __esm({
  "node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js"() {
    init_dist_es18();
    moveHeadersToQuery = (request3, options = {}) => {
      const { headers, query = {} } = HttpRequest4.clone(request3);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname) || options.hoistableHeaders?.has(lname)) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request3,
        headers,
        query
      };
    };
  }
});
var prepareRequest;
var init_prepareRequest = __esm({
  "node_modules/@smithy/signature-v4/dist-es/prepareRequest.js"() {
    init_dist_es18();
    init_constants2();
    prepareRequest = (request3) => {
      request3 = HttpRequest4.clone(request3);
      for (const headerName of Object.keys(request3.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request3.headers[headerName];
        }
      }
      return request3;
    };
  }
});
var escapeUri;
var hexEncode;
var init_escape_uri = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    hexEncode = (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});
var init_escape_uri_path = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
  }
});
var init_dist_es19 = __esm({
  "node_modules/@smithy/signature-v4/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    init_escape_uri();
    init_escape_uri_path();
  }
});
var getCanonicalQuery;
var init_getCanonicalQuery = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js"() {
    init_dist_es19();
    init_constants2();
    getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = escapeUri(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
          serialized[encodedKey] = `${encodedKey}=${escapeUri(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${escapeUri(value2)}`]), []).sort().join("&");
        }
      }
      return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
  }
});
var iso8601;
var toDate;
var init_utilDate = __esm({
  "node_modules/@smithy/signature-v4/dist-es/utilDate.js"() {
    iso8601 = (time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
  }
});
var SignatureV4Base;
var init_SignatureV4Base = __esm({
  "node_modules/@smithy/signature-v4/dist-es/SignatureV4Base.js"() {
    init_dist_es12();
    init_dist_es5();
    init_dist_es19();
    init_dist_es17();
    init_getCanonicalQuery();
    init_utilDate();
    SignatureV4Base = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider(region);
        this.credentialProvider = normalizeProvider(credentials);
      }
      createCanonicalRequest(request3, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request3.method}
${this.getCanonicalPath(request3)}
${getCanonicalQuery(request3)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {
        const hash = new this.sha256();
        hash.update(toUint8Array(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${algorithmIdentifier}
${longDate}
${credentialScope}
${toHex(hashedRequest)}`;
      }
      getCanonicalPath({ path: path4 }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path4.split("/")) {
            if (pathSegment?.length === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${path4?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path4?.endsWith("/") ? "/" : ""}`;
          const doubleEncoded = escapeUri(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path4;
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
      formatDate(now) {
        const longDate = iso8601(now).replace(/[\-:]/g, "");
        return {
          longDate,
          shortDate: longDate.slice(0, 8)
        };
      }
      getCanonicalHeaderList(headers) {
        return Object.keys(headers).sort().join(";");
      }
    };
  }
});
var SignatureV4;
var init_SignatureV4 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"() {
    init_dist_es12();
    init_dist_es17();
    init_constants2();
    init_credentialDerivation();
    init_getCanonicalHeaders();
    init_getPayloadHash();
    init_HeaderFormatter();
    init_headerUtil();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_SignatureV4Base();
    SignatureV4 = class extends SignatureV4Base {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        super({
          applyChecksum,
          credentials,
          region,
          service,
          sha256,
          uriEscapePath
        });
        this.headerFormatter = new HeaderFormatter();
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = this.formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request3 = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
          request3.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request3.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request3.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request3.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request3.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request3, unsignableHeaders, signableHeaders);
        request3.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);
        request3.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request3, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
        return request3;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = toHex(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerFormatter.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = this.formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(toUint8Array(stringToSign));
        return toHex(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request3 = prepareRequest(requestToSign);
        const { longDate, shortDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request3.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request3.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request3, this.sha256);
        if (!hasHeader(SHA256_HEADER, request3.headers) && this.applyChecksum) {
          request3.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request3, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request3, canonicalHeaders, payloadHash));
        request3.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request3;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);
        const hash = new this.sha256(await keyPromise);
        hash.update(toUint8Array(stringToSign));
        return toHex(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
  }
});
var signatureV4aContainer;
var init_signature_v4a_container = __esm({
  "node_modules/@smithy/signature-v4/dist-es/signature-v4a-container.js"() {
    signatureV4aContainer = {
      SignatureV4a: null
    };
  }
});
var init_dist_es20 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/index.js"() {
    init_SignatureV4();
    init_constants2();
    init_credentialDerivation();
    init_signature_v4a_container();
  }
});
function normalizeCredentialProvider(config2, { credentials, credentialDefaultProvider }) {
  let credentialsProvider;
  if (credentials) {
    if (!credentials?.memoized) {
      credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
    } else {
      credentialsProvider = credentials;
    }
  } else {
    if (credentialDefaultProvider) {
      credentialsProvider = normalizeProvider2(credentialDefaultProvider(Object.assign({}, config2, {
        parentClientConfig: config2
      })));
    } else {
      credentialsProvider = async () => {
        throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
      };
    }
  }
  credentialsProvider.memoized = true;
  return credentialsProvider;
}
function bindCallerConfig(config2, credentialsProvider) {
  if (credentialsProvider.configBound) {
    return credentialsProvider;
  }
  const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config2 });
  fn.memoized = credentialsProvider.memoized;
  fn.configBound = true;
  return fn;
}
var resolveAwsSdkSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_client();
    init_dist_es14();
    init_dist_es20();
    resolveAwsSdkSigV4Config = (config2) => {
      let inputCredentials = config2.credentials;
      let isUserSupplied = !!config2.credentials;
      let resolvedCredentials = void 0;
      Object.defineProperty(config2, "credentials", {
        set(credentials) {
          if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
            isUserSupplied = true;
          }
          inputCredentials = credentials;
          const memoizedProvider = normalizeCredentialProvider(config2, {
            credentials: inputCredentials,
            credentialDefaultProvider: config2.credentialDefaultProvider
          });
          const boundProvider = bindCallerConfig(config2, memoizedProvider);
          if (isUserSupplied && !boundProvider.attributed) {
            resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e"));
            resolvedCredentials.memoized = boundProvider.memoized;
            resolvedCredentials.configBound = boundProvider.configBound;
            resolvedCredentials.attributed = true;
          } else {
            resolvedCredentials = boundProvider;
          }
        },
        get() {
          return resolvedCredentials;
        },
        enumerable: true,
        configurable: true
      });
      config2.credentials = inputCredentials;
      const { signingEscapePath = true, systemClockOffset = config2.systemClockOffset || 0, sha256 } = config2;
      let signer;
      if (config2.signer) {
        signer = normalizeProvider2(config2.signer);
      } else if (config2.regionInfoProvider) {
        signer = () => normalizeProvider2(config2.region)().then(async (region) => [
          await config2.regionInfoProvider(region, {
            useFipsEndpoint: await config2.useFipsEndpoint(),
            useDualstackEndpoint: await config2.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config2.signingRegion = config2.signingRegion || signingRegion || region;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: config2.credentials,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config2.signingName || config2.defaultSigningName,
            signingRegion: await normalizeProvider2(config2.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config2.signingRegion = config2.signingRegion || signingRegion;
          config2.signingName = config2.signingName || signingService || config2.serviceId;
          const params = {
            ...config2,
            credentials: config2.credentials,
            region: config2.signingRegion,
            service: config2.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config2.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        };
      }
      const resolvedConfig = Object.assign(config2, {
        systemClockOffset,
        signingEscapePath,
        signer
      });
      return resolvedConfig;
    };
  }
});
var init_aws_sdk = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_AwsSdkSigV4Signer();
    init_AwsSdkSigV4ASigner();
    init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS();
    init_resolveAwsSdkSigV4AConfig();
    init_resolveAwsSdkSigV4Config();
  }
});
var init_httpAuthSchemes2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_aws_sdk();
    init_getBearerTokenEnvKey();
  }
});
var init_AwsSmithyRpcV2CborProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/cbor/AwsSmithyRpcV2CborProtocol.js"() {
  }
});
var init_coercing_serializers = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
  }
});
var fromArrayBuffer2;
var init_dist_es21 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer2 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer4.from(input, offset, length);
    };
  }
});
var init_fromUtf83 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
  }
});
var init_toUint8Array3 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
  }
});
var toUtf82;
var init_toUtf83 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es21();
    toUtf82 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer2(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});
var init_dist_es22 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf83();
    init_toUint8Array3();
    init_toUtf83();
  }
});
var init_client3 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/client.js"() {
  }
});
var init_collect_stream_body2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
    init_protocols();
  }
});
var init_command2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/command.js"() {
  }
});
var init_constants3 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
  }
});
var init_create_aggregated_client = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
  }
});
var init_exceptions = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
  }
});
var init_default_error_handler = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
  }
});
var init_defaults_mode = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
  }
});
var init_emitWarningIfUnsupportedVersion2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
  }
});
var init_extended_encode_uri_component2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
  }
});
var init_defaultExtensionConfiguration2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions6 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_defaultExtensionConfiguration2();
  }
});
var init_get_array_if_single_item = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
  }
});
var getValueFromTextNode;
var init_get_value_from_text_node = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
    getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    };
  }
});
var init_is_serializable_header_value = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
  }
});
var init_NoOpLogger = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
  }
});
var init_object_mapping = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
  }
});
var init_resolve_path2 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
  }
});
var init_ser_utils = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
  }
});
var init_serde_json = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
  }
});
var init_dist_es23 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_client3();
    init_collect_stream_body2();
    init_command2();
    init_constants3();
    init_create_aggregated_client();
    init_default_error_handler();
    init_defaults_mode();
    init_emitWarningIfUnsupportedVersion2();
    init_exceptions();
    init_extended_encode_uri_component2();
    init_extensions6();
    init_get_array_if_single_item();
    init_get_value_from_text_node();
    init_is_serializable_header_value();
    init_NoOpLogger();
    init_object_mapping();
    init_resolve_path2();
    init_ser_utils();
    init_serde_json();
    init_serde2();
  }
});
var collectBodyString;
var init_common = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    init_dist_es23();
    init_dist_es22();
    collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf82)(body));
  }
});
var parseJsonBody;
var parseJsonErrorBody;
var loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e5) {
          if (e5?.name === "SyntaxError") {
            Object.defineProperty(e5, "$responseBodyText", {
              value: encoded
            });
          }
          throw e5;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k5) => k5.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data && typeof data === "object") {
        const codeKey = findKey(data, "code");
        if (codeKey && data[codeKey] !== void 0) {
          return sanitizeErrorCode(data[codeKey]);
        }
        if (data["__type"] !== void 0) {
          return sanitizeErrorCode(data["__type"]);
        }
      }
    };
  }
});
var init_JsonShapeDeserializer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeDeserializer.js"() {
  }
});
var init_JsonShapeSerializer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeSerializer.js"() {
  }
});
var init_JsonCodec = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonCodec.js"() {
  }
});
var init_AwsJsonRpcProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJsonRpcProtocol.js"() {
  }
});
var init_AwsJson1_0Protocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJson1_0Protocol.js"() {
  }
});
var init_AwsJson1_1Protocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJson1_1Protocol.js"() {
  }
});
var init_AwsRestJsonProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsRestJsonProtocol.js"() {
  }
});
var init_awsExpectUnion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
  }
});
function getAllMatches(string, regex) {
  const matches = [];
  let match = regex.exec(string);
  while (match) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match[0].length;
    const len = match.length;
    for (let index = 0; index < len; index++) {
      allmatches.push(match[index]);
    }
    matches.push(allmatches);
    match = regex.exec(string);
  }
  return matches;
}
function isExist(v6) {
  return typeof v6 !== "undefined";
}
var nameStartChar;
var nameChar;
var nameRegexp;
var regexName;
var isName;
var init_util5 = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/util.js"() {
    "use strict";
    nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    regexName = new RegExp("^" + nameRegexp + "$");
    isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
  }
});
function validate(xmlData, options) {
  options = Object.assign({}, defaultOptions, options);
  const tags = [];
  let tagFound = false;
  let reachedRoot = false;
  if (xmlData[0] === "\uFEFF") {
    xmlData = xmlData.substr(1);
  }
  for (let i5 = 0; i5 < xmlData.length; i5++) {
    if (xmlData[i5] === "<" && xmlData[i5 + 1] === "?") {
      i5 += 2;
      i5 = readPI(xmlData, i5);
      if (i5.err) return i5;
    } else if (xmlData[i5] === "<") {
      let tagStartPos = i5;
      i5++;
      if (xmlData[i5] === "!") {
        i5 = readCommentAndCDATA(xmlData, i5);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i5] === "/") {
          closingTag = true;
          i5++;
        }
        let tagName = "";
        for (; i5 < xmlData.length && xmlData[i5] !== ">" && xmlData[i5] !== " " && xmlData[i5] !== "	" && xmlData[i5] !== "\n" && xmlData[i5] !== "\r"; i5++) {
          tagName += xmlData[i5];
        }
        tagName = tagName.trim();
        if (tagName[tagName.length - 1] === "/") {
          tagName = tagName.substring(0, tagName.length - 1);
          i5--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '" + tagName + "' is an invalid name.";
          }
          return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i5));
        }
        const result = readAttributeStr(xmlData, i5);
        if (result === false) {
          return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i5));
        }
        let attrStr = result.value;
        i5 = result.index;
        if (attrStr[attrStr.length - 1] === "/") {
          const attrStrStart = i5 - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
          } else {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i5));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else if (tags.length === 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject(
                "InvalidTag",
                "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                getLineNumberForPosition(xmlData, tagStartPos)
              );
            }
            if (tags.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i5 - attrStr.length + isValid.err.line));
          }
          if (reachedRoot === true) {
            return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i5));
          } else if (options.unpairedTags.indexOf(tagName) !== -1) {
          } else {
            tags.push({ tagName, tagStartPos });
          }
          tagFound = true;
        }
        for (i5++; i5 < xmlData.length; i5++) {
          if (xmlData[i5] === "<") {
            if (xmlData[i5 + 1] === "!") {
              i5++;
              i5 = readCommentAndCDATA(xmlData, i5);
              continue;
            } else if (xmlData[i5 + 1] === "?") {
              i5 = readPI(xmlData, ++i5);
              if (i5.err) return i5;
            } else {
              break;
            }
          } else if (xmlData[i5] === "&") {
            const afterAmp = validateAmpersand(xmlData, i5);
            if (afterAmp == -1)
              return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i5));
            i5 = afterAmp;
          } else {
            if (reachedRoot === true && !isWhiteSpace(xmlData[i5])) {
              return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i5));
            }
          }
        }
        if (xmlData[i5] === "<") {
          i5--;
        }
      }
    } else {
      if (isWhiteSpace(xmlData[i5])) {
        continue;
      }
      return getErrorObject("InvalidChar", "char '" + xmlData[i5] + "' is not expected.", getLineNumberForPosition(xmlData, i5));
    }
  }
  if (!tagFound) {
    return getErrorObject("InvalidXml", "Start tag expected.", 1);
  } else if (tags.length == 1) {
    return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
  } else if (tags.length > 0) {
    return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t5) => t5.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
  }
  return true;
}
function isWhiteSpace(char) {
  return char === " " || char === "	" || char === "\n" || char === "\r";
}
function readPI(xmlData, i5) {
  const start = i5;
  for (; i5 < xmlData.length; i5++) {
    if (xmlData[i5] == "?" || xmlData[i5] == " ") {
      const tagname = xmlData.substr(start, i5 - start);
      if (i5 > 5 && tagname === "xml") {
        return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i5));
      } else if (xmlData[i5] == "?" && xmlData[i5 + 1] == ">") {
        i5++;
        break;
      } else {
        continue;
      }
    }
  }
  return i5;
}
function readCommentAndCDATA(xmlData, i5) {
  if (xmlData.length > i5 + 5 && xmlData[i5 + 1] === "-" && xmlData[i5 + 2] === "-") {
    for (i5 += 3; i5 < xmlData.length; i5++) {
      if (xmlData[i5] === "-" && xmlData[i5 + 1] === "-" && xmlData[i5 + 2] === ">") {
        i5 += 2;
        break;
      }
    }
  } else if (xmlData.length > i5 + 8 && xmlData[i5 + 1] === "D" && xmlData[i5 + 2] === "O" && xmlData[i5 + 3] === "C" && xmlData[i5 + 4] === "T" && xmlData[i5 + 5] === "Y" && xmlData[i5 + 6] === "P" && xmlData[i5 + 7] === "E") {
    let angleBracketsCount = 1;
    for (i5 += 8; i5 < xmlData.length; i5++) {
      if (xmlData[i5] === "<") {
        angleBracketsCount++;
      } else if (xmlData[i5] === ">") {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (xmlData.length > i5 + 9 && xmlData[i5 + 1] === "[" && xmlData[i5 + 2] === "C" && xmlData[i5 + 3] === "D" && xmlData[i5 + 4] === "A" && xmlData[i5 + 5] === "T" && xmlData[i5 + 6] === "A" && xmlData[i5 + 7] === "[") {
    for (i5 += 8; i5 < xmlData.length; i5++) {
      if (xmlData[i5] === "]" && xmlData[i5 + 1] === "]" && xmlData[i5 + 2] === ">") {
        i5 += 2;
        break;
      }
    }
  }
  return i5;
}
function readAttributeStr(xmlData, i5) {
  let attrStr = "";
  let startChar = "";
  let tagClosed = false;
  for (; i5 < xmlData.length; i5++) {
    if (xmlData[i5] === doubleQuote || xmlData[i5] === singleQuote) {
      if (startChar === "") {
        startChar = xmlData[i5];
      } else if (startChar !== xmlData[i5]) {
      } else {
        startChar = "";
      }
    } else if (xmlData[i5] === ">") {
      if (startChar === "") {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i5];
  }
  if (startChar !== "") {
    return false;
  }
  return {
    value: attrStr,
    index: i5,
    tagClosed
  };
}
function validateAttributeString(attrStr, options) {
  const matches = getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};
  for (let i5 = 0; i5 < matches.length; i5++) {
    if (matches[i5][1].length === 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i5][2] + "' has no space in starting.", getPositionFromMatch(matches[i5]));
    } else if (matches[i5][3] !== void 0 && matches[i5][4] === void 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i5][2] + "' is without value.", getPositionFromMatch(matches[i5]));
    } else if (matches[i5][3] === void 0 && !options.allowBooleanAttributes) {
      return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i5][2] + "' is not allowed.", getPositionFromMatch(matches[i5]));
    }
    const attrName = matches[i5][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i5]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      attrNames[attrName] = 1;
    } else {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i5]));
    }
  }
  return true;
}
function validateNumberAmpersand(xmlData, i5) {
  let re = /\d/;
  if (xmlData[i5] === "x") {
    i5++;
    re = /[\da-fA-F]/;
  }
  for (; i5 < xmlData.length; i5++) {
    if (xmlData[i5] === ";")
      return i5;
    if (!xmlData[i5].match(re))
      break;
  }
  return -1;
}
function validateAmpersand(xmlData, i5) {
  i5++;
  if (xmlData[i5] === ";")
    return -1;
  if (xmlData[i5] === "#") {
    i5++;
    return validateNumberAmpersand(xmlData, i5);
  }
  let count = 0;
  for (; i5 < xmlData.length; i5++, count++) {
    if (xmlData[i5].match(/\w/) && count < 20)
      continue;
    if (xmlData[i5] === ";")
      break;
    return -1;
  }
  return i5;
}
function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col
    }
  };
}
function validateAttrName(attrName) {
  return isName(attrName);
}
function validateTagName(tagname) {
  return isName(tagname);
}
function getLineNumberForPosition(xmlData, index) {
  const lines = xmlData.substring(0, index).split(/\r?\n/);
  return {
    line: lines.length,
    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}
function getPositionFromMatch(match) {
  return match.startIndex + match[1].length;
}
var defaultOptions;
var doubleQuote;
var singleQuote;
var validAttrStrRegxp;
var init_validator = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/validator.js"() {
    "use strict";
    init_util5();
    defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    doubleQuote = '"';
    singleQuote = "'";
    validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
  }
});
var defaultOptions2;
var buildOptions;
var init_OptionsBuilder = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"() {
    defaultOptions2 = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      },
      // skipEmptyListItem: false
      captureMetaData: false
    };
    buildOptions = function(options) {
      return Object.assign({}, defaultOptions2, options);
    };
  }
});
var METADATA_SYMBOL;
var XmlNode;
var init_xmlNode = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"() {
    "use strict";
    if (typeof Symbol !== "function") {
      METADATA_SYMBOL = "@@xmlMetadata";
    } else {
      METADATA_SYMBOL = Symbol("XML Node Metadata");
    }
    XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__") key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node, startIndex) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
        if (startIndex !== void 0) {
          this.child[this.child.length - 1][METADATA_SYMBOL] = { startIndex };
        }
      }
      /** symbol used for metadata */
      static getMetaDataSymbol() {
        return METADATA_SYMBOL;
      }
    };
  }
});
function readDocType(xmlData, i5) {
  const entities = {};
  if (xmlData[i5 + 3] === "O" && xmlData[i5 + 4] === "C" && xmlData[i5 + 5] === "T" && xmlData[i5 + 6] === "Y" && xmlData[i5 + 7] === "P" && xmlData[i5 + 8] === "E") {
    i5 = i5 + 9;
    let angleBracketsCount = 1;
    let hasBody = false, comment = false;
    let exp = "";
    for (; i5 < xmlData.length; i5++) {
      if (xmlData[i5] === "<" && !comment) {
        if (hasBody && hasSeq(xmlData, "!ENTITY", i5)) {
          i5 += 7;
          let entityName, val;
          [entityName, val, i5] = readEntityExp(xmlData, i5 + 1);
          if (val.indexOf("&") === -1)
            entities[entityName] = {
              regx: RegExp(`&${entityName};`, "g"),
              val
            };
        } else if (hasBody && hasSeq(xmlData, "!ELEMENT", i5)) {
          i5 += 8;
          const { index } = readElementExp(xmlData, i5 + 1);
          i5 = index;
        } else if (hasBody && hasSeq(xmlData, "!ATTLIST", i5)) {
          i5 += 8;
        } else if (hasBody && hasSeq(xmlData, "!NOTATION", i5)) {
          i5 += 9;
          const { index } = readNotationExp(xmlData, i5 + 1);
          i5 = index;
        } else if (hasSeq(xmlData, "!--", i5)) comment = true;
        else throw new Error(`Invalid DOCTYPE`);
        angleBracketsCount++;
        exp = "";
      } else if (xmlData[i5] === ">") {
        if (comment) {
          if (xmlData[i5 - 1] === "-" && xmlData[i5 - 2] === "-") {
            comment = false;
            angleBracketsCount--;
          }
        } else {
          angleBracketsCount--;
        }
        if (angleBracketsCount === 0) {
          break;
        }
      } else if (xmlData[i5] === "[") {
        hasBody = true;
      } else {
        exp += xmlData[i5];
      }
    }
    if (angleBracketsCount !== 0) {
      throw new Error(`Unclosed DOCTYPE`);
    }
  } else {
    throw new Error(`Invalid Tag instead of DOCTYPE`);
  }
  return { entities, i: i5 };
}
function readEntityExp(xmlData, i5) {
  i5 = skipWhitespace(xmlData, i5);
  let entityName = "";
  while (i5 < xmlData.length && !/\s/.test(xmlData[i5]) && xmlData[i5] !== '"' && xmlData[i5] !== "'") {
    entityName += xmlData[i5];
    i5++;
  }
  validateEntityName(entityName);
  i5 = skipWhitespace(xmlData, i5);
  if (xmlData.substring(i5, i5 + 6).toUpperCase() === "SYSTEM") {
    throw new Error("External entities are not supported");
  } else if (xmlData[i5] === "%") {
    throw new Error("Parameter entities are not supported");
  }
  let entityValue = "";
  [i5, entityValue] = readIdentifierVal(xmlData, i5, "entity");
  i5--;
  return [entityName, entityValue, i5];
}
function readNotationExp(xmlData, i5) {
  i5 = skipWhitespace(xmlData, i5);
  let notationName = "";
  while (i5 < xmlData.length && !/\s/.test(xmlData[i5])) {
    notationName += xmlData[i5];
    i5++;
  }
  validateEntityName(notationName);
  i5 = skipWhitespace(xmlData, i5);
  const identifierType = xmlData.substring(i5, i5 + 6).toUpperCase();
  if (identifierType !== "SYSTEM" && identifierType !== "PUBLIC") {
    throw new Error(`Expected SYSTEM or PUBLIC, found "${identifierType}"`);
  }
  i5 += identifierType.length;
  i5 = skipWhitespace(xmlData, i5);
  let publicIdentifier = null;
  let systemIdentifier = null;
  if (identifierType === "PUBLIC") {
    [i5, publicIdentifier] = readIdentifierVal(xmlData, i5, "publicIdentifier");
    i5 = skipWhitespace(xmlData, i5);
    if (xmlData[i5] === '"' || xmlData[i5] === "'") {
      [i5, systemIdentifier] = readIdentifierVal(xmlData, i5, "systemIdentifier");
    }
  } else if (identifierType === "SYSTEM") {
    [i5, systemIdentifier] = readIdentifierVal(xmlData, i5, "systemIdentifier");
    if (!systemIdentifier) {
      throw new Error("Missing mandatory system identifier for SYSTEM notation");
    }
  }
  return { notationName, publicIdentifier, systemIdentifier, index: --i5 };
}
function readIdentifierVal(xmlData, i5, type) {
  let identifierVal = "";
  const startChar = xmlData[i5];
  if (startChar !== '"' && startChar !== "'") {
    throw new Error(`Expected quoted string, found "${startChar}"`);
  }
  i5++;
  while (i5 < xmlData.length && xmlData[i5] !== startChar) {
    identifierVal += xmlData[i5];
    i5++;
  }
  if (xmlData[i5] !== startChar) {
    throw new Error(`Unterminated ${type} value`);
  }
  i5++;
  return [i5, identifierVal];
}
function readElementExp(xmlData, i5) {
  i5 = skipWhitespace(xmlData, i5);
  let elementName = "";
  while (i5 < xmlData.length && !/\s/.test(xmlData[i5])) {
    elementName += xmlData[i5];
    i5++;
  }
  if (!validateEntityName(elementName)) {
    throw new Error(`Invalid element name: "${elementName}"`);
  }
  i5 = skipWhitespace(xmlData, i5);
  let contentModel = "";
  if (xmlData[i5] === "E" && hasSeq(xmlData, "MPTY", i5)) i5 += 4;
  else if (xmlData[i5] === "A" && hasSeq(xmlData, "NY", i5)) i5 += 2;
  else if (xmlData[i5] === "(") {
    i5++;
    while (i5 < xmlData.length && xmlData[i5] !== ")") {
      contentModel += xmlData[i5];
      i5++;
    }
    if (xmlData[i5] !== ")") {
      throw new Error("Unterminated content model");
    }
  } else {
    throw new Error(`Invalid Element Expression, found "${xmlData[i5]}"`);
  }
  return {
    elementName,
    contentModel: contentModel.trim(),
    index: i5
  };
}
function hasSeq(data, seq, i5) {
  for (let j5 = 0; j5 < seq.length; j5++) {
    if (seq[j5] !== data[i5 + j5 + 1]) return false;
  }
  return true;
}
function validateEntityName(name) {
  if (isName(name))
    return name;
  else
    throw new Error(`Invalid entity name ${name}`);
}
var skipWhitespace;
var init_DocTypeReader = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"() {
    init_util5();
    skipWhitespace = (data, index) => {
      while (index < data.length && /\s/.test(data[index])) {
        index++;
      }
      return index;
    };
  }
});
function toNumber(str, options = {}) {
  options = Object.assign({}, consider, options);
  if (!str || typeof str !== "string") return str;
  let trimmedStr = str.trim();
  if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
  else if (str === "0") return 0;
  else if (options.hex && hexRegex.test(trimmedStr)) {
    return parse_int(trimmedStr, 16);
  } else if (trimmedStr.search(/.+[eE].+/) !== -1) {
    return resolveEnotation(str, trimmedStr, options);
  } else {
    const match = numRegex.exec(trimmedStr);
    if (match) {
      const sign = match[1] || "";
      const leadingZeros = match[2];
      let numTrimmedByZeros = trimZeros(match[3]);
      const decimalAdjacentToLeadingZeros = sign ? (
        // 0., -00., 000.
        str[leadingZeros.length + 1] === "."
      ) : str[leadingZeros.length] === ".";
      if (!options.leadingZeros && (leadingZeros.length > 1 || leadingZeros.length === 1 && !decimalAdjacentToLeadingZeros)) {
        return str;
      } else {
        const num = Number(trimmedStr);
        const parsedStr = String(num);
        if (num === 0) return num;
        if (parsedStr.search(/[eE]/) !== -1) {
          if (options.eNotation) return num;
          else return str;
        } else if (trimmedStr.indexOf(".") !== -1) {
          if (parsedStr === "0") return num;
          else if (parsedStr === numTrimmedByZeros) return num;
          else if (parsedStr === `${sign}${numTrimmedByZeros}`) return num;
          else return str;
        }
        let n5 = leadingZeros ? numTrimmedByZeros : trimmedStr;
        if (leadingZeros) {
          return n5 === parsedStr || sign + n5 === parsedStr ? num : str;
        } else {
          return n5 === parsedStr || n5 === sign + parsedStr ? num : str;
        }
      }
    } else {
      return str;
    }
  }
}
function resolveEnotation(str, trimmedStr, options) {
  if (!options.eNotation) return str;
  const notation = trimmedStr.match(eNotationRegx);
  if (notation) {
    let sign = notation[1] || "";
    const eChar = notation[3].indexOf("e") === -1 ? "E" : "e";
    const leadingZeros = notation[2];
    const eAdjacentToLeadingZeros = sign ? (
      // 0E.
      str[leadingZeros.length + 1] === eChar
    ) : str[leadingZeros.length] === eChar;
    if (leadingZeros.length > 1 && eAdjacentToLeadingZeros) return str;
    else if (leadingZeros.length === 1 && (notation[3].startsWith(`.${eChar}`) || notation[3][0] === eChar)) {
      return Number(trimmedStr);
    } else if (options.leadingZeros && !eAdjacentToLeadingZeros) {
      trimmedStr = (notation[1] || "") + notation[3];
      return Number(trimmedStr);
    } else return str;
  } else {
    return str;
  }
}
function trimZeros(numStr) {
  if (numStr && numStr.indexOf(".") !== -1) {
    numStr = numStr.replace(/0+$/, "");
    if (numStr === ".") numStr = "0";
    else if (numStr[0] === ".") numStr = "0" + numStr;
    else if (numStr[numStr.length - 1] === ".") numStr = numStr.substring(0, numStr.length - 1);
    return numStr;
  }
  return numStr;
}
function parse_int(numStr, base) {
  if (parseInt) return parseInt(numStr, base);
  else if (Number.parseInt) return Number.parseInt(numStr, base);
  else if (window && window.parseInt) return window.parseInt(numStr, base);
  else throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
}
var hexRegex;
var numRegex;
var consider;
var eNotationRegx;
var init_strnum = __esm({
  "node_modules/@aws-sdk/core/node_modules/strnum/strnum.js"() {
    hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/;
    consider = {
      hex: true,
      // oct: false,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    eNotationRegx = /^([-+])?(0*)(\d*(\.\d*)?[eE][-\+]?\d+)$/;
  }
});
function getIgnoreAttributesFn(ignoreAttributes) {
  if (typeof ignoreAttributes === "function") {
    return ignoreAttributes;
  }
  if (Array.isArray(ignoreAttributes)) {
    return (attrName) => {
      for (const pattern of ignoreAttributes) {
        if (typeof pattern === "string" && attrName === pattern) {
          return true;
        }
        if (pattern instanceof RegExp && pattern.test(attrName)) {
          return true;
        }
      }
    };
  }
  return () => false;
}
var init_ignoreAttributes = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/ignoreAttributes.js"() {
  }
});
function addExternalEntities(externalEntities) {
  const entKeys = Object.keys(externalEntities);
  for (let i5 = 0; i5 < entKeys.length; i5++) {
    const ent = entKeys[i5];
    this.lastEntities[ent] = {
      regex: new RegExp("&" + ent + ";", "g"),
      val: externalEntities[ent]
    };
  }
}
function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
  if (val !== void 0) {
    if (this.options.trimValues && !dontTrim) {
      val = val.trim();
    }
    if (val.length > 0) {
      if (!escapeEntities) val = this.replaceEntitiesValue(val);
      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
      if (newval === null || newval === void 0) {
        return val;
      } else if (typeof newval !== typeof val || newval !== val) {
        return newval;
      } else if (this.options.trimValues) {
        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
      } else {
        const trimmedVal = val.trim();
        if (trimmedVal === val) {
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          return val;
        }
      }
    }
  }
}
function resolveNameSpace(tagname) {
  if (this.options.removeNSPrefix) {
    const tags = tagname.split(":");
    const prefix = tagname.charAt(0) === "/" ? "/" : "";
    if (tags[0] === "xmlns") {
      return "";
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}
function buildAttributesMap(attrStr, jPath, tagName) {
  if (this.options.ignoreAttributes !== true && typeof attrStr === "string") {
    const matches = getAllMatches(attrStr, attrsRegx);
    const len = matches.length;
    const attrs = {};
    for (let i5 = 0; i5 < len; i5++) {
      const attrName = this.resolveNameSpace(matches[i5][1]);
      if (this.ignoreAttributesFn(attrName, jPath)) {
        continue;
      }
      let oldVal = matches[i5][4];
      let aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) {
        if (this.options.transformAttributeName) {
          aName = this.options.transformAttributeName(aName);
        }
        if (aName === "__proto__") aName = "#__proto__";
        if (oldVal !== void 0) {
          if (this.options.trimValues) {
            oldVal = oldVal.trim();
          }
          oldVal = this.replaceEntitiesValue(oldVal);
          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
          if (newVal === null || newVal === void 0) {
            attrs[aName] = oldVal;
          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
            attrs[aName] = newVal;
          } else {
            attrs[aName] = parseValue(
              oldVal,
              this.options.parseAttributeValue,
              this.options.numberParseOptions
            );
          }
        } else if (this.options.allowBooleanAttributes) {
          attrs[aName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (this.options.attributesGroupName) {
      const attrCollection = {};
      attrCollection[this.options.attributesGroupName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}
function addChild(currentNode, childNode, jPath, startIndex) {
  if (!this.options.captureMetaData) startIndex = void 0;
  const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
  if (result === false) {
  } else if (typeof result === "string") {
    childNode.tagname = result;
    currentNode.addChild(childNode, startIndex);
  } else {
    currentNode.addChild(childNode, startIndex);
  }
}
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
  if (textData) {
    if (isLeafNode === void 0) isLeafNode = currentNode.child.length === 0;
    textData = this.parseTextData(
      textData,
      currentNode.tagname,
      jPath,
      false,
      currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
      isLeafNode
    );
    if (textData !== void 0 && textData !== "")
      currentNode.add(this.options.textNodeName, textData);
    textData = "";
  }
  return textData;
}
function isItStopNode(stopNodes, jPath, currentTagName) {
  const allNodesExp = "*." + currentTagName;
  for (const stopNodePath in stopNodes) {
    const stopNodeExp = stopNodes[stopNodePath];
    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
  }
  return false;
}
function tagExpWithClosingIndex(xmlData, i5, closingChar = ">") {
  let attrBoundary;
  let tagExp = "";
  for (let index = i5; index < xmlData.length; index++) {
    let ch2 = xmlData[index];
    if (attrBoundary) {
      if (ch2 === attrBoundary) attrBoundary = "";
    } else if (ch2 === '"' || ch2 === "'") {
      attrBoundary = ch2;
    } else if (ch2 === closingChar[0]) {
      if (closingChar[1]) {
        if (xmlData[index + 1] === closingChar[1]) {
          return {
            data: tagExp,
            index
          };
        }
      } else {
        return {
          data: tagExp,
          index
        };
      }
    } else if (ch2 === "	") {
      ch2 = " ";
    }
    tagExp += ch2;
  }
}
function findClosingIndex(xmlData, str, i5, errMsg) {
  const closingIndex = xmlData.indexOf(str, i5);
  if (closingIndex === -1) {
    throw new Error(errMsg);
  } else {
    return closingIndex + str.length - 1;
  }
}
function readTagExp(xmlData, i5, removeNSPrefix, closingChar = ">") {
  const result = tagExpWithClosingIndex(xmlData, i5 + 1, closingChar);
  if (!result) return;
  let tagExp = result.data;
  const closeIndex = result.index;
  const separatorIndex = tagExp.search(/\s/);
  let tagName = tagExp;
  let attrExpPresent = true;
  if (separatorIndex !== -1) {
    tagName = tagExp.substring(0, separatorIndex);
    tagExp = tagExp.substring(separatorIndex + 1).trimStart();
  }
  const rawTagName = tagName;
  if (removeNSPrefix) {
    const colonIndex = tagName.indexOf(":");
    if (colonIndex !== -1) {
      tagName = tagName.substr(colonIndex + 1);
      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
    }
  }
  return {
    tagName,
    tagExp,
    closeIndex,
    attrExpPresent,
    rawTagName
  };
}
function readStopNodeData(xmlData, tagName, i5) {
  const startIndex = i5;
  let openTagCount = 1;
  for (; i5 < xmlData.length; i5++) {
    if (xmlData[i5] === "<") {
      if (xmlData[i5 + 1] === "/") {
        const closeIndex = findClosingIndex(xmlData, ">", i5, `${tagName} is not closed`);
        let closeTagName = xmlData.substring(i5 + 2, closeIndex).trim();
        if (closeTagName === tagName) {
          openTagCount--;
          if (openTagCount === 0) {
            return {
              tagContent: xmlData.substring(startIndex, i5),
              i: closeIndex
            };
          }
        }
        i5 = closeIndex;
      } else if (xmlData[i5 + 1] === "?") {
        const closeIndex = findClosingIndex(xmlData, "?>", i5 + 1, "StopNode is not closed.");
        i5 = closeIndex;
      } else if (xmlData.substr(i5 + 1, 3) === "!--") {
        const closeIndex = findClosingIndex(xmlData, "-->", i5 + 3, "StopNode is not closed.");
        i5 = closeIndex;
      } else if (xmlData.substr(i5 + 1, 2) === "![") {
        const closeIndex = findClosingIndex(xmlData, "]]>", i5, "StopNode is not closed.") - 2;
        i5 = closeIndex;
      } else {
        const tagData = readTagExp(xmlData, i5, ">");
        if (tagData) {
          const openTagName = tagData && tagData.tagName;
          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
            openTagCount++;
          }
          i5 = tagData.closeIndex;
        }
      }
    }
  }
}
function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === "string") {
    const newval = val.trim();
    if (newval === "true") return true;
    else if (newval === "false") return false;
    else return toNumber(val, options);
  } else {
    if (isExist(val)) {
      return val;
    } else {
      return "";
    }
  }
}
var OrderedObjParser;
var attrsRegx;
var parseXml;
var replaceEntitiesValue;
var init_OrderedObjParser = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"() {
    "use strict";
    init_util5();
    init_xmlNode();
    init_DocTypeReader();
    init_strnum();
    init_ignoreAttributes();
    OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: (_2, str) => String.fromCodePoint(Number.parseInt(str, 10)) },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_2, str) => String.fromCodePoint(Number.parseInt(str, 16)) }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
        this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);
      }
    };
    attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new XmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i5 = 0; i5 < xmlData.length; i5++) {
        const ch2 = xmlData[i5];
        if (ch2 === "<") {
          if (xmlData[i5 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i5, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i5 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i5 = closeIndex;
          } else if (xmlData[i5 + 1] === "?") {
            let tagData = readTagExp(xmlData, i5, false, "?>");
            if (!tagData) throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new XmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath, i5);
            }
            i5 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i5 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i5 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i5 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i5 = endIndex;
          } else if (xmlData.substr(i5 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i5);
            this.docTypeEntities = result.entities;
            i5 = result.i;
          } else if (xmlData.substr(i5 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i5, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i5 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val == void 0) val = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val);
            }
            i5 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i5, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const startIndex = i5;
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i5 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i5 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);
                i5 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new XmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath, startIndex);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new XmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath, startIndex);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new XmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath, startIndex);
                currentNode = childNode;
              }
              textData = "";
              i5 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i5];
        }
      }
      return xmlObj.child;
    };
    replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
  }
});
function prettify(node, options) {
  return compress(node, options);
}
function compress(arr, options, jPath) {
  let text;
  const compressedObj = {};
  for (let i5 = 0; i5 < arr.length; i5++) {
    const tagObj = arr[i5];
    const property = propName(tagObj);
    let newJpath = "";
    if (jPath === void 0) newJpath = property;
    else newJpath = jPath + "." + property;
    if (property === options.textNodeName) {
      if (text === void 0) text = tagObj[property];
      else text += "" + tagObj[property];
    } else if (property === void 0) {
      continue;
    } else if (tagObj[property]) {
      let val = compress(tagObj[property], options, newJpath);
      const isLeaf = isLeafTag(val, options);
      if (tagObj[METADATA_SYMBOL2] !== void 0) {
        val[METADATA_SYMBOL2] = tagObj[METADATA_SYMBOL2];
      }
      if (tagObj[":@"]) {
        assignAttributes(val, tagObj[":@"], newJpath, options);
      } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
        val = val[options.textNodeName];
      } else if (Object.keys(val).length === 0) {
        if (options.alwaysCreateTextNode) val[options.textNodeName] = "";
        else val = "";
      }
      if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
        if (!Array.isArray(compressedObj[property])) {
          compressedObj[property] = [compressedObj[property]];
        }
        compressedObj[property].push(val);
      } else {
        if (options.isArray(property, newJpath, isLeaf)) {
          compressedObj[property] = [val];
        } else {
          compressedObj[property] = val;
        }
      }
    }
  }
  if (typeof text === "string") {
    if (text.length > 0) compressedObj[options.textNodeName] = text;
  } else if (text !== void 0) compressedObj[options.textNodeName] = text;
  return compressedObj;
}
function propName(obj) {
  const keys = Object.keys(obj);
  for (let i5 = 0; i5 < keys.length; i5++) {
    const key = keys[i5];
    if (key !== ":@") return key;
  }
}
function assignAttributes(obj, attrMap, jpath, options) {
  if (attrMap) {
    const keys = Object.keys(attrMap);
    const len = keys.length;
    for (let i5 = 0; i5 < len; i5++) {
      const atrrName = keys[i5];
      if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
        obj[atrrName] = [attrMap[atrrName]];
      } else {
        obj[atrrName] = attrMap[atrrName];
      }
    }
  }
}
function isLeafTag(obj, options) {
  const { textNodeName } = options;
  const propCount = Object.keys(obj).length;
  if (propCount === 0) {
    return true;
  }
  if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
    return true;
  }
  return false;
}
var METADATA_SYMBOL2;
var init_node2json = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/node2json.js"() {
    "use strict";
    init_xmlNode();
    METADATA_SYMBOL2 = XmlNode.getMetaDataSymbol();
  }
});
var XMLParser;
var init_XMLParser = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"() {
    init_OptionsBuilder();
    init_OrderedObjParser();
    init_node2json();
    init_validator();
    init_xmlNode();
    XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
      /**
       * Returns a Symbol that can be used to access the metadata
       * property on a node.
       * 
       * If Symbol is not available in the environment, an ordinary property is used
       * and the name of the property is here returned.
       * 
       * The XMLMetaData property is only present when `captureMetaData`
       * is true in the options.
       */
      static getMetaDataSymbol() {
        return XmlNode.getMetaDataSymbol();
      }
    };
  }
});
var init_fxp = __esm({
  "node_modules/@aws-sdk/core/node_modules/fast-xml-parser/src/fxp.js"() {
    "use strict";
    init_XMLParser();
  }
});
var init_XmlShapeDeserializer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlShapeDeserializer.js"() {
  }
});
var init_AwsQueryProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsQueryProtocol.js"() {
  }
});
var init_AwsEc2QueryProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsEc2QueryProtocol.js"() {
  }
});
var parseXmlBody;
var parseXmlErrorBody;
var loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    init_dist_es23();
    init_fxp();
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_2, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e5) {
          if (e5 && typeof e5 === "object") {
            Object.defineProperty(e5, "$responseBodyText", {
              value: encoded
            });
          }
          throw e5;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});
var init_escape_attribute = __esm({
  "node_modules/@aws-sdk/core/node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js"() {
  }
});
var init_escape_element = __esm({
  "node_modules/@aws-sdk/core/node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js"() {
  }
});
var init_XmlText = __esm({
  "node_modules/@aws-sdk/core/node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js"() {
    init_escape_element();
  }
});
var init_XmlNode = __esm({
  "node_modules/@aws-sdk/core/node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js"() {
    init_escape_attribute();
    init_XmlText();
  }
});
var init_dist_es24 = __esm({
  "node_modules/@aws-sdk/core/node_modules/@aws-sdk/xml-builder/dist-es/index.js"() {
    init_XmlNode();
    init_XmlText();
  }
});
var init_XmlShapeSerializer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlShapeSerializer.js"() {
    init_dist_es24();
  }
});
var init_XmlCodec = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/XmlCodec.js"() {
  }
});
var init_AwsRestXmlProtocol = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/AwsRestXmlProtocol.js"() {
  }
});
var init_protocols2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_AwsSmithyRpcV2CborProtocol();
    init_coercing_serializers();
    init_AwsJson1_0Protocol();
    init_AwsJson1_1Protocol();
    init_AwsJsonRpcProtocol();
    init_AwsRestJsonProtocol();
    init_JsonCodec();
    init_JsonShapeDeserializer();
    init_JsonShapeSerializer();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_AwsEc2QueryProtocol();
    init_AwsQueryProtocol();
    init_AwsRestXmlProtocol();
    init_XmlCodec();
    init_XmlShapeDeserializer();
    init_XmlShapeSerializer();
    init_parseXmlBody();
  }
});
var init_dist_es25 = __esm({
  "node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_client();
    init_httpAuthSchemes2();
    init_protocols2();
  }
});
var init_httpExtensionConfiguration5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions7 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration5();
  }
});
var init_Field5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery5(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest5;
var init_httpRequest5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest5 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery5(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var init_httpResponse5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
  }
});
var init_isValidHostname5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es26 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions7();
    init_Field5();
    init_Fields5();
    init_httpHandler5();
    init_httpRequest5();
    init_httpResponse5();
    init_isValidHostname5();
    init_types5();
  }
});
var fromArrayBuffer3;
var init_dist_es27 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-base64/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer3 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer5.from(input, offset, length);
    };
  }
});
var init_fromBase642 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
  }
});
var fromString3;
var init_dist_es28 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-utf8/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    fromString3 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer6.from(input, encoding) : Buffer6.from(input);
    };
  }
});
var fromUtf83;
var init_fromUtf84 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es28();
    fromUtf83 = (input) => {
      const buf = fromString3(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var toUint8Array2;
var init_toUint8Array4 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf84();
    toUint8Array2 = (data) => {
      if (typeof data === "string") {
        return fromUtf83(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});
var init_toUtf84 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
  }
});
var init_dist_es29 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf84();
    init_toUint8Array4();
    init_toUtf84();
  }
});
var toBase642;
var init_toBase642 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    init_dist_es27();
    init_dist_es29();
    toBase642 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf83(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer3(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});
var init_dist_es30 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_fromBase642();
    init_toBase642();
  }
});
var init_Uint8ArrayBlobAdapter2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
  }
});
var ChecksumStream;
var init_ChecksumStream2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js"() {
    init_dist_es30();
    ChecksumStream = class extends Duplex {
      constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
        super();
        if (typeof source.pipe === "function") {
          this.source = source;
        } else {
          throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);
        }
        this.base64Encoder = base64Encoder ?? toBase642;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
      }
      _read(size) {
      }
      _write(chunk, encoding, callback) {
        try {
          this.checksum.update(chunk);
          this.push(chunk);
        } catch (e5) {
          return callback(e5);
        }
        return callback();
      }
      async _final(callback) {
        try {
          const digest = await this.checksum.digest();
          const received = this.base64Encoder(digest);
          if (this.expectedChecksum !== received) {
            return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}" in response header "${this.checksumSourceLocation}".`));
          }
        } catch (e5) {
          return callback(e5);
        }
        this.push(null);
        return callback();
      }
    };
  }
});
var isReadableStream;
var init_stream_type_check2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
    isReadableStream = (stream) => typeof ReadableStream === "function" && (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream);
  }
});
var ReadableStreamRef;
var ChecksumStream2;
var init_ChecksumStream_browser = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.browser.js"() {
    ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {
    };
    ChecksumStream2 = class extends ReadableStreamRef {
    };
  }
});
var createChecksumStream;
var init_createChecksumStream_browser = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.browser.js"() {
    init_dist_es30();
    init_stream_type_check2();
    init_ChecksumStream_browser();
    createChecksumStream = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      if (!isReadableStream(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);
      }
      const encoder = base64Encoder ?? toBase642;
      if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
      }
      const transform = new TransformStream({
        start() {
        },
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error2 = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`);
            controller.error(error2);
          } else {
            controller.terminate();
          }
        }
      });
      source.pipeThrough(transform);
      const readable = transform.readable;
      Object.setPrototypeOf(readable, ChecksumStream2.prototype);
      return readable;
    };
  }
});
function createChecksumStream2(init) {
  if (typeof ReadableStream === "function" && isReadableStream(init.source)) {
    return createChecksumStream(init);
  }
  return new ChecksumStream(init);
}
var init_createChecksumStream2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js"() {
    init_stream_type_check2();
    init_ChecksumStream2();
    init_createChecksumStream_browser();
  }
});
var ByteArrayCollector;
var init_ByteArrayCollector = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/ByteArrayCollector.js"() {
    ByteArrayCollector = class {
      constructor(allocByteArray) {
        this.allocByteArray = allocByteArray;
        this.byteLength = 0;
        this.byteArrays = [];
      }
      push(byteArray) {
        this.byteArrays.push(byteArray);
        this.byteLength += byteArray.byteLength;
      }
      flush() {
        if (this.byteArrays.length === 1) {
          const bytes = this.byteArrays[0];
          this.reset();
          return bytes;
        }
        const aggregation = this.allocByteArray(this.byteLength);
        let cursor = 0;
        for (let i5 = 0; i5 < this.byteArrays.length; ++i5) {
          const bytes = this.byteArrays[i5];
          aggregation.set(bytes, cursor);
          cursor += bytes.byteLength;
        }
        this.reset();
        return aggregation;
      }
      reset() {
        this.byteArrays = [];
        this.byteLength = 0;
      }
    };
  }
});
function createBufferedReadableStream(upstream, size, logger2) {
  const reader = upstream.getReader();
  let streamBufferingLoggedWarning = false;
  let bytesSeen = 0;
  const buffers = ["", new ByteArrayCollector((size2) => new Uint8Array(size2))];
  let mode = -1;
  const pull = async (controller) => {
    const { value, done } = await reader.read();
    const chunk = value;
    if (done) {
      if (mode !== -1) {
        const remainder = flush(buffers, mode);
        if (sizeOf(remainder) > 0) {
          controller.enqueue(remainder);
        }
      }
      controller.close();
    } else {
      const chunkMode = modeOf(chunk, false);
      if (mode !== chunkMode) {
        if (mode >= 0) {
          controller.enqueue(flush(buffers, mode));
        }
        mode = chunkMode;
      }
      if (mode === -1) {
        controller.enqueue(chunk);
        return;
      }
      const chunkSize = sizeOf(chunk);
      bytesSeen += chunkSize;
      const bufferSize = sizeOf(buffers[mode]);
      if (chunkSize >= size && bufferSize === 0) {
        controller.enqueue(chunk);
      } else {
        const newSize = merge(buffers, mode, chunk);
        if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
          streamBufferingLoggedWarning = true;
          logger2?.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
        }
        if (newSize >= size) {
          controller.enqueue(flush(buffers, mode));
        } else {
          await pull(controller);
        }
      }
    }
  };
  return new ReadableStream({
    pull
  });
}
function merge(buffers, mode, chunk) {
  switch (mode) {
    case 0:
      buffers[0] += chunk;
      return sizeOf(buffers[0]);
    case 1:
    case 2:
      buffers[mode].push(chunk);
      return sizeOf(buffers[mode]);
  }
}
function flush(buffers, mode) {
  switch (mode) {
    case 0:
      const s5 = buffers[0];
      buffers[0] = "";
      return s5;
    case 1:
    case 2:
      return buffers[mode].flush();
  }
  throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
}
function sizeOf(chunk) {
  return chunk?.byteLength ?? chunk?.length ?? 0;
}
function modeOf(chunk, allowBuffer = true) {
  if (allowBuffer && typeof Buffer !== "undefined" && chunk instanceof Buffer) {
    return 2;
  }
  if (chunk instanceof Uint8Array) {
    return 1;
  }
  if (typeof chunk === "string") {
    return 0;
  }
  return -1;
}
var init_createBufferedReadableStream = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/createBufferedReadableStream.js"() {
    init_ByteArrayCollector();
  }
});
function createBufferedReadable(upstream, size, logger2) {
  if (isReadableStream(upstream)) {
    return createBufferedReadableStream(upstream, size, logger2);
  }
  const downstream = new Readable2({ read() {
  } });
  let streamBufferingLoggedWarning = false;
  let bytesSeen = 0;
  const buffers = [
    "",
    new ByteArrayCollector((size2) => new Uint8Array(size2)),
    new ByteArrayCollector((size2) => Buffer.from(new Uint8Array(size2)))
  ];
  let mode = -1;
  upstream.on("data", (chunk) => {
    const chunkMode = modeOf(chunk, true);
    if (mode !== chunkMode) {
      if (mode >= 0) {
        downstream.push(flush(buffers, mode));
      }
      mode = chunkMode;
    }
    if (mode === -1) {
      downstream.push(chunk);
      return;
    }
    const chunkSize = sizeOf(chunk);
    bytesSeen += chunkSize;
    const bufferSize = sizeOf(buffers[mode]);
    if (chunkSize >= size && bufferSize === 0) {
      downstream.push(chunk);
    } else {
      const newSize = merge(buffers, mode, chunk);
      if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
        streamBufferingLoggedWarning = true;
        logger2?.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
      }
      if (newSize >= size) {
        downstream.push(flush(buffers, mode));
      }
    }
  });
  upstream.on("end", () => {
    if (mode !== -1) {
      const remainder = flush(buffers, mode);
      if (sizeOf(remainder) > 0) {
        downstream.push(remainder);
      }
    }
    downstream.push(null);
  });
  return downstream;
}
var init_createBufferedReadable2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js"() {
    init_ByteArrayCollector();
    init_createBufferedReadableStream();
    init_stream_type_check2();
  }
});
var init_getAwsChunkedEncodingStream2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
  }
});
var init_headStream2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/headStream.js"() {
  }
});
var init_sdk_stream_mixin2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
  }
});
var init_splitStream2 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/splitStream.js"() {
  }
});
var init_dist_es31 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_Uint8ArrayBlobAdapter2();
    init_ChecksumStream2();
    init_createChecksumStream2();
    init_createBufferedReadable2();
    init_getAwsChunkedEncodingStream2();
    init_headStream2();
    init_sdk_stream_mixin2();
    init_splitStream2();
    init_stream_type_check2();
  }
});
var CLIENT_SUPPORTED_ALGORITHMS;
var PRIORITY_ORDER_ALGORITHMS;
var init_types6 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js"() {
    init_constants();
    CLIENT_SUPPORTED_ALGORITHMS = [
      ChecksumAlgorithm.CRC32,
      ChecksumAlgorithm.CRC32C,
      ChecksumAlgorithm.CRC64NVME,
      ChecksumAlgorithm.SHA1,
      ChecksumAlgorithm.SHA256
    ];
    PRIORITY_ORDER_ALGORITHMS = [
      ChecksumAlgorithm.SHA256,
      ChecksumAlgorithm.SHA1,
      ChecksumAlgorithm.CRC32,
      ChecksumAlgorithm.CRC32C,
      ChecksumAlgorithm.CRC64NVME
    ];
  }
});
var getChecksumAlgorithmForRequest;
var init_getChecksumAlgorithmForRequest = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js"() {
    init_constants();
    init_types6();
    getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember, requestChecksumCalculation }) => {
      if (!requestAlgorithmMember) {
        return requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired ? DEFAULT_CHECKSUM_ALGORITHM : void 0;
      }
      if (!input[requestAlgorithmMember]) {
        return void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
      }
      return checksumAlgorithm;
    };
  }
});
var getChecksumLocationName;
var init_getChecksumLocationName = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js"() {
    init_constants();
    getChecksumLocationName = (algorithm) => algorithm === ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;
  }
});
var hasHeader2;
var init_hasHeader = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js"() {
    hasHeader2 = (header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});
var hasHeaderWithPrefix;
var init_hasHeaderWithPrefix = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeaderWithPrefix.js"() {
    hasHeaderWithPrefix = (headerPrefix, headers) => {
      const soughtHeaderPrefix = headerPrefix.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase().startsWith(soughtHeaderPrefix)) {
          return true;
        }
      }
      return false;
    };
  }
});
var isStreaming;
var init_isStreaming = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js"() {
    init_dist_es8();
    isStreaming = (body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !isArrayBuffer(body);
  }
});
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e5) {
        reject(e5);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t5[0] & 1) throw t5[1];
    return t5[1];
  }, trys: [], ops: [] }, f5, y3, t5, g5 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g5.next = verb(0), g5["throw"] = verb(1), g5["return"] = verb(2), typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n5) {
    return function(v6) {
      return step([n5, v6]);
    };
  }
  function step(op) {
    if (f5) throw new TypeError("Generator is already executing.");
    while (g5 && (g5 = 0, op[0] && (_2 = 0)), _2) try {
      if (f5 = 1, y3 && (t5 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t5 = y3["return"]) && t5.call(y3), 0) : y3.next) && !(t5 = t5.call(y3, op[1])).done) return t5;
      if (y3 = 0, t5) op = [op[0] & 2, t5.value];
      switch (op[0]) {
        case 0:
        case 1:
          t5 = op;
          break;
        case 4:
          _2.label++;
          return { value: op[1], done: false };
        case 5:
          _2.label++;
          y3 = op[1];
          op = [0];
          continue;
        case 7:
          op = _2.ops.pop();
          _2.trys.pop();
          continue;
        default:
          if (!(t5 = _2.trys, t5 = t5.length > 0 && t5[t5.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _2 = 0;
            continue;
          }
          if (op[0] === 3 && (!t5 || op[1] > t5[0] && op[1] < t5[3])) {
            _2.label = op[1];
            break;
          }
          if (op[0] === 6 && _2.label < t5[1]) {
            _2.label = t5[1];
            t5 = op;
            break;
          }
          if (t5 && _2.label < t5[2]) {
            _2.label = t5[2];
            _2.ops.push(op);
            break;
          }
          if (t5[2]) _2.ops.pop();
          _2.trys.pop();
          continue;
      }
      op = body.call(thisArg, _2);
    } catch (e5) {
      op = [6, e5];
      y3 = 0;
    } finally {
      f5 = t5 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o5) {
  var s5 = typeof Symbol === "function" && Symbol.iterator, m5 = s5 && o5[s5], i5 = 0;
  if (m5) return m5.call(o5);
  if (o5 && typeof o5.length === "number") return {
    next: function() {
      if (o5 && i5 >= o5.length) o5 = void 0;
      return { value: o5 && o5[i5++], done: !o5 };
    }
  };
  throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
  }
});
var init_dist_es32 = __esm({
  "node_modules/@smithy/util-buffer-from/node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
  }
});
var fromString4;
var init_dist_es33 = __esm({
  "node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es32();
    fromString4 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer7.from(input, encoding) : Buffer7.from(input);
    };
  }
});
var fromUtf84;
var init_fromUtf85 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es33();
    fromUtf84 = (input) => {
      const buf = fromString4(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var init_toUint8Array5 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf85();
  }
});
var init_toUtf85 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es33();
  }
});
var init_dist_es34 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf85();
    init_toUint8Array5();
    init_toUtf85();
  }
});
function convertToBuffer(data) {
  if (data instanceof Uint8Array)
    return data;
  if (typeof data === "string") {
    return fromUtf85(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}
var fromUtf85;
var init_convertToBuffer = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/@aws-crypto/util/build/module/convertToBuffer.js"() {
    init_dist_es34();
    fromUtf85 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : fromUtf84;
  }
});
function isEmptyData(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
var init_isEmptyData = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/@aws-crypto/util/build/module/isEmptyData.js"() {
  }
});
function numToUint8(num) {
  return new Uint8Array([
    (num & 4278190080) >> 24,
    (num & 16711680) >> 16,
    (num & 65280) >> 8,
    num & 255
  ]);
}
var init_numToUint8 = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/@aws-crypto/util/build/module/numToUint8.js"() {
  }
});
function uint32ArrayFrom(a_lookUpTable2) {
  if (!Uint32Array.from) {
    var return_array = new Uint32Array(a_lookUpTable2.length);
    var a_index = 0;
    while (a_index < a_lookUpTable2.length) {
      return_array[a_index] = a_lookUpTable2[a_index];
      a_index += 1;
    }
    return return_array;
  }
  return Uint32Array.from(a_lookUpTable2);
}
var init_uint32ArrayFrom = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/@aws-crypto/util/build/module/uint32ArrayFrom.js"() {
  }
});
var init_module = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/@aws-crypto/util/build/module/index.js"() {
    init_convertToBuffer();
    init_isEmptyData();
    init_numToUint8();
    init_uint32ArrayFrom();
  }
});
var AwsCrc32c;
var init_aws_crc32c = __esm({
  "node_modules/@aws-crypto/crc32c/build/module/aws_crc32c.js"() {
    init_tslib_es6();
    init_module();
    init_module2();
    AwsCrc32c = /** @class */
    function() {
      function AwsCrc32c2() {
        this.crc32c = new Crc32c();
      }
      AwsCrc32c2.prototype.update = function(toHash) {
        if (isEmptyData(toHash))
          return;
        this.crc32c.update(convertToBuffer(toHash));
      };
      AwsCrc32c2.prototype.digest = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a3) {
            return [2, numToUint8(this.crc32c.digest())];
          });
        });
      };
      AwsCrc32c2.prototype.reset = function() {
        this.crc32c = new Crc32c();
      };
      return AwsCrc32c2;
    }();
  }
});
var Crc32c;
var a_lookupTable;
var lookupTable;
var init_module2 = __esm({
  "node_modules/@aws-crypto/crc32c/build/module/index.js"() {
    init_tslib_es6();
    init_module();
    init_aws_crc32c();
    Crc32c = /** @class */
    function() {
      function Crc32c2() {
        this.checksum = 4294967295;
      }
      Crc32c2.prototype.update = function(data) {
        var e_1, _a3;
        try {
          for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var byte = data_1_1.value;
            this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a3 = data_1.return)) _a3.call(data_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return this;
      };
      Crc32c2.prototype.digest = function() {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc32c2;
    }();
    a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    lookupTable = uint32ArrayFrom(a_lookupTable);
  }
});
function convertToBuffer2(data) {
  if (data instanceof Uint8Array)
    return data;
  if (typeof data === "string") {
    return fromUtf86(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}
var fromUtf86;
var init_convertToBuffer2 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/convertToBuffer.js"() {
    init_dist_es34();
    fromUtf86 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : fromUtf84;
  }
});
function isEmptyData2(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}
var init_isEmptyData2 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/isEmptyData.js"() {
  }
});
function numToUint82(num) {
  return new Uint8Array([
    (num & 4278190080) >> 24,
    (num & 16711680) >> 16,
    (num & 65280) >> 8,
    num & 255
  ]);
}
var init_numToUint82 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/numToUint8.js"() {
  }
});
function uint32ArrayFrom2(a_lookUpTable2) {
  if (!Uint32Array.from) {
    var return_array = new Uint32Array(a_lookUpTable2.length);
    var a_index = 0;
    while (a_index < a_lookUpTable2.length) {
      return_array[a_index] = a_lookUpTable2[a_index];
      a_index += 1;
    }
    return return_array;
  }
  return Uint32Array.from(a_lookUpTable2);
}
var init_uint32ArrayFrom2 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/uint32ArrayFrom.js"() {
  }
});
var init_module3 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/index.js"() {
    init_convertToBuffer2();
    init_isEmptyData2();
    init_numToUint82();
    init_uint32ArrayFrom2();
  }
});
var AwsCrc32;
var init_aws_crc32 = __esm({
  "node_modules/@aws-crypto/crc32/build/module/aws_crc32.js"() {
    init_tslib_es6();
    init_module3();
    init_module4();
    AwsCrc32 = /** @class */
    function() {
      function AwsCrc322() {
        this.crc32 = new Crc32();
      }
      AwsCrc322.prototype.update = function(toHash) {
        if (isEmptyData2(toHash))
          return;
        this.crc32.update(convertToBuffer2(toHash));
      };
      AwsCrc322.prototype.digest = function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a3) {
            return [2, numToUint82(this.crc32.digest())];
          });
        });
      };
      AwsCrc322.prototype.reset = function() {
        this.crc32 = new Crc32();
      };
      return AwsCrc322;
    }();
  }
});
var Crc32;
var a_lookUpTable;
var lookupTable2;
var init_module4 = __esm({
  "node_modules/@aws-crypto/crc32/build/module/index.js"() {
    init_tslib_es6();
    init_module3();
    init_aws_crc32();
    Crc32 = /** @class */
    function() {
      function Crc322() {
        this.checksum = 4294967295;
      }
      Crc322.prototype.update = function(data) {
        var e_1, _a3;
        try {
          for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var byte = data_1_1.value;
            this.checksum = this.checksum >>> 8 ^ lookupTable2[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a3 = data_1.return)) _a3.call(data_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return this;
      };
      Crc322.prototype.digest = function() {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc322;
    }();
    a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    lookupTable2 = uint32ArrayFrom2(a_lookUpTable);
  }
});
var fromUtf87;
var init_fromUtf86 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es33();
    fromUtf87 = (input) => {
      const buf = fromString4(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var init_toUint8Array6 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf86();
  }
});
var init_toUtf86 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es33();
  }
});
var init_dist_es35 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf86();
    init_toUint8Array6();
    init_toUtf86();
  }
});
var fromUtf88;
var init_convertToBuffer3 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/build/module/convertToBuffer.js"() {
    init_dist_es35();
    fromUtf88 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : fromUtf87;
  }
});
var init_isEmptyData3 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/build/module/isEmptyData.js"() {
  }
});
function numToUint83(num) {
  return new Uint8Array([
    (num & 4278190080) >> 24,
    (num & 16711680) >> 16,
    (num & 65280) >> 8,
    num & 255
  ]);
}
var init_numToUint83 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/build/module/numToUint8.js"() {
  }
});
var init_uint32ArrayFrom3 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/build/module/uint32ArrayFrom.js"() {
  }
});
var init_module5 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/node_modules/@aws-crypto/util/build/module/index.js"() {
    init_convertToBuffer3();
    init_isEmptyData3();
    init_numToUint83();
    init_uint32ArrayFrom3();
  }
});
var NodeCrc32;
var getCrc32ChecksumAlgorithmFunction;
var init_getCrc32ChecksumAlgorithmFunction = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getCrc32ChecksumAlgorithmFunction.js"() {
    init_module4();
    init_module5();
    NodeCrc32 = class {
      checksum = 0;
      update(data) {
        this.checksum = zlib.crc32(data, this.checksum);
      }
      async digest() {
        return numToUint83(this.checksum);
      }
      reset() {
        this.checksum = 0;
      }
    };
    getCrc32ChecksumAlgorithmFunction = () => {
      if (typeof zlib.crc32 === "undefined") {
        return AwsCrc32;
      }
      return NodeCrc32;
    };
  }
});
var selectChecksumAlgorithmFunction;
var init_selectChecksumAlgorithmFunction = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js"() {
    init_module2();
    init_constants();
    init_crc64_nvme_crt_container();
    init_getCrc32ChecksumAlgorithmFunction();
    selectChecksumAlgorithmFunction = (checksumAlgorithm, config2) => {
      switch (checksumAlgorithm) {
        case ChecksumAlgorithm.MD5:
          return config2.md5;
        case ChecksumAlgorithm.CRC32:
          return getCrc32ChecksumAlgorithmFunction();
        case ChecksumAlgorithm.CRC32C:
          return AwsCrc32c;
        case ChecksumAlgorithm.CRC64NVME:
          if (typeof crc64NvmeCrtContainer.CrtCrc64Nvme !== "function") {
            throw new Error(`Please check whether you have installed the "@aws-sdk/crc64-nvme-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/crc64-nvme-crt");] or an ESM equivalent such as [import "@aws-sdk/crc64-nvme-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
          return crc64NvmeCrtContainer.CrtCrc64Nvme;
        case ChecksumAlgorithm.SHA1:
          return config2.sha1;
        case ChecksumAlgorithm.SHA256:
          return config2.sha256;
        default:
          throw new Error(`Unsupported checksum algorithm: ${checksumAlgorithm}`);
      }
    };
  }
});
var stringHasher;
var init_stringHasher = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js"() {
    init_dist_es29();
    stringHasher = (checksumAlgorithmFn, body) => {
      const hash = new checksumAlgorithmFn();
      hash.update(toUint8Array2(body || ""));
      return hash.digest();
    };
  }
});
var flexibleChecksumsMiddlewareOptions;
var flexibleChecksumsMiddleware;
var init_flexibleChecksumsMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"() {
    init_dist_es25();
    init_dist_es26();
    init_dist_es31();
    init_constants();
    init_getChecksumAlgorithmForRequest();
    init_getChecksumLocationName();
    init_hasHeader();
    init_hasHeaderWithPrefix();
    init_isStreaming();
    init_selectChecksumAlgorithmFunction();
    init_stringHasher();
    flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsMiddleware = (config2, middlewareConfig) => (next, context) => async (args) => {
      if (!HttpRequest5.isInstance(args.request)) {
        return next(args);
      }
      if (hasHeaderWithPrefix("x-amz-checksum-", args.request.headers)) {
        return next(args);
      }
      const { request: request3, input } = args;
      const { body: requestBody, headers } = request3;
      const { base64Encoder, streamHasher } = config2;
      const { requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const requestChecksumCalculation = await config2.requestChecksumCalculation();
      const requestAlgorithmMemberName = requestAlgorithmMember?.name;
      const requestAlgorithmMemberHttpHeader = requestAlgorithmMember?.httpHeader;
      if (requestAlgorithmMemberName && !input[requestAlgorithmMemberName]) {
        if (requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired) {
          input[requestAlgorithmMemberName] = DEFAULT_CHECKSUM_ALGORITHM;
          if (requestAlgorithmMemberHttpHeader) {
            headers[requestAlgorithmMemberHttpHeader] = DEFAULT_CHECKSUM_ALGORITHM;
          }
        }
      }
      const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
        requestChecksumRequired,
        requestAlgorithmMember: requestAlgorithmMember?.name,
        requestChecksumCalculation
      });
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        switch (checksumAlgorithm) {
          case ChecksumAlgorithm.CRC32:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32", "U");
            break;
          case ChecksumAlgorithm.CRC32C:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32C", "V");
            break;
          case ChecksumAlgorithm.CRC64NVME:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_CRC64", "W");
            break;
          case ChecksumAlgorithm.SHA1:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_SHA1", "X");
            break;
          case ChecksumAlgorithm.SHA256:
            setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_SHA256", "Y");
            break;
        }
        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config2);
        if (isStreaming(requestBody)) {
          const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config2;
          updatedBody = getAwsChunkedEncodingStream2(typeof config2.requestStreamBufferSize === "number" && config2.requestStreamBufferSize >= 8 * 1024 ? createBufferedReadable(requestBody, config2.requestStreamBufferSize, context.logger) : requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = {
            ...headers,
            "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          };
          delete updatedHeaders["content-length"];
        } else if (!hasHeader2(checksumLocationName, headers)) {
          const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
          updatedHeaders = {
            ...headers,
            [checksumLocationName]: base64Encoder(rawChecksum)
          };
        }
      }
      const result = await next({
        ...args,
        request: {
          ...request3,
          headers: updatedHeaders,
          body: updatedBody
        }
      });
      return result;
    };
  }
});
var flexibleChecksumsInputMiddlewareOptions;
var flexibleChecksumsInputMiddleware;
var init_flexibleChecksumsInputMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsInputMiddleware.js"() {
    init_dist_es25();
    init_constants();
    flexibleChecksumsInputMiddlewareOptions = {
      name: "flexibleChecksumsInputMiddleware",
      toMiddleware: "serializerMiddleware",
      relation: "before",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsInputMiddleware = (config2, middlewareConfig) => (next, context) => async (args) => {
      const input = args.input;
      const { requestValidationModeMember } = middlewareConfig;
      const requestChecksumCalculation = await config2.requestChecksumCalculation();
      const responseChecksumValidation = await config2.responseChecksumValidation();
      switch (requestChecksumCalculation) {
        case RequestChecksumCalculation.WHEN_REQUIRED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED", "a");
          break;
        case RequestChecksumCalculation.WHEN_SUPPORTED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED", "Z");
          break;
      }
      switch (responseChecksumValidation) {
        case ResponseChecksumValidation.WHEN_REQUIRED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED", "c");
          break;
        case ResponseChecksumValidation.WHEN_SUPPORTED:
          setFeature(context, "FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED", "b");
          break;
      }
      if (requestValidationModeMember && !input[requestValidationModeMember]) {
        if (responseChecksumValidation === ResponseChecksumValidation.WHEN_SUPPORTED) {
          input[requestValidationModeMember] = "ENABLED";
        }
      }
      return next(args);
    };
  }
});
var getChecksumAlgorithmListForResponse;
var init_getChecksumAlgorithmListForResponse = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js"() {
    init_types6();
    getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    };
  }
});
var isChecksumWithPartNumber;
var init_isChecksumWithPartNumber = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isChecksumWithPartNumber.js"() {
    isChecksumWithPartNumber = (checksum) => {
      const lastHyphenIndex = checksum.lastIndexOf("-");
      if (lastHyphenIndex !== -1) {
        const numberPart = checksum.slice(lastHyphenIndex + 1);
        if (!numberPart.startsWith("0")) {
          const number = parseInt(numberPart, 10);
          if (!isNaN(number) && number >= 1 && number <= 1e4) {
            return true;
          }
        }
      }
      return false;
    };
  }
});
var getChecksum;
var init_getChecksum = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js"() {
    init_stringHasher();
    getChecksum = async (body, { checksumAlgorithmFn, base64Encoder }) => base64Encoder(await stringHasher(checksumAlgorithmFn, body));
  }
});
var validateChecksumFromResponse;
var init_validateChecksumFromResponse = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"() {
    init_dist_es31();
    init_constants();
    init_getChecksum();
    init_getChecksumAlgorithmListForResponse();
    init_getChecksumLocationName();
    init_isStreaming();
    init_selectChecksumAlgorithmFunction();
    validateChecksumFromResponse = async (response, { config: config2, responseAlgorithms, logger: logger2 }) => {
      const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          let checksumAlgorithmFn;
          try {
            checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config2);
          } catch (error2) {
            if (algorithm === ChecksumAlgorithm.CRC64NVME) {
              logger2?.warn(`Skipping ${ChecksumAlgorithm.CRC64NVME} checksum validation: ${error2.message}`);
              continue;
            }
            throw error2;
          }
          const { base64Encoder } = config2;
          if (isStreaming(responseBody)) {
            response.body = createChecksumStream2({
              expectedChecksum: checksumFromResponse,
              checksumSourceLocation: responseHeader,
              checksum: new checksumAlgorithmFn(),
              source: responseBody,
              base64Encoder
            });
            return;
          }
          const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
        }
      }
    };
  }
});
var flexibleChecksumsResponseMiddlewareOptions;
var flexibleChecksumsResponseMiddleware;
var init_flexibleChecksumsResponseMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js"() {
    init_dist_es26();
    init_getChecksumAlgorithmListForResponse();
    init_getChecksumLocationName();
    init_isChecksumWithPartNumber();
    init_validateChecksumFromResponse();
    flexibleChecksumsResponseMiddlewareOptions = {
      name: "flexibleChecksumsResponseMiddleware",
      toMiddleware: "deserializerMiddleware",
      relation: "after",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsResponseMiddleware = (config2, middlewareConfig) => (next, context) => async (args) => {
      if (!HttpRequest5.isInstance(args.request)) {
        return next(args);
      }
      const input = args.input;
      const result = await next(args);
      const response = result.response;
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        const { clientName, commandName } = context;
        const isS3WholeObjectMultipartGetResponseChecksum = clientName === "S3Client" && commandName === "GetObjectCommand" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {
          const responseHeader = getChecksumLocationName(algorithm);
          const checksumFromResponse = response.headers[responseHeader];
          return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);
        });
        if (isS3WholeObjectMultipartGetResponseChecksum) {
          return result;
        }
        await validateChecksumFromResponse(response, {
          config: config2,
          responseAlgorithms,
          logger: context.logger
        });
      }
      return result;
    };
  }
});
var getFlexibleChecksumsPlugin;
var init_getFlexibleChecksumsPlugin = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js"() {
    init_flexibleChecksumsInputMiddleware();
    init_flexibleChecksumsMiddleware();
    init_flexibleChecksumsResponseMiddleware();
    getFlexibleChecksumsPlugin = (config2, middlewareConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add(flexibleChecksumsMiddleware(config2, middlewareConfig), flexibleChecksumsMiddlewareOptions);
        clientStack.addRelativeTo(flexibleChecksumsInputMiddleware(config2, middlewareConfig), flexibleChecksumsInputMiddlewareOptions);
        clientStack.addRelativeTo(flexibleChecksumsResponseMiddleware(config2, middlewareConfig), flexibleChecksumsResponseMiddlewareOptions);
      }
    });
  }
});
var resolveFlexibleChecksumsConfig;
var init_resolveFlexibleChecksumsConfig = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/resolveFlexibleChecksumsConfig.js"() {
    init_dist_es5();
    init_constants();
    resolveFlexibleChecksumsConfig = (input) => {
      const { requestChecksumCalculation, responseChecksumValidation, requestStreamBufferSize } = input;
      return Object.assign(input, {
        requestChecksumCalculation: normalizeProvider(requestChecksumCalculation ?? DEFAULT_REQUEST_CHECKSUM_CALCULATION),
        responseChecksumValidation: normalizeProvider(responseChecksumValidation ?? DEFAULT_RESPONSE_CHECKSUM_VALIDATION),
        requestStreamBufferSize: Number(requestStreamBufferSize ?? 0)
      });
    };
  }
});
var init_dist_es36 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js"() {
    init_NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS();
    init_NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS();
    init_constants();
    init_crc64_nvme_crt_container();
    init_flexibleChecksumsMiddleware();
    init_getFlexibleChecksumsPlugin();
    init_resolveFlexibleChecksumsConfig();
  }
});
var getHttpHandlerExtensionConfiguration;
var resolveHttpHandlerRuntimeConfig;
var init_httpExtensionConfiguration6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
    getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
      return {
        setHttpHandler(handler3) {
          runtimeConfig.httpHandler = handler3;
        },
        httpHandler() {
          return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
          runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return runtimeConfig.httpHandler.httpHandlerConfigs();
        }
      };
    };
    resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    };
  }
});
var init_extensions8 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration6();
  }
});
var init_abort2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/abort.js"() {
  }
});
var HttpAuthLocation2;
var init_auth3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/auth.js"() {
    (function(HttpAuthLocation5) {
      HttpAuthLocation5["HEADER"] = "header";
      HttpAuthLocation5["QUERY"] = "query";
    })(HttpAuthLocation2 || (HttpAuthLocation2 = {}));
  }
});
var HttpApiKeyAuthLocation2;
var init_HttpApiKeyAuth2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    (function(HttpApiKeyAuthLocation5) {
      HttpApiKeyAuthLocation5["HEADER"] = "header";
      HttpApiKeyAuthLocation5["QUERY"] = "query";
    })(HttpApiKeyAuthLocation2 || (HttpApiKeyAuthLocation2 = {}));
  }
});
var init_HttpAuthScheme2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
  }
});
var init_HttpAuthSchemeProvider2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
  }
});
var init_HttpSigner2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
  }
});
var init_IdentityProviderConfig2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
  }
});
var init_auth4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/auth/index.js"() {
    init_auth3();
    init_HttpApiKeyAuth2();
    init_HttpAuthScheme2();
    init_HttpAuthSchemeProvider2();
    init_HttpSigner2();
    init_IdentityProviderConfig2();
  }
});
var init_blob_payload_input_types2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
  }
});
var init_checksum2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/checksum.js"() {
  }
});
var init_client4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/client.js"() {
  }
});
var init_command3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/command.js"() {
  }
});
var init_config3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/connection/config.js"() {
  }
});
var init_manager2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/connection/manager.js"() {
  }
});
var init_pool2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/connection/pool.js"() {
  }
});
var init_connection2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/connection/index.js"() {
    init_config3();
    init_manager2();
    init_pool2();
  }
});
var init_crypto2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/crypto.js"() {
  }
});
var init_encode2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/encode.js"() {
  }
});
var EndpointURLScheme2;
var init_endpoint2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoint.js"() {
    (function(EndpointURLScheme5) {
      EndpointURLScheme5["HTTP"] = "http";
      EndpointURLScheme5["HTTPS"] = "https";
    })(EndpointURLScheme2 || (EndpointURLScheme2 = {}));
  }
});
var init_EndpointRuleObject2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
  }
});
var init_shared2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
  }
});
var init_TreeRuleObject2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
  }
});
var init_endpoints2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    init_EndpointRuleObject2();
    init_ErrorRuleObject2();
    init_RuleSetObject2();
    init_shared2();
    init_TreeRuleObject2();
  }
});
var init_eventStream2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/eventStream.js"() {
  }
});
var AlgorithmId;
var init_checksum3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/extensions/checksum.js"() {
    (function(AlgorithmId3) {
      AlgorithmId3["MD5"] = "md5";
      AlgorithmId3["CRC32"] = "crc32";
      AlgorithmId3["CRC32C"] = "crc32c";
      AlgorithmId3["SHA1"] = "sha1";
      AlgorithmId3["SHA256"] = "sha256";
    })(AlgorithmId || (AlgorithmId = {}));
  }
});
var init_defaultClientConfiguration2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
  }
});
var init_defaultExtensionConfiguration3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions9 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/extensions/index.js"() {
    init_defaultClientConfiguration2();
    init_defaultExtensionConfiguration3();
    init_checksum3();
  }
});
var init_feature_ids2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/feature-ids.js"() {
  }
});
var FieldPosition2;
var init_http2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/http.js"() {
    (function(FieldPosition5) {
      FieldPosition5[FieldPosition5["HEADER"] = 0] = "HEADER";
      FieldPosition5[FieldPosition5["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition2 || (FieldPosition2 = {}));
  }
});
var init_httpHandlerInitialization2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
  }
});
var init_apiKeyIdentity2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
  }
});
var init_awsCredentialIdentity2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
  }
});
var init_identity3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/identity/identity.js"() {
  }
});
var init_tokenIdentity2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
  }
});
var init_identity4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/identity/index.js"() {
    init_apiKeyIdentity2();
    init_awsCredentialIdentity2();
    init_identity3();
    init_tokenIdentity2();
  }
});
var init_logger3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/logger.js"() {
  }
});
var SMITHY_CONTEXT_KEY2;
var init_middleware2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/middleware.js"() {
    SMITHY_CONTEXT_KEY2 = "__smithy_context";
  }
});
var init_pagination2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/pagination.js"() {
  }
});
var IniSectionType2;
var init_profile2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/profile.js"() {
    (function(IniSectionType5) {
      IniSectionType5["PROFILE"] = "profile";
      IniSectionType5["SSO_SESSION"] = "sso-session";
      IniSectionType5["SERVICES"] = "services";
    })(IniSectionType2 || (IniSectionType2 = {}));
  }
});
var init_response2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/response.js"() {
  }
});
var init_retry2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/retry.js"() {
  }
});
var init_schema3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/schema/schema.js"() {
  }
});
var init_sentinels3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/schema/sentinels.js"() {
  }
});
var init_serde3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/serde.js"() {
  }
});
var init_shapes2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/shapes.js"() {
  }
});
var init_signature2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/signature.js"() {
  }
});
var init_stream3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/stream.js"() {
  }
});
var init_streaming_blob_common_types2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
  }
});
var init_streaming_blob_payload_input_types2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
  }
});
var init_streaming_blob_payload_output_types2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
  }
});
var RequestHandlerProtocol2;
var init_transfer2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/transfer.js"() {
    (function(RequestHandlerProtocol5) {
      RequestHandlerProtocol5["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol5["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol5["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol2 || (RequestHandlerProtocol2 = {}));
  }
});
var init_client_payload_blob_type_narrow2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
  }
});
var init_mutable2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/transform/mutable.js"() {
  }
});
var init_no_undefined2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
  }
});
var init_type_transform2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
  }
});
var init_uri2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/uri.js"() {
  }
});
var init_util6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/util.js"() {
  }
});
var init_waiter2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/waiter.js"() {
  }
});
var init_dist_es37 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/types/dist-es/index.js"() {
    init_abort2();
    init_auth4();
    init_blob_payload_input_types2();
    init_checksum2();
    init_client4();
    init_command3();
    init_connection2();
    init_crypto2();
    init_encode2();
    init_endpoint2();
    init_endpoints2();
    init_eventStream2();
    init_extensions9();
    init_feature_ids2();
    init_http2();
    init_httpHandlerInitialization2();
    init_identity4();
    init_logger3();
    init_middleware2();
    init_pagination2();
    init_profile2();
    init_response2();
    init_retry2();
    init_schema3();
    init_sentinels3();
    init_serde3();
    init_shapes2();
    init_signature2();
    init_stream3();
    init_streaming_blob_common_types2();
    init_streaming_blob_payload_input_types2();
    init_streaming_blob_payload_output_types2();
    init_transfer2();
    init_client_payload_blob_type_narrow2();
    init_mutable2();
    init_no_undefined2();
    init_type_transform2();
    init_uri2();
    init_util6();
    init_waiter2();
  }
});
var init_Field6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery6(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest6;
var init_httpRequest6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest6 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery6(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var HttpResponse2;
var init_httpResponse6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    HttpResponse2 = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
function isValidHostname(hostname) {
  const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname);
}
var init_isValidHostname6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types7 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es38 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions8();
    init_Field6();
    init_Fields6();
    init_httpHandler6();
    init_httpRequest6();
    init_httpResponse6();
    init_isValidHostname6();
    init_types7();
  }
});
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware;
var hostHeaderMiddlewareOptions;
var getHostHeaderPlugin;
var init_dist_es39 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js"() {
    init_dist_es38();
    hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!HttpRequest6.isInstance(args.request))
        return next(args);
      const { request: request3 } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request3.headers[":authority"]) {
        delete request3.headers["host"];
        request3.headers[":authority"] = request3.hostname + (request3.port ? ":" + request3.port : "");
      } else if (!request3.headers["host"]) {
        let host = request3.hostname;
        if (request3.port != null)
          host += `:${request3.port}`;
        request3.headers["host"] = host;
      }
      return next(args);
    };
    hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    });
  }
});
var loggerMiddleware;
var loggerMiddlewareOptions;
var getLoggerPlugin;
var init_loggerMiddleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"() {
    loggerMiddleware = () => (next, context) => async (args) => {
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger2?.info?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error2) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger2?.error?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error: error2,
          metadata: error2.$metadata
        });
        throw error2;
      }
    };
    loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    });
  }
});
var init_dist_es40 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-logger/dist-es/index.js"() {
    init_loggerMiddleware();
  }
});
var recursionDetectionMiddlewareOptions;
var init_configuration = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js"() {
    recursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
  }
});
var require_invoke_store = __commonJS2({
  "node_modules/@aws/lambda-invoke-store/dist/invoke-store.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvokeStore = void 0;
    var async_hooks_1 = __require2("async_hooks");
    var noGlobalAwsLambda = process.env["AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA"] === "1" || process.env["AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA"] === "true";
    if (!noGlobalAwsLambda) {
      globalThis.awslambda = globalThis.awslambda || {};
    }
    var PROTECTED_KEYS = {
      REQUEST_ID: Symbol("_AWS_LAMBDA_REQUEST_ID"),
      X_RAY_TRACE_ID: Symbol("_AWS_LAMBDA_X_RAY_TRACE_ID")
    };
    var InvokeStoreImpl = class {
      static storage = new async_hooks_1.AsyncLocalStorage();
      // Protected keys for Lambda context fields
      static PROTECTED_KEYS = PROTECTED_KEYS;
      /**
       * Initialize and run code within an invoke context
       */
      static run(context, fn) {
        return this.storage.run({ ...context }, fn);
      }
      /**
       * Get the complete current context
       */
      static getContext() {
        return this.storage.getStore();
      }
      /**
       * Get a specific value from the context by key
       */
      static get(key) {
        const context = this.storage.getStore();
        return context?.[key];
      }
      /**
       * Set a custom value in the current context
       * Protected Lambda context fields cannot be overwritten
       */
      static set(key, value) {
        if (this.isProtectedKey(key)) {
          throw new Error(`Cannot modify protected Lambda context field`);
        }
        const context = this.storage.getStore();
        if (context) {
          context[key] = value;
        }
      }
      /**
       * Get the current request ID
       */
      static getRequestId() {
        return this.get(this.PROTECTED_KEYS.REQUEST_ID) ?? "-";
      }
      /**
       * Get the current X-ray trace ID
       */
      static getXRayTraceId() {
        return this.get(this.PROTECTED_KEYS.X_RAY_TRACE_ID);
      }
      /**
       * Check if we're currently within an invoke context
       */
      static hasContext() {
        return this.storage.getStore() !== void 0;
      }
      /**
       * Check if a key is protected (readonly Lambda context field)
       */
      static isProtectedKey(key) {
        return key === this.PROTECTED_KEYS.REQUEST_ID || key === this.PROTECTED_KEYS.X_RAY_TRACE_ID;
      }
    };
    var instance;
    if (!noGlobalAwsLambda && globalThis.awslambda?.InvokeStore) {
      instance = globalThis.awslambda.InvokeStore;
    } else {
      instance = InvokeStoreImpl;
      if (!noGlobalAwsLambda && globalThis.awslambda) {
        globalThis.awslambda.InvokeStore = instance;
      }
    }
    exports2.InvokeStore = instance;
  }
});
var import_lambda_invoke_store;
var TRACE_ID_HEADER_NAME;
var ENV_LAMBDA_FUNCTION_NAME;
var ENV_TRACE_ID;
var recursionDetectionMiddleware;
var init_recursionDetectionMiddleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.js"() {
    import_lambda_invoke_store = __toESM2(require_invoke_store());
    init_dist_es38();
    TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    recursionDetectionMiddleware = () => (next) => async (args) => {
      const { request: request3 } = args;
      if (!HttpRequest6.isInstance(request3)) {
        return next(args);
      }
      const traceIdHeader = Object.keys(request3.headers ?? {}).find((h5) => h5.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ?? TRACE_ID_HEADER_NAME;
      if (request3.headers.hasOwnProperty(traceIdHeader)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceIdFromEnv = process.env[ENV_TRACE_ID];
      const traceIdFromInvokeStore = import_lambda_invoke_store.InvokeStore.getXRayTraceId();
      const traceId = traceIdFromInvokeStore ?? traceIdFromEnv;
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request3.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request: request3
      });
    };
  }
});
var getRecursionDetectionPlugin;
var init_getRecursionDetectionPlugin = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js"() {
    init_configuration();
    init_recursionDetectionMiddleware();
    getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);
      }
    });
  }
});
var init_dist_es41 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"() {
    init_getRecursionDetectionPlugin();
    init_recursionDetectionMiddleware();
  }
});
var init_httpExtensionConfiguration7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions10 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration7();
  }
});
var init_Field7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery7(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest7;
var init_httpRequest7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest7 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery7(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var HttpResponse3;
var init_httpResponse7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    HttpResponse3 = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
var init_isValidHostname7 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types8 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es42 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions10();
    init_Field7();
    init_Fields7();
    init_httpHandler7();
    init_httpRequest7();
    init_httpResponse7();
    init_isValidHostname7();
    init_types8();
  }
});
var init_client5 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/client.js"() {
  }
});
var init_collect_stream_body3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
  }
});
var init_command4 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/command.js"() {
  }
});
var init_constants4 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
  }
});
var init_create_aggregated_client2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
  }
});
var init_exceptions2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
  }
});
var init_default_error_handler2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
  }
});
var init_defaults_mode2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
  }
});
var init_emitWarningIfUnsupportedVersion3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
  }
});
var init_extended_encode_uri_component3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
  }
});
var init_defaultExtensionConfiguration4 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions11 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_defaultExtensionConfiguration4();
  }
});
var init_get_array_if_single_item2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
  }
});
var init_get_value_from_text_node2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
  }
});
var init_is_serializable_header_value2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
  }
});
var NoOpLogger;
var init_NoOpLogger2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});
var init_object_mapping2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
  }
});
var init_resolve_path3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
  }
});
var init_ser_utils2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
  }
});
var init_serde_json2 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
  }
});
var init_dist_es43 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_client5();
    init_collect_stream_body3();
    init_command4();
    init_constants4();
    init_create_aggregated_client2();
    init_default_error_handler2();
    init_defaults_mode2();
    init_emitWarningIfUnsupportedVersion3();
    init_exceptions2();
    init_extended_encode_uri_component3();
    init_extensions11();
    init_get_array_if_single_item2();
    init_get_value_from_text_node2();
    init_is_serializable_header_value2();
    init_NoOpLogger2();
    init_object_mapping2();
    init_resolve_path3();
    init_ser_utils2();
    init_serde_json2();
    init_serde2();
  }
});
function checkContentLengthHeader() {
  return (next, context) => async (args) => {
    const { request: request3 } = args;
    if (HttpRequest7.isInstance(request3)) {
      if (!(CONTENT_LENGTH_HEADER in request3.headers) && !(DECODED_CONTENT_LENGTH_HEADER in request3.headers)) {
        const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
        if (typeof context?.logger?.warn === "function" && !(context.logger instanceof NoOpLogger)) {
          context.logger.warn(message);
        } else {
          console.warn(message);
        }
      }
    }
    return next({ ...args });
  };
}
var CONTENT_LENGTH_HEADER;
var DECODED_CONTENT_LENGTH_HEADER;
var checkContentLengthHeaderMiddlewareOptions;
var getCheckContentLengthHeaderPlugin;
var init_check_content_length_header = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js"() {
    init_dist_es42();
    init_dist_es43();
    CONTENT_LENGTH_HEADER = "content-length";
    DECODED_CONTENT_LENGTH_HEADER = "x-amz-decoded-content-length";
    checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    getCheckContentLengthHeaderPlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
      }
    });
  }
});
var regionRedirectEndpointMiddleware;
var regionRedirectEndpointMiddlewareOptions;
var init_region_redirect_endpoint_middleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/region-redirect-endpoint-middleware.js"() {
    regionRedirectEndpointMiddleware = (config2) => {
      return (next, context) => async (args) => {
        const originalRegion = await config2.region();
        const regionProviderRef = config2.region;
        let unlock = () => {
        };
        if (context.__s3RegionRedirect) {
          Object.defineProperty(config2, "region", {
            writable: false,
            value: async () => {
              return context.__s3RegionRedirect;
            }
          });
          unlock = () => Object.defineProperty(config2, "region", {
            writable: true,
            value: regionProviderRef
          });
        }
        try {
          const result = await next(args);
          if (context.__s3RegionRedirect) {
            unlock();
            const region = await config2.region();
            if (originalRegion !== region) {
              throw new Error("Region was not restored following S3 region redirect.");
            }
          }
          return result;
        } catch (e5) {
          unlock();
          throw e5;
        }
      };
    };
    regionRedirectEndpointMiddlewareOptions = {
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectEndpointMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
  }
});
function regionRedirectMiddleware(clientConfig) {
  return (next, context) => async (args) => {
    try {
      return await next(args);
    } catch (err) {
      if (clientConfig.followRegionRedirects) {
        const statusCode = err?.$metadata?.httpStatusCode;
        const isHeadBucket = context.commandName === "HeadBucketCommand";
        const bucketRegionHeader = err?.$response?.headers?.["x-amz-bucket-region"];
        if (bucketRegionHeader) {
          if (statusCode === 301 || statusCode === 400 && (err?.name === "IllegalLocationConstraintException" || isHeadBucket)) {
            try {
              const actualRegion = bucketRegionHeader;
              context.logger?.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);
              context.__s3RegionRedirect = actualRegion;
            } catch (e5) {
              throw new Error("Region redirect failed: " + e5);
            }
            return next(args);
          }
        }
      }
      throw err;
    }
  };
}
var regionRedirectMiddlewareOptions;
var getRegionRedirectMiddlewarePlugin;
var init_region_redirect_middleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/region-redirect-middleware.js"() {
    init_region_redirect_endpoint_middleware();
    regionRedirectMiddlewareOptions = {
      step: "initialize",
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectMiddleware",
      override: true
    };
    getRegionRedirectMiddlewarePlugin = (clientConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);
        clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);
      }
    });
  }
});
var s3ExpiresMiddleware;
var s3ExpiresMiddlewareOptions;
var getS3ExpiresMiddlewarePlugin;
var init_s3_expires_middleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-expires-middleware.js"() {
    init_dist_es42();
    init_dist_es43();
    s3ExpiresMiddleware = (config2) => {
      return (next, context) => async (args) => {
        const result = await next(args);
        const { response } = result;
        if (HttpResponse3.isInstance(response)) {
          if (response.headers.expires) {
            response.headers.expiresstring = response.headers.expires;
            try {
              parseRfc7231DateTime(response.headers.expires);
            } catch (e5) {
              context.logger?.warn(`AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e5}`);
              delete response.headers.expires;
            }
          }
        }
        return result;
      };
    };
    s3ExpiresMiddlewareOptions = {
      tags: ["S3"],
      name: "s3ExpiresMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "deserializerMiddleware"
    };
    getS3ExpiresMiddlewarePlugin = (clientConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);
      }
    });
  }
});
var S3ExpressIdentityCache;
var init_S3ExpressIdentityCache = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityCache.js"() {
    S3ExpressIdentityCache = class _S3ExpressIdentityCache {
      data;
      lastPurgeTime = Date.now();
      static EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 3e4;
      constructor(data = {}) {
        this.data = data;
      }
      get(key) {
        const entry = this.data[key];
        if (!entry) {
          return;
        }
        return entry;
      }
      set(key, entry) {
        this.data[key] = entry;
        return entry;
      }
      delete(key) {
        delete this.data[key];
      }
      async purgeExpired() {
        const now = Date.now();
        if (this.lastPurgeTime + _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {
          return;
        }
        for (const key in this.data) {
          const entry = this.data[key];
          if (!entry.isRefreshing) {
            const credential = await entry.identity;
            if (credential.expiration) {
              if (credential.expiration.getTime() < now) {
                delete this.data[key];
              }
            }
          }
        }
      }
    };
  }
});
var S3ExpressIdentityCacheEntry;
var init_S3ExpressIdentityCacheEntry = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityCacheEntry.js"() {
    S3ExpressIdentityCacheEntry = class {
      _identity;
      isRefreshing;
      accessed;
      constructor(_identity, isRefreshing = false, accessed = Date.now()) {
        this._identity = _identity;
        this.isRefreshing = isRefreshing;
        this.accessed = accessed;
      }
      get identity() {
        this.accessed = Date.now();
        return this._identity;
      }
    };
  }
});
var S3ExpressIdentityProviderImpl;
var init_S3ExpressIdentityProviderImpl = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/S3ExpressIdentityProviderImpl.js"() {
    init_S3ExpressIdentityCache();
    init_S3ExpressIdentityCacheEntry();
    S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl {
      createSessionFn;
      cache;
      static REFRESH_WINDOW_MS = 6e4;
      constructor(createSessionFn, cache5 = new S3ExpressIdentityCache()) {
        this.createSessionFn = createSessionFn;
        this.cache = cache5;
      }
      async getS3ExpressIdentity(awsIdentity, identityProperties) {
        const key = identityProperties.Bucket;
        const { cache: cache5 } = this;
        const entry = cache5.get(key);
        if (entry) {
          return entry.identity.then((identity) => {
            const isExpired = (identity.expiration?.getTime() ?? 0) < Date.now();
            if (isExpired) {
              return cache5.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
            }
            const isExpiringSoon = (identity.expiration?.getTime() ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS;
            if (isExpiringSoon && !entry.isRefreshing) {
              entry.isRefreshing = true;
              this.getIdentity(key).then((id) => {
                cache5.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));
              });
            }
            return identity;
          });
        }
        return cache5.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
      }
      async getIdentity(key) {
        await this.cache.purgeExpired().catch((error2) => {
          console.warn("Error while clearing expired entries in S3ExpressIdentityCache: \n" + error2);
        });
        const session = await this.createSessionFn(key);
        if (!session.Credentials?.AccessKeyId || !session.Credentials?.SecretAccessKey) {
          throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");
        }
        const identity = {
          accessKeyId: session.Credentials.AccessKeyId,
          secretAccessKey: session.Credentials.SecretAccessKey,
          sessionToken: session.Credentials.SessionToken,
          expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : void 0
        };
        return identity;
      }
    };
  }
});
var booleanSelector;
var init_booleanSelector = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js"() {
    booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
  }
});
var init_numberSelector = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/numberSelector.js"() {
  }
});
var SelectorType2;
var init_types9 = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/types.js"() {
    (function(SelectorType3) {
      SelectorType3["ENV"] = "env";
      SelectorType3["CONFIG"] = "shared config entry";
    })(SelectorType2 || (SelectorType2 = {}));
  }
});
var init_dist_es44 = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/index.js"() {
    init_booleanSelector();
    init_numberSelector();
    init_types9();
  }
});
var S3_EXPRESS_BUCKET_TYPE;
var S3_EXPRESS_BACKEND;
var S3_EXPRESS_AUTH_SCHEME;
var SESSION_TOKEN_QUERY_PARAM;
var SESSION_TOKEN_HEADER;
var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME;
var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME;
var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS;
var init_constants5 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/constants.js"() {
    init_dist_es44();
    S3_EXPRESS_BUCKET_TYPE = "Directory";
    S3_EXPRESS_BACKEND = "S3Express";
    S3_EXPRESS_AUTH_SCHEME = "sigv4-s3express";
    SESSION_TOKEN_QUERY_PARAM = "X-Amz-S3session-Token";
    SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();
    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME = "AWS_S3_DISABLE_EXPRESS_SESSION_AUTH";
    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME = "s3_disable_express_session_auth";
    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS = {
      environmentVariableSelector: (env3) => booleanSelector(env3, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME, SelectorType2.CONFIG),
      default: false
    };
  }
});
function getCredentialsWithoutSessionToken(credentials) {
  const credentialsWithoutSessionToken = {
    accessKeyId: credentials.accessKeyId,
    secretAccessKey: credentials.secretAccessKey,
    expiration: credentials.expiration
  };
  return credentialsWithoutSessionToken;
}
function setSingleOverride(privateAccess, credentialsWithoutSessionToken) {
  const id = setTimeout(() => {
    throw new Error("SignatureV4S3Express credential override was created but not called.");
  }, 10);
  const currentCredentialProvider = privateAccess.credentialProvider;
  const overrideCredentialsProviderOnce = () => {
    clearTimeout(id);
    privateAccess.credentialProvider = currentCredentialProvider;
    return Promise.resolve(credentialsWithoutSessionToken);
  };
  privateAccess.credentialProvider = overrideCredentialsProviderOnce;
}
var SignatureV4S3Express;
var init_SignatureV4S3Express = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/classes/SignatureV4S3Express.js"() {
    init_dist_es20();
    init_constants5();
    SignatureV4S3Express = class extends SignatureV4 {
      async signWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return privateAccess.signRequest(requestToSign, options ?? {});
      }
      async presignWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        delete requestToSign.headers[SESSION_TOKEN_HEADER];
        requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        requestToSign.query = requestToSign.query ?? {};
        requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return this.presign(requestToSign, options);
      }
    };
  }
});
var s3ExpressMiddleware;
var s3ExpressMiddlewareOptions;
var getS3ExpressPlugin;
var init_s3ExpressMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressMiddleware.js"() {
    init_dist_es25();
    init_dist_es42();
    init_constants5();
    s3ExpressMiddleware = (options) => {
      return (next, context) => async (args) => {
        if (context.endpointV2) {
          const endpoint = context.endpointV2;
          const isS3ExpressAuth = endpoint.properties?.authSchemes?.[0]?.name === S3_EXPRESS_AUTH_SCHEME;
          const isS3ExpressBucket = endpoint.properties?.backend === S3_EXPRESS_BACKEND || endpoint.properties?.bucketType === S3_EXPRESS_BUCKET_TYPE;
          if (isS3ExpressBucket) {
            setFeature(context, "S3_EXPRESS_BUCKET", "J");
            context.isS3ExpressBucket = true;
          }
          if (isS3ExpressAuth) {
            const requestBucket = args.input.Bucket;
            if (requestBucket) {
              const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {
                Bucket: requestBucket
              });
              context.s3ExpressIdentity = s3ExpressIdentity;
              if (HttpRequest7.isInstance(args.request) && s3ExpressIdentity.sessionToken) {
                args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;
              }
            }
          }
        }
        return next(args);
      };
    };
    s3ExpressMiddlewareOptions = {
      name: "s3ExpressMiddleware",
      step: "build",
      tags: ["S3", "S3_EXPRESS"],
      override: true
    };
    getS3ExpressPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);
      }
    });
  }
});
var signS3Express;
var init_signS3Express = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/signS3Express.js"() {
    signS3Express = async (s3ExpressIdentity, signingOptions, request3, sigV4MultiRegionSigner) => {
      const signedRequest = await sigV4MultiRegionSigner.signWithCredentials(request3, s3ExpressIdentity, {});
      if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) {
        throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
      }
      return signedRequest;
    };
  }
});
var defaultErrorHandler2;
var defaultSuccessHandler2;
var s3ExpressHttpSigningMiddleware;
var getS3ExpressHttpSigningPlugin;
var init_s3ExpressHttpSigningMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/functions/s3ExpressHttpSigningMiddleware.js"() {
    init_dist_es14();
    init_dist_es42();
    init_dist_es5();
    init_signS3Express();
    defaultErrorHandler2 = (signingProperties) => (error2) => {
      throw error2;
    };
    defaultSuccessHandler2 = (httpResponse, signingProperties) => {
    };
    s3ExpressHttpSigningMiddleware = (config2) => (next, context) => async (args) => {
      if (!HttpRequest7.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = getSmithyContext(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      let request3;
      if (context.s3ExpressIdentity) {
        request3 = await signS3Express(context.s3ExpressIdentity, signingProperties, args.request, await config2.signer());
      } else {
        request3 = await signer.sign(args.request, identity, signingProperties);
      }
      const output = await next({
        ...args,
        request: request3
      }).catch((signer.errorHandler || defaultErrorHandler2)(signingProperties));
      (signer.successHandler || defaultSuccessHandler2)(output.response, signingProperties);
      return output;
    };
    getS3ExpressHttpSigningPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(s3ExpressHttpSigningMiddleware(config2), httpSigningMiddlewareOptions);
      }
    });
  }
});
var init_s3_express = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3-express/index.js"() {
    init_S3ExpressIdentityCache();
    init_S3ExpressIdentityCacheEntry();
    init_S3ExpressIdentityProviderImpl();
    init_SignatureV4S3Express();
    init_constants5();
    init_s3ExpressMiddleware();
    init_s3ExpressHttpSigningMiddleware();
  }
});
var resolveS3Config;
var init_s3Configuration = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3Configuration.js"() {
    init_s3_express();
    resolveS3Config = (input, { session }) => {
      const [s3ClientProvider, CreateSessionCommandCtor] = session;
      const { forcePathStyle, useAccelerateEndpoint, disableMultiregionAccessPoints, followRegionRedirects, s3ExpressIdentityProvider, bucketEndpoint } = input;
      return Object.assign(input, {
        forcePathStyle: forcePathStyle ?? false,
        useAccelerateEndpoint: useAccelerateEndpoint ?? false,
        disableMultiregionAccessPoints: disableMultiregionAccessPoints ?? false,
        followRegionRedirects: followRegionRedirects ?? false,
        s3ExpressIdentityProvider: s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async (key) => s3ClientProvider().send(new CreateSessionCommandCtor({
          Bucket: key
        }))),
        bucketEndpoint: bucketEndpoint ?? false
      });
    };
  }
});
var init_Uint8ArrayBlobAdapter3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
  }
});
var init_ChecksumStream3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js"() {
  }
});
var isReadableStream2;
var isBlob;
var init_stream_type_check3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
    isReadableStream2 = (stream) => typeof ReadableStream === "function" && (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream);
    isBlob = (blob) => {
      return typeof Blob === "function" && (blob?.constructor?.name === Blob.name || blob instanceof Blob);
    };
  }
});
var init_createChecksumStream3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js"() {
  }
});
var init_createBufferedReadable3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js"() {
  }
});
var init_getAwsChunkedEncodingStream3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
  }
});
async function headStream(stream, bytes) {
  let byteLengthCounter = 0;
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      byteLengthCounter += value?.byteLength ?? 0;
    }
    if (byteLengthCounter >= bytes) {
      break;
    }
    isDone = done;
  }
  reader.releaseLock();
  const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
  let offset = 0;
  for (const chunk of chunks) {
    if (chunk.byteLength > collected.byteLength - offset) {
      collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
      break;
    } else {
      collected.set(chunk, offset);
    }
    offset += chunk.length;
  }
  return collected;
}
var init_headStream_browser = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/headStream.browser.js"() {
  }
});
var headStream2;
var Collector;
var init_headStream3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/headStream.js"() {
    init_headStream_browser();
    init_stream_type_check3();
    headStream2 = (stream, bytes) => {
      if (isReadableStream2(stream)) {
        return headStream(stream, bytes);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
          resolve(bytes2);
        });
      });
    };
    Collector = class extends Writable2 {
      constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
      }
      _write(chunk, encoding, callback) {
        this.buffers.push(chunk);
        this.bytesBuffered += chunk.byteLength ?? 0;
        if (this.bytesBuffered >= this.limit) {
          const excess = this.bytesBuffered - this.limit;
          const tailBuffer = this.buffers[this.buffers.length - 1];
          this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
          this.emit("finish");
        }
        callback();
      }
    };
  }
});
var init_sdk_stream_mixin3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
  }
});
async function splitStream(stream) {
  if (typeof stream.stream === "function") {
    stream = stream.stream();
  }
  const readableStream = stream;
  return readableStream.tee();
}
var init_splitStream_browser = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/splitStream.browser.js"() {
  }
});
async function splitStream2(stream) {
  if (isReadableStream2(stream) || isBlob(stream)) {
    return splitStream(stream);
  }
  const stream1 = new PassThrough();
  const stream2 = new PassThrough();
  stream.pipe(stream1);
  stream.pipe(stream2);
  return [stream1, stream2];
}
var init_splitStream3 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/splitStream.js"() {
    init_splitStream_browser();
    init_stream_type_check3();
  }
});
var init_dist_es45 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_Uint8ArrayBlobAdapter3();
    init_ChecksumStream3();
    init_createChecksumStream3();
    init_createBufferedReadable3();
    init_getAwsChunkedEncodingStream3();
    init_headStream3();
    init_sdk_stream_mixin3();
    init_splitStream3();
    init_stream_type_check3();
  }
});
var THROW_IF_EMPTY_BODY;
var MAX_BYTES_TO_INSPECT;
var throw200ExceptionsMiddleware;
var collectBody2;
var throw200ExceptionsMiddlewareOptions;
var getThrow200ExceptionsPlugin;
var init_throw_200_exceptions = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"() {
    init_dist_es42();
    init_dist_es45();
    THROW_IF_EMPTY_BODY = {
      CopyObjectCommand: true,
      UploadPartCopyCommand: true,
      CompleteMultipartUploadCommand: true
    };
    MAX_BYTES_TO_INSPECT = 3e3;
    throw200ExceptionsMiddleware = (config2) => (next, context) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (!HttpResponse3.isInstance(response)) {
        return result;
      }
      const { statusCode, body: sourceBody } = response;
      if (statusCode < 200 || statusCode >= 300) {
        return result;
      }
      const isSplittableStream = typeof sourceBody?.stream === "function" || typeof sourceBody?.pipe === "function" || typeof sourceBody?.tee === "function";
      if (!isSplittableStream) {
        return result;
      }
      let bodyCopy = sourceBody;
      let body = sourceBody;
      if (sourceBody && typeof sourceBody === "object" && !(sourceBody instanceof Uint8Array)) {
        [bodyCopy, body] = await splitStream2(sourceBody);
      }
      response.body = body;
      const bodyBytes = await collectBody2(bodyCopy, {
        streamCollector: async (stream) => {
          return headStream2(stream, MAX_BYTES_TO_INSPECT);
        }
      });
      if (typeof bodyCopy?.destroy === "function") {
        bodyCopy.destroy();
      }
      const bodyStringTail = config2.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));
      if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyStringTail && bodyStringTail.endsWith("</Error>")) {
        response.statusCode = 400;
      }
      return result;
    };
    collectBody2 = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    getThrow200ExceptionsPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config2), throw200ExceptionsMiddlewareOptions);
      }
    });
  }
});
var validate2;
var init_dist_es46 = __esm({
  "node_modules/@aws-sdk/util-arn-parser/dist-es/index.js"() {
    validate2 = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
  }
});
function bucketEndpointMiddleware(options) {
  return (next, context) => async (args) => {
    if (options.bucketEndpoint) {
      const endpoint = context.endpointV2;
      if (endpoint) {
        const bucket = args.input.Bucket;
        if (typeof bucket === "string") {
          try {
            const bucketEndpointUrl = new URL(bucket);
            context.endpointV2 = {
              ...endpoint,
              url: bucketEndpointUrl
            };
          } catch (e5) {
            const warning = `@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${bucket} could not be parsed as URL.`;
            if (context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(warning);
            } else {
              context.logger?.warn?.(warning);
            }
            throw e5;
          }
        }
      }
    }
    return next(args);
  };
}
var bucketEndpointMiddlewareOptions;
var init_bucket_endpoint_middleware = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/bucket-endpoint-middleware.js"() {
    bucketEndpointMiddlewareOptions = {
      name: "bucketEndpointMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "endpointV2Middleware"
    };
  }
});
function validateBucketNameMiddleware({ bucketEndpoint }) {
  return (next) => async (args) => {
    const { input: { Bucket } } = args;
    if (!bucketEndpoint && typeof Bucket === "string" && !validate2(Bucket) && Bucket.indexOf("/") >= 0) {
      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
      err.name = "InvalidBucketName";
      throw err;
    }
    return next({ ...args });
  };
}
var validateBucketNameMiddlewareOptions;
var getValidateBucketNamePlugin;
var init_validate_bucket_name = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js"() {
    init_dist_es46();
    init_bucket_endpoint_middleware();
    validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    getValidateBucketNamePlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(options), validateBucketNameMiddlewareOptions);
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
      }
    });
  }
});
var init_dist_es47 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js"() {
    init_check_content_length_header();
    init_region_redirect_endpoint_middleware();
    init_region_redirect_middleware();
    init_s3_expires_middleware();
    init_s3_express();
    init_s3Configuration();
    init_throw_200_exceptions();
    init_validate_bucket_name();
  }
});
function isValidUserAgentAppId(appId) {
  if (appId === void 0) {
    return true;
  }
  return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig(input) {
  const normalizedAppIdProvider = normalizeProvider2(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
  const { customUserAgent } = input;
  return Object.assign(input, {
    customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
    userAgentAppId: async () => {
      const appId = await normalizedAppIdProvider();
      if (!isValidUserAgentAppId(appId)) {
        const logger2 = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
        if (typeof appId !== "string") {
          logger2?.warn("userAgentAppId must be a string or undefined.");
        } else if (appId.length > 50) {
          logger2?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
        }
      }
      return appId;
    }
  });
}
var DEFAULT_UA_APP_ID;
var init_configurations = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js"() {
    init_dist_es14();
    DEFAULT_UA_APP_ID = void 0;
  }
});
var EndpointCache;
var init_EndpointCache = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/cache/EndpointCache.js"() {
    EndpointCache = class {
      constructor({ size, params }) {
        this.data = /* @__PURE__ */ new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
          this.parameters = params;
        }
      }
      get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
          return resolver();
        }
        if (!this.data.has(key)) {
          if (this.data.size > this.capacity + 10) {
            const keys = this.data.keys();
            let i5 = 0;
            while (true) {
              const { value, done } = keys.next();
              this.data.delete(value);
              if (done || ++i5 > 10) {
                break;
              }
            }
          }
          this.data.set(key, resolver());
        }
        return this.data.get(key);
      }
      size() {
        return this.data.size;
      }
      hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
          return false;
        }
        for (const param of parameters) {
          const val = String(endpointParams[param] ?? "");
          if (val.includes("|;")) {
            return false;
          }
          buffer += val + "|;";
        }
        return buffer;
      }
    };
  }
});
var IP_V4_REGEX;
var isIpAddress;
var init_isIpAddress = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js"() {
    IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
  }
});
var VALID_HOST_LABEL_REGEX;
var isValidHostLabel;
var init_isValidHostLabel = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js"() {
    VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    };
  }
});
var customEndpointFunctions;
var init_customEndpointFunctions = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js"() {
    customEndpointFunctions = {};
  }
});
var debugId;
var init_debugId = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js"() {
    debugId = "endpoints";
  }
});
function toDebugString(input) {
  if (typeof input !== "object" || input == null) {
    return input;
  }
  if ("ref" in input) {
    return `$${toDebugString(input.ref)}`;
  }
  if ("fn" in input) {
    return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
  }
  return JSON.stringify(input, null, 2);
}
var init_toDebugString = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js"() {
  }
});
var init_debug = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/debug/index.js"() {
    init_debugId();
    init_toDebugString();
  }
});
var EndpointError;
var init_EndpointError = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js"() {
    EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
  }
});
var init_EndpointFunctions = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/EndpointFunctions.js"() {
  }
});
var init_EndpointRuleObject3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/RuleSetObject.js"() {
  }
});
var init_TreeRuleObject3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/TreeRuleObject.js"() {
  }
});
var init_shared3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/shared.js"() {
  }
});
var init_types10 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/types/index.js"() {
    init_EndpointError();
    init_EndpointFunctions();
    init_EndpointRuleObject3();
    init_ErrorRuleObject3();
    init_RuleSetObject3();
    init_TreeRuleObject3();
    init_shared3();
  }
});
var booleanEquals;
var init_booleanEquals = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js"() {
    booleanEquals = (value1, value2) => value1 === value2;
  }
});
var getAttrPathList;
var init_getAttrPathList = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js"() {
    init_types10();
    getAttrPathList = (path4) => {
      const parts = path4.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError(`Path: '${path4}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path4}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
  }
});
var getAttr;
var init_getAttr = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js"() {
    init_types10();
    init_getAttrPathList();
    getAttr = (value, path4) => getAttrPathList(path4).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index}' in '${path4}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
  }
});
var isSet;
var init_isSet = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js"() {
    isSet = (value) => value != null;
  }
});
var not;
var init_not = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/not.js"() {
    not = (value) => !value;
  }
});
var init_abort3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/abort.js"() {
  }
});
var HttpAuthLocation3;
var init_auth5 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/auth.js"() {
    (function(HttpAuthLocation5) {
      HttpAuthLocation5["HEADER"] = "header";
      HttpAuthLocation5["QUERY"] = "query";
    })(HttpAuthLocation3 || (HttpAuthLocation3 = {}));
  }
});
var HttpApiKeyAuthLocation3;
var init_HttpApiKeyAuth3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    (function(HttpApiKeyAuthLocation5) {
      HttpApiKeyAuthLocation5["HEADER"] = "header";
      HttpApiKeyAuthLocation5["QUERY"] = "query";
    })(HttpApiKeyAuthLocation3 || (HttpApiKeyAuthLocation3 = {}));
  }
});
var init_HttpAuthScheme3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
  }
});
var init_HttpAuthSchemeProvider3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
  }
});
var init_HttpSigner3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
  }
});
var init_IdentityProviderConfig3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
  }
});
var init_auth6 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/auth/index.js"() {
    init_auth5();
    init_HttpApiKeyAuth3();
    init_HttpAuthScheme3();
    init_HttpAuthSchemeProvider3();
    init_HttpSigner3();
    init_IdentityProviderConfig3();
  }
});
var init_blob_payload_input_types3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
  }
});
var init_checksum4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/checksum.js"() {
  }
});
var init_client6 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/client.js"() {
  }
});
var init_command5 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/command.js"() {
  }
});
var init_config4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/connection/config.js"() {
  }
});
var init_manager3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/connection/manager.js"() {
  }
});
var init_pool3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/connection/pool.js"() {
  }
});
var init_connection3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/connection/index.js"() {
    init_config4();
    init_manager3();
    init_pool3();
  }
});
var init_crypto3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/crypto.js"() {
  }
});
var init_encode3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/encode.js"() {
  }
});
var EndpointURLScheme3;
var init_endpoint3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoint.js"() {
    (function(EndpointURLScheme5) {
      EndpointURLScheme5["HTTP"] = "http";
      EndpointURLScheme5["HTTPS"] = "https";
    })(EndpointURLScheme3 || (EndpointURLScheme3 = {}));
  }
});
var init_EndpointRuleObject4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
  }
});
var init_shared4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
  }
});
var init_TreeRuleObject4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
  }
});
var init_endpoints3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    init_EndpointRuleObject4();
    init_ErrorRuleObject4();
    init_RuleSetObject4();
    init_shared4();
    init_TreeRuleObject4();
  }
});
var init_eventStream3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/eventStream.js"() {
  }
});
var init_defaultClientConfiguration3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
  }
});
var init_defaultExtensionConfiguration5 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions12 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/extensions/index.js"() {
    init_defaultClientConfiguration3();
    init_defaultExtensionConfiguration5();
  }
});
var init_feature_ids3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/feature-ids.js"() {
  }
});
var FieldPosition3;
var init_http3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/http.js"() {
    (function(FieldPosition5) {
      FieldPosition5[FieldPosition5["HEADER"] = 0] = "HEADER";
      FieldPosition5[FieldPosition5["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition3 || (FieldPosition3 = {}));
  }
});
var init_httpHandlerInitialization3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
  }
});
var init_apiKeyIdentity3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
  }
});
var init_awsCredentialIdentity3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
  }
});
var init_identity5 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/identity/identity.js"() {
  }
});
var init_tokenIdentity3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
  }
});
var init_identity6 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/identity/index.js"() {
    init_apiKeyIdentity3();
    init_awsCredentialIdentity3();
    init_identity5();
    init_tokenIdentity3();
  }
});
var init_logger4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/logger.js"() {
  }
});
var init_middleware3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/middleware.js"() {
  }
});
var init_pagination3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/pagination.js"() {
  }
});
var IniSectionType3;
var init_profile3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/profile.js"() {
    (function(IniSectionType5) {
      IniSectionType5["PROFILE"] = "profile";
      IniSectionType5["SSO_SESSION"] = "sso-session";
      IniSectionType5["SERVICES"] = "services";
    })(IniSectionType3 || (IniSectionType3 = {}));
  }
});
var init_response3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/response.js"() {
  }
});
var init_retry3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/retry.js"() {
  }
});
var init_schema4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/schema/schema.js"() {
  }
});
var init_sentinels4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/schema/sentinels.js"() {
  }
});
var init_serde4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/serde.js"() {
  }
});
var init_shapes3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/shapes.js"() {
  }
});
var init_signature3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/signature.js"() {
  }
});
var init_stream4 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/stream.js"() {
  }
});
var init_streaming_blob_common_types3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
  }
});
var init_streaming_blob_payload_input_types3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
  }
});
var init_streaming_blob_payload_output_types3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
  }
});
var RequestHandlerProtocol3;
var init_transfer3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/transfer.js"() {
    (function(RequestHandlerProtocol5) {
      RequestHandlerProtocol5["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol5["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol5["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol3 || (RequestHandlerProtocol3 = {}));
  }
});
var init_client_payload_blob_type_narrow3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
  }
});
var init_mutable3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/transform/mutable.js"() {
  }
});
var init_no_undefined3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
  }
});
var init_type_transform3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
  }
});
var init_uri3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/uri.js"() {
  }
});
var init_util7 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/util.js"() {
  }
});
var init_waiter3 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/waiter.js"() {
  }
});
var init_dist_es48 = __esm({
  "node_modules/@smithy/util-endpoints/node_modules/@smithy/types/dist-es/index.js"() {
    init_abort3();
    init_auth6();
    init_blob_payload_input_types3();
    init_checksum4();
    init_client6();
    init_command5();
    init_connection3();
    init_crypto3();
    init_encode3();
    init_endpoint3();
    init_endpoints3();
    init_eventStream3();
    init_extensions12();
    init_feature_ids3();
    init_http3();
    init_httpHandlerInitialization3();
    init_identity6();
    init_logger4();
    init_middleware3();
    init_pagination3();
    init_profile3();
    init_response3();
    init_retry3();
    init_schema4();
    init_sentinels4();
    init_serde4();
    init_shapes3();
    init_signature3();
    init_stream4();
    init_streaming_blob_common_types3();
    init_streaming_blob_payload_input_types3();
    init_streaming_blob_payload_output_types3();
    init_transfer3();
    init_client_payload_blob_type_narrow3();
    init_mutable3();
    init_no_undefined3();
    init_type_transform3();
    init_uri3();
    init_util7();
    init_waiter3();
  }
});
var DEFAULT_PORTS;
var parseURL;
var init_parseURL = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js"() {
    init_dist_es48();
    init_isIpAddress();
    DEFAULT_PORTS = {
      [EndpointURLScheme3.HTTP]: 80,
      [EndpointURLScheme3.HTTPS]: 443
    };
    parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path: path4 = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path4}`);
            url.search = Object.entries(query).map(([k5, v6]) => `${k5}=${v6}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error2) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(EndpointURLScheme3).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
  }
});
var stringEquals;
var init_stringEquals = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js"() {
    stringEquals = (value1, value2) => value1 === value2;
  }
});
var substring;
var init_substring = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/substring.js"() {
    substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
  }
});
var uriEncode;
var init_uriEncode = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js"() {
    uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`);
  }
});
var init_lib = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/lib/index.js"() {
    init_booleanEquals();
    init_getAttr();
    init_isSet();
    init_isValidHostLabel();
    init_not();
    init_parseURL();
    init_stringEquals();
    init_substring();
    init_uriEncode();
  }
});
var endpointFunctions;
var init_endpointFunctions = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js"() {
    init_lib();
    endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
  }
});
var evaluateTemplate;
var init_evaluateTemplate = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js"() {
    init_lib();
    evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
  }
});
var getReferenceValue;
var init_getReferenceValue = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js"() {
    getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
  }
});
var evaluateExpression;
var init_evaluateExpression = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js"() {
    init_types10();
    init_callFunction();
    init_evaluateTemplate();
    init_getReferenceValue();
    evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
  }
});
var callFunction;
var init_callFunction = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js"() {
    init_customEndpointFunctions();
    init_endpointFunctions();
    init_evaluateExpression();
    callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    };
  }
});
var evaluateCondition;
var init_evaluateCondition = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js"() {
    init_debug();
    init_types10();
    init_callFunction();
    evaluateCondition = ({ assign, ...fnArgs }, options) => {
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
  }
});
var evaluateConditions;
var init_evaluateConditions = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js"() {
    init_debug();
    init_evaluateCondition();
    evaluateConditions = (conditions = [], options) => {
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
  }
});
var getEndpointHeaders;
var init_getEndpointHeaders = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js"() {
    init_types10();
    init_evaluateExpression();
    getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
  }
});
var getEndpointProperty;
var init_getEndpointProperty = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js"() {
    init_types10();
    init_evaluateTemplate();
    init_getEndpointProperties();
    getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
  }
});
var getEndpointProperties;
var init_getEndpointProperties = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js"() {
    init_getEndpointProperty();
    getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: getEndpointProperty(propertyVal, options)
    }), {});
  }
});
var getEndpointUrl;
var init_getEndpointUrl = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js"() {
    init_types10();
    init_evaluateExpression();
    getEndpointUrl = (endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error2) {
          console.error(`Failed to construct URL with ${expression}`, error2);
          throw error2;
        }
      }
      throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
  }
});
var evaluateEndpointRule;
var init_evaluateEndpointRule = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js"() {
    init_debug();
    init_evaluateConditions();
    init_getEndpointHeaders();
    init_getEndpointProperties();
    init_getEndpointUrl();
    evaluateEndpointRule = (endpointRule, options) => {
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    };
  }
});
var evaluateErrorRule;
var init_evaluateErrorRule = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js"() {
    init_types10();
    init_evaluateConditions();
    init_evaluateExpression();
    evaluateErrorRule = (errorRule, options) => {
      const { conditions, error: error2 } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError(evaluateExpression(error2, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
  }
});
var evaluateTreeRule;
var init_evaluateTreeRule = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js"() {
    init_evaluateConditions();
    init_evaluateRules();
    evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
  }
});
var evaluateRules;
var init_evaluateRules = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js"() {
    init_types10();
    init_evaluateEndpointRule();
    init_evaluateErrorRule();
    init_evaluateTreeRule();
    evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError(`Rules evaluation failed`);
    };
  }
});
var init_utils3 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/utils/index.js"() {
    init_customEndpointFunctions();
    init_evaluateRules();
  }
});
var resolveEndpoint;
var init_resolveEndpoint = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js"() {
    init_debug();
    init_types10();
    init_utils3();
    resolveEndpoint = (ruleSetObject, options) => {
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v6]) => v6.default != null).map(([k5, v6]) => [k5, v6.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v6]) => v6.required).map(([k5]) => k5);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    };
  }
});
var init_dist_es49 = __esm({
  "node_modules/@smithy/util-endpoints/dist-es/index.js"() {
    init_EndpointCache();
    init_isIpAddress();
    init_isValidHostLabel();
    init_customEndpointFunctions();
    init_resolveEndpoint();
    init_types10();
  }
});
var init_isIpAddress2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js"() {
    init_dist_es49();
  }
});
var isVirtualHostableS3Bucket;
var init_isVirtualHostableS3Bucket = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js"() {
    init_dist_es49();
    init_isIpAddress2();
    isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!isValidHostLabel(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if (isIpAddress(value)) {
        return false;
      }
      return true;
    };
  }
});
var ARN_DELIMITER;
var RESOURCE_DELIMITER;
var parseArn;
var init_parseArn = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js"() {
    ARN_DELIMITER = ":";
    RESOURCE_DELIMITER = "/";
    parseArn = (value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6)
        return null;
      const [arn, partition3, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition3 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition3,
        service,
        region,
        accountId,
        resourceId
      };
    };
  }
});
var partitions_default;
var init_partitions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json"() {
    partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-east-2": {
            description: "Asia Pacific (Taipei)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "ap-southeast-6": {
            description: "Asia Pacific (New Zealand)"
          },
          "ap-southeast-7": {
            description: "Asia Pacific (Thailand)"
          },
          "aws-global": {
            description: "aws global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "mx-central-1": {
            description: "Mexico (Central)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "aws-cn global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-eusc",
        outputs: {
          dnsSuffix: "amazonaws.eu",
          dualStackDnsSuffix: "api.amazonwebservices.eu",
          implicitGlobalRegion: "eusc-de-east-1",
          name: "aws-eusc",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
        regions: {
          "eusc-de-east-1": {
            description: "EU (Germany)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "api.aws.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "aws-iso global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "api.aws.scloud",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "aws-iso-b global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "api.cloud-aws.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-e-global": {
            description: "aws-iso-e global region"
          },
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "api.aws.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-f-global": {
            description: "aws-iso-f global region"
          },
          "us-isof-east-1": {
            description: "US ISOF EAST"
          },
          "us-isof-south-1": {
            description: "US ISOF SOUTH"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "aws-us-gov global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }],
      version: "1.1"
    };
  }
});
var selectedPartitionsInfo;
var selectedUserAgentPrefix;
var partition;
var getUserAgentPrefix;
var init_partition = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"() {
    init_partitions();
    selectedPartitionsInfo = partitions_default;
    selectedUserAgentPrefix = "";
    partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition3 of partitions) {
        const { regions, outputs } = partition3;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition3 of partitions) {
        const { regionRegex, outputs } = partition3;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition3) => partition3.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    getUserAgentPrefix = () => selectedUserAgentPrefix;
  }
});
var awsEndpointFunctions;
var init_aws = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js"() {
    init_dist_es49();
    init_isVirtualHostableS3Bucket();
    init_parseArn();
    init_partition();
    awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});
function parseQueryString(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
var init_dist_es50 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/querystring-parser/dist-es/index.js"() {
  }
});
var parseUrl;
var init_dist_es51 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/url-parser/dist-es/index.js"() {
    init_dist_es50();
    parseUrl = (url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = parseQueryString(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
  }
});
var init_resolveDefaultAwsRegionalEndpointsConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/resolveDefaultAwsRegionalEndpointsConfig.js"() {
  }
});
var init_resolveEndpoint2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js"() {
  }
});
var init_EndpointError2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js"() {
  }
});
var init_EndpointRuleObject5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js"() {
  }
});
var init_TreeRuleObject5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js"() {
  }
});
var init_shared5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js"() {
  }
});
var init_types11 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js"() {
    init_EndpointError2();
    init_EndpointRuleObject5();
    init_ErrorRuleObject5();
    init_RuleSetObject5();
    init_TreeRuleObject5();
    init_shared5();
  }
});
var init_dist_es52 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-endpoints/dist-es/index.js"() {
    init_aws();
    init_partition();
    init_isIpAddress2();
    init_resolveDefaultAwsRegionalEndpointsConfig();
    init_resolveEndpoint2();
    init_types11();
  }
});
async function checkFeatures(context, config2, args) {
  const request3 = args.request;
  if (request3?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
    setFeature(context, "PROTOCOL_RPC_V2_CBOR", "M");
  }
  if (typeof config2.retryStrategy === "function") {
    const retryStrategy = await config2.retryStrategy();
    if (typeof retryStrategy.acquireInitialRetryToken === "function") {
      if (retryStrategy.constructor?.name?.includes("Adaptive")) {
        setFeature(context, "RETRY_MODE_ADAPTIVE", "F");
      } else {
        setFeature(context, "RETRY_MODE_STANDARD", "E");
      }
    } else {
      setFeature(context, "RETRY_MODE_LEGACY", "D");
    }
  }
  if (typeof config2.accountIdEndpointMode === "function") {
    const endpointV2 = context.endpointV2;
    if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
      setFeature(context, "ACCOUNT_ID_ENDPOINT", "O");
    }
    switch (await config2.accountIdEndpointMode?.()) {
      case "disabled":
        setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
        break;
      case "preferred":
        setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
        break;
      case "required":
        setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
        break;
    }
  }
  const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
  if (identity?.$source) {
    const credentials = identity;
    if (credentials.accountId) {
      setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
    }
    for (const [key, value] of Object.entries(credentials.$source ?? {})) {
      setFeature(context, key, value);
    }
  }
}
var ACCOUNT_ID_ENDPOINT_REGEX;
var init_check_features = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js"() {
    init_dist_es25();
    ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
  }
});
var USER_AGENT;
var X_AMZ_USER_AGENT;
var SPACE;
var UA_NAME_SEPARATOR;
var UA_NAME_ESCAPE_REGEX;
var UA_VALUE_ESCAPE_REGEX;
var UA_ESCAPE_CHAR;
var init_constants6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js"() {
    USER_AGENT = "user-agent";
    X_AMZ_USER_AGENT = "x-amz-user-agent";
    SPACE = " ";
    UA_NAME_SEPARATOR = "/";
    UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    UA_ESCAPE_CHAR = "-";
  }
});
function encodeFeatures(features) {
  let buffer = "";
  for (const key in features) {
    const val = features[key];
    if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
      if (buffer.length) {
        buffer += "," + val;
      } else {
        buffer += val;
      }
      continue;
    }
    break;
  }
  return buffer;
}
var BYTE_LIMIT;
var init_encode_features = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js"() {
    BYTE_LIMIT = 1024;
  }
});
var userAgentMiddleware;
var escapeUserAgent;
var getUserAgentMiddlewareOptions;
var getUserAgentPlugin;
var init_user_agent_middleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js"() {
    init_dist_es52();
    init_dist_es38();
    init_check_features();
    init_constants6();
    init_encode_features();
    userAgentMiddleware = (options) => (next, context) => async (args) => {
      const { request: request3 } = args;
      if (!HttpRequest6.isInstance(request3)) {
        return next(args);
      }
      const { headers } = request3;
      const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
      const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = getUserAgentPrefix();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request: request3
      });
    };
    escapeUserAgent = (userAgentPair) => {
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    getUserAgentPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config2), getUserAgentMiddlewareOptions);
      }
    });
  }
});
var init_dist_es53 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js"() {
    init_configurations();
    init_user_agent_middleware();
  }
});
var ENV_USE_DUALSTACK_ENDPOINT;
var CONFIG_USE_DUALSTACK_ENDPOINT;
var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseDualstackEndpointConfigOptions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"() {
    init_dist_es44();
    ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => booleanSelector(env3, ENV_USE_DUALSTACK_ENDPOINT, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType2.CONFIG),
      default: false
    };
  }
});
var ENV_USE_FIPS_ENDPOINT;
var CONFIG_USE_FIPS_ENDPOINT;
var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseFipsEndpointConfigOptions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"() {
    init_dist_es44();
    ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => booleanSelector(env3, ENV_USE_FIPS_ENDPOINT, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType2.CONFIG),
      default: false
    };
  }
});
var init_resolveCustomEndpointsConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js"() {
  }
});
var init_resolveEndpointsConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"() {
  }
});
var init_endpointsConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js"() {
    init_NodeUseDualstackEndpointConfigOptions();
    init_NodeUseFipsEndpointConfigOptions();
    init_resolveCustomEndpointsConfig();
    init_resolveEndpointsConfig();
  }
});
var REGION_ENV_NAME;
var REGION_INI_NAME;
var NODE_REGION_CONFIG_OPTIONS;
var NODE_REGION_CONFIG_FILE_OPTIONS;
var init_config5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js"() {
    REGION_ENV_NAME = "AWS_REGION";
    REGION_INI_NAME = "region";
    NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => env3[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});
var isFipsRegion;
var init_isFipsRegion = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
  }
});
var getRealRegion;
var init_getRealRegion = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    init_isFipsRegion();
    getRealRegion = (region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
  }
});
var resolveRegionConfig;
var init_resolveRegionConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    init_getRealRegion();
    init_isFipsRegion();
    resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return Object.assign(input, {
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      });
    };
  }
});
var init_regionConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js"() {
    init_config5();
    init_resolveRegionConfig();
  }
});
var init_PartitionHash = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js"() {
  }
});
var init_RegionHash = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js"() {
  }
});
var init_getRegionInfo = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"() {
  }
});
var init_regionInfo = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js"() {
    init_PartitionHash();
    init_RegionHash();
    init_getRegionInfo();
  }
});
var init_dist_es54 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/config-resolver/dist-es/index.js"() {
    init_endpointsConfig();
    init_regionConfig();
    init_regionInfo();
  }
});
var resolveEventStreamSerdeConfig;
var init_EventStreamSerdeConfig = __esm({
  "node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js"() {
    resolveEventStreamSerdeConfig = (input) => Object.assign(input, {
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });
  }
});
var init_dist_es55 = __esm({
  "node_modules/@smithy/eventstream-serde-config-resolver/dist-es/index.js"() {
    init_EventStreamSerdeConfig();
  }
});
function contentLengthMiddleware(bodyLengthChecker) {
  return (next) => async (args) => {
    const request3 = args.request;
    if (HttpRequest6.isInstance(request3)) {
      const { body, headers } = request3;
      if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER2) === -1) {
        try {
          const length = bodyLengthChecker(body);
          request3.headers = {
            ...request3.headers,
            [CONTENT_LENGTH_HEADER2]: String(length)
          };
        } catch (error2) {
        }
      }
    }
    return next({
      ...args,
      request: request3
    });
  };
}
var CONTENT_LENGTH_HEADER2;
var contentLengthMiddlewareOptions;
var getContentLengthPlugin;
var init_dist_es56 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-content-length/dist-es/index.js"() {
    init_dist_es38();
    CONTENT_LENGTH_HEADER2 = "content-length";
    contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    });
  }
});
var resolveParamsForS3;
var DOMAIN_PATTERN;
var IP_ADDRESS_PATTERN;
var DOTS_PATTERN;
var isDnsCompatibleBucketName;
var isArnBucketName;
var init_s3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"() {
    resolveParamsForS3 = async (endpointParams) => {
      const bucket = endpointParams?.Bucket || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    DOTS_PATTERN = /\.\./;
    isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    isArnBucketName = (bucketName) => {
      const [arn, partition3, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition3 && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    };
  }
});
var init_service_customizations = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js"() {
    init_s3();
  }
});
var createConfigValueProvider;
var init_createConfigValueProvider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"() {
    createConfigValueProvider = (configKey, canonicalEndpointParamKey, config2) => {
      const configProvider = async () => {
        const configValue = config2[configKey] ?? config2[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.accountId ?? credentials?.AccountId;
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          if (config2.isCustomEndpoint === false) {
            return void 0;
          }
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path: path4 } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path4}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
  }
});
function getSelectorName(functionString) {
  try {
    const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
    constants.delete("CONFIG");
    constants.delete("CONFIG_PREFIX_SEPARATOR");
    constants.delete("ENV");
    return [...constants].join(", ");
  } catch (e5) {
    return functionString;
  }
}
var init_getSelectorName = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js"() {
  }
});
var fromEnv;
var init_fromEnv = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js"() {
    init_dist_es15();
    init_getSelectorName();
    fromEnv = (envVarSelector, options) => async () => {
      try {
        const config2 = envVarSelector(process.env, options);
        if (config2 === void 0) {
          throw new Error();
        }
        return config2;
      } catch (e5) {
        throw new CredentialsProviderError(e5.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger: options?.logger });
      }
    };
  }
});
var homeDirCache;
var getHomeDirCacheKey;
var getHomeDir;
var init_getHomeDir = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js"() {
    homeDirCache = {};
    getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = homedir();
      return homeDirCache[homeDirCacheKey];
    };
  }
});
var ENV_PROFILE;
var DEFAULT_PROFILE;
var getProfileName;
var init_getProfileName = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js"() {
    ENV_PROFILE = "AWS_PROFILE";
    DEFAULT_PROFILE = "default";
    getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;
  }
});
var getSSOTokenFilepath;
var init_getSSOTokenFilepath = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js"() {
    init_getHomeDir();
    getSSOTokenFilepath = (id) => {
      const hasher = createHash("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return join(getHomeDir(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
  }
});
var readFile;
var getSSOTokenFromFile;
var init_getSSOTokenFromFile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"() {
    init_getSSOTokenFilepath();
    ({ readFile } = fsPromises);
    getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = getSSOTokenFilepath(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
  }
});
var getConfigData;
var init_getConfigData = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js"() {
    init_dist_es37();
    init_loadSharedConfigFiles();
    getConfigData = (data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(IniSectionType2).includes(key.substring(0, indexOfSeparator));
    }).reduce((acc, [key, value]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      const updatedKey = key.substring(0, indexOfSeparator) === IniSectionType2.PROFILE ? key.substring(indexOfSeparator + 1) : key;
      acc[updatedKey] = value;
      return acc;
    }, {
      ...data.default && { default: data.default }
    });
  }
});
var ENV_CONFIG_PATH;
var getConfigFilepath;
var init_getConfigFilepath = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js"() {
    init_getHomeDir();
    ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || join2(getHomeDir(), ".aws", "config");
  }
});
var ENV_CREDENTIALS_PATH;
var getCredentialsFilepath;
var init_getCredentialsFilepath = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js"() {
    init_getHomeDir();
    ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || join3(getHomeDir(), ".aws", "credentials");
  }
});
var prefixKeyRegex;
var profileNameBlockList;
var parseIni;
var init_parseIni = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js"() {
    init_dist_es37();
    init_loadSharedConfigFiles();
    prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    profileNameBlockList = ["__proto__", "profile __proto__"];
    parseIni = (iniData) => {
      const map3 = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(IniSectionType2).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map3[currentSection] = map3[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map3[currentSection][key] = value;
            }
          }
        }
      }
      return map3;
    };
  }
});
var readFile2;
var filePromisesHash;
var slurpFile;
var init_slurpFile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js"() {
    ({ readFile: readFile2 } = fsPromises2);
    filePromisesHash = {};
    slurpFile = (path4, options) => {
      if (!filePromisesHash[path4] || options?.ignoreCache) {
        filePromisesHash[path4] = readFile2(path4, "utf8");
      }
      return filePromisesHash[path4];
    };
  }
});
var swallowError;
var CONFIG_PREFIX_SEPARATOR;
var loadSharedConfigFiles;
var init_loadSharedConfigFiles = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js"() {
    init_getConfigData();
    init_getConfigFilepath();
    init_getCredentialsFilepath();
    init_getHomeDir();
    init_parseIni();
    init_slurpFile();
    swallowError = () => ({});
    CONFIG_PREFIX_SEPARATOR = ".";
    loadSharedConfigFiles = async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = getHomeDir();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = join4(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = join4(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        slurpFile(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        slurpFile(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
  }
});
var getSsoSessionData;
var init_getSsoSessionData = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js"() {
    init_dist_es37();
    init_loadSharedConfigFiles();
    getSsoSessionData = (data) => Object.entries(data).filter(([key]) => key.startsWith(IniSectionType2.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {});
  }
});
var swallowError2;
var loadSsoSessionData;
var init_loadSsoSessionData = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js"() {
    init_getConfigFilepath();
    init_getSsoSessionData();
    init_parseIni();
    init_slurpFile();
    swallowError2 = () => ({});
    loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2);
  }
});
var mergeConfigFiles;
var init_mergeConfigFiles = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js"() {
    mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
  }
});
var parseKnownFiles;
var init_parseKnownFiles = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js"() {
    init_loadSharedConfigFiles();
    init_mergeConfigFiles();
    parseKnownFiles = async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
  }
});
var init_types12 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/types.js"() {
  }
});
var init_dist_es57 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js"() {
    init_getHomeDir();
    init_getProfileName();
    init_getSSOTokenFilepath();
    init_getSSOTokenFromFile();
    init_loadSharedConfigFiles();
    init_loadSsoSessionData();
    init_parseKnownFiles();
    init_types12();
  }
});
var fromSharedConfigFiles;
var init_fromSharedConfigFiles = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js"() {
    init_dist_es15();
    init_dist_es57();
    init_getSelectorName();
    fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = getProfileName(init);
      const { configFile, credentialsFile } = await loadSharedConfigFiles(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e5) {
        throw new CredentialsProviderError(e5.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
      }
    };
  }
});
var isFunction;
var fromStatic2;
var init_fromStatic2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js"() {
    init_dist_es15();
    isFunction = (func) => typeof func === "function";
    fromStatic2 = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : fromStatic(defaultValue);
  }
});
var loadConfig2;
var init_configLoader = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/configLoader.js"() {
    init_dist_es15();
    init_fromEnv();
    init_fromSharedConfigFiles();
    init_fromStatic2();
    loadConfig2 = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => {
      const { signingName, logger: logger2 } = configuration;
      const envOptions = { signingName, logger: logger2 };
      return memoize(chain(fromEnv(environmentVariableSelector, envOptions), fromSharedConfigFiles(configFileSelector, configuration), fromStatic2(defaultValue)));
    };
  }
});
var init_dist_es58 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-config-provider/dist-es/index.js"() {
    init_configLoader();
  }
});
var ENV_ENDPOINT_URL;
var CONFIG_ENDPOINT_URL;
var getEndpointUrlConfig;
var init_getEndpointUrlConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js"() {
    init_dist_es57();
    ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    CONFIG_ENDPOINT_URL = "endpoint_url";
    getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env3) => {
        const serviceSuffixParts = serviceId.split(" ").map((w5) => w5.toUpperCase());
        const serviceEndpointUrl = env3[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env3[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config2) => {
        if (config2 && profile.services) {
          const servicesSection = config2[["services", profile.services].join(CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w5) => w5.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
  }
});
var getEndpointFromConfig;
var init_getEndpointFromConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js"() {
    init_dist_es58();
    init_getEndpointUrlConfig();
    getEndpointFromConfig = async (serviceId) => loadConfig2(getEndpointUrlConfig(serviceId ?? ""))();
  }
});
var toEndpointV1;
var init_toEndpointV1 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js"() {
    init_dist_es51();
    toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return parseUrl(endpoint.url);
        }
        return endpoint;
      }
      return parseUrl(endpoint);
    };
  }
});
var getEndpointFromInstructions;
var resolveParams;
var init_getEndpointFromInstructions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"() {
    init_service_customizations();
    init_createConfigValueProvider();
    init_getEndpointFromConfig();
    init_toEndpointV1();
    getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.isCustomEndpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
          clientConfig.isCustomEndpoint = true;
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      const endpointParams = {};
      const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    };
  }
});
var init_adaptors = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js"() {
    init_getEndpointFromInstructions();
    init_toEndpointV1();
  }
});
var endpointMiddleware;
var init_endpointMiddleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"() {
    init_dist_es14();
    init_dist_es5();
    init_getEndpointFromInstructions();
    endpointMiddleware = ({ config: config2, instructions }) => {
      return (next, context) => async (args) => {
        if (config2.isCustomEndpoint) {
          setFeature2(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config2 }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = getSmithyContext(context);
          const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
              signing_region: authScheme.signingRegion,
              signingRegion: authScheme.signingRegion,
              signing_service: authScheme.signingName,
              signingName: authScheme.signingName,
              signingRegionSet: authScheme.signingRegionSet
            }, authScheme.properties);
          }
        }
        return next({
          ...args
        });
      };
    };
  }
});
var deserializerMiddleware;
var findHeader;
var init_deserializerMiddleware2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
    init_dist_es38();
    deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error2) {
        Object.defineProperty(error2, "$response", {
          value: response
        });
        if (!("$metadata" in error2)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          try {
            error2.message += "\n  " + hint;
          } catch (e5) {
            if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(hint);
            } else {
              context.logger?.warn?.(hint);
            }
          }
          if (typeof error2.$responseBodyText !== "undefined") {
            if (error2.$response) {
              error2.$response.body = error2.$responseBodyText;
            }
          }
          try {
            if (HttpResponse2.isInstance(response)) {
              const { headers = {} } = response;
              const headerEntries = Object.entries(headers);
              error2.$metadata = {
                httpStatusCode: response.statusCode,
                requestId: findHeader(/^x-[\w-]+-request-?id$/, headerEntries),
                extendedRequestId: findHeader(/^x-[\w-]+-id-2$/, headerEntries),
                cfId: findHeader(/^x-[\w-]+-cf-id$/, headerEntries)
              };
            }
          } catch (e5) {
          }
        }
        throw error2;
      }
    };
    findHeader = (pattern, headers) => {
      return (headers.find(([k5]) => {
        return k5.match(pattern);
      }) || [void 0, void 0])[1];
    };
  }
});
var serializerMiddleware;
var init_serializerMiddleware2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
    serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const endpointConfig = options;
      const endpoint = context.endpointV2?.url && endpointConfig.urlParser ? async () => endpointConfig.urlParser(context.endpointV2.url) : endpointConfig.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request3 = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request: request3
      });
    };
  }
});
function getSerdePlugin(config2, serializer, deserializer) {
  return {
    applyToStack: (commandStack) => {
      commandStack.add(deserializerMiddleware(config2, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config2, serializer), serializerMiddlewareOption2);
    }
  };
}
var deserializerMiddlewareOption;
var serializerMiddlewareOption2;
var init_serdePlugin2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    init_deserializerMiddleware2();
    init_serializerMiddleware2();
    deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    serializerMiddlewareOption2 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
  }
});
var init_dist_es59 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    init_deserializerMiddleware2();
    init_serdePlugin2();
    init_serializerMiddleware2();
  }
});
var endpointMiddlewareOptions;
var getEndpointPlugin;
var init_getEndpointPlugin = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js"() {
    init_dist_es59();
    init_endpointMiddleware();
    endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption2.name
    };
    getEndpointPlugin = (config2, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
          config: config2,
          instructions
        }), endpointMiddlewareOptions);
      }
    });
  }
});
var resolveEndpointConfig;
var init_resolveEndpointConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"() {
    init_dist_es5();
    init_getEndpointFromConfig();
    init_toEndpointV1();
    resolveEndpointConfig = (input) => {
      const tls = input.tls ?? true;
      const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: normalizeProvider(useDualstackEndpoint ?? false),
        useFipsEndpoint: normalizeProvider(useFipsEndpoint ?? false)
      });
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = getEndpointFromConfig(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    };
  }
});
var init_resolveEndpointRequiredConfig = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointRequiredConfig.js"() {
  }
});
var init_types13 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/types.js"() {
  }
});
var init_dist_es60 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-endpoint/dist-es/index.js"() {
    init_adaptors();
    init_endpointMiddleware();
    init_getEndpointPlugin();
    init_resolveEndpointConfig();
    init_resolveEndpointRequiredConfig();
    init_types13();
  }
});
var RETRY_MODES;
var DEFAULT_MAX_ATTEMPTS;
var DEFAULT_RETRY_MODE;
var init_config6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/config.js"() {
    (function(RETRY_MODES3) {
      RETRY_MODES3["STANDARD"] = "standard";
      RETRY_MODES3["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES || (RETRY_MODES = {}));
    DEFAULT_MAX_ATTEMPTS = 3;
    DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});
var THROTTLING_ERROR_CODES;
var TRANSIENT_ERROR_CODES;
var TRANSIENT_ERROR_STATUS_CODES;
var NODEJS_TIMEOUT_ERROR_CODES;
var NODEJS_NETWORK_ERROR_CODES;
var init_constants7 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/service-error-classification/dist-es/constants.js"() {
    THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    NODEJS_NETWORK_ERROR_CODES = ["EHOSTUNREACH", "ENETUNREACH", "ENOTFOUND"];
  }
});
var isClockSkewCorrectedError;
var isBrowserNetworkError;
var isThrottlingError;
var isTransientError;
var isServerError;
var init_dist_es61 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/service-error-classification/dist-es/index.js"() {
    init_constants7();
    isClockSkewCorrectedError = (error2) => error2.$metadata?.clockSkewCorrected;
    isBrowserNetworkError = (error2) => {
      const errorMessages = /* @__PURE__ */ new Set([
        "Failed to fetch",
        "NetworkError when attempting to fetch resource",
        "The Internet connection appears to be offline",
        "Load failed",
        "Network request failed"
      ]);
      const isValid = error2 && error2 instanceof TypeError;
      if (!isValid) {
        return false;
      }
      return errorMessages.has(error2.message);
    };
    isThrottlingError = (error2) => error2.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error2.name) || error2.$retryable?.throttling == true;
    isTransientError = (error2, depth = 0) => isClockSkewCorrectedError(error2) || TRANSIENT_ERROR_CODES.includes(error2.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error2?.code || "") || NODEJS_NETWORK_ERROR_CODES.includes(error2?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error2.$metadata?.httpStatusCode || 0) || isBrowserNetworkError(error2) || error2.cause !== void 0 && depth <= 10 && isTransientError(error2.cause, depth + 1);
    isServerError = (error2) => {
      if (error2.$metadata?.httpStatusCode !== void 0) {
        const statusCode = error2.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error2)) {
          return true;
        }
        return false;
      }
      return false;
    };
  }
});
var DefaultRateLimiter;
var init_DefaultRateLimiter = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js"() {
    init_dist_es61();
    DefaultRateLimiter = class _DefaultRateLimiter {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (isThrottlingError(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t5 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t5 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    DefaultRateLimiter.setTimeoutFn = setTimeout;
  }
});
var DEFAULT_RETRY_DELAY_BASE;
var MAXIMUM_RETRY_DELAY;
var THROTTLING_RETRY_DELAY_BASE;
var INITIAL_RETRY_TOKENS;
var RETRY_COST;
var TIMEOUT_RETRY_COST;
var NO_RETRY_INCREMENT;
var INVOCATION_ID_HEADER;
var REQUEST_HEADER;
var init_constants8 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/constants.js"() {
    DEFAULT_RETRY_DELAY_BASE = 100;
    MAXIMUM_RETRY_DELAY = 20 * 1e3;
    THROTTLING_RETRY_DELAY_BASE = 500;
    INITIAL_RETRY_TOKENS = 500;
    RETRY_COST = 5;
    TIMEOUT_RETRY_COST = 10;
    NO_RETRY_INCREMENT = 1;
    INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    REQUEST_HEADER = "amz-sdk-request";
  }
});
var getDefaultRetryBackoffStrategy;
var init_defaultRetryBackoffStrategy = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js"() {
    init_constants8();
    getDefaultRetryBackoffStrategy = () => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
  }
});
var createDefaultRetryToken;
var init_defaultRetryToken = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js"() {
    init_constants8();
    createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
  }
});
var StandardRetryStrategy;
var init_StandardRetryStrategy = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"() {
    init_config6();
    init_constants8();
    init_defaultRetryBackoffStrategy();
    init_defaultRetryToken();
    StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error2) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
  }
});
var AdaptiveRetryStrategy;
var init_AdaptiveRetryStrategy = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js"() {
    init_config6();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
  }
});
var init_ConfiguredRetryStrategy = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js"() {
  }
});
var init_types14 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/types.js"() {
  }
});
var init_dist_es62 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-retry/dist-es/index.js"() {
    init_AdaptiveRetryStrategy();
    init_ConfiguredRetryStrategy();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    init_config6();
    init_constants8();
    init_types14();
  }
});
var init_delayDecider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js"() {
  }
});
var init_retryDecider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/retryDecider.js"() {
  }
});
var asSdkError;
var init_util8 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/util.js"() {
    asSdkError = (error2) => {
      if (error2 instanceof Error)
        return error2;
      if (error2 instanceof Object)
        return Object.assign(new Error(), error2);
      if (typeof error2 === "string")
        return new Error(error2);
      return new Error(`AWS SDK error wrapper for ${error2}`);
    };
  }
});
var init_StandardRetryStrategy2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js"() {
  }
});
var init_AdaptiveRetryStrategy2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js"() {
  }
});
var ENV_MAX_ATTEMPTS;
var CONFIG_MAX_ATTEMPTS;
var NODE_MAX_ATTEMPT_CONFIG_OPTIONS;
var resolveRetryConfig;
var ENV_RETRY_MODE;
var CONFIG_RETRY_MODE;
var NODE_RETRY_MODE_CONFIG_OPTIONS;
var init_configurations2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/configurations.js"() {
    init_dist_es5();
    init_dist_es62();
    ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    CONFIG_MAX_ATTEMPTS = "max_attempts";
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => {
        const value = env3[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: DEFAULT_MAX_ATTEMPTS
    };
    resolveRetryConfig = (input) => {
      const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
      const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS);
      return Object.assign(input, {
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await normalizeProvider(_retryMode)();
          if (retryMode === RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy(maxAttempts);
        }
      });
    };
    ENV_RETRY_MODE = "AWS_RETRY_MODE";
    CONFIG_RETRY_MODE = "retry_mode";
    NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => env3[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: DEFAULT_RETRY_MODE
    };
  }
});
var init_omitRetryHeadersMiddleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js"() {
  }
});
var getAllAliases;
var getMiddlewareNameWithAliases;
var constructStack;
var stepWeights;
var priorityWeights;
var init_MiddlewareStack = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"() {
    getAllAliases = (name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    };
    getMiddlewareNameWithAliases = (name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    };
    constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a5, b5) => stepWeights[b5.step] - stepWeights[a5.step] || priorityWeights[b5.priority || "normal"] - priorityWeights[a5.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug2 = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug2) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a5) => a5 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a5) => a5 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler3, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler3 = middleware(handler3, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler3;
        }
      };
      return stack;
    };
    stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});
var init_dist_es63 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-stack/dist-es/index.js"() {
    init_MiddlewareStack();
  }
});
var Client;
var init_client7 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/client.js"() {
    init_dist_es63();
    Client = class {
      constructor(config2) {
        this.config = config2;
        this.middlewareStack = constructStack();
      }
      send(command, optionsOrCb, cb2) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb2;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler3;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler3 = handlers.get(command.constructor);
          } else {
            handler3 = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler3);
          }
        } else {
          delete this.handlers;
          handler3 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler3(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler3(command).then((result) => result.output);
        }
      }
      destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
      }
    };
  }
});
var init_collect_stream_body4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
    init_protocols();
  }
});
function schemaLogFilter(schema, data) {
  if (data == null) {
    return data;
  }
  const ns = NormalizedSchema.of(schema);
  if (ns.getMergedTraits().sensitive) {
    return SENSITIVE_STRING;
  }
  if (ns.isListSchema()) {
    const isSensitive = !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING;
    }
  } else if (ns.isMapSchema()) {
    const isSensitive = !!ns.getKeySchema().getMergedTraits().sensitive || !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING;
    }
  } else if (ns.isStructSchema() && typeof data === "object") {
    const object = data;
    const newObject = {};
    for (const [member, memberNs] of ns.structIterator()) {
      if (object[member] != null) {
        newObject[member] = schemaLogFilter(memberNs, object[member]);
      }
    }
    return newObject;
  }
  return data;
}
var SENSITIVE_STRING;
var init_schemaLogFilter = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/schemaLogFilter.js"() {
    init_schema2();
    SENSITIVE_STRING = "***SensitiveInformation***";
  }
});
var Command;
var ClassBuilder;
var init_command6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/command.js"() {
    init_dist_es63();
    init_dist_es37();
    init_schemaLogFilter();
    Command = class {
      constructor() {
        this.middlewareStack = constructStack();
      }
      static classBuilder() {
        return new ClassBuilder();
      }
      resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [SMITHY_CONTEXT_KEY2]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve((request3) => requestHandler.handle(request3.request, options || {}), handlerExecutionContext);
      }
    };
    ClassBuilder = class {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = void 0;
        this._outputFilterSensitiveLog = void 0;
        this._serializer = null;
        this._deserializer = null;
      }
      init(cb2) {
        this._init = cb2;
      }
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      f(inputFilter = (_2) => _2, outputFilter = (_2) => _2) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      sc(operation) {
        this._operationSchema = operation;
        this._smithyContext.operationSchema = operation;
        return this;
      }
      build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command {
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
            this.schema = closure._operationSchema;
          }
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter.bind(null, closure._operationSchema.input) : (_2) => _2),
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter.bind(null, closure._operationSchema.output) : (_2) => _2),
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        };
      }
    };
  }
});
var SENSITIVE_STRING2;
var init_constants9 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
    SENSITIVE_STRING2 = "***SensitiveInformation***";
  }
});
var createAggregatedClient;
var init_create_aggregated_client3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
    createAggregatedClient = (commands5, Client3) => {
      for (const command of Object.keys(commands5)) {
        const CommandCtor = commands5[command];
        const methodImpl = async function(args, optionsOrCb, cb2) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb2 === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb2);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client3.prototype[methodName] = methodImpl;
      }
    };
  }
});
var ServiceException;
var decorateServiceException;
var init_exceptions3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
    ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
      static isInstance(value) {
        if (!value)
          return false;
        const candidate = value;
        return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
      }
      static [Symbol.hasInstance](instance) {
        if (!instance)
          return false;
        const candidate = instance;
        if (this === _ServiceException) {
          return _ServiceException.isInstance(instance);
        }
        if (_ServiceException.isInstance(instance)) {
          if (candidate.name && this.name) {
            return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
          }
          return this.prototype.isPrototypeOf(instance);
        }
        return false;
      }
    };
    decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v6]) => v6 !== void 0).forEach(([k5, v6]) => {
        if (exception[k5] == void 0 || exception[k5] === "") {
          exception[k5] = v6;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
  }
});
var throwDefaultError;
var withBaseException;
var deserializeMetadata;
var init_default_error_handler3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
    init_exceptions3();
    throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    };
    withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
  }
});
var loadConfigsForDefaultMode;
var init_defaults_mode3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
    loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
  }
});
var warningEmitted;
var emitWarningIfUnsupportedVersion2;
var init_emitWarningIfUnsupportedVersion4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
    warningEmitted = false;
    emitWarningIfUnsupportedVersion2 = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 16) {
        warningEmitted = true;
      }
    };
  }
});
var init_extended_encode_uri_component4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
  }
});
var getChecksumConfiguration;
var resolveChecksumRuntimeConfig;
var init_checksum5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"() {
    init_dist_es37();
    getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in AlgorithmId) {
        const algorithmId = AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        }
      };
    };
    resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
  }
});
var getRetryConfiguration;
var resolveRetryRuntimeConfig;
var init_retry4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js"() {
    getRetryConfiguration = (runtimeConfig) => {
      return {
        setRetryStrategy(retryStrategy) {
          runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return runtimeConfig.retryStrategy;
        }
      };
    };
    resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    };
  }
});
var getDefaultExtensionConfiguration;
var resolveDefaultRuntimeConfig;
var init_defaultExtensionConfiguration6 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
    init_checksum5();
    init_retry4();
    getDefaultExtensionConfiguration = (runtimeConfig) => {
      return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
    };
    resolveDefaultRuntimeConfig = (config2) => {
      return Object.assign(resolveChecksumRuntimeConfig(config2), resolveRetryRuntimeConfig(config2));
    };
  }
});
var init_extensions13 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_defaultExtensionConfiguration6();
  }
});
var getArrayIfSingleItem;
var init_get_array_if_single_item3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
    getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
  }
});
var init_get_value_from_text_node3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
  }
});
var isSerializableHeaderValue;
var init_is_serializable_header_value3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
    isSerializableHeaderValue = (value) => {
      return value != null;
    };
  }
});
var NoOpLogger2;
var init_NoOpLogger3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    NoOpLogger2 = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});
function map(arg0, arg1, arg2) {
  let target;
  let filter;
  let instructions;
  if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
    target = {};
    instructions = arg0;
  } else {
    target = arg0;
    if (typeof arg1 === "function") {
      filter = arg1;
      instructions = arg2;
      return mapWithFilter(target, filter, instructions);
    } else {
      instructions = arg1;
    }
  }
  for (const key of Object.keys(instructions)) {
    if (!Array.isArray(instructions[key])) {
      target[key] = instructions[key];
      continue;
    }
    applyInstruction(target, null, instructions, key);
  }
  return target;
}
var take;
var mapWithFilter;
var applyInstruction;
var nonNullish;
var pass;
var init_object_mapping3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
    take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    nonNullish = (_2) => _2 != null;
    pass = (_2) => _2;
  }
});
var init_resolve_path4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
  }
});
var serializeDateTime;
var init_ser_utils3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
    serializeDateTime = (date) => date.toISOString().replace(".000Z", "Z");
  }
});
var _json;
var init_serde_json3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
    _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_2) => _2 != null).map(_json);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    };
  }
});
var init_dist_es64 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_client7();
    init_collect_stream_body4();
    init_command6();
    init_constants9();
    init_create_aggregated_client3();
    init_default_error_handler3();
    init_defaults_mode3();
    init_emitWarningIfUnsupportedVersion4();
    init_exceptions3();
    init_extended_encode_uri_component4();
    init_extensions13();
    init_get_array_if_single_item3();
    init_get_value_from_text_node3();
    init_is_serializable_header_value3();
    init_NoOpLogger3();
    init_object_mapping3();
    init_resolve_path4();
    init_ser_utils3();
    init_serde_json3();
    init_serde2();
  }
});
var isStreamingPayload;
var init_isStreamingPayload = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js"() {
    isStreamingPayload = (request3) => request3?.body instanceof Readable3 || typeof ReadableStream !== "undefined" && request3?.body instanceof ReadableStream;
  }
});
var retryMiddleware;
var isRetryStrategyV2;
var getRetryErrorInfo;
var getRetryErrorType;
var retryMiddlewareOptions;
var getRetryPlugin;
var getRetryAfterHint;
var init_retryMiddleware = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js"() {
    init_dist_es38();
    init_dist_es61();
    init_dist_es64();
    init_dist_es62();
    init_esm_node();
    init_isStreamingPayload();
    init_util8();
    retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request: request3 } = args;
        const isRequest = HttpRequest6.isInstance(request3);
        if (isRequest) {
          request3.headers[INVOCATION_ID_HEADER] = v4_default();
        }
        while (true) {
          try {
            if (isRequest) {
              request3.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e5) {
            const retryErrorInfo = getRetryErrorInfo(e5);
            lastError = asSdkError(e5);
            if (isRequest && isStreamingPayload(request3)) {
              (context.logger instanceof NoOpLogger2 ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    getRetryErrorInfo = (error2) => {
      const errorInfo = {
        error: error2,
        errorType: getRetryErrorType(error2)
      };
      const retryAfterHint = getRetryAfterHint(error2.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    getRetryErrorType = (error2) => {
      if (isThrottlingError(error2))
        return "THROTTLING";
      if (isTransientError(error2))
        return "TRANSIENT";
      if (isServerError(error2))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    });
    getRetryAfterHint = (response) => {
      if (!HttpResponse2.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
  }
});
var init_dist_es65 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/middleware-retry/dist-es/index.js"() {
    init_AdaptiveRetryStrategy2();
    init_StandardRetryStrategy2();
    init_configurations2();
    init_delayDecider();
    init_omitRetryHeadersMiddleware();
    init_retryDecider();
    init_retryMiddleware();
  }
});
var signatureV4CrtContainer;
var init_signature_v4_crt_container = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/signature-v4-crt-container.js"() {
    signatureV4CrtContainer = {
      CrtSignerV4: null
    };
  }
});
var SignatureV4MultiRegion;
var init_SignatureV4MultiRegion = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js"() {
    init_dist_es47();
    init_dist_es20();
    init_signature_v4_crt_container();
    SignatureV4MultiRegion = class {
      sigv4aSigner;
      sigv4Signer;
      signerOptions;
      static sigv4aDependency() {
        if (typeof signatureV4CrtContainer.CrtSignerV4 === "function") {
          return "crt";
        } else if (typeof signatureV4aContainer.SignatureV4a === "function") {
          return "js";
        }
        return "none";
      }
      constructor(options) {
        this.sigv4Signer = new SignatureV4S3Express(options);
        this.signerOptions = options;
      }
      async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
          return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
      }
      async signWithCredentials(requestToSign, credentials, options = {}) {
        if (options.signingRegion === "*") {
          const signer = this.getSigv4aSigner();
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (CrtSignerV4 && signer instanceof CrtSignerV4) {
            return signer.signWithCredentials(requestToSign, credentials, options);
          } else {
            throw new Error(`signWithCredentials with signingRegion '*' is only supported when using the CRT dependency @aws-sdk/signature-v4-crt. Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
        }
        return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);
      }
      async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
          const signer = this.getSigv4aSigner();
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (CrtSignerV4 && signer instanceof CrtSignerV4) {
            return signer.presign(originalRequest, options);
          } else {
            throw new Error(`presign with signingRegion '*' is only supported when using the CRT dependency @aws-sdk/signature-v4-crt. Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`);
          }
        }
        return this.sigv4Signer.presign(originalRequest, options);
      }
      async presignWithCredentials(originalRequest, credentials, options = {}) {
        if (options.signingRegion === "*") {
          throw new Error("Method presignWithCredentials is not supported for [signingRegion=*].");
        }
        return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          const CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          const JsSigV4aSigner = signatureV4aContainer.SignatureV4a;
          if (this.signerOptions.runtime === "node") {
            if (!CrtSignerV4 && !JsSigV4aSigner) {
              throw new Error("Neither CRT nor JS SigV4a implementation is available. Please load either @aws-sdk/signature-v4-crt or @aws-sdk/signature-v4a. For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt");
            }
            if (CrtSignerV4 && typeof CrtSignerV4 === "function") {
              this.sigv4aSigner = new CrtSignerV4({
                ...this.signerOptions,
                signingAlgorithm: 1
              });
            } else if (JsSigV4aSigner && typeof JsSigV4aSigner === "function") {
              this.sigv4aSigner = new JsSigV4aSigner({
                ...this.signerOptions
              });
            } else {
              throw new Error("Available SigV4a implementation is not a valid constructor. Please ensure you've properly imported @aws-sdk/signature-v4-crt or @aws-sdk/signature-v4a.For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt");
            }
          } else {
            if (!JsSigV4aSigner || typeof JsSigV4aSigner !== "function") {
              throw new Error("JS SigV4a implementation is not available or not a valid constructor. Please check whether you have installed the @aws-sdk/signature-v4a package explicitly. The CRT implementation is not available for browsers. You must also register the package by calling [require('@aws-sdk/signature-v4a');] or an ESM equivalent such as [import '@aws-sdk/signature-v4a';]. For more information please go to https://github.com/aws/aws-sdk-js-v3#using-javascript-non-crt-implementation-of-sigv4a");
            }
            this.sigv4aSigner = new JsSigV4aSigner({
              ...this.signerOptions
            });
          }
        }
        return this.sigv4aSigner;
      }
    };
  }
});
var init_dist_es66 = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js"() {
    init_SignatureV4MultiRegion();
    init_signature_v4_crt_container();
  }
});
var cp;
var cq;
var cr;
var cs;
var ct;
var cu;
var cv;
var cw;
var cx;
var cy;
var cz;
var cA;
var cB;
var cC;
var cD;
var cE;
var cF;
var a;
var b;
var c;
var d;
var e;
var f;
var g;
var h;
var i;
var j;
var k;
var l;
var m;
var n;
var o;
var p;
var q;
var r;
var s;
var t;
var u;
var v;
var w;
var x;
var y;
var z;
var A;
var B;
var C;
var D;
var E;
var F;
var G;
var H;
var I;
var J;
var K;
var L;
var M;
var N;
var O;
var P;
var Q;
var R;
var S;
var T;
var U;
var V;
var W;
var X;
var Y;
var Z;
var aa;
var ab;
var ac;
var ad;
var ae;
var af;
var ag;
var ah;
var ai;
var aj;
var ak;
var al;
var am;
var an;
var ao;
var ap;
var aq;
var ar;
var as;
var at;
var au;
var av;
var aw;
var ax;
var ay;
var az;
var aA;
var aB;
var aC;
var aD;
var aE;
var aF;
var aG;
var aH;
var aI;
var aJ;
var aK;
var aL;
var aM;
var aN;
var aO;
var aP;
var aQ;
var aR;
var aS;
var aT;
var aU;
var aV;
var aW;
var aX;
var aY;
var aZ;
var ba;
var bb;
var bc;
var bd;
var be;
var bf;
var bg;
var bh;
var bi;
var bj;
var bk;
var bl;
var bm;
var bn;
var bo;
var bp;
var bq;
var br;
var bs;
var bt;
var bu;
var bv;
var bw;
var bx;
var by;
var bz;
var bA;
var bB;
var bC;
var bD;
var bE;
var bF;
var bG;
var bH;
var bI;
var bJ;
var bK;
var bL;
var bM;
var bN;
var bO;
var bP;
var bQ;
var bR;
var bS;
var bT;
var bU;
var bV;
var bW;
var bX;
var bY;
var bZ;
var ca;
var cb;
var cc;
var cd;
var ce;
var cf;
var cg;
var ch;
var ci;
var cj;
var ck;
var cl;
var cm;
var cn;
var co;
var _data;
var ruleSet;
var init_ruleset = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js"() {
    cp = "required";
    cq = "type";
    cr = "rules";
    cs = "conditions";
    ct = "fn";
    cu = "argv";
    cv = "ref";
    cw = "assign";
    cx = "url";
    cy = "properties";
    cz = "backend";
    cA = "authSchemes";
    cB = "disableDoubleEncoding";
    cC = "signingName";
    cD = "signingRegion";
    cE = "headers";
    cF = "signingRegionSet";
    a = 6;
    b = false;
    c = true;
    d = "isSet";
    e = "booleanEquals";
    f = "error";
    g = "aws.partition";
    h = "stringEquals";
    i = "getAttr";
    j = "name";
    k = "substring";
    l = "bucketSuffix";
    m = "parseURL";
    n = "endpoint";
    o = "tree";
    p = "aws.isVirtualHostableS3Bucket";
    q = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
    r = "not";
    s = "accessPointSuffix";
    t = "{url#scheme}://{url#authority}{url#path}";
    u = "hardwareType";
    v = "regionPrefix";
    w = "bucketAliasSuffix";
    x = "outpostId";
    y = "isValidHostLabel";
    z = "sigv4a";
    A = "s3-outposts";
    B = "s3";
    C = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
    D = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
    E = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    F = "aws.parseArn";
    G = "bucketArn";
    H = "arnType";
    I = "";
    J = "s3-object-lambda";
    K = "accesspoint";
    L = "accessPointName";
    M = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    N = "mrapPartition";
    O = "outpostType";
    P = "arnPrefix";
    Q = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
    R = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
    S = "https://s3.{partitionResult#dnsSuffix}";
    T = { [cp]: false, [cq]: "String" };
    U = { [cp]: true, "default": false, [cq]: "Boolean" };
    V = { [cp]: false, [cq]: "Boolean" };
    W = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, true] };
    X = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, true] };
    Y = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, true] };
    Z = { [ct]: d, [cu]: [{ [cv]: "Endpoint" }] };
    aa = { [ct]: g, [cu]: [{ [cv]: "Region" }], [cw]: "partitionResult" };
    ab = { [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }, "aws-cn"] };
    ac = { [ct]: d, [cu]: [{ [cv]: "Bucket" }] };
    ad = { [cv]: "Bucket" };
    ae = { [cs]: [Y], [f]: "S3Express does not support Dual-stack.", [cq]: f };
    af = { [cs]: [W], [f]: "S3Express does not support S3 Accelerate.", [cq]: f };
    ag = { [cs]: [Z, { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" }], [cr]: [{ [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }], [cr]: [{ [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] }], [cr]: [{ [cs]: [{ [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" }], [cr]: [{ [n]: { [cx]: "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: p, [cu]: [ad, false] }], [cr]: [{ [n]: { [cx]: q, [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }], [cq]: o }, { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f }], [cq]: o };
    ah = { [ct]: m, [cu]: [{ [cv]: "Endpoint" }], [cw]: "url" };
    ai = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [{ [cv]: "url" }, "isIp"] }, true] };
    aj = { [cv]: "url" };
    ak = { [ct]: "uriEncode", [cu]: [ad], [cw]: "uri_encoded_bucket" };
    al = { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: "s3express", [cD]: "{Region}" }] };
    am = {};
    an = { [ct]: p, [cu]: [ad, false] };
    ao = { [f]: "S3Express bucket name is not a valid virtual hostable name.", [cq]: f };
    ap = { [ct]: d, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }] };
    aq = { [ct]: e, [cu]: [{ [cv]: "UseS3ExpressControlEndpoint" }, true] };
    ar = { [ct]: r, [cu]: [Z] };
    as = { [f]: "Unrecognized S3Express bucket name format.", [cq]: f };
    at = { [ct]: r, [cu]: [ac] };
    au = { [cv]: u };
    av = { [cs]: [ar], [f]: "Expected a endpoint to be specified but no endpoint was found", [cq]: f };
    aw = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{Region}" }] };
    ax = { [ct]: e, [cu]: [{ [cv]: "ForcePathStyle" }, false] };
    ay = { [cv]: "ForcePathStyle" };
    az = { [ct]: e, [cu]: [{ [cv]: "Accelerate" }, false] };
    aA = { [ct]: h, [cu]: [{ [cv]: "Region" }, "aws-global"] };
    aB = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "us-east-1" }] };
    aC = { [ct]: r, [cu]: [aA] };
    aD = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, true] };
    aE = { [cx]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] }, [cE]: {} };
    aF = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{Region}" }] };
    aG = { [ct]: e, [cu]: [{ [cv]: "UseGlobalEndpoint" }, false] };
    aH = { [ct]: e, [cu]: [{ [cv]: "UseDualStack" }, false] };
    aI = { [cx]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aJ = { [ct]: e, [cu]: [{ [cv]: "UseFIPS" }, false] };
    aK = { [cx]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aL = { [cx]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aM = { [ct]: e, [cu]: [{ [ct]: i, [cu]: [aj, "isIp"] }, false] };
    aN = { [cx]: C, [cy]: aF, [cE]: {} };
    aO = { [cx]: q, [cy]: aF, [cE]: {} };
    aP = { [n]: aO, [cq]: n };
    aQ = { [cx]: D, [cy]: aF, [cE]: {} };
    aR = { [cx]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    aS = { [f]: "Invalid region: region was not a valid DNS name.", [cq]: f };
    aT = { [cv]: G };
    aU = { [cv]: H };
    aV = { [ct]: i, [cu]: [aT, "service"] };
    aW = { [cv]: L };
    aX = { [cs]: [Y], [f]: "S3 Object Lambda does not support Dual-stack", [cq]: f };
    aY = { [cs]: [W], [f]: "S3 Object Lambda does not support S3 Accelerate", [cq]: f };
    aZ = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "DisableAccessPoints" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableAccessPoints" }, true] }], [f]: "Access points are not supported for this operation", [cq]: f };
    ba = { [cs]: [{ [ct]: d, [cu]: [{ [cv]: "UseArnRegion" }] }, { [ct]: e, [cu]: [{ [cv]: "UseArnRegion" }, false] }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, "{Region}"] }] }], [f]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [cq]: f };
    bb = { [ct]: i, [cu]: [{ [cv]: "bucketPartition" }, j] };
    bc = { [ct]: i, [cu]: [aT, "accountId"] };
    bd = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{bucketArn#region}" }] };
    be = { [f]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [cq]: f };
    bf = { [f]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [cq]: f };
    bg = { [f]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [cq]: f };
    bh = { [f]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [cq]: f };
    bi = { [f]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [cq]: f };
    bj = { [f]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [cq]: f };
    bk = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: B, [cD]: "{bucketArn#region}" }] };
    bl = { [cA]: [{ [cB]: true, [j]: z, [cC]: A, [cF]: ["*"] }, { [cB]: true, [j]: "sigv4", [cC]: A, [cD]: "{bucketArn#region}" }] };
    bm = { [ct]: F, [cu]: [ad] };
    bn = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bo = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bp = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bq = { [cx]: Q, [cy]: aF, [cE]: {} };
    br = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aF, [cE]: {} };
    bs = { [cv]: "UseObjectLambdaEndpoint" };
    bt = { [cA]: [{ [cB]: true, [j]: "sigv4", [cC]: J, [cD]: "{Region}" }] };
    bu = { [cx]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bv = { [cx]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bw = { [cx]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bx = { [cx]: t, [cy]: aF, [cE]: {} };
    by = { [cx]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [cy]: aF, [cE]: {} };
    bz = [{ [cv]: "Region" }];
    bA = [{ [cv]: "Endpoint" }];
    bB = [ad];
    bC = [Y];
    bD = [W];
    bE = [Z, ah];
    bF = [{ [ct]: d, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }] }, { [ct]: e, [cu]: [{ [cv]: "DisableS3ExpressSessionAuth" }, true] }];
    bG = [ak];
    bH = [an];
    bI = [aa];
    bJ = [X];
    bK = [{ [ct]: k, [cu]: [ad, 6, 14, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 14, 16, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bL = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: {} }, [cq]: n }];
    bM = [{ [ct]: k, [cu]: [ad, 6, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bN = [{ [ct]: k, [cu]: [ad, 6, 19, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 19, 21, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bO = [{ [ct]: k, [cu]: [ad, 6, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bP = [{ [ct]: k, [cu]: [ad, 6, 26, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 26, 28, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bQ = [{ [cs]: [X], [n]: { [cx]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }, { [n]: { [cx]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.{partitionResult#dnsSuffix}", [cy]: { [cz]: "S3Express", [cA]: [{ [cB]: true, [j]: "sigv4-s3express", [cC]: "s3express", [cD]: "{Region}" }] }, [cE]: {} }, [cq]: n }];
    bR = [ad, 0, 7, true];
    bS = [{ [ct]: k, [cu]: [ad, 7, 15, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 15, 17, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bT = [{ [ct]: k, [cu]: [ad, 7, 16, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 16, 18, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bU = [{ [ct]: k, [cu]: [ad, 7, 20, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 20, 22, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bV = [{ [ct]: k, [cu]: [ad, 7, 21, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 21, 23, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bW = [{ [ct]: k, [cu]: [ad, 7, 27, true], [cw]: "s3expressAvailabilityZoneId" }, { [ct]: k, [cu]: [ad, 27, 29, true], [cw]: "s3expressAvailabilityZoneDelim" }, { [ct]: h, [cu]: [{ [cv]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    bX = [ac];
    bY = [{ [ct]: y, [cu]: [{ [cv]: x }, false] }];
    bZ = [{ [ct]: h, [cu]: [{ [cv]: v }, "beta"] }];
    ca = ["*"];
    cb = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, false] }];
    cc = [{ [ct]: h, [cu]: [{ [cv]: "Region" }, "us-east-1"] }];
    cd = [{ [ct]: h, [cu]: [aU, K] }];
    ce = [{ [ct]: i, [cu]: [aT, "resourceId[1]"], [cw]: L }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aW, I] }] }];
    cf = [aT, "resourceId[1]"];
    cg = [{ [ct]: r, [cu]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, I] }] }];
    ch = [{ [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[2]"] }] }] }];
    ci = [aT, "resourceId[2]"];
    cj = [{ [ct]: g, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }], [cw]: "bucketPartition" }];
    ck = [{ [ct]: h, [cu]: [bb, { [ct]: i, [cu]: [{ [cv]: "partitionResult" }, j] }] }];
    cl = [{ [ct]: y, [cu]: [{ [ct]: i, [cu]: [aT, "region"] }, true] }];
    cm = [{ [ct]: y, [cu]: [bc, false] }];
    cn = [{ [ct]: y, [cu]: [aW, false] }];
    co = [{ [ct]: y, [cu]: [{ [cv]: "Region" }, true] }];
    _data = { version: "1.0", parameters: { Bucket: T, Region: T, UseFIPS: U, UseDualStack: U, Endpoint: T, ForcePathStyle: U, Accelerate: U, UseGlobalEndpoint: U, UseObjectLambdaEndpoint: V, Key: T, Prefix: T, CopySource: T, DisableAccessPoints: V, DisableMultiRegionAccessPoints: U, UseArnRegion: V, UseS3ExpressControlEndpoint: V, DisableS3ExpressSessionAuth: V }, [cr]: [{ [cs]: [{ [ct]: d, [cu]: bz }], [cr]: [{ [cs]: [W, X], error: "Accelerate cannot be used with FIPS", [cq]: f }, { [cs]: [Y, Z], error: "Cannot set dual-stack in combination with a custom endpoint.", [cq]: f }, { [cs]: [Z, X], error: "A custom endpoint cannot be combined with FIPS", [cq]: f }, { [cs]: [Z, W], error: "A custom endpoint cannot be combined with S3 Accelerate", [cq]: f }, { [cs]: [X, aa, ab], error: "Partition does not support FIPS", [cq]: f }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 0, a, c], [cw]: l }, { [ct]: h, [cu]: [{ [cv]: l }, "--x-s3"] }], [cr]: [ae, af, ag, { [cs]: [ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [ak, ar], [cr]: [{ [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bK, [cr]: bL, [cq]: o }, { [cs]: bM, [cr]: bL, [cq]: o }, { [cs]: bN, [cr]: bL, [cq]: o }, { [cs]: bO, [cr]: bL, [cq]: o }, { [cs]: bP, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bK, [cr]: bQ, [cq]: o }, { [cs]: bM, [cr]: bQ, [cq]: o }, { [cs]: bN, [cr]: bQ, [cq]: o }, { [cs]: bO, [cr]: bQ, [cq]: o }, { [cs]: bP, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: bR, [cw]: s }, { [ct]: h, [cu]: [{ [cv]: s }, "--xa-s3"] }], [cr]: [ae, af, ag, { [cs]: bH, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bF, [cr]: [{ [cs]: bS, [cr]: bL, [cq]: o }, { [cs]: bT, [cr]: bL, [cq]: o }, { [cs]: bU, [cr]: bL, [cq]: o }, { [cs]: bV, [cr]: bL, [cq]: o }, { [cs]: bW, [cr]: bL, [cq]: o }, as], [cq]: o }, { [cs]: bS, [cr]: bQ, [cq]: o }, { [cs]: bT, [cr]: bQ, [cq]: o }, { [cs]: bU, [cr]: bQ, [cq]: o }, { [cs]: bV, [cr]: bQ, [cq]: o }, { [cs]: bW, [cr]: bQ, [cq]: o }, as], [cq]: o }], [cq]: o }, ao], [cq]: o }, { [cs]: [at, ap, aq], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: bE, endpoint: { [cx]: t, [cy]: al, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3express-control-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3express-control.{Region}.{partitionResult#dnsSuffix}", [cy]: al, [cE]: am }, [cq]: n }], [cq]: o }], [cq]: o }, { [cs]: [ac, { [ct]: k, [cu]: [ad, 49, 50, c], [cw]: u }, { [ct]: k, [cu]: [ad, 8, 12, c], [cw]: v }, { [ct]: k, [cu]: bR, [cw]: w }, { [ct]: k, [cu]: [ad, 32, 49, c], [cw]: x }, { [ct]: g, [cu]: bz, [cw]: "regionPartition" }, { [ct]: h, [cu]: [{ [cv]: w }, "--op-s3"] }], [cr]: [{ [cs]: bY, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [au, "e"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.ec2.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [au, "o"] }], [cr]: [{ [cs]: bZ, [cr]: [av, { [cs]: bE, endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.{url#authority}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { endpoint: { [cx]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cy]: aw, [cE]: am }, [cq]: n }], [cq]: o }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [cq]: f }], [cq]: o }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [cq]: f }], [cq]: o }, { [cs]: bX, [cr]: [{ [cs]: [Z, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [{ [ct]: m, [cu]: bA }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [cq]: f }, { [cs]: [ax, an], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [{ [cs]: [W, ab], error: "S3 Accelerate cannot be used in this region", [cq]: f }, { [cs]: [Y, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, X, az, ar, aC, aD], [cr]: [{ endpoint: aE, [cq]: n }], [cq]: o }, { [cs]: [Y, X, az, ar, aC, aG], endpoint: aE, [cq]: n }, { [cs]: [aH, X, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, X, az, ar, aC, aD], [cr]: [{ endpoint: aI, [cq]: n }], [cq]: o }, { [cs]: [aH, X, az, ar, aC, aG], endpoint: aI, [cq]: n }, { [cs]: [Y, aJ, W, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, W, ar, aC, aD], [cr]: [{ endpoint: aK, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, W, ar, aC, aG], endpoint: aK, [cq]: n }, { [cs]: [Y, aJ, az, ar, aA], endpoint: { [cx]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, aJ, az, ar, aC, aD], [cr]: [{ endpoint: aL, [cq]: n }], [cq]: o }, { [cs]: [Y, aJ, az, ar, aC, aG], endpoint: aL, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aA], endpoint: { [cx]: C, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aA], endpoint: { [cx]: q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aD], [cr]: [{ [cs]: cc, endpoint: aN, [cq]: n }, { endpoint: aN, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aD], [cr]: [{ [cs]: cc, endpoint: aO, [cq]: n }, aP], [cq]: o }, { [cs]: [aH, aJ, az, Z, ah, ai, aC, aG], endpoint: aN, [cq]: n }, { [cs]: [aH, aJ, az, Z, ah, aM, aC, aG], endpoint: aO, [cq]: n }, { [cs]: [aH, aJ, W, ar, aA], endpoint: { [cx]: D, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, W, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: aQ, [cq]: n }, { endpoint: aQ, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, W, ar, aC, aG], endpoint: aQ, [cq]: n }, { [cs]: [aH, aJ, az, ar, aA], endpoint: { [cx]: E, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, aJ, az, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: E, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: aR, [cq]: n }], [cq]: o }, { [cs]: [aH, aJ, az, ar, aC, aG], endpoint: aR, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [Z, ah, { [ct]: h, [cu]: [{ [ct]: i, [cu]: [aj, "scheme"] }, "http"] }, { [ct]: p, [cu]: [ad, c] }, ax, aJ, aH, az], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: cb, [cr]: [aP], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [ax, { [ct]: F, [cu]: bB, [cw]: G }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[0]"], [cw]: H }, { [ct]: r, [cu]: [{ [ct]: h, [cu]: [aU, I] }] }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, J] }], [cr]: [{ [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [aX, aY, { [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bc, I] }], error: "Invalid ARN: Missing account id", [cq]: f }, { [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bE, endpoint: { [cx]: M, [cy]: bd, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bd, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }, { error: "Invalid ARN: bucket ARN is missing a region", [cq]: f }], [cq]: o }, bj], [cq]: o }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [cq]: f }], [cq]: o }, { [cs]: cd, [cr]: [{ [cs]: ce, [cr]: [{ [cs]: cg, [cr]: [{ [cs]: cd, [cr]: [{ [cs]: cg, [cr]: [aZ, { [cs]: ch, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [bb, "{partitionResult#name}"] }], [cr]: [{ [cs]: cl, [cr]: [{ [cs]: [{ [ct]: h, [cu]: [aV, B] }], [cr]: [{ [cs]: cm, [cr]: [{ [cs]: cn, [cr]: [{ [cs]: bD, error: "Access Points do not support S3 Accelerate", [cq]: f }, { [cs]: [X, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [X, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah], endpoint: { [cx]: M, [cy]: bk, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH], endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bk, [cE]: am }, [cq]: n }], [cq]: o }, be], [cq]: o }, bf], [cq]: o }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [cq]: f }], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, bi], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: y, [cu]: [aW, c] }], [cr]: [{ [cs]: bC, error: "S3 MRAP does not support dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 MRAP does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 MRAP does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [{ [cv]: "DisableMultiRegionAccessPoints" }, c] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [cq]: f }, { [cs]: [{ [ct]: g, [cu]: bz, [cw]: N }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [ct]: i, [cu]: [{ [cv]: N }, j] }, { [ct]: i, [cu]: [aT, "partition"] }] }], [cr]: [{ endpoint: { [cx]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [cy]: { [cA]: [{ [cB]: c, name: z, [cC]: B, [cF]: ca }] }, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [cq]: f }], [cq]: o }], [cq]: o }, { error: "Invalid Access Point Name", [cq]: f }], [cq]: o }, bj], [cq]: o }, { [cs]: [{ [ct]: h, [cu]: [aV, A] }], [cr]: [{ [cs]: bC, error: "S3 Outposts does not support Dual-stack", [cq]: f }, { [cs]: bJ, error: "S3 Outposts does not support FIPS", [cq]: f }, { [cs]: bD, error: "S3 Outposts does not support S3 Accelerate", [cq]: f }, { [cs]: [{ [ct]: d, [cu]: [{ [ct]: i, [cu]: [aT, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [cq]: f }, { [cs]: [{ [ct]: i, [cu]: cf, [cw]: x }], [cr]: [{ [cs]: bY, [cr]: [ba, { [cs]: cj, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: ck, [cr]: [{ [cs]: cl, [cr]: [{ [cs]: cm, [cr]: [{ [cs]: [{ [ct]: i, [cu]: ci, [cw]: O }], [cr]: [{ [cs]: [{ [ct]: i, [cu]: [aT, "resourceId[3]"], [cw]: L }], [cr]: [{ [cs]: [{ [ct]: h, [cu]: [{ [cv]: O }, K] }], [cr]: [{ [cs]: bE, endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [cy]: bl, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cy]: bl, [cE]: am }, [cq]: n }], [cq]: o }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [cq]: f }], [cq]: o }, { error: "Invalid ARN: expected an access point name", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Expected a 4-component resource", [cq]: f }], [cq]: o }, bf], [cq]: o }, bg], [cq]: o }, bh], [cq]: o }], [cq]: o }], [cq]: o }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [cq]: f }], [cq]: o }, { error: "Invalid ARN: The Outpost Id was not set", [cq]: f }], [cq]: o }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [cq]: f }], [cq]: o }, { error: "Invalid ARN: No ARN type specified", [cq]: f }], [cq]: o }, { [cs]: [{ [ct]: k, [cu]: [ad, 0, 4, b], [cw]: P }, { [ct]: h, [cu]: [{ [cv]: P }, "arn:"] }, { [ct]: r, [cu]: [{ [ct]: d, [cu]: [bm] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [cq]: f }, { [cs]: [{ [ct]: e, [cu]: [ay, c] }, bm], error: "Path-style addressing cannot be used with ARN buckets", [cq]: f }, { [cs]: bG, [cr]: [{ [cs]: bI, [cr]: [{ [cs]: [az], [cr]: [{ [cs]: [Y, ar, X, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, X, aC, aD], [cr]: [{ endpoint: bn, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, X, aC, aG], endpoint: bn, [cq]: n }, { [cs]: [aH, ar, X, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, X, aC, aD], [cr]: [{ endpoint: bo, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, X, aC, aG], endpoint: bo, [cq]: n }, { [cs]: [Y, ar, aJ, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [Y, ar, aJ, aC, aD], [cr]: [{ endpoint: bp, [cq]: n }], [cq]: o }, { [cs]: [Y, ar, aJ, aC, aG], endpoint: bp, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aA], endpoint: { [cx]: Q, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, Z, ah, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: bq, [cq]: n }, { endpoint: bq, [cq]: n }], [cq]: o }, { [cs]: [aH, Z, ah, aJ, aC, aG], endpoint: bq, [cq]: n }, { [cs]: [aH, ar, aJ, aA], endpoint: { [cx]: R, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aH, ar, aJ, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: R, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: br, [cq]: n }], [cq]: o }, { [cs]: [aH, ar, aJ, aC, aG], endpoint: br, [cq]: n }], [cq]: o }, { error: "Path-style addressing cannot be used with S3 Accelerate", [cq]: f }], [cq]: o }], [cq]: o }], [cq]: o }, { [cs]: [{ [ct]: d, [cu]: [bs] }, { [ct]: e, [cu]: [bs, c] }], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [aX, aY, { [cs]: bE, endpoint: { [cx]: t, [cy]: bt, [cE]: am }, [cq]: n }, { [cs]: bJ, endpoint: { [cx]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }, { endpoint: { [cx]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [cy]: bt, [cE]: am }, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }, { [cs]: [at], [cr]: [{ [cs]: bI, [cr]: [{ [cs]: co, [cr]: [{ [cs]: [X, Y, ar, aA], endpoint: { [cx]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, Y, ar, aC, aD], [cr]: [{ endpoint: bu, [cq]: n }], [cq]: o }, { [cs]: [X, Y, ar, aC, aG], endpoint: bu, [cq]: n }, { [cs]: [X, aH, ar, aA], endpoint: { [cx]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [X, aH, ar, aC, aD], [cr]: [{ endpoint: bv, [cq]: n }], [cq]: o }, { [cs]: [X, aH, ar, aC, aG], endpoint: bv, [cq]: n }, { [cs]: [aJ, Y, ar, aA], endpoint: { [cx]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, Y, ar, aC, aD], [cr]: [{ endpoint: bw, [cq]: n }], [cq]: o }, { [cs]: [aJ, Y, ar, aC, aG], endpoint: bw, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aA], endpoint: { [cx]: t, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, Z, ah, aC, aD], [cr]: [{ [cs]: cc, endpoint: bx, [cq]: n }, { endpoint: bx, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, Z, ah, aC, aG], endpoint: bx, [cq]: n }, { [cs]: [aJ, aH, ar, aA], endpoint: { [cx]: S, [cy]: aB, [cE]: am }, [cq]: n }, { [cs]: [aJ, aH, ar, aC, aD], [cr]: [{ [cs]: cc, endpoint: { [cx]: S, [cy]: aF, [cE]: am }, [cq]: n }, { endpoint: by, [cq]: n }], [cq]: o }, { [cs]: [aJ, aH, ar, aC, aG], endpoint: by, [cq]: n }], [cq]: o }, aS], [cq]: o }], [cq]: o }], [cq]: o }, { error: "A region must be set when sending requests to S3.", [cq]: f }] };
    ruleSet = _data;
  }
});
var cache;
var defaultEndpointResolver;
var init_endpointResolver = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js"() {
    init_dist_es52();
    init_dist_es49();
    init_ruleset();
    cache = new EndpointCache({
      size: 50,
      params: [
        "Accelerate",
        "Bucket",
        "DisableAccessPoints",
        "DisableMultiRegionAccessPoints",
        "DisableS3ExpressSessionAuth",
        "Endpoint",
        "ForcePathStyle",
        "Region",
        "UseArnRegion",
        "UseDualStack",
        "UseFIPS",
        "UseGlobalEndpoint",
        "UseObjectLambdaEndpoint",
        "UseS3ExpressControlEndpoint"
      ]
    });
    defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "s3",
      region: authParameters.region
    },
    propertiesExtractor: (config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    })
  };
}
function createAwsAuthSigv4aHttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4a",
    signingProperties: {
      name: "s3",
      region: authParameters.region
    },
    propertiesExtractor: (config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    })
  };
}
var createEndpointRuleSetHttpAuthSchemeParametersProvider;
var _defaultS3HttpAuthSchemeParametersProvider;
var defaultS3HttpAuthSchemeParametersProvider;
var createEndpointRuleSetHttpAuthSchemeProvider;
var _defaultS3HttpAuthSchemeProvider;
var defaultS3HttpAuthSchemeProvider;
var resolveHttpAuthSchemeConfig;
var init_httpAuthSchemeProvider = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthSchemeProvider.js"() {
    init_dist_es25();
    init_dist_es66();
    init_dist_es60();
    init_dist_es5();
    init_endpointResolver();
    createEndpointRuleSetHttpAuthSchemeParametersProvider = (defaultHttpAuthSchemeParametersProvider) => async (config2, context, input) => {
      if (!input) {
        throw new Error(`Could not find \`input\` for \`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\``);
      }
      const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config2, context, input);
      const instructionsFn = getSmithyContext(context)?.commandInstance?.constructor?.getEndpointParameterInstructions;
      if (!instructionsFn) {
        throw new Error(`getEndpointParameterInstructions() is not defined on \`${context.commandName}\``);
      }
      const endpointParameters = await resolveParams(input, { getEndpointParameterInstructions: instructionsFn }, config2);
      return Object.assign(defaultParameters, endpointParameters);
    };
    _defaultS3HttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);
    createEndpointRuleSetHttpAuthSchemeProvider = (defaultEndpointResolver5, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {
      const endpointRuleSetHttpAuthSchemeProvider = (authParameters) => {
        const endpoint = defaultEndpointResolver5(authParameters);
        const authSchemes = endpoint.properties?.authSchemes;
        if (!authSchemes) {
          return defaultHttpAuthSchemeResolver(authParameters);
        }
        const options = [];
        for (const scheme of authSchemes) {
          const { name: resolvedName, properties = {}, ...rest } = scheme;
          const name = resolvedName.toLowerCase();
          if (resolvedName !== name) {
            console.warn(`HttpAuthScheme has been normalized with lowercasing: \`${resolvedName}\` to \`${name}\``);
          }
          let schemeId;
          if (name === "sigv4a") {
            schemeId = "aws.auth#sigv4a";
            const sigv4Present = authSchemes.find((s5) => {
              const name2 = s5.name.toLowerCase();
              return name2 !== "sigv4a" && name2.startsWith("sigv4");
            });
            if (SignatureV4MultiRegion.sigv4aDependency() === "none" && sigv4Present) {
              continue;
            }
          } else if (name.startsWith("sigv4")) {
            schemeId = "aws.auth#sigv4";
          } else {
            throw new Error(`Unknown HttpAuthScheme found in \`@smithy.rules#endpointRuleSet\`: \`${name}\``);
          }
          const createOption = createHttpAuthOptionFunctions[schemeId];
          if (!createOption) {
            throw new Error(`Could not find HttpAuthOption create function for \`${schemeId}\``);
          }
          const option = createOption(authParameters);
          option.schemeId = schemeId;
          option.signingProperties = { ...option.signingProperties || {}, ...rest, ...properties };
          options.push(option);
        }
        return options;
      };
      return endpointRuleSetHttpAuthSchemeProvider;
    };
    _defaultS3HttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
          options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));
        }
      }
      return options;
    };
    defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {
      "aws.auth#sigv4": createAwsAuthSigv4HttpAuthOption,
      "aws.auth#sigv4a": createAwsAuthSigv4aHttpAuthOption
    });
    resolveHttpAuthSchemeConfig = (config2) => {
      const config_0 = resolveAwsSdkSigV4Config(config2);
      const config_1 = resolveAwsSdkSigV4AConfig(config_0);
      return Object.assign(config_1, {
        authSchemePreference: normalizeProvider(config2.authSchemePreference ?? [])
      });
    };
  }
});
var resolveClientEndpointParameters;
var commonParams;
var init_EndpointParameters = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters = (options) => {
      return Object.assign(options, {
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        forcePathStyle: options.forcePathStyle ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
      });
    };
    commonParams = {
      ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
      UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
      DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
      Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
      DisableS3ExpressSessionAuth: { type: "clientContextParams", name: "disableS3ExpressSessionAuth" },
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});
var S3ServiceException;
var init_S3ServiceException = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js"() {
    init_dist_es64();
    S3ServiceException = class _S3ServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _S3ServiceException.prototype);
      }
    };
  }
});
var NoSuchUpload;
var ObjectNotInActiveTierError;
var BucketAlreadyExists;
var BucketAlreadyOwnedByYou;
var NoSuchBucket;
var AnalyticsFilter;
var MetricsFilter;
var InvalidObjectState;
var NoSuchKey;
var NotFound;
var CompleteMultipartUploadOutputFilterSensitiveLog;
var CompleteMultipartUploadRequestFilterSensitiveLog;
var CopyObjectOutputFilterSensitiveLog;
var CopyObjectRequestFilterSensitiveLog;
var CreateMultipartUploadOutputFilterSensitiveLog;
var CreateMultipartUploadRequestFilterSensitiveLog;
var SessionCredentialsFilterSensitiveLog;
var CreateSessionOutputFilterSensitiveLog;
var CreateSessionRequestFilterSensitiveLog;
var ServerSideEncryptionByDefaultFilterSensitiveLog;
var ServerSideEncryptionRuleFilterSensitiveLog;
var ServerSideEncryptionConfigurationFilterSensitiveLog;
var GetBucketEncryptionOutputFilterSensitiveLog;
var SSEKMSFilterSensitiveLog;
var InventoryEncryptionFilterSensitiveLog;
var InventoryS3BucketDestinationFilterSensitiveLog;
var InventoryDestinationFilterSensitiveLog;
var InventoryConfigurationFilterSensitiveLog;
var GetBucketInventoryConfigurationOutputFilterSensitiveLog;
var GetObjectOutputFilterSensitiveLog;
var GetObjectRequestFilterSensitiveLog;
var GetObjectAttributesRequestFilterSensitiveLog;
var GetObjectTorrentOutputFilterSensitiveLog;
var HeadObjectOutputFilterSensitiveLog;
var HeadObjectRequestFilterSensitiveLog;
var ListBucketInventoryConfigurationsOutputFilterSensitiveLog;
var init_models_0 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js"() {
    init_dist_es64();
    init_S3ServiceException();
    NoSuchUpload = class _NoSuchUpload extends S3ServiceException {
      name = "NoSuchUpload";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchUpload",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchUpload.prototype);
      }
    };
    ObjectNotInActiveTierError = class _ObjectNotInActiveTierError extends S3ServiceException {
      name = "ObjectNotInActiveTierError";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ObjectNotInActiveTierError",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ObjectNotInActiveTierError.prototype);
      }
    };
    BucketAlreadyExists = class _BucketAlreadyExists extends S3ServiceException {
      name = "BucketAlreadyExists";
      $fault = "client";
      constructor(opts) {
        super({
          name: "BucketAlreadyExists",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
      }
    };
    BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ServiceException {
      name = "BucketAlreadyOwnedByYou";
      $fault = "client";
      constructor(opts) {
        super({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
      }
    };
    NoSuchBucket = class _NoSuchBucket extends S3ServiceException {
      name = "NoSuchBucket";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchBucket",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchBucket.prototype);
      }
    };
    (function(AnalyticsFilter2) {
      AnalyticsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AnalyticsFilter || (AnalyticsFilter = {}));
    (function(MetricsFilter2) {
      MetricsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(MetricsFilter || (MetricsFilter = {}));
    InvalidObjectState = class _InvalidObjectState extends S3ServiceException {
      name = "InvalidObjectState";
      $fault = "client";
      StorageClass;
      AccessTier;
      constructor(opts) {
        super({
          name: "InvalidObjectState",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    NoSuchKey = class _NoSuchKey extends S3ServiceException {
      name = "NoSuchKey";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NoSuchKey",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NoSuchKey.prototype);
      }
    };
    NotFound = class _NotFound extends S3ServiceException {
      name = "NotFound";
      $fault = "client";
      constructor(opts) {
        super({
          name: "NotFound",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _NotFound.prototype);
      }
    };
    CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
    CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    CopyObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    CopyObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING2 }
    });
    CreateMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    CreateMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    SessionCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING2 },
      ...obj.SessionToken && { SessionToken: SENSITIVE_STRING2 }
    });
    CreateSessionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 },
      ...obj.Credentials && { Credentials: SessionCredentialsFilterSensitiveLog(obj.Credentials) }
    });
    CreateSessionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING2 }
    });
    ServerSideEncryptionRuleFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
      }
    });
    ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }
    });
    GetBucketEncryptionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    });
    SSEKMSFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KeyId && { KeyId: SENSITIVE_STRING2 }
    });
    InventoryEncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }
    });
    InventoryS3BucketDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }
    });
    InventoryDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
      }
    });
    InventoryConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }
    });
    GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    });
    GetObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
    GetObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    GetObjectAttributesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    GetObjectTorrentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    HeadObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
    HeadObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item))
      }
    });
  }
});
function escapeAttribute2(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
var init_escape_attribute2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js"() {
  }
});
function escapeElement2(value) {
  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}
var init_escape_element2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js"() {
  }
});
var XmlText2;
var init_XmlText2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js"() {
    init_escape_element2();
    XmlText2 = class {
      value;
      constructor(value) {
        this.value = value;
      }
      toString() {
        return escapeElement2("" + this.value);
      }
    };
  }
});
var XmlNode3;
var init_XmlNode2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js"() {
    init_escape_attribute2();
    init_XmlText2();
    XmlNode3 = class _XmlNode {
      name;
      children;
      attributes = {};
      static of(name, childText, withName) {
        const node = new _XmlNode(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText2(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      n(name) {
        this.name = name;
        return this;
      }
      c(child) {
        this.children.push(child);
        return this;
      }
      a(name, value) {
        if (value != null) {
          this.attributes[name] = value;
        }
        return this;
      }
      cc(input, field, withName = field) {
        if (input[field] != null) {
          const node = _XmlNode.of(field, input[field]).withName(withName);
          this.c(node);
        }
      }
      l(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          nodes.map((node) => {
            node.withName(memberName);
            this.c(node);
          });
        }
      }
      lc(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          const containerNode = new _XmlNode(memberName);
          nodes.map((node) => {
            containerNode.c(node);
          });
          this.c(containerNode);
        }
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (attribute != null) {
            xmlText += ` ${attributeName}="${escapeAttribute2("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c5) => c5.toString()).join("")}</${this.name}>`;
      }
    };
  }
});
var init_dist_es67 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/xml-builder/dist-es/index.js"() {
    init_XmlNode2();
    init_XmlText2();
  }
});
var EncryptionTypeMismatch;
var InvalidRequest;
var InvalidWriteOffset;
var TooManyParts;
var IdempotencyParameterMismatch;
var ObjectAlreadyInActiveTierError;
var SelectObjectContentEventStream;
var ListPartsRequestFilterSensitiveLog;
var PutBucketEncryptionRequestFilterSensitiveLog;
var PutBucketInventoryConfigurationRequestFilterSensitiveLog;
var PutObjectOutputFilterSensitiveLog;
var PutObjectRequestFilterSensitiveLog;
var EncryptionFilterSensitiveLog;
var S3LocationFilterSensitiveLog;
var OutputLocationFilterSensitiveLog;
var RestoreRequestFilterSensitiveLog;
var RestoreObjectRequestFilterSensitiveLog;
var SelectObjectContentOutputFilterSensitiveLog;
var SelectObjectContentRequestFilterSensitiveLog;
var UploadPartOutputFilterSensitiveLog;
var UploadPartRequestFilterSensitiveLog;
var UploadPartCopyOutputFilterSensitiveLog;
var UploadPartCopyRequestFilterSensitiveLog;
var WriteGetObjectResponseRequestFilterSensitiveLog;
var init_models_1 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js"() {
    init_dist_es64();
    init_models_0();
    init_S3ServiceException();
    EncryptionTypeMismatch = class _EncryptionTypeMismatch extends S3ServiceException {
      name = "EncryptionTypeMismatch";
      $fault = "client";
      constructor(opts) {
        super({
          name: "EncryptionTypeMismatch",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _EncryptionTypeMismatch.prototype);
      }
    };
    InvalidRequest = class _InvalidRequest extends S3ServiceException {
      name = "InvalidRequest";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidRequest",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequest.prototype);
      }
    };
    InvalidWriteOffset = class _InvalidWriteOffset extends S3ServiceException {
      name = "InvalidWriteOffset";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidWriteOffset",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidWriteOffset.prototype);
      }
    };
    TooManyParts = class _TooManyParts extends S3ServiceException {
      name = "TooManyParts";
      $fault = "client";
      constructor(opts) {
        super({
          name: "TooManyParts",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TooManyParts.prototype);
      }
    };
    IdempotencyParameterMismatch = class _IdempotencyParameterMismatch extends S3ServiceException {
      name = "IdempotencyParameterMismatch";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IdempotencyParameterMismatch",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IdempotencyParameterMismatch.prototype);
      }
    };
    ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError extends S3ServiceException {
      name = "ObjectAlreadyInActiveTierError";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError.prototype);
      }
    };
    (function(SelectObjectContentEventStream2) {
      SelectObjectContentEventStream2.visit = (value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
    ListPartsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    PutBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    });
    PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    });
    PutObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    PutObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING2 }
    });
    EncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING2 }
    });
    S3LocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }
    });
    OutputLocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }
    });
    RestoreRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }
    });
    RestoreObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }
    });
    SelectObjectContentOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: "STREAMING_CONTENT" }
    });
    SelectObjectContentRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    UploadPartOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
    UploadPartRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 }
    });
    UploadPartCopyOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
    UploadPartCopyRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING2 },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING2 }
    });
    WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING2 }
    });
  }
});
var se_AbortMultipartUploadCommand;
var se_CompleteMultipartUploadCommand;
var se_CopyObjectCommand;
var se_CreateBucketCommand;
var se_CreateBucketMetadataConfigurationCommand;
var se_CreateBucketMetadataTableConfigurationCommand;
var se_CreateMultipartUploadCommand;
var se_CreateSessionCommand;
var se_DeleteBucketCommand;
var se_DeleteBucketAnalyticsConfigurationCommand;
var se_DeleteBucketCorsCommand;
var se_DeleteBucketEncryptionCommand;
var se_DeleteBucketIntelligentTieringConfigurationCommand;
var se_DeleteBucketInventoryConfigurationCommand;
var se_DeleteBucketLifecycleCommand;
var se_DeleteBucketMetadataConfigurationCommand;
var se_DeleteBucketMetadataTableConfigurationCommand;
var se_DeleteBucketMetricsConfigurationCommand;
var se_DeleteBucketOwnershipControlsCommand;
var se_DeleteBucketPolicyCommand;
var se_DeleteBucketReplicationCommand;
var se_DeleteBucketTaggingCommand;
var se_DeleteBucketWebsiteCommand;
var se_DeleteObjectCommand;
var se_DeleteObjectsCommand;
var se_DeleteObjectTaggingCommand;
var se_DeletePublicAccessBlockCommand;
var se_GetBucketAccelerateConfigurationCommand;
var se_GetBucketAclCommand;
var se_GetBucketAnalyticsConfigurationCommand;
var se_GetBucketCorsCommand;
var se_GetBucketEncryptionCommand;
var se_GetBucketIntelligentTieringConfigurationCommand;
var se_GetBucketInventoryConfigurationCommand;
var se_GetBucketLifecycleConfigurationCommand;
var se_GetBucketLocationCommand;
var se_GetBucketLoggingCommand;
var se_GetBucketMetadataConfigurationCommand;
var se_GetBucketMetadataTableConfigurationCommand;
var se_GetBucketMetricsConfigurationCommand;
var se_GetBucketNotificationConfigurationCommand;
var se_GetBucketOwnershipControlsCommand;
var se_GetBucketPolicyCommand;
var se_GetBucketPolicyStatusCommand;
var se_GetBucketReplicationCommand;
var se_GetBucketRequestPaymentCommand;
var se_GetBucketTaggingCommand;
var se_GetBucketVersioningCommand;
var se_GetBucketWebsiteCommand;
var se_GetObjectCommand;
var se_GetObjectAclCommand;
var se_GetObjectAttributesCommand;
var se_GetObjectLegalHoldCommand;
var se_GetObjectLockConfigurationCommand;
var se_GetObjectRetentionCommand;
var se_GetObjectTaggingCommand;
var se_GetObjectTorrentCommand;
var se_GetPublicAccessBlockCommand;
var se_HeadBucketCommand;
var se_HeadObjectCommand;
var se_ListBucketAnalyticsConfigurationsCommand;
var se_ListBucketIntelligentTieringConfigurationsCommand;
var se_ListBucketInventoryConfigurationsCommand;
var se_ListBucketMetricsConfigurationsCommand;
var se_ListBucketsCommand;
var se_ListDirectoryBucketsCommand;
var se_ListMultipartUploadsCommand;
var se_ListObjectsCommand;
var se_ListObjectsV2Command;
var se_ListObjectVersionsCommand;
var se_ListPartsCommand;
var se_PutBucketAccelerateConfigurationCommand;
var se_PutBucketAclCommand;
var se_PutBucketAnalyticsConfigurationCommand;
var se_PutBucketCorsCommand;
var se_PutBucketEncryptionCommand;
var se_PutBucketIntelligentTieringConfigurationCommand;
var se_PutBucketInventoryConfigurationCommand;
var se_PutBucketLifecycleConfigurationCommand;
var se_PutBucketLoggingCommand;
var se_PutBucketMetricsConfigurationCommand;
var se_PutBucketNotificationConfigurationCommand;
var se_PutBucketOwnershipControlsCommand;
var se_PutBucketPolicyCommand;
var se_PutBucketReplicationCommand;
var se_PutBucketRequestPaymentCommand;
var se_PutBucketTaggingCommand;
var se_PutBucketVersioningCommand;
var se_PutBucketWebsiteCommand;
var se_PutObjectCommand;
var se_PutObjectAclCommand;
var se_PutObjectLegalHoldCommand;
var se_PutObjectLockConfigurationCommand;
var se_PutObjectRetentionCommand;
var se_PutObjectTaggingCommand;
var se_PutPublicAccessBlockCommand;
var se_RenameObjectCommand;
var se_RestoreObjectCommand;
var se_SelectObjectContentCommand;
var se_UpdateBucketMetadataInventoryTableConfigurationCommand;
var se_UpdateBucketMetadataJournalTableConfigurationCommand;
var se_UploadPartCommand;
var se_UploadPartCopyCommand;
var se_WriteGetObjectResponseCommand;
var de_AbortMultipartUploadCommand;
var de_CompleteMultipartUploadCommand;
var de_CopyObjectCommand;
var de_CreateBucketCommand;
var de_CreateBucketMetadataConfigurationCommand;
var de_CreateBucketMetadataTableConfigurationCommand;
var de_CreateMultipartUploadCommand;
var de_CreateSessionCommand;
var de_DeleteBucketCommand;
var de_DeleteBucketAnalyticsConfigurationCommand;
var de_DeleteBucketCorsCommand;
var de_DeleteBucketEncryptionCommand;
var de_DeleteBucketIntelligentTieringConfigurationCommand;
var de_DeleteBucketInventoryConfigurationCommand;
var de_DeleteBucketLifecycleCommand;
var de_DeleteBucketMetadataConfigurationCommand;
var de_DeleteBucketMetadataTableConfigurationCommand;
var de_DeleteBucketMetricsConfigurationCommand;
var de_DeleteBucketOwnershipControlsCommand;
var de_DeleteBucketPolicyCommand;
var de_DeleteBucketReplicationCommand;
var de_DeleteBucketTaggingCommand;
var de_DeleteBucketWebsiteCommand;
var de_DeleteObjectCommand;
var de_DeleteObjectsCommand;
var de_DeleteObjectTaggingCommand;
var de_DeletePublicAccessBlockCommand;
var de_GetBucketAccelerateConfigurationCommand;
var de_GetBucketAclCommand;
var de_GetBucketAnalyticsConfigurationCommand;
var de_GetBucketCorsCommand;
var de_GetBucketEncryptionCommand;
var de_GetBucketIntelligentTieringConfigurationCommand;
var de_GetBucketInventoryConfigurationCommand;
var de_GetBucketLifecycleConfigurationCommand;
var de_GetBucketLocationCommand;
var de_GetBucketLoggingCommand;
var de_GetBucketMetadataConfigurationCommand;
var de_GetBucketMetadataTableConfigurationCommand;
var de_GetBucketMetricsConfigurationCommand;
var de_GetBucketNotificationConfigurationCommand;
var de_GetBucketOwnershipControlsCommand;
var de_GetBucketPolicyCommand;
var de_GetBucketPolicyStatusCommand;
var de_GetBucketReplicationCommand;
var de_GetBucketRequestPaymentCommand;
var de_GetBucketTaggingCommand;
var de_GetBucketVersioningCommand;
var de_GetBucketWebsiteCommand;
var de_GetObjectCommand;
var de_GetObjectAclCommand;
var de_GetObjectAttributesCommand;
var de_GetObjectLegalHoldCommand;
var de_GetObjectLockConfigurationCommand;
var de_GetObjectRetentionCommand;
var de_GetObjectTaggingCommand;
var de_GetObjectTorrentCommand;
var de_GetPublicAccessBlockCommand;
var de_HeadBucketCommand;
var de_HeadObjectCommand;
var de_ListBucketAnalyticsConfigurationsCommand;
var de_ListBucketIntelligentTieringConfigurationsCommand;
var de_ListBucketInventoryConfigurationsCommand;
var de_ListBucketMetricsConfigurationsCommand;
var de_ListBucketsCommand;
var de_ListDirectoryBucketsCommand;
var de_ListMultipartUploadsCommand;
var de_ListObjectsCommand;
var de_ListObjectsV2Command;
var de_ListObjectVersionsCommand;
var de_ListPartsCommand;
var de_PutBucketAccelerateConfigurationCommand;
var de_PutBucketAclCommand;
var de_PutBucketAnalyticsConfigurationCommand;
var de_PutBucketCorsCommand;
var de_PutBucketEncryptionCommand;
var de_PutBucketIntelligentTieringConfigurationCommand;
var de_PutBucketInventoryConfigurationCommand;
var de_PutBucketLifecycleConfigurationCommand;
var de_PutBucketLoggingCommand;
var de_PutBucketMetricsConfigurationCommand;
var de_PutBucketNotificationConfigurationCommand;
var de_PutBucketOwnershipControlsCommand;
var de_PutBucketPolicyCommand;
var de_PutBucketReplicationCommand;
var de_PutBucketRequestPaymentCommand;
var de_PutBucketTaggingCommand;
var de_PutBucketVersioningCommand;
var de_PutBucketWebsiteCommand;
var de_PutObjectCommand;
var de_PutObjectAclCommand;
var de_PutObjectLegalHoldCommand;
var de_PutObjectLockConfigurationCommand;
var de_PutObjectRetentionCommand;
var de_PutObjectTaggingCommand;
var de_PutPublicAccessBlockCommand;
var de_RenameObjectCommand;
var de_RestoreObjectCommand;
var de_SelectObjectContentCommand;
var de_UpdateBucketMetadataInventoryTableConfigurationCommand;
var de_UpdateBucketMetadataJournalTableConfigurationCommand;
var de_UploadPartCommand;
var de_UploadPartCopyCommand;
var de_WriteGetObjectResponseCommand;
var de_CommandError;
var throwDefaultError2;
var de_BucketAlreadyExistsRes;
var de_BucketAlreadyOwnedByYouRes;
var de_EncryptionTypeMismatchRes;
var de_IdempotencyParameterMismatchRes;
var de_InvalidObjectStateRes;
var de_InvalidRequestRes;
var de_InvalidWriteOffsetRes;
var de_NoSuchBucketRes;
var de_NoSuchKeyRes;
var de_NoSuchUploadRes;
var de_NotFoundRes;
var de_ObjectAlreadyInActiveTierErrorRes;
var de_ObjectNotInActiveTierErrorRes;
var de_TooManyPartsRes;
var de_SelectObjectContentEventStream;
var de_ContinuationEvent_event;
var de_EndEvent_event;
var de_ProgressEvent_event;
var de_RecordsEvent_event;
var de_StatsEvent_event;
var se_AbortIncompleteMultipartUpload;
var se_AccelerateConfiguration;
var se_AccessControlPolicy;
var se_AccessControlTranslation;
var se_AllowedHeaders;
var se_AllowedMethods;
var se_AllowedOrigins;
var se_AnalyticsAndOperator;
var se_AnalyticsConfiguration;
var se_AnalyticsExportDestination;
var se_AnalyticsFilter;
var se_AnalyticsS3BucketDestination;
var se_BucketInfo;
var se_BucketLifecycleConfiguration;
var se_BucketLoggingStatus;
var se_CompletedMultipartUpload;
var se_CompletedPart;
var se_CompletedPartList;
var se_Condition;
var se_CORSConfiguration;
var se_CORSRule;
var se_CORSRules;
var se_CreateBucketConfiguration;
var se_CSVInput;
var se_CSVOutput;
var se_DefaultRetention;
var se_Delete;
var se_DeleteMarkerReplication;
var se_Destination;
var se_Encryption;
var se_EncryptionConfiguration;
var se_ErrorDocument;
var se_EventBridgeConfiguration;
var se_EventList;
var se_ExistingObjectReplication;
var se_ExposeHeaders;
var se_FilterRule;
var se_FilterRuleList;
var se_GlacierJobParameters;
var se_Grant;
var se_Grantee;
var se_Grants;
var se_IndexDocument;
var se_InputSerialization;
var se_IntelligentTieringAndOperator;
var se_IntelligentTieringConfiguration;
var se_IntelligentTieringFilter;
var se_InventoryConfiguration;
var se_InventoryDestination;
var se_InventoryEncryption;
var se_InventoryFilter;
var se_InventoryOptionalFields;
var se_InventoryS3BucketDestination;
var se_InventorySchedule;
var se_InventoryTableConfiguration;
var se_InventoryTableConfigurationUpdates;
var se_JournalTableConfiguration;
var se_JournalTableConfigurationUpdates;
var se_JSONInput;
var se_JSONOutput;
var se_LambdaFunctionConfiguration;
var se_LambdaFunctionConfigurationList;
var se_LifecycleExpiration;
var se_LifecycleRule;
var se_LifecycleRuleAndOperator;
var se_LifecycleRuleFilter;
var se_LifecycleRules;
var se_LocationInfo;
var se_LoggingEnabled;
var se_MetadataConfiguration;
var se_MetadataEntry;
var se_MetadataTableConfiguration;
var se_MetadataTableEncryptionConfiguration;
var se_Metrics;
var se_MetricsAndOperator;
var se_MetricsConfiguration;
var se_MetricsFilter;
var se_NoncurrentVersionExpiration;
var se_NoncurrentVersionTransition;
var se_NoncurrentVersionTransitionList;
var se_NotificationConfiguration;
var se_NotificationConfigurationFilter;
var se_ObjectIdentifier;
var se_ObjectIdentifierList;
var se_ObjectLockConfiguration;
var se_ObjectLockLegalHold;
var se_ObjectLockRetention;
var se_ObjectLockRule;
var se_OutputLocation;
var se_OutputSerialization;
var se_Owner;
var se_OwnershipControls;
var se_OwnershipControlsRule;
var se_OwnershipControlsRules;
var se_ParquetInput;
var se_PartitionedPrefix;
var se_PublicAccessBlockConfiguration;
var se_QueueConfiguration;
var se_QueueConfigurationList;
var se_RecordExpiration;
var se_Redirect;
var se_RedirectAllRequestsTo;
var se_ReplicaModifications;
var se_ReplicationConfiguration;
var se_ReplicationRule;
var se_ReplicationRuleAndOperator;
var se_ReplicationRuleFilter;
var se_ReplicationRules;
var se_ReplicationTime;
var se_ReplicationTimeValue;
var se_RequestPaymentConfiguration;
var se_RequestProgress;
var se_RestoreRequest;
var se_RoutingRule;
var se_RoutingRules;
var se_S3KeyFilter;
var se_S3Location;
var se_S3TablesDestination;
var se_ScanRange;
var se_SelectParameters;
var se_ServerSideEncryptionByDefault;
var se_ServerSideEncryptionConfiguration;
var se_ServerSideEncryptionRule;
var se_ServerSideEncryptionRules;
var se_SimplePrefix;
var se_SourceSelectionCriteria;
var se_SSEKMS;
var se_SseKmsEncryptedObjects;
var se_SSES3;
var se_StorageClassAnalysis;
var se_StorageClassAnalysisDataExport;
var se_Tag;
var se_Tagging;
var se_TagSet;
var se_TargetGrant;
var se_TargetGrants;
var se_TargetObjectKeyFormat;
var se_Tiering;
var se_TieringList;
var se_TopicConfiguration;
var se_TopicConfigurationList;
var se_Transition;
var se_TransitionList;
var se_UserMetadata;
var se_VersioningConfiguration;
var se_WebsiteConfiguration;
var de_AbortIncompleteMultipartUpload;
var de_AccessControlTranslation;
var de_AllowedHeaders;
var de_AllowedMethods;
var de_AllowedOrigins;
var de_AnalyticsAndOperator;
var de_AnalyticsConfiguration;
var de_AnalyticsConfigurationList;
var de_AnalyticsExportDestination;
var de_AnalyticsFilter;
var de_AnalyticsS3BucketDestination;
var de_Bucket;
var de_Buckets;
var de_Checksum;
var de_ChecksumAlgorithmList;
var de_CommonPrefix;
var de_CommonPrefixList;
var de_Condition;
var de_ContinuationEvent;
var de_CopyObjectResult;
var de_CopyPartResult;
var de_CORSRule;
var de_CORSRules;
var de_DefaultRetention;
var de_DeletedObject;
var de_DeletedObjects;
var de_DeleteMarkerEntry;
var de_DeleteMarkerReplication;
var de_DeleteMarkers;
var de_Destination;
var de_DestinationResult;
var de_EncryptionConfiguration;
var de_EndEvent;
var de__Error;
var de_ErrorDetails;
var de_ErrorDocument;
var de_Errors;
var de_EventBridgeConfiguration;
var de_EventList;
var de_ExistingObjectReplication;
var de_ExposeHeaders;
var de_FilterRule;
var de_FilterRuleList;
var de_GetBucketMetadataConfigurationResult;
var de_GetBucketMetadataTableConfigurationResult;
var de_GetObjectAttributesParts;
var de_Grant;
var de_Grantee;
var de_Grants;
var de_IndexDocument;
var de_Initiator;
var de_IntelligentTieringAndOperator;
var de_IntelligentTieringConfiguration;
var de_IntelligentTieringConfigurationList;
var de_IntelligentTieringFilter;
var de_InventoryConfiguration;
var de_InventoryConfigurationList;
var de_InventoryDestination;
var de_InventoryEncryption;
var de_InventoryFilter;
var de_InventoryOptionalFields;
var de_InventoryS3BucketDestination;
var de_InventorySchedule;
var de_InventoryTableConfigurationResult;
var de_JournalTableConfigurationResult;
var de_LambdaFunctionConfiguration;
var de_LambdaFunctionConfigurationList;
var de_LifecycleExpiration;
var de_LifecycleRule;
var de_LifecycleRuleAndOperator;
var de_LifecycleRuleFilter;
var de_LifecycleRules;
var de_LoggingEnabled;
var de_MetadataConfigurationResult;
var de_MetadataTableConfigurationResult;
var de_Metrics;
var de_MetricsAndOperator;
var de_MetricsConfiguration;
var de_MetricsConfigurationList;
var de_MetricsFilter;
var de_MultipartUpload;
var de_MultipartUploadList;
var de_NoncurrentVersionExpiration;
var de_NoncurrentVersionTransition;
var de_NoncurrentVersionTransitionList;
var de_NotificationConfigurationFilter;
var de__Object;
var de_ObjectList;
var de_ObjectLockConfiguration;
var de_ObjectLockLegalHold;
var de_ObjectLockRetention;
var de_ObjectLockRule;
var de_ObjectPart;
var de_ObjectVersion;
var de_ObjectVersionList;
var de_Owner;
var de_OwnershipControls;
var de_OwnershipControlsRule;
var de_OwnershipControlsRules;
var de_Part;
var de_PartitionedPrefix;
var de_Parts;
var de_PartsList;
var de_PolicyStatus;
var de_Progress;
var de_PublicAccessBlockConfiguration;
var de_QueueConfiguration;
var de_QueueConfigurationList;
var de_RecordExpiration;
var de_Redirect;
var de_RedirectAllRequestsTo;
var de_ReplicaModifications;
var de_ReplicationConfiguration;
var de_ReplicationRule;
var de_ReplicationRuleAndOperator;
var de_ReplicationRuleFilter;
var de_ReplicationRules;
var de_ReplicationTime;
var de_ReplicationTimeValue;
var de_RestoreStatus;
var de_RoutingRule;
var de_RoutingRules;
var de_S3KeyFilter;
var de_S3TablesDestinationResult;
var de_ServerSideEncryptionByDefault;
var de_ServerSideEncryptionConfiguration;
var de_ServerSideEncryptionRule;
var de_ServerSideEncryptionRules;
var de_SessionCredentials;
var de_SimplePrefix;
var de_SourceSelectionCriteria;
var de_SSEKMS;
var de_SseKmsEncryptedObjects;
var de_SSES3;
var de_Stats;
var de_StorageClassAnalysis;
var de_StorageClassAnalysisDataExport;
var de_Tag;
var de_TagSet;
var de_TargetGrant;
var de_TargetGrants;
var de_TargetObjectKeyFormat;
var de_Tiering;
var de_TieringList;
var de_TopicConfiguration;
var de_TopicConfigurationList;
var de_Transition;
var de_TransitionList;
var deserializeMetadata2;
var collectBodyString2;
var _A;
var _AAO;
var _AC;
var _ACL;
var _ACLc;
var _ACLn;
var _ACP;
var _ACT;
var _ACc;
var _AD;
var _AED;
var _AF;
var _AH;
var _AHl;
var _AI;
var _AIMU;
var _AIc;
var _AKI;
var _AM;
var _AMl;
var _AO;
var _AOl;
var _APA;
var _APAc;
var _AQRD;
var _AR;
var _ARI;
var _AS;
var _ASBD;
var _ASEFF;
var _ASSEBD;
var _AT;
var _Ac;
var _B;
var _BA;
var _BAI;
var _BAS;
var _BGR;
var _BI;
var _BKE;
var _BLC;
var _BLCu;
var _BLN;
var _BLP;
var _BLS;
var _BLT;
var _BN;
var _BP;
var _BPA;
var _BPP;
var _BR;
var _BRy;
var _BS;
var _BT;
var _BVS;
var _Bu;
var _C;
var _CA;
var _CACL;
var _CBC;
var _CC;
var _CCRC;
var _CCRCC;
var _CCRCNVME;
var _CD;
var _CDr;
var _CE;
var _CF;
var _CFC;
var _CL;
var _CLo;
var _CM;
var _CMD;
var _CMU;
var _CORSC;
var _CORSR;
var _CORSRu;
var _CP;
var _CPo;
var _CR;
var _CRSBA;
var _CS;
var _CSHA;
var _CSHAh;
var _CSIM;
var _CSIMS;
var _CSINM;
var _CSIUS;
var _CSR;
var _CSSSECA;
var _CSSSECK;
var _CSSSECKMD;
var _CSV;
var _CSVI;
var _CSVIn;
var _CSVO;
var _CSo;
var _CT;
var _CTl;
var _CTo;
var _CTom;
var _CTon;
var _Ch;
var _Co;
var _Cod;
var _Com;
var _Con;
var _D;
var _DAI;
var _DE;
var _DIM;
var _DIMS;
var _DINM;
var _DIUS;
var _DM;
var _DMR;
var _DMRS;
var _DMVI;
var _DMe;
var _DN;
var _DR;
var _DRe;
var _DRes;
var _Da;
var _Dat;
var _De;
var _Del;
var _Des;
var _Desc;
var _E;
var _EA;
var _EBC;
var _EBO;
var _EC;
var _ECn;
var _ED;
var _EH;
var _EHx;
var _EM;
var _EODM;
var _EOR;
var _EORS;
var _ERP;
var _ES;
var _ESBO;
var _ESx;
var _ESxp;
var _ET;
var _ETa;
var _ETn;
var _ETv;
var _ETx;
var _En;
var _Ena;
var _End;
var _Er;
var _Err;
var _Ev;
var _Eve;
var _Ex;
var _Exp;
var _F;
var _FD;
var _FHI;
var _FO;
var _FR;
var _FRN;
var _FRV;
var _FRi;
var _Fi;
var _Fo;
var _Fr;
var _G;
var _GFC;
var _GJP;
var _GR;
var _GRACP;
var _GW;
var _GWACP;
var _Gr;
var _Gra;
var _HECRE;
var _HN;
var _HRC;
var _I;
var _IC;
var _ICL;
var _ICS;
var _ID;
var _ID_;
var _IDn;
var _IE;
var _IEn;
var _IF;
var _IFn;
var _IFnv;
var _II;
var _IIOV;
var _IL;
var _IM;
var _IMIT;
var _IMLMT;
var _IMS;
var _IMSf;
var _INM;
var _IOF;
var _IOV;
var _IP;
var _IPA;
var _IRIP;
var _IS;
var _ISBD;
var _ISn;
var _IT;
var _ITAO;
var _ITAT;
var _ITC;
var _ITCL;
var _ITCR;
var _ITCU;
var _ITCn;
var _ITD;
var _ITF;
var _ITI;
var _ITS;
var _IUS;
var _In;
var _Ini;
var _JSON;
var _JSONI;
var _JSONO;
var _JSONT;
var _JTC;
var _JTCR;
var _JTCU;
var _K;
var _KC;
var _KI;
var _KKA;
var _KM;
var _KMSC;
var _KMSKI;
var _KMSMKID;
var _KPE;
var _L;
var _LC;
var _LE;
var _LEi;
var _LFA;
var _LFC;
var _LFCa;
var _LI;
var _LM;
var _LMT;
var _LNAS;
var _LP;
var _LR;
var _LRAO;
var _LRF;
var _LT;
var _M;
var _MAO;
var _MAS;
var _MB;
var _MC;
var _MCL;
var _MCR;
var _MCe;
var _MD;
var _MDB;
var _MDf;
var _ME;
var _MF;
var _MFA;
var _MFAD;
var _MI;
var _MK;
var _MKe;
var _MM;
var _MOS;
var _MP;
var _MS;
var _MTC;
var _MTCR;
var _MTEC;
var _MU;
var _MV;
var _Me;
var _Mes;
var _Mi;
var _Mo;
var _N;
var _NC;
var _NCF;
var _NCT;
var _ND;
var _NI;
var _NKM;
var _NM;
var _NNV;
var _NPNM;
var _NUIM;
var _NVE;
var _NVIM;
var _NVT;
var _NVTo;
var _O;
var _OA;
var _OC;
var _OCACL;
var _OCR;
var _OF;
var _OI;
var _OK;
var _OL;
var _OLC;
var _OLE;
var _OLEFB;
var _OLLH;
var _OLLHS;
var _OLM;
var _OLR;
var _OLRM;
var _OLRUD;
var _OLRb;
var _OO;
var _OOA;
var _OOw;
var _OP;
var _OS;
var _OSGT;
var _OSGTB;
var _OSLT;
var _OSLTB;
var _OSV;
var _OSb;
var _OVI;
var _Ob;
var _P;
var _PABC;
var _PC;
var _PDS;
var _PI;
var _PN;
var _PNM;
var _PP;
var _Pa;
var _Par;
var _Parq;
var _Part;
var _Pe;
var _Pr;
var _Pri;
var _Q;
var _QA;
var _QC;
var _QCu;
var _QCuo;
var _QEC;
var _QF;
var _Qu;
var _R;
var _RART;
var _RC;
var _RCC;
var _RCD;
var _RCE;
var _RCL;
var _RCT;
var _RCe;
var _RD;
var _RE;
var _RED;
var _REDe;
var _REe;
var _RKKID;
var _RKPW;
var _RKW;
var _RM;
var _RMS;
var _ROP;
var _RP;
var _RPB;
var _RPC;
var _RPe;
var _RR;
var _RRAO;
var _RRF;
var _RRS;
var _RRT;
var _RRe;
var _RRes;
var _RRo;
var _RRou;
var _RS;
var _RSe;
var _RSes;
var _RT;
var _RTS;
var _RTV;
var _RTe;
var _RUD;
var _Re;
var _Red;
var _Ro;
var _Ru;
var _Rul;
var _S;
var _SA;
var _SAK;
var _SAs;
var _SBD;
var _SC;
var _SCA;
var _SCADE;
var _SCASV;
var _SCt;
var _SDV;
var _SIM;
var _SIMS;
var _SINM;
var _SIUS;
var _SK;
var _SKEO;
var _SKEOS;
var _SKF;
var _SKe;
var _SL;
var _SM;
var _SOCR;
var _SP;
var _SPi;
var _SR;
var _SS;
var _SSC;
var _SSE;
var _SSEA;
var _SSEBD;
var _SSEC;
var _SSECA;
var _SSECK;
var _SSECKMD;
var _SSEKMS;
var _SSEKMSEC;
var _SSEKMSKI;
var _SSER;
var _SSES;
var _ST;
var _STBA;
var _STD;
var _STDR;
var _STN;
var _S_;
var _Sc;
var _Se;
var _Si;
var _St;
var _Su;
var _T;
var _TA;
var _TAa;
var _TB;
var _TBA;
var _TBT;
var _TC;
var _TCo;
var _TCop;
var _TD;
var _TDMOS;
var _TG;
var _TGa;
var _TN;
var _TNa;
var _TOKF;
var _TP;
var _TPC;
var _TS;
var _TSA;
var _TSC;
var _TSa;
var _Ta;
var _Tag;
var _Ti;
var _Tie;
var _Tier;
var _Tim;
var _To;
var _Top;
var _Tr;
var _Tra;
var _Ty;
var _U;
var _UI;
var _UIM;
var _UM;
var _URI;
var _Up;
var _V;
var _VC;
var _VCe;
var _VI;
var _VIM;
var _Va;
var _Ve;
var _WC;
var _WOB;
var _WRL;
var _Y;
var _a;
var _ac;
var _acl;
var _ar;
var _at;
var _br;
var _c;
var _cc;
var _cd;
var _ce;
var _cl;
var _cl_;
var _cm;
var _cr;
var _ct;
var _ct_;
var _d;
var _de;
var _e;
var _en;
var _et;
var _eta;
var _ex;
var _fo;
var _i;
var _im;
var _ims;
var _in;
var _inm;
var _it;
var _ius;
var _km;
var _l;
var _lh;
var _lm;
var _lo;
var _log;
var _lt;
var _m;
var _mC;
var _mIT;
var _mJT;
var _mT;
var _ma;
var _mb;
var _mdb;
var _me;
var _mk;
var _mp;
var _mu;
var _n;
var _oC;
var _ol;
var _p;
var _pAB;
var _pN;
var _pS;
var _pnm;
var _pr;
var _r;
var _rO;
var _rP;
var _ra;
var _rcc;
var _rcd;
var _rce;
var _rcl;
var _rct;
var _re;
var _res;
var _ret;
var _s;
var _sa;
var _se;
var _st;
var _t;
var _to;
var _u;
var _uI;
var _uim;
var _v;
var _vI;
var _ve;
var _ver;
var _vim;
var _w;
var _x;
var _xaa;
var _xaad;
var _xaapa;
var _xaari;
var _xaas;
var _xaba;
var _xabgr;
var _xabln;
var _xablt;
var _xabole;
var _xabolt;
var _xabr;
var _xaca;
var _xacc;
var _xacc_;
var _xacc__;
var _xacm;
var _xacrsba;
var _xacs;
var _xacs_;
var _xacs__;
var _xacsim;
var _xacsims;
var _xacsinm;
var _xacsius;
var _xacsm;
var _xacsr;
var _xacssseca;
var _xacssseck;
var _xacssseckm;
var _xacsvi;
var _xact;
var _xact_;
var _xadm;
var _xae;
var _xaebo;
var _xafec;
var _xafem;
var _xafhar;
var _xafhcc;
var _xafhcd;
var _xafhce;
var _xafhcl;
var _xafhcr;
var _xafhct;
var _xafhe;
var _xafhe_;
var _xafhlm;
var _xafhxacc;
var _xafhxacc_;
var _xafhxacc__;
var _xafhxacs;
var _xafhxacs_;
var _xafhxadm;
var _xafhxae;
var _xafhxamm;
var _xafhxampc;
var _xafhxaollh;
var _xafhxaolm;
var _xafhxaolrud;
var _xafhxar;
var _xafhxarc;
var _xafhxars;
var _xafhxasc;
var _xafhxasse;
var _xafhxasseakki;
var _xafhxassebke;
var _xafhxasseca;
var _xafhxasseckm;
var _xafhxatc;
var _xafhxavi;
var _xafs;
var _xagfc;
var _xagr;
var _xagra;
var _xagw;
var _xagwa;
var _xaimit;
var _xaimlmt;
var _xaims;
var _xam;
var _xamd;
var _xamm;
var _xamos;
var _xamp;
var _xampc;
var _xaoa;
var _xaollh;
var _xaolm;
var _xaolrud;
var _xaoo;
var _xaooa;
var _xaos;
var _xapnm;
var _xar;
var _xarc;
var _xarop;
var _xarp;
var _xarr;
var _xars;
var _xars_;
var _xarsim;
var _xarsims;
var _xarsinm;
var _xarsius;
var _xart;
var _xasc;
var _xasca;
var _xasdv;
var _xasebo;
var _xasse;
var _xasseakki;
var _xassebke;
var _xassec;
var _xasseca;
var _xasseck;
var _xasseckm;
var _xat;
var _xatc;
var _xatd;
var _xatdmos;
var _xavi;
var _xawob;
var _xawrl;
var _xi;
var init_Aws_restXml = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js"() {
    init_dist_es25();
    init_dist_es67();
    init_dist_es14();
    init_dist_es38();
    init_dist_es64();
    init_esm_node();
    init_models_0();
    init_models_1();
    init_S3ServiceException();
    se_AbortMultipartUploadCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaimit]: [() => isSerializableHeaderValue(input[_IMIT]), () => dateToUtcString(input[_IMIT]).toString()]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "AbortMultipartUpload"],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CompleteMultipartUploadCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xact]: input[_CT],
        [_xamos]: [() => isSerializableHeaderValue(input[_MOS]), () => input[_MOS].toString()],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_im]: input[_IM],
        [_inm]: input[_INM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.n("CompleteMultipartUpload");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CopyObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_xaca]: input[_CA],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CTo],
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => dateToUtcString(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => dateToUtcString(input[_CSIUS]).toString()],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xamd]: input[_MD],
        [_xatd]: input[_TD],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "CopyObject"]
      });
      let body;
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CreateBucketCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xabole]: [() => isSerializableHeaderValue(input[_OLEFB]), () => input[_OLEFB].toString()],
        [_xaoo]: input[_OO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).b(body);
      return b5.build();
    };
    se_CreateBucketMetadataConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mC]: [, ""]
      });
      let body;
      let contents;
      if (input.MetadataConfiguration !== void 0) {
        contents = se_MetadataConfiguration(input.MetadataConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CreateBucketMetadataTableConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mT]: [, ""]
      });
      let body;
      let contents;
      if (input.MetadataTableConfiguration !== void 0) {
        contents = se_MetadataTableConfiguration(input.MetadataTableConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CreateMultipartUploadCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CTo],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xaca]: input[_CA],
        [_xact]: input[_CT]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_u]: [, ""]
      });
      let body;
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_CreateSessionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xacsm]: input[_SM],
        [_xasse]: input[_SSE],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_s]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b5.m("DELETE").h(headers).b(body);
      return b5.build();
    };
    se_DeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_a]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketCorsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_c]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketEncryptionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_en]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_it]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketInventoryConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_in]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketLifecycleCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_l]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketMetadataConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mC]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketMetadataTableConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mT]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketMetricsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_m]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketOwnershipControlsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_oC]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketPolicyCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_p]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketReplicationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_r]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_t]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteBucketWebsiteCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_w]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_im]: input[_IM],
        [_xaimlmt]: [() => isSerializableHeaderValue(input[_IMLMT]), () => dateToUtcString(input[_IMLMT]).toString()],
        [_xaims]: [() => isSerializableHeaderValue(input[_IMS]), () => input[_IMS].toString()]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "DeleteObject"],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteObjectsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_d]: [, ""]
      });
      let body;
      let contents;
      if (input.Delete !== void 0) {
        contents = se_Delete(input.Delete, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeleteObjectTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_DeletePublicAccessBlockCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_pAB]: [, ""]
      });
      let body;
      b5.m("DELETE").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketAccelerateConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_ac]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketAclCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_acl]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketAnalyticsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_a]: [, ""],
        [_xi]: [, "GetBucketAnalyticsConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketCorsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_c]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketEncryptionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_en]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_it]: [, ""],
        [_xi]: [, "GetBucketIntelligentTieringConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketInventoryConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_in]: [, ""],
        [_xi]: [, "GetBucketInventoryConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketLifecycleConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_l]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketLocationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_lo]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketLoggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_log]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketMetadataConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mC]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketMetadataTableConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mT]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketMetricsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_m]: [, ""],
        [_xi]: [, "GetBucketMetricsConfiguration"],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketNotificationConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_n]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketOwnershipControlsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_oC]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketPolicyCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_p]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketPolicyStatusCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_pS]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketReplicationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_r]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketRequestPaymentCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_rP]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_t]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketVersioningCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_v]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetBucketWebsiteCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_w]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => isSerializableHeaderValue(input[_IMSf]), () => dateToUtcString(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => dateToUtcString(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "GetObject"],
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => dateToUtcString(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectAclCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectAttributesCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xamp]: [() => isSerializableHeaderValue(input[_MP]), () => input[_MP].toString()],
        [_xapnm]: input[_PNM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaoa]: [() => isSerializableHeaderValue(input[_OA]), () => (input[_OA] || []).map(quoteHeader).join(", ")]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_at]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectLegalHoldCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectLockConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_ol]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectRetentionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetObjectTorrentCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_to]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_GetPublicAccessBlockCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_pAB]: [, ""]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_HeadBucketCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b5.m("HEAD").h(headers).b(body);
      return b5.build();
    };
    se_HeadObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => isSerializableHeaderValue(input[_IMSf]), () => dateToUtcString(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => dateToUtcString(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => dateToUtcString(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b5.m("HEAD").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListBucketAnalyticsConfigurationsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_a]: [, ""],
        [_xi]: [, "ListBucketAnalyticsConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_it]: [, ""],
        [_xi]: [, "ListBucketIntelligentTieringConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListBucketInventoryConfigurationsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_in]: [, ""],
        [_xi]: [, "ListBucketInventoryConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListBucketMetricsConfigurationsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_m]: [, ""],
        [_xi]: [, "ListBucketMetricsConfigurations"],
        [_ct_]: [, input[_CTon]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListBucketsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = {};
      b5.bp("/");
      const query = map({
        [_xi]: [, "ListBuckets"],
        [_mb]: [() => input.MaxBuckets !== void 0, () => input[_MB].toString()],
        [_ct_]: [, input[_CTon]],
        [_pr]: [, input[_P]],
        [_br]: [, input[_BR]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListDirectoryBucketsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = {};
      b5.bp("/");
      const query = map({
        [_xi]: [, "ListDirectoryBuckets"],
        [_ct_]: [, input[_CTon]],
        [_mdb]: [() => input.MaxDirectoryBuckets !== void 0, () => input[_MDB].toString()]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListMultipartUploadsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_u]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mu]: [() => input.MaxUploads !== void 0, () => input[_MU].toString()],
        [_pr]: [, input[_P]],
        [_uim]: [, input[_UIM]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListObjectsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_ma]: [, input[_M]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListObjectsV2Command = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_lt]: [, "2"],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_ct_]: [, input[_CTon]],
        [_fo]: [() => input.FetchOwner !== void 0, () => input[_FO].toString()],
        [_sa]: [, input[_SA]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListObjectVersionsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP],
        [_xaooa]: [() => isSerializableHeaderValue(input[_OOA]), () => (input[_OOA] || []).map(quoteHeader).join(", ")]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_ver]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_vim]: [, input[_VIM]]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListPartsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "ListParts"],
        [_mp]: [() => input.MaxParts !== void 0, () => input[_MP].toString()],
        [_pnm]: [, input[_PNM]],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketAccelerateConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_ac]: [, ""]
      });
      let body;
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketAclCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_acl]: [, ""]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketAnalyticsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_a]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketCorsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_c]: [, ""]
      });
      let body;
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketEncryptionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_en]: [, ""]
      });
      let body;
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_it]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketInventoryConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_in]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketLifecycleConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xatdmos]: input[_TDMOS]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_l]: [, ""]
      });
      let body;
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.n("LifecycleConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketLoggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_log]: [, ""]
      });
      let body;
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketMetricsConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_m]: [, ""],
        [_i]: [, expectNonNull(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketNotificationConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasdv]: [() => isSerializableHeaderValue(input[_SDV]), () => input[_SDV].toString()]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_n]: [, ""]
      });
      let body;
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketOwnershipControlsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_oC]: [, ""]
      });
      let body;
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketPolicyCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacrsba]: [() => isSerializableHeaderValue(input[_CRSBA]), () => input[_CRSBA].toString()],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_p]: [, ""]
      });
      let body;
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketReplicationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xabolt]: input[_To],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_r]: [, ""]
      });
      let body;
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketRequestPaymentCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_rP]: [, ""]
      });
      let body;
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_t]: [, ""]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketVersioningCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xam]: input[_MFA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_v]: [, ""]
      });
      let body;
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutBucketWebsiteCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_w]: [, ""]
      });
      let body;
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        [_ct]: input[_CTo] || "application/octet-stream",
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_e]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_im]: input[_IM],
        [_inm]: input[_INM],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xawob]: [() => isSerializableHeaderValue(input[_WOB]), () => input[_WOB].toString()],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => isSerializableHeaderValue(input[_OLRUD]), () => serializeDateTime(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "PutObject"]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectAclCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectLegalHoldCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.LegalHold !== void 0) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.n("LegalHold");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectLockConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabolt]: input[_To],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_ol]: [, ""]
      });
      let body;
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectRetentionCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Retention !== void 0) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.n("Retention");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutObjectTaggingCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_PutPublicAccessBlockCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_pAB]: [, ""]
      });
      let body;
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_RenameObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xars]: input[_RS],
        [_im]: input[_DIM],
        [_inm]: input[_DINM],
        [_ims]: [() => isSerializableHeaderValue(input[_DIMS]), () => dateToUtcString(input[_DIMS]).toString()],
        [_ius]: [() => isSerializableHeaderValue(input[_DIUS]), () => dateToUtcString(input[_DIUS]).toString()],
        [_xarsim]: input[_SIM],
        [_xarsinm]: input[_SINM],
        [_xarsims]: [() => isSerializableHeaderValue(input[_SIMS]), () => dateToUtcString(input[_SIMS]).toString()],
        [_xarsius]: [() => isSerializableHeaderValue(input[_SIUS]), () => dateToUtcString(input[_SIUS]).toString()],
        [_xact_]: input[_CTl] ?? v4_default()
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_rO]: [, ""]
      });
      let body;
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_RestoreObjectCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_res]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_SelectObjectContentCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_se]: [, ""],
        [_st]: [, "2"]
      });
      let body;
      body = _ve;
      const bn2 = new XmlNode3(_SOCR);
      bn2.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      bn2.cc(input, _Ex);
      bn2.cc(input, _ETx);
      if (input[_IS] != null) {
        bn2.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      if (input[_OS] != null) {
        bn2.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      if (input[_RPe] != null) {
        bn2.c(se_RequestProgress(input[_RPe], context).n(_RPe));
      }
      if (input[_SR] != null) {
        bn2.c(se_ScanRange(input[_SR], context).n(_SR));
      }
      body += bn2.toString();
      b5.m("POST").h(headers).q(query).b(body);
      return b5.build();
    };
    se_UpdateBucketMetadataInventoryTableConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mIT]: [, ""]
      });
      let body;
      let contents;
      if (input.InventoryTableConfiguration !== void 0) {
        contents = se_InventoryTableConfigurationUpdates(input.InventoryTableConfiguration, context);
        contents = contents.n("InventoryTableConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_UpdateBucketMetadataJournalTableConfigurationCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        [_mJT]: [, ""]
      });
      let body;
      let contents;
      if (input.JournalTableConfiguration !== void 0) {
        contents = se_JournalTableConfigurationUpdates(input.JournalTableConfiguration, context);
        contents = contents.n("JournalTableConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_UploadPartCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacc__]: input[_CCRCNVME],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "UploadPart"],
        [_pN]: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_UploadPartCopyCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => dateToUtcString(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => dateToUtcString(input[_CSIUS]).toString()],
        [_xacsr]: input[_CSR],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO]
      });
      b5.bp("/{Key+}");
      b5.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b5.p("Key", () => input.Key, "{Key+}", true);
      const query = map({
        [_xi]: [, "UploadPartCopy"],
        [_pN]: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, expectNonNull(input[_UI], `UploadId`)]
      });
      let body;
      b5.m("PUT").h(headers).q(query).b(body);
      return b5.build();
    };
    se_WriteGetObjectResponseCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {}),
        "content-type": "application/octet-stream",
        [_xarr]: input[_RR],
        [_xart]: input[_RT],
        [_xafs]: [() => isSerializableHeaderValue(input[_SCt]), () => input[_SCt].toString()],
        [_xafec]: input[_EC],
        [_xafem]: input[_EM],
        [_xafhar]: input[_AR],
        [_xafhcc]: input[_CC],
        [_xafhcd]: input[_CD],
        [_xafhce]: input[_CE],
        [_xafhcl]: input[_CL],
        [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
        [_xafhcr]: input[_CR],
        [_xafhct]: input[_CTo],
        [_xafhxacc]: input[_CCRC],
        [_xafhxacc_]: input[_CCRCC],
        [_xafhxacc__]: input[_CCRCNVME],
        [_xafhxacs]: input[_CSHA],
        [_xafhxacs_]: input[_CSHAh],
        [_xafhxadm]: [() => isSerializableHeaderValue(input[_DM]), () => input[_DM].toString()],
        [_xafhe]: input[_ETa],
        [_xafhe_]: [() => isSerializableHeaderValue(input[_E]), () => dateToUtcString(input[_E]).toString()],
        [_xafhxae]: input[_Exp],
        [_xafhlm]: [() => isSerializableHeaderValue(input[_LM]), () => dateToUtcString(input[_LM]).toString()],
        [_xafhxamm]: [() => isSerializableHeaderValue(input[_MM]), () => input[_MM].toString()],
        [_xafhxaolm]: input[_OLM],
        [_xafhxaollh]: input[_OLLHS],
        [_xafhxaolrud]: [
          () => isSerializableHeaderValue(input[_OLRUD]),
          () => serializeDateTime(input[_OLRUD]).toString()
        ],
        [_xafhxampc]: [() => isSerializableHeaderValue(input[_PC]), () => input[_PC].toString()],
        [_xafhxars]: input[_RSe],
        [_xafhxarc]: input[_RC],
        [_xafhxar]: input[_Re],
        [_xafhxasse]: input[_SSE],
        [_xafhxasseca]: input[_SSECA],
        [_xafhxasseakki]: input[_SSEKMSKI],
        [_xafhxasseckm]: input[_SSECKMD],
        [_xafhxasc]: input[_SC],
        [_xafhxatc]: [() => isSerializableHeaderValue(input[_TC]), () => input[_TC].toString()],
        [_xafhxavi]: input[_VI],
        [_xafhxassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()]
      });
      b5.bp("/WriteGetObjectResponse");
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!isValidHostname(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      b5.hn(resolvedHostname);
      b5.m("POST").h(headers).b(body);
      return b5.build();
    };
    de_AbortMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CompleteMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_CCRC] != null) {
        contents[_CCRC] = expectString(data[_CCRC]);
      }
      if (data[_CCRCC] != null) {
        contents[_CCRCC] = expectString(data[_CCRCC]);
      }
      if (data[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(data[_CCRCNVME]);
      }
      if (data[_CSHA] != null) {
        contents[_CSHA] = expectString(data[_CSHA]);
      }
      if (data[_CSHAh] != null) {
        contents[_CSHAh] = expectString(data[_CSHAh]);
      }
      if (data[_CT] != null) {
        contents[_CT] = expectString(data[_CT]);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = expectString(data[_ETa]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_L] != null) {
        contents[_L] = expectString(data[_L]);
      }
      return contents;
    };
    de_CopyObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_CSVI]: [, output.headers[_xacsvi]],
        [_VI]: [, output.headers[_xavi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.CopyObjectResult = de_CopyObjectResult(data, context);
      return contents;
    };
    de_CreateBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_L]: [, output.headers[_lo]],
        [_BA]: [, output.headers[_xaba]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CreateBucketMetadataConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CreateBucketMetadataTableConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CreateMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => expectNonNull(parseRfc7231DateTime(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]],
        [_CA]: [, output.headers[_xaca]],
        [_CT]: [, output.headers[_xact]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_UI] != null) {
        contents[_UI] = expectString(data[_UI]);
      }
      return contents;
    };
    de_CreateSessionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_SSE]: [, output.headers[_xasse]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_C] != null) {
        contents[_C] = de_SessionCredentials(data[_C], context);
      }
      return contents;
    };
    de_DeleteBucketCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketLifecycleCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketMetadataConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketMetadataTableConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteObjectCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeleteObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Deleted === "") {
        contents[_De] = [];
      } else if (data[_De] != null) {
        contents[_De] = de_DeletedObjects(getArrayIfSingleItem(data[_De]), context);
      }
      if (data.Error === "") {
        contents[_Err] = [];
      } else if (data[_Er] != null) {
        contents[_Err] = de_Errors(getArrayIfSingleItem(data[_Er]), context);
      }
      return contents;
    };
    de_DeleteObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_DeletePublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_GetBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_S] != null) {
        contents[_S] = expectString(data[_S]);
      }
      return contents;
    };
    de_GetBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants(getArrayIfSingleItem(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    };
    de_GetBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
      return contents;
    };
    de_GetBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents[_CORSRu] = [];
      } else if (data[_CORSR] != null) {
        contents[_CORSRu] = de_CORSRules(getArrayIfSingleItem(data[_CORSR]), context);
      }
      return contents;
    };
    de_GetBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
      return contents;
    };
    de_GetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
      return contents;
    };
    de_GetBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
      return contents;
    };
    de_GetBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Rule === "") {
        contents[_Rul] = [];
      } else if (data[_Ru] != null) {
        contents[_Rul] = de_LifecycleRules(getArrayIfSingleItem(data[_Ru]), context);
      }
      return contents;
    };
    de_GetBucketLocationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_LC] != null) {
        contents[_LC] = expectString(data[_LC]);
      }
      return contents;
    };
    de_GetBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_LE] != null) {
        contents[_LE] = de_LoggingEnabled(data[_LE], context);
      }
      return contents;
    };
    de_GetBucketMetadataConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.GetBucketMetadataConfigurationResult = de_GetBucketMetadataConfigurationResult(data, context);
      return contents;
    };
    de_GetBucketMetadataTableConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.GetBucketMetadataTableConfigurationResult = de_GetBucketMetadataTableConfigurationResult(data, context);
      return contents;
    };
    de_GetBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
      return contents;
    };
    de_GetBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_EBC] != null) {
        contents[_EBC] = de_EventBridgeConfiguration(data[_EBC], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents[_LFC] = [];
      } else if (data[_CFC] != null) {
        contents[_LFC] = de_LambdaFunctionConfigurationList(getArrayIfSingleItem(data[_CFC]), context);
      }
      if (data.QueueConfiguration === "") {
        contents[_QCu] = [];
      } else if (data[_QC] != null) {
        contents[_QCu] = de_QueueConfigurationList(getArrayIfSingleItem(data[_QC]), context);
      }
      if (data.TopicConfiguration === "") {
        contents[_TCop] = [];
      } else if (data[_TCo] != null) {
        contents[_TCop] = de_TopicConfigurationList(getArrayIfSingleItem(data[_TCo]), context);
      }
      return contents;
    };
    de_GetBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.OwnershipControls = de_OwnershipControls(data, context);
      return contents;
    };
    de_GetBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = await collectBodyString2(output.body, context);
      contents.Policy = expectString(data);
      return contents;
    };
    de_GetBucketPolicyStatusCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.PolicyStatus = de_PolicyStatus(data, context);
      return contents;
    };
    de_GetBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
      return contents;
    };
    de_GetBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_Pa] != null) {
        contents[_Pa] = expectString(data[_Pa]);
      }
      return contents;
    };
    de_GetBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet(getArrayIfSingleItem(data[_TS][_Ta]), context);
      }
      return contents;
    };
    de_GetBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_MDf] != null) {
        contents[_MFAD] = expectString(data[_MDf]);
      }
      if (data[_S] != null) {
        contents[_S] = expectString(data[_S]);
      }
      return contents;
    };
    de_GetBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_ED] != null) {
        contents[_ED] = de_ErrorDocument(data[_ED], context);
      }
      if (data[_ID] != null) {
        contents[_ID] = de_IndexDocument(data[_ID], context);
      }
      if (data[_RART] != null) {
        contents[_RART] = de_RedirectAllRequestsTo(data[_RART], context);
      }
      if (data.RoutingRules === "") {
        contents[_RRo] = [];
      } else if (data[_RRo] != null && data[_RRo][_RRou] != null) {
        contents[_RRo] = de_RoutingRules(getArrayIfSingleItem(data[_RRo][_RRou]), context);
      }
      return contents;
    };
    de_GetObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => strictParseLong(output.headers[_cl_])],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => strictParseInt32(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CR]: [, output.headers[_cr]],
        [_CTo]: [, output.headers[_ct]],
        [_E]: [() => void 0 !== output.headers[_e], () => expectNonNull(parseRfc7231DateTime(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RSe]: [, output.headers[_xars_]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => strictParseInt32(output.headers[_xampc])],
        [_TC]: [() => void 0 !== output.headers[_xatc], () => strictParseInt32(output.headers[_xatc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    de_GetObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants(getArrayIfSingleItem(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    };
    de_GetObjectAttributesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_Ch] != null) {
        contents[_Ch] = de_Checksum(data[_Ch], context);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = expectString(data[_ETa]);
      }
      if (data[_OP] != null) {
        contents[_OP] = de_GetObjectAttributesParts(data[_OP], context);
      }
      if (data[_OSb] != null) {
        contents[_OSb] = strictParseLong(data[_OSb]);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      return contents;
    };
    de_GetObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.LegalHold = de_ObjectLockLegalHold(data, context);
      return contents;
    };
    de_GetObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
      return contents;
    };
    de_GetObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.Retention = de_ObjectLockRetention(data, context);
      return contents;
    };
    de_GetObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet(getArrayIfSingleItem(data[_TS][_Ta]), context);
      }
      return contents;
    };
    de_GetObjectTorrentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    de_GetPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
      return contents;
    };
    de_HeadBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_BA]: [, output.headers[_xaba]],
        [_BLT]: [, output.headers[_xablt]],
        [_BLN]: [, output.headers[_xabln]],
        [_BR]: [, output.headers[_xabr]],
        [_APA]: [() => void 0 !== output.headers[_xaapa], () => parseBoolean(output.headers[_xaapa])]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_HeadObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => parseBoolean(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_AS]: [, output.headers[_xaas]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => expectNonNull(parseRfc7231DateTime(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => strictParseLong(output.headers[_cl_])],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_ETa]: [, output.headers[_eta]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => strictParseInt32(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CTo]: [, output.headers[_ct]],
        [_CR]: [, output.headers[_cr]],
        [_E]: [() => void 0 !== output.headers[_e], () => expectNonNull(parseRfc7231DateTime(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RSe]: [, output.headers[_xars_]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => strictParseInt32(output.headers[_xampc])],
        [_TC]: [() => void 0 !== output.headers[_xatc], () => strictParseInt32(output.headers[_xatc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_ListBucketAnalyticsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents[_ACLn] = [];
      } else if (data[_AC] != null) {
        contents[_ACLn] = de_AnalyticsConfigurationList(getArrayIfSingleItem(data[_AC]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    };
    de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents[_ITCL] = [];
      } else if (data[_ITC] != null) {
        contents[_ITCL] = de_IntelligentTieringConfigurationList(getArrayIfSingleItem(data[_ITC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    };
    de_ListBucketInventoryConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data.InventoryConfiguration === "") {
        contents[_ICL] = [];
      } else if (data[_IC] != null) {
        contents[_ICL] = de_InventoryConfigurationList(getArrayIfSingleItem(data[_IC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    };
    de_ListBucketMetricsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data.MetricsConfiguration === "") {
        contents[_MCL] = [];
      } else if (data[_MC] != null) {
        contents[_MCL] = de_MetricsConfigurationList(getArrayIfSingleItem(data[_MC]), context);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      return contents;
    };
    de_ListBucketsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets(getArrayIfSingleItem(data[_Bu][_B]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      return contents;
    };
    de_ListDirectoryBucketsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets(getArrayIfSingleItem(data[_Bu][_B]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      return contents;
    };
    de_ListMultipartUploadsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = expectString(data[_KM]);
      }
      if (data[_MU] != null) {
        contents[_MU] = strictParseInt32(data[_MU]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = expectString(data[_NKM]);
      }
      if (data[_NUIM] != null) {
        contents[_NUIM] = expectString(data[_NUIM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_UIM] != null) {
        contents[_UIM] = expectString(data[_UIM]);
      }
      if (data.Upload === "") {
        contents[_Up] = [];
      } else if (data[_U] != null) {
        contents[_Up] = de_MultipartUploadList(getArrayIfSingleItem(data[_U]), context);
      }
      return contents;
    };
    de_ListObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList(getArrayIfSingleItem(data[_Co]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_M] != null) {
        contents[_M] = expectString(data[_M]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NM] != null) {
        contents[_NM] = expectString(data[_NM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      return contents;
    };
    de_ListObjectsV2Command = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList(getArrayIfSingleItem(data[_Co]), context);
      }
      if (data[_CTon] != null) {
        contents[_CTon] = expectString(data[_CTon]);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KC] != null) {
        contents[_KC] = strictParseInt32(data[_KC]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = expectString(data[_NCT]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_SA] != null) {
        contents[_SA] = expectString(data[_SA]);
      }
      return contents;
    };
    de_ListObjectVersionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList(getArrayIfSingleItem(data[_CP]), context);
      }
      if (data.DeleteMarker === "") {
        contents[_DMe] = [];
      } else if (data[_DM] != null) {
        contents[_DMe] = de_DeleteMarkers(getArrayIfSingleItem(data[_DM]), context);
      }
      if (data[_D] != null) {
        contents[_D] = expectString(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = expectString(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = expectString(data[_KM]);
      }
      if (data[_MK] != null) {
        contents[_MK] = strictParseInt32(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = expectString(data[_N]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = expectString(data[_NKM]);
      }
      if (data[_NVIM] != null) {
        contents[_NVIM] = expectString(data[_NVIM]);
      }
      if (data[_P] != null) {
        contents[_P] = expectString(data[_P]);
      }
      if (data[_VIM] != null) {
        contents[_VIM] = expectString(data[_VIM]);
      }
      if (data.Version === "") {
        contents[_Ve] = [];
      } else if (data[_V] != null) {
        contents[_Ve] = de_ObjectVersionList(getArrayIfSingleItem(data[_V]), context);
      }
      return contents;
    };
    de_ListPartsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => expectNonNull(parseRfc7231DateTime(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = expectString(data[_B]);
      }
      if (data[_CA] != null) {
        contents[_CA] = expectString(data[_CA]);
      }
      if (data[_CT] != null) {
        contents[_CT] = expectString(data[_CT]);
      }
      if (data[_In] != null) {
        contents[_In] = de_Initiator(data[_In], context);
      }
      if (data[_IT] != null) {
        contents[_IT] = parseBoolean(data[_IT]);
      }
      if (data[_K] != null) {
        contents[_K] = expectString(data[_K]);
      }
      if (data[_MP] != null) {
        contents[_MP] = strictParseInt32(data[_MP]);
      }
      if (data[_NPNM] != null) {
        contents[_NPNM] = expectString(data[_NPNM]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_PNM] != null) {
        contents[_PNM] = expectString(data[_PNM]);
      }
      if (data.Part === "") {
        contents[_Part] = [];
      } else if (data[_Par] != null) {
        contents[_Part] = de_Parts(getArrayIfSingleItem(data[_Par]), context);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      if (data[_UI] != null) {
        contents[_UI] = expectString(data[_UI]);
      }
      return contents;
    };
    de_PutBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_Exp]: [, output.headers[_xae]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_CT]: [, output.headers[_xact]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_Si]: [() => void 0 !== output.headers[_xaos], () => strictParseLong(output.headers[_xaos])],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_PutPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_RenameObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_RestoreObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_RC]: [, output.headers[_xarc]],
        [_ROP]: [, output.headers[_xarop]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_SelectObjectContentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      const data = output.body;
      contents.Payload = de_SelectObjectContentEventStream(data, context);
      return contents;
    };
    de_UpdateBucketMetadataInventoryTableConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_UpdateBucketMetadataJournalTableConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_UploadPartCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_SSE]: [, output.headers[_xasse]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CCRCNVME]: [, output.headers[_xacc__]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_UploadPartCopyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output),
        [_CSVI]: [, output.headers[_xacsvi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => parseBoolean(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = expectObject(await parseXmlBody(output.body, context));
      contents.CopyPartResult = de_CopyPartResult(data, context);
      return contents;
    };
    de_WriteGetObjectResponseCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata2(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseXmlErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw await de_NoSuchUploadRes(parsedOutput, context);
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw await de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await de_NoSuchBucketRes(parsedOutput, context);
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw await de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await de_NotFoundRes(parsedOutput, context);
        case "EncryptionTypeMismatch":
        case "com.amazonaws.s3#EncryptionTypeMismatch":
          throw await de_EncryptionTypeMismatchRes(parsedOutput, context);
        case "InvalidRequest":
        case "com.amazonaws.s3#InvalidRequest":
          throw await de_InvalidRequestRes(parsedOutput, context);
        case "InvalidWriteOffset":
        case "com.amazonaws.s3#InvalidWriteOffset":
          throw await de_InvalidWriteOffsetRes(parsedOutput, context);
        case "TooManyParts":
        case "com.amazonaws.s3#TooManyParts":
          throw await de_TooManyPartsRes(parsedOutput, context);
        case "IdempotencyParameterMismatch":
        case "com.amazonaws.s3#IdempotencyParameterMismatch":
          throw await de_IdempotencyParameterMismatchRes(parsedOutput, context);
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError2 = withBaseException(S3ServiceException);
    de_BucketAlreadyExistsRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyExists({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_EncryptionTypeMismatchRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new EncryptionTypeMismatch({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_IdempotencyParameterMismatchRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new IdempotencyParameterMismatch({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidObjectStateRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data[_AT] != null) {
        contents[_AT] = expectString(data[_AT]);
      }
      if (data[_SC] != null) {
        contents[_SC] = expectString(data[_SC]);
      }
      const exception = new InvalidObjectState({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidRequestRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new InvalidRequest({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidWriteOffsetRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new InvalidWriteOffset({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_NoSuchBucketRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchBucket({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_NoSuchKeyRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchKey({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_NoSuchUploadRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchUpload({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_NotFoundRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NotFound({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new ObjectNotInActiveTierError({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_TooManyPartsRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new TooManyParts({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_SelectObjectContentEventStream = (output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
          return {
            Records: await de_RecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: await de_StatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: await de_ProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: await de_ContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: await de_EndEvent_event(event["End"], context)
          };
        }
        return { $unknown: event };
      });
    };
    de_ContinuationEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      Object.assign(contents, de_ContinuationEvent(data, context));
      return contents;
    };
    de_EndEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      Object.assign(contents, de_EndEvent(data, context));
      return contents;
    };
    de_ProgressEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      contents.Details = de_Progress(data, context);
      return contents;
    };
    de_RecordsEvent_event = async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    };
    de_StatsEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseXmlBody(output.body, context);
      contents.Details = de_Stats(data, context);
      return contents;
    };
    se_AbortIncompleteMultipartUpload = (input, context) => {
      const bn2 = new XmlNode3(_AIMU);
      if (input[_DAI] != null) {
        bn2.c(XmlNode3.of(_DAI, String(input[_DAI])).n(_DAI));
      }
      return bn2;
    };
    se_AccelerateConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_ACc);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_BAS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_AccessControlPolicy = (input, context) => {
      const bn2 = new XmlNode3(_ACP);
      bn2.lc(input, "Grants", "AccessControlList", () => se_Grants(input[_Gr], context));
      if (input[_O] != null) {
        bn2.c(se_Owner(input[_O], context).n(_O));
      }
      return bn2;
    };
    se_AccessControlTranslation = (input, context) => {
      const bn2 = new XmlNode3(_ACT);
      if (input[_O] != null) {
        bn2.c(XmlNode3.of(_OOw, input[_O]).n(_O));
      }
      return bn2;
    };
    se_AllowedHeaders = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_AH, entry);
        return n5.n(_me);
      });
    };
    se_AllowedMethods = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_AM, entry);
        return n5.n(_me);
      });
    };
    se_AllowedOrigins = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_AO, entry);
        return n5.n(_me);
      });
    };
    se_AnalyticsAndOperator = (input, context) => {
      const bn2 = new XmlNode3(_AAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    };
    se_AnalyticsConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_AC);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_AI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_AnalyticsFilter(input[_F], context).n(_F));
      }
      if (input[_SCA] != null) {
        bn2.c(se_StorageClassAnalysis(input[_SCA], context).n(_SCA));
      }
      return bn2;
    };
    se_AnalyticsExportDestination = (input, context) => {
      const bn2 = new XmlNode3(_AED);
      if (input[_SBD] != null) {
        bn2.c(se_AnalyticsS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn2;
    };
    se_AnalyticsFilter = (input, context) => {
      const bn2 = new XmlNode3(_AF);
      AnalyticsFilter.visit(input, {
        Prefix: (value) => {
          if (input[_P] != null) {
            bn2.c(XmlNode3.of(_P, value).n(_P));
          }
        },
        Tag: (value) => {
          if (input[_Ta] != null) {
            bn2.c(se_Tag(value, context).n(_Ta));
          }
        },
        And: (value) => {
          if (input[_A] != null) {
            bn2.c(se_AnalyticsAndOperator(value, context).n(_A));
          }
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode3 || value instanceof XmlText2)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn2.c(new XmlNode3(name).c(value));
        }
      });
      return bn2;
    };
    se_AnalyticsS3BucketDestination = (input, context) => {
      const bn2 = new XmlNode3(_ASBD);
      if (input[_Fo] != null) {
        bn2.c(XmlNode3.of(_ASEFF, input[_Fo]).n(_Fo));
      }
      if (input[_BAI] != null) {
        bn2.c(XmlNode3.of(_AIc, input[_BAI]).n(_BAI));
      }
      if (input[_B] != null) {
        bn2.c(XmlNode3.of(_BN, input[_B]).n(_B));
      }
      bn2.cc(input, _P);
      return bn2;
    };
    se_BucketInfo = (input, context) => {
      const bn2 = new XmlNode3(_BI);
      bn2.cc(input, _DR);
      if (input[_Ty] != null) {
        bn2.c(XmlNode3.of(_BT, input[_Ty]).n(_Ty));
      }
      return bn2;
    };
    se_BucketLifecycleConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_BLC);
      bn2.l(input, "Rules", "Rule", () => se_LifecycleRules(input[_Rul], context));
      return bn2;
    };
    se_BucketLoggingStatus = (input, context) => {
      const bn2 = new XmlNode3(_BLS);
      if (input[_LE] != null) {
        bn2.c(se_LoggingEnabled(input[_LE], context).n(_LE));
      }
      return bn2;
    };
    se_CompletedMultipartUpload = (input, context) => {
      const bn2 = new XmlNode3(_CMU);
      bn2.l(input, "Parts", "Part", () => se_CompletedPartList(input[_Part], context));
      return bn2;
    };
    se_CompletedPart = (input, context) => {
      const bn2 = new XmlNode3(_CPo);
      bn2.cc(input, _ETa);
      bn2.cc(input, _CCRC);
      bn2.cc(input, _CCRCC);
      bn2.cc(input, _CCRCNVME);
      bn2.cc(input, _CSHA);
      bn2.cc(input, _CSHAh);
      if (input[_PN] != null) {
        bn2.c(XmlNode3.of(_PN, String(input[_PN])).n(_PN));
      }
      return bn2;
    };
    se_CompletedPartList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_CompletedPart(entry, context);
        return n5.n(_me);
      });
    };
    se_Condition = (input, context) => {
      const bn2 = new XmlNode3(_Con);
      bn2.cc(input, _HECRE);
      bn2.cc(input, _KPE);
      return bn2;
    };
    se_CORSConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_CORSC);
      bn2.l(input, "CORSRules", "CORSRule", () => se_CORSRules(input[_CORSRu], context));
      return bn2;
    };
    se_CORSRule = (input, context) => {
      const bn2 = new XmlNode3(_CORSR);
      bn2.cc(input, _ID_);
      bn2.l(input, "AllowedHeaders", "AllowedHeader", () => se_AllowedHeaders(input[_AHl], context));
      bn2.l(input, "AllowedMethods", "AllowedMethod", () => se_AllowedMethods(input[_AMl], context));
      bn2.l(input, "AllowedOrigins", "AllowedOrigin", () => se_AllowedOrigins(input[_AOl], context));
      bn2.l(input, "ExposeHeaders", "ExposeHeader", () => se_ExposeHeaders(input[_EH], context));
      if (input[_MAS] != null) {
        bn2.c(XmlNode3.of(_MAS, String(input[_MAS])).n(_MAS));
      }
      return bn2;
    };
    se_CORSRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_CORSRule(entry, context);
        return n5.n(_me);
      });
    };
    se_CreateBucketConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_CBC);
      if (input[_LC] != null) {
        bn2.c(XmlNode3.of(_BLCu, input[_LC]).n(_LC));
      }
      if (input[_L] != null) {
        bn2.c(se_LocationInfo(input[_L], context).n(_L));
      }
      if (input[_B] != null) {
        bn2.c(se_BucketInfo(input[_B], context).n(_B));
      }
      bn2.lc(input, "Tags", "Tags", () => se_TagSet(input[_Tag], context));
      return bn2;
    };
    se_CSVInput = (input, context) => {
      const bn2 = new XmlNode3(_CSVIn);
      bn2.cc(input, _FHI);
      bn2.cc(input, _Com);
      bn2.cc(input, _QEC);
      bn2.cc(input, _RD);
      bn2.cc(input, _FD);
      bn2.cc(input, _QCuo);
      if (input[_AQRD] != null) {
        bn2.c(XmlNode3.of(_AQRD, String(input[_AQRD])).n(_AQRD));
      }
      return bn2;
    };
    se_CSVOutput = (input, context) => {
      const bn2 = new XmlNode3(_CSVO);
      bn2.cc(input, _QF);
      bn2.cc(input, _QEC);
      bn2.cc(input, _RD);
      bn2.cc(input, _FD);
      bn2.cc(input, _QCuo);
      return bn2;
    };
    se_DefaultRetention = (input, context) => {
      const bn2 = new XmlNode3(_DRe);
      if (input[_Mo] != null) {
        bn2.c(XmlNode3.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_Y] != null) {
        bn2.c(XmlNode3.of(_Y, String(input[_Y])).n(_Y));
      }
      return bn2;
    };
    se_Delete = (input, context) => {
      const bn2 = new XmlNode3(_Del);
      bn2.l(input, "Objects", "Object", () => se_ObjectIdentifierList(input[_Ob], context));
      if (input[_Q] != null) {
        bn2.c(XmlNode3.of(_Q, String(input[_Q])).n(_Q));
      }
      return bn2;
    };
    se_DeleteMarkerReplication = (input, context) => {
      const bn2 = new XmlNode3(_DMR);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_DMRS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_Destination = (input, context) => {
      const bn2 = new XmlNode3(_Des);
      if (input[_B] != null) {
        bn2.c(XmlNode3.of(_BN, input[_B]).n(_B));
      }
      if (input[_Ac] != null) {
        bn2.c(XmlNode3.of(_AIc, input[_Ac]).n(_Ac));
      }
      bn2.cc(input, _SC);
      if (input[_ACT] != null) {
        bn2.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
      }
      if (input[_ECn] != null) {
        bn2.c(se_EncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      if (input[_RTe] != null) {
        bn2.c(se_ReplicationTime(input[_RTe], context).n(_RTe));
      }
      if (input[_Me] != null) {
        bn2.c(se_Metrics(input[_Me], context).n(_Me));
      }
      return bn2;
    };
    se_Encryption = (input, context) => {
      const bn2 = new XmlNode3(_En);
      if (input[_ETn] != null) {
        bn2.c(XmlNode3.of(_SSE, input[_ETn]).n(_ETn));
      }
      if (input[_KMSKI] != null) {
        bn2.c(XmlNode3.of(_SSEKMSKI, input[_KMSKI]).n(_KMSKI));
      }
      bn2.cc(input, _KMSC);
      return bn2;
    };
    se_EncryptionConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_ECn);
      bn2.cc(input, _RKKID);
      return bn2;
    };
    se_ErrorDocument = (input, context) => {
      const bn2 = new XmlNode3(_ED);
      if (input[_K] != null) {
        bn2.c(XmlNode3.of(_OK, input[_K]).n(_K));
      }
      return bn2;
    };
    se_EventBridgeConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_EBC);
      return bn2;
    };
    se_EventList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_Ev, entry);
        return n5.n(_me);
      });
    };
    se_ExistingObjectReplication = (input, context) => {
      const bn2 = new XmlNode3(_EOR);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_EORS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_ExposeHeaders = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_EHx, entry);
        return n5.n(_me);
      });
    };
    se_FilterRule = (input, context) => {
      const bn2 = new XmlNode3(_FR);
      if (input[_N] != null) {
        bn2.c(XmlNode3.of(_FRN, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn2.c(XmlNode3.of(_FRV, input[_Va]).n(_Va));
      }
      return bn2;
    };
    se_FilterRuleList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_FilterRule(entry, context);
        return n5.n(_me);
      });
    };
    se_GlacierJobParameters = (input, context) => {
      const bn2 = new XmlNode3(_GJP);
      bn2.cc(input, _Ti);
      return bn2;
    };
    se_Grant = (input, context) => {
      const bn2 = new XmlNode3(_G);
      if (input[_Gra] != null) {
        const n5 = se_Grantee(input[_Gra], context).n(_Gra);
        n5.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn2.c(n5);
      }
      bn2.cc(input, _Pe);
      return bn2;
    };
    se_Grantee = (input, context) => {
      const bn2 = new XmlNode3(_Gra);
      bn2.cc(input, _DN);
      bn2.cc(input, _EA);
      bn2.cc(input, _ID_);
      bn2.cc(input, _URI);
      bn2.a("xsi:type", input[_Ty]);
      return bn2;
    };
    se_Grants = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_Grant(entry, context);
        return n5.n(_G);
      });
    };
    se_IndexDocument = (input, context) => {
      const bn2 = new XmlNode3(_ID);
      bn2.cc(input, _Su);
      return bn2;
    };
    se_InputSerialization = (input, context) => {
      const bn2 = new XmlNode3(_IS);
      if (input[_CSV] != null) {
        bn2.c(se_CSVInput(input[_CSV], context).n(_CSV));
      }
      bn2.cc(input, _CTom);
      if (input[_JSON] != null) {
        bn2.c(se_JSONInput(input[_JSON], context).n(_JSON));
      }
      if (input[_Parq] != null) {
        bn2.c(se_ParquetInput(input[_Parq], context).n(_Parq));
      }
      return bn2;
    };
    se_IntelligentTieringAndOperator = (input, context) => {
      const bn2 = new XmlNode3(_ITAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    };
    se_IntelligentTieringConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_ITC);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_ITI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_IntelligentTieringFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_ITS, input[_S]).n(_S));
      }
      bn2.l(input, "Tierings", "Tiering", () => se_TieringList(input[_Tie], context));
      return bn2;
    };
    se_IntelligentTieringFilter = (input, context) => {
      const bn2 = new XmlNode3(_ITF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn2.c(se_IntelligentTieringAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    };
    se_InventoryConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_IC);
      if (input[_Des] != null) {
        bn2.c(se_InventoryDestination(input[_Des], context).n(_Des));
      }
      if (input[_IE] != null) {
        bn2.c(XmlNode3.of(_IE, String(input[_IE])).n(_IE));
      }
      if (input[_F] != null) {
        bn2.c(se_InventoryFilter(input[_F], context).n(_F));
      }
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_II, input[_I]).n(_I));
      }
      if (input[_IOV] != null) {
        bn2.c(XmlNode3.of(_IIOV, input[_IOV]).n(_IOV));
      }
      bn2.lc(input, "OptionalFields", "OptionalFields", () => se_InventoryOptionalFields(input[_OF], context));
      if (input[_Sc] != null) {
        bn2.c(se_InventorySchedule(input[_Sc], context).n(_Sc));
      }
      return bn2;
    };
    se_InventoryDestination = (input, context) => {
      const bn2 = new XmlNode3(_IDn);
      if (input[_SBD] != null) {
        bn2.c(se_InventoryS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn2;
    };
    se_InventoryEncryption = (input, context) => {
      const bn2 = new XmlNode3(_IEn);
      if (input[_SSES] != null) {
        bn2.c(se_SSES3(input[_SSES], context).n(_SS));
      }
      if (input[_SSEKMS] != null) {
        bn2.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
      }
      return bn2;
    };
    se_InventoryFilter = (input, context) => {
      const bn2 = new XmlNode3(_IF);
      bn2.cc(input, _P);
      return bn2;
    };
    se_InventoryOptionalFields = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = XmlNode3.of(_IOF, entry);
        return n5.n(_Fi);
      });
    };
    se_InventoryS3BucketDestination = (input, context) => {
      const bn2 = new XmlNode3(_ISBD);
      bn2.cc(input, _AIc);
      if (input[_B] != null) {
        bn2.c(XmlNode3.of(_BN, input[_B]).n(_B));
      }
      if (input[_Fo] != null) {
        bn2.c(XmlNode3.of(_IFn, input[_Fo]).n(_Fo));
      }
      bn2.cc(input, _P);
      if (input[_En] != null) {
        bn2.c(se_InventoryEncryption(input[_En], context).n(_En));
      }
      return bn2;
    };
    se_InventorySchedule = (input, context) => {
      const bn2 = new XmlNode3(_ISn);
      if (input[_Fr] != null) {
        bn2.c(XmlNode3.of(_IFnv, input[_Fr]).n(_Fr));
      }
      return bn2;
    };
    se_InventoryTableConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_ITCn);
      if (input[_CSo] != null) {
        bn2.c(XmlNode3.of(_ICS, input[_CSo]).n(_CSo));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    };
    se_InventoryTableConfigurationUpdates = (input, context) => {
      const bn2 = new XmlNode3(_ITCU);
      if (input[_CSo] != null) {
        bn2.c(XmlNode3.of(_ICS, input[_CSo]).n(_CSo));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    };
    se_JournalTableConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_JTC);
      if (input[_REe] != null) {
        bn2.c(se_RecordExpiration(input[_REe], context).n(_REe));
      }
      if (input[_ECn] != null) {
        bn2.c(se_MetadataTableEncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      return bn2;
    };
    se_JournalTableConfigurationUpdates = (input, context) => {
      const bn2 = new XmlNode3(_JTCU);
      if (input[_REe] != null) {
        bn2.c(se_RecordExpiration(input[_REe], context).n(_REe));
      }
      return bn2;
    };
    se_JSONInput = (input, context) => {
      const bn2 = new XmlNode3(_JSONI);
      if (input[_Ty] != null) {
        bn2.c(XmlNode3.of(_JSONT, input[_Ty]).n(_Ty));
      }
      return bn2;
    };
    se_JSONOutput = (input, context) => {
      const bn2 = new XmlNode3(_JSONO);
      bn2.cc(input, _RD);
      return bn2;
    };
    se_LambdaFunctionConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_LFCa);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_NI, input[_I]).n(_I));
      }
      if (input[_LFA] != null) {
        bn2.c(XmlNode3.of(_LFA, input[_LFA]).n(_CF));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    };
    se_LambdaFunctionConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_LambdaFunctionConfiguration(entry, context);
        return n5.n(_me);
      });
    };
    se_LifecycleExpiration = (input, context) => {
      const bn2 = new XmlNode3(_LEi);
      if (input[_Dat] != null) {
        bn2.c(XmlNode3.of(_Dat, serializeDateTime(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_EODM] != null) {
        bn2.c(XmlNode3.of(_EODM, String(input[_EODM])).n(_EODM));
      }
      return bn2;
    };
    se_LifecycleRule = (input, context) => {
      const bn2 = new XmlNode3(_LR);
      if (input[_Exp] != null) {
        bn2.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
      }
      bn2.cc(input, _ID_);
      bn2.cc(input, _P);
      if (input[_F] != null) {
        bn2.c(se_LifecycleRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_ESx, input[_S]).n(_S));
      }
      bn2.l(input, "Transitions", "Transition", () => se_TransitionList(input[_Tr], context));
      bn2.l(input, "NoncurrentVersionTransitions", "NoncurrentVersionTransition", () => se_NoncurrentVersionTransitionList(input[_NVT], context));
      if (input[_NVE] != null) {
        bn2.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
      }
      if (input[_AIMU] != null) {
        bn2.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
      }
      return bn2;
    };
    se_LifecycleRuleAndOperator = (input, context) => {
      const bn2 = new XmlNode3(_LRAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      if (input[_OSGT] != null) {
        bn2.c(XmlNode3.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn2.c(XmlNode3.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      return bn2;
    };
    se_LifecycleRuleFilter = (input, context) => {
      const bn2 = new XmlNode3(_LRF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_OSGT] != null) {
        bn2.c(XmlNode3.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn2.c(XmlNode3.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      if (input[_A] != null) {
        bn2.c(se_LifecycleRuleAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    };
    se_LifecycleRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_LifecycleRule(entry, context);
        return n5.n(_me);
      });
    };
    se_LocationInfo = (input, context) => {
      const bn2 = new XmlNode3(_LI);
      if (input[_Ty] != null) {
        bn2.c(XmlNode3.of(_LT, input[_Ty]).n(_Ty));
      }
      if (input[_N] != null) {
        bn2.c(XmlNode3.of(_LNAS, input[_N]).n(_N));
      }
      return bn2;
    };
    se_LoggingEnabled = (input, context) => {
      const bn2 = new XmlNode3(_LE);
      bn2.cc(input, _TB);
      bn2.lc(input, "TargetGrants", "TargetGrants", () => se_TargetGrants(input[_TG], context));
      bn2.cc(input, _TP);
      if (input[_TOKF] != null) {
        bn2.c(se_TargetObjectKeyFormat(input[_TOKF], context).n(_TOKF));
      }
      return bn2;
    };
    se_MetadataConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_MCe);
      if (input[_JTC] != null) {
        bn2.c(se_JournalTableConfiguration(input[_JTC], context).n(_JTC));
      }
      if (input[_ITCn] != null) {
        bn2.c(se_InventoryTableConfiguration(input[_ITCn], context).n(_ITCn));
      }
      return bn2;
    };
    se_MetadataEntry = (input, context) => {
      const bn2 = new XmlNode3(_ME);
      if (input[_N] != null) {
        bn2.c(XmlNode3.of(_MKe, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn2.c(XmlNode3.of(_MV, input[_Va]).n(_Va));
      }
      return bn2;
    };
    se_MetadataTableConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_MTC);
      if (input[_STD] != null) {
        bn2.c(se_S3TablesDestination(input[_STD], context).n(_STD));
      }
      return bn2;
    };
    se_MetadataTableEncryptionConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_MTEC);
      if (input[_SAs] != null) {
        bn2.c(XmlNode3.of(_TSA, input[_SAs]).n(_SAs));
      }
      bn2.cc(input, _KKA);
      return bn2;
    };
    se_Metrics = (input, context) => {
      const bn2 = new XmlNode3(_Me);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_MS, input[_S]).n(_S));
      }
      if (input[_ETv] != null) {
        bn2.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
      }
      return bn2;
    };
    se_MetricsAndOperator = (input, context) => {
      const bn2 = new XmlNode3(_MAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      bn2.cc(input, _APAc);
      return bn2;
    };
    se_MetricsConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_MC);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_MI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn2.c(se_MetricsFilter(input[_F], context).n(_F));
      }
      return bn2;
    };
    se_MetricsFilter = (input, context) => {
      const bn2 = new XmlNode3(_MF);
      MetricsFilter.visit(input, {
        Prefix: (value) => {
          if (input[_P] != null) {
            bn2.c(XmlNode3.of(_P, value).n(_P));
          }
        },
        Tag: (value) => {
          if (input[_Ta] != null) {
            bn2.c(se_Tag(value, context).n(_Ta));
          }
        },
        AccessPointArn: (value) => {
          if (input[_APAc] != null) {
            bn2.c(XmlNode3.of(_APAc, value).n(_APAc));
          }
        },
        And: (value) => {
          if (input[_A] != null) {
            bn2.c(se_MetricsAndOperator(value, context).n(_A));
          }
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode3 || value instanceof XmlText2)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn2.c(new XmlNode3(name).c(value));
        }
      });
      return bn2;
    };
    se_NoncurrentVersionExpiration = (input, context) => {
      const bn2 = new XmlNode3(_NVE);
      if (input[_ND] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_NNV] != null) {
        bn2.c(XmlNode3.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn2;
    };
    se_NoncurrentVersionTransition = (input, context) => {
      const bn2 = new XmlNode3(_NVTo);
      if (input[_ND] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_SC] != null) {
        bn2.c(XmlNode3.of(_TSC, input[_SC]).n(_SC));
      }
      if (input[_NNV] != null) {
        bn2.c(XmlNode3.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn2;
    };
    se_NoncurrentVersionTransitionList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_NoncurrentVersionTransition(entry, context);
        return n5.n(_me);
      });
    };
    se_NotificationConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_NC);
      bn2.l(input, "TopicConfigurations", "TopicConfiguration", () => se_TopicConfigurationList(input[_TCop], context));
      bn2.l(input, "QueueConfigurations", "QueueConfiguration", () => se_QueueConfigurationList(input[_QCu], context));
      bn2.l(input, "LambdaFunctionConfigurations", "CloudFunctionConfiguration", () => se_LambdaFunctionConfigurationList(input[_LFC], context));
      if (input[_EBC] != null) {
        bn2.c(se_EventBridgeConfiguration(input[_EBC], context).n(_EBC));
      }
      return bn2;
    };
    se_NotificationConfigurationFilter = (input, context) => {
      const bn2 = new XmlNode3(_NCF);
      if (input[_K] != null) {
        bn2.c(se_S3KeyFilter(input[_K], context).n(_SKe));
      }
      return bn2;
    };
    se_ObjectIdentifier = (input, context) => {
      const bn2 = new XmlNode3(_OI);
      if (input[_K] != null) {
        bn2.c(XmlNode3.of(_OK, input[_K]).n(_K));
      }
      if (input[_VI] != null) {
        bn2.c(XmlNode3.of(_OVI, input[_VI]).n(_VI));
      }
      bn2.cc(input, _ETa);
      if (input[_LMT] != null) {
        bn2.c(XmlNode3.of(_LMT, dateToUtcString(input[_LMT]).toString()).n(_LMT));
      }
      if (input[_Si] != null) {
        bn2.c(XmlNode3.of(_Si, String(input[_Si])).n(_Si));
      }
      return bn2;
    };
    se_ObjectIdentifierList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_ObjectIdentifier(entry, context);
        return n5.n(_me);
      });
    };
    se_ObjectLockConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_OLC);
      bn2.cc(input, _OLE);
      if (input[_Ru] != null) {
        bn2.c(se_ObjectLockRule(input[_Ru], context).n(_Ru));
      }
      return bn2;
    };
    se_ObjectLockLegalHold = (input, context) => {
      const bn2 = new XmlNode3(_OLLH);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_OLLHS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_ObjectLockRetention = (input, context) => {
      const bn2 = new XmlNode3(_OLR);
      if (input[_Mo] != null) {
        bn2.c(XmlNode3.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_RUD] != null) {
        bn2.c(XmlNode3.of(_Dat, serializeDateTime(input[_RUD]).toString()).n(_RUD));
      }
      return bn2;
    };
    se_ObjectLockRule = (input, context) => {
      const bn2 = new XmlNode3(_OLRb);
      if (input[_DRe] != null) {
        bn2.c(se_DefaultRetention(input[_DRe], context).n(_DRe));
      }
      return bn2;
    };
    se_OutputLocation = (input, context) => {
      const bn2 = new XmlNode3(_OL);
      if (input[_S_] != null) {
        bn2.c(se_S3Location(input[_S_], context).n(_S_));
      }
      return bn2;
    };
    se_OutputSerialization = (input, context) => {
      const bn2 = new XmlNode3(_OS);
      if (input[_CSV] != null) {
        bn2.c(se_CSVOutput(input[_CSV], context).n(_CSV));
      }
      if (input[_JSON] != null) {
        bn2.c(se_JSONOutput(input[_JSON], context).n(_JSON));
      }
      return bn2;
    };
    se_Owner = (input, context) => {
      const bn2 = new XmlNode3(_O);
      bn2.cc(input, _DN);
      bn2.cc(input, _ID_);
      return bn2;
    };
    se_OwnershipControls = (input, context) => {
      const bn2 = new XmlNode3(_OC);
      bn2.l(input, "Rules", "Rule", () => se_OwnershipControlsRules(input[_Rul], context));
      return bn2;
    };
    se_OwnershipControlsRule = (input, context) => {
      const bn2 = new XmlNode3(_OCR);
      bn2.cc(input, _OO);
      return bn2;
    };
    se_OwnershipControlsRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_OwnershipControlsRule(entry, context);
        return n5.n(_me);
      });
    };
    se_ParquetInput = (input, context) => {
      const bn2 = new XmlNode3(_PI);
      return bn2;
    };
    se_PartitionedPrefix = (input, context) => {
      const bn2 = new XmlNode3(_PP);
      bn2.cc(input, _PDS);
      return bn2;
    };
    se_PublicAccessBlockConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_PABC);
      if (input[_BPA] != null) {
        bn2.c(XmlNode3.of(_Se, String(input[_BPA])).n(_BPA));
      }
      if (input[_IPA] != null) {
        bn2.c(XmlNode3.of(_Se, String(input[_IPA])).n(_IPA));
      }
      if (input[_BPP] != null) {
        bn2.c(XmlNode3.of(_Se, String(input[_BPP])).n(_BPP));
      }
      if (input[_RPB] != null) {
        bn2.c(XmlNode3.of(_Se, String(input[_RPB])).n(_RPB));
      }
      return bn2;
    };
    se_QueueConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_QC);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_NI, input[_I]).n(_I));
      }
      if (input[_QA] != null) {
        bn2.c(XmlNode3.of(_QA, input[_QA]).n(_Qu));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    };
    se_QueueConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_QueueConfiguration(entry, context);
        return n5.n(_me);
      });
    };
    se_RecordExpiration = (input, context) => {
      const bn2 = new XmlNode3(_REe);
      if (input[_Exp] != null) {
        bn2.c(XmlNode3.of(_ESxp, input[_Exp]).n(_Exp));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_RED, String(input[_Da])).n(_Da));
      }
      return bn2;
    };
    se_Redirect = (input, context) => {
      const bn2 = new XmlNode3(_Red);
      bn2.cc(input, _HN);
      bn2.cc(input, _HRC);
      bn2.cc(input, _Pr);
      bn2.cc(input, _RKPW);
      bn2.cc(input, _RKW);
      return bn2;
    };
    se_RedirectAllRequestsTo = (input, context) => {
      const bn2 = new XmlNode3(_RART);
      bn2.cc(input, _HN);
      bn2.cc(input, _Pr);
      return bn2;
    };
    se_ReplicaModifications = (input, context) => {
      const bn2 = new XmlNode3(_RM);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_RMS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_ReplicationConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_RCe);
      bn2.cc(input, _Ro);
      bn2.l(input, "Rules", "Rule", () => se_ReplicationRules(input[_Rul], context));
      return bn2;
    };
    se_ReplicationRule = (input, context) => {
      const bn2 = new XmlNode3(_RRe);
      bn2.cc(input, _ID_);
      if (input[_Pri] != null) {
        bn2.c(XmlNode3.of(_Pri, String(input[_Pri])).n(_Pri));
      }
      bn2.cc(input, _P);
      if (input[_F] != null) {
        bn2.c(se_ReplicationRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_RRS, input[_S]).n(_S));
      }
      if (input[_SSC] != null) {
        bn2.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
      }
      if (input[_EOR] != null) {
        bn2.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
      }
      if (input[_Des] != null) {
        bn2.c(se_Destination(input[_Des], context).n(_Des));
      }
      if (input[_DMR] != null) {
        bn2.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
      }
      return bn2;
    };
    se_ReplicationRuleAndOperator = (input, context) => {
      const bn2 = new XmlNode3(_RRAO);
      bn2.cc(input, _P);
      bn2.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn2;
    };
    se_ReplicationRuleFilter = (input, context) => {
      const bn2 = new XmlNode3(_RRF);
      bn2.cc(input, _P);
      if (input[_Ta] != null) {
        bn2.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn2.c(se_ReplicationRuleAndOperator(input[_A], context).n(_A));
      }
      return bn2;
    };
    se_ReplicationRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_ReplicationRule(entry, context);
        return n5.n(_me);
      });
    };
    se_ReplicationTime = (input, context) => {
      const bn2 = new XmlNode3(_RTe);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_RTS, input[_S]).n(_S));
      }
      if (input[_Tim] != null) {
        bn2.c(se_ReplicationTimeValue(input[_Tim], context).n(_Tim));
      }
      return bn2;
    };
    se_ReplicationTimeValue = (input, context) => {
      const bn2 = new XmlNode3(_RTV);
      if (input[_Mi] != null) {
        bn2.c(XmlNode3.of(_Mi, String(input[_Mi])).n(_Mi));
      }
      return bn2;
    };
    se_RequestPaymentConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_RPC);
      bn2.cc(input, _Pa);
      return bn2;
    };
    se_RequestProgress = (input, context) => {
      const bn2 = new XmlNode3(_RPe);
      if (input[_Ena] != null) {
        bn2.c(XmlNode3.of(_ERP, String(input[_Ena])).n(_Ena));
      }
      return bn2;
    };
    se_RestoreRequest = (input, context) => {
      const bn2 = new XmlNode3(_RRes);
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_GJP] != null) {
        bn2.c(se_GlacierJobParameters(input[_GJP], context).n(_GJP));
      }
      if (input[_Ty] != null) {
        bn2.c(XmlNode3.of(_RRT, input[_Ty]).n(_Ty));
      }
      bn2.cc(input, _Ti);
      bn2.cc(input, _Desc);
      if (input[_SP] != null) {
        bn2.c(se_SelectParameters(input[_SP], context).n(_SP));
      }
      if (input[_OL] != null) {
        bn2.c(se_OutputLocation(input[_OL], context).n(_OL));
      }
      return bn2;
    };
    se_RoutingRule = (input, context) => {
      const bn2 = new XmlNode3(_RRou);
      if (input[_Con] != null) {
        bn2.c(se_Condition(input[_Con], context).n(_Con));
      }
      if (input[_Red] != null) {
        bn2.c(se_Redirect(input[_Red], context).n(_Red));
      }
      return bn2;
    };
    se_RoutingRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_RoutingRule(entry, context);
        return n5.n(_RRou);
      });
    };
    se_S3KeyFilter = (input, context) => {
      const bn2 = new XmlNode3(_SKF);
      bn2.l(input, "FilterRules", "FilterRule", () => se_FilterRuleList(input[_FRi], context));
      return bn2;
    };
    se_S3Location = (input, context) => {
      const bn2 = new XmlNode3(_SL);
      bn2.cc(input, _BN);
      if (input[_P] != null) {
        bn2.c(XmlNode3.of(_LP, input[_P]).n(_P));
      }
      if (input[_En] != null) {
        bn2.c(se_Encryption(input[_En], context).n(_En));
      }
      if (input[_CACL] != null) {
        bn2.c(XmlNode3.of(_OCACL, input[_CACL]).n(_CACL));
      }
      bn2.lc(input, "AccessControlList", "AccessControlList", () => se_Grants(input[_ACLc], context));
      if (input[_T] != null) {
        bn2.c(se_Tagging(input[_T], context).n(_T));
      }
      bn2.lc(input, "UserMetadata", "UserMetadata", () => se_UserMetadata(input[_UM], context));
      bn2.cc(input, _SC);
      return bn2;
    };
    se_S3TablesDestination = (input, context) => {
      const bn2 = new XmlNode3(_STD);
      if (input[_TBA] != null) {
        bn2.c(XmlNode3.of(_STBA, input[_TBA]).n(_TBA));
      }
      if (input[_TN] != null) {
        bn2.c(XmlNode3.of(_STN, input[_TN]).n(_TN));
      }
      return bn2;
    };
    se_ScanRange = (input, context) => {
      const bn2 = new XmlNode3(_SR);
      if (input[_St] != null) {
        bn2.c(XmlNode3.of(_St, String(input[_St])).n(_St));
      }
      if (input[_End] != null) {
        bn2.c(XmlNode3.of(_End, String(input[_End])).n(_End));
      }
      return bn2;
    };
    se_SelectParameters = (input, context) => {
      const bn2 = new XmlNode3(_SP);
      if (input[_IS] != null) {
        bn2.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      bn2.cc(input, _ETx);
      bn2.cc(input, _Ex);
      if (input[_OS] != null) {
        bn2.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      return bn2;
    };
    se_ServerSideEncryptionByDefault = (input, context) => {
      const bn2 = new XmlNode3(_SSEBD);
      if (input[_SSEA] != null) {
        bn2.c(XmlNode3.of(_SSE, input[_SSEA]).n(_SSEA));
      }
      if (input[_KMSMKID] != null) {
        bn2.c(XmlNode3.of(_SSEKMSKI, input[_KMSMKID]).n(_KMSMKID));
      }
      return bn2;
    };
    se_ServerSideEncryptionConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_SSEC);
      bn2.l(input, "Rules", "Rule", () => se_ServerSideEncryptionRules(input[_Rul], context));
      return bn2;
    };
    se_ServerSideEncryptionRule = (input, context) => {
      const bn2 = new XmlNode3(_SSER);
      if (input[_ASSEBD] != null) {
        bn2.c(se_ServerSideEncryptionByDefault(input[_ASSEBD], context).n(_ASSEBD));
      }
      if (input[_BKE] != null) {
        bn2.c(XmlNode3.of(_BKE, String(input[_BKE])).n(_BKE));
      }
      return bn2;
    };
    se_ServerSideEncryptionRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_ServerSideEncryptionRule(entry, context);
        return n5.n(_me);
      });
    };
    se_SimplePrefix = (input, context) => {
      const bn2 = new XmlNode3(_SPi);
      return bn2;
    };
    se_SourceSelectionCriteria = (input, context) => {
      const bn2 = new XmlNode3(_SSC);
      if (input[_SKEO] != null) {
        bn2.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
      }
      if (input[_RM] != null) {
        bn2.c(se_ReplicaModifications(input[_RM], context).n(_RM));
      }
      return bn2;
    };
    se_SSEKMS = (input, context) => {
      const bn2 = new XmlNode3(_SK);
      if (input[_KI] != null) {
        bn2.c(XmlNode3.of(_SSEKMSKI, input[_KI]).n(_KI));
      }
      return bn2;
    };
    se_SseKmsEncryptedObjects = (input, context) => {
      const bn2 = new XmlNode3(_SKEO);
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_SKEOS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_SSES3 = (input, context) => {
      const bn2 = new XmlNode3(_SS);
      return bn2;
    };
    se_StorageClassAnalysis = (input, context) => {
      const bn2 = new XmlNode3(_SCA);
      if (input[_DE] != null) {
        bn2.c(se_StorageClassAnalysisDataExport(input[_DE], context).n(_DE));
      }
      return bn2;
    };
    se_StorageClassAnalysisDataExport = (input, context) => {
      const bn2 = new XmlNode3(_SCADE);
      if (input[_OSV] != null) {
        bn2.c(XmlNode3.of(_SCASV, input[_OSV]).n(_OSV));
      }
      if (input[_Des] != null) {
        bn2.c(se_AnalyticsExportDestination(input[_Des], context).n(_Des));
      }
      return bn2;
    };
    se_Tag = (input, context) => {
      const bn2 = new XmlNode3(_Ta);
      if (input[_K] != null) {
        bn2.c(XmlNode3.of(_OK, input[_K]).n(_K));
      }
      bn2.cc(input, _Va);
      return bn2;
    };
    se_Tagging = (input, context) => {
      const bn2 = new XmlNode3(_T);
      bn2.lc(input, "TagSet", "TagSet", () => se_TagSet(input[_TS], context));
      return bn2;
    };
    se_TagSet = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_Tag(entry, context);
        return n5.n(_Ta);
      });
    };
    se_TargetGrant = (input, context) => {
      const bn2 = new XmlNode3(_TGa);
      if (input[_Gra] != null) {
        const n5 = se_Grantee(input[_Gra], context).n(_Gra);
        n5.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn2.c(n5);
      }
      if (input[_Pe] != null) {
        bn2.c(XmlNode3.of(_BLP, input[_Pe]).n(_Pe));
      }
      return bn2;
    };
    se_TargetGrants = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_TargetGrant(entry, context);
        return n5.n(_G);
      });
    };
    se_TargetObjectKeyFormat = (input, context) => {
      const bn2 = new XmlNode3(_TOKF);
      if (input[_SPi] != null) {
        bn2.c(se_SimplePrefix(input[_SPi], context).n(_SPi));
      }
      if (input[_PP] != null) {
        bn2.c(se_PartitionedPrefix(input[_PP], context).n(_PP));
      }
      return bn2;
    };
    se_Tiering = (input, context) => {
      const bn2 = new XmlNode3(_Tier);
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_ITD, String(input[_Da])).n(_Da));
      }
      if (input[_AT] != null) {
        bn2.c(XmlNode3.of(_ITAT, input[_AT]).n(_AT));
      }
      return bn2;
    };
    se_TieringList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_Tiering(entry, context);
        return n5.n(_me);
      });
    };
    se_TopicConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_TCo);
      if (input[_I] != null) {
        bn2.c(XmlNode3.of(_NI, input[_I]).n(_I));
      }
      if (input[_TA] != null) {
        bn2.c(XmlNode3.of(_TA, input[_TA]).n(_Top));
      }
      bn2.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn2.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn2;
    };
    se_TopicConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_TopicConfiguration(entry, context);
        return n5.n(_me);
      });
    };
    se_Transition = (input, context) => {
      const bn2 = new XmlNode3(_Tra);
      if (input[_Dat] != null) {
        bn2.c(XmlNode3.of(_Dat, serializeDateTime(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn2.c(XmlNode3.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_SC] != null) {
        bn2.c(XmlNode3.of(_TSC, input[_SC]).n(_SC));
      }
      return bn2;
    };
    se_TransitionList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_Transition(entry, context);
        return n5.n(_me);
      });
    };
    se_UserMetadata = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const n5 = se_MetadataEntry(entry, context);
        return n5.n(_ME);
      });
    };
    se_VersioningConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_VCe);
      if (input[_MFAD] != null) {
        bn2.c(XmlNode3.of(_MFAD, input[_MFAD]).n(_MDf));
      }
      if (input[_S] != null) {
        bn2.c(XmlNode3.of(_BVS, input[_S]).n(_S));
      }
      return bn2;
    };
    se_WebsiteConfiguration = (input, context) => {
      const bn2 = new XmlNode3(_WC);
      if (input[_ED] != null) {
        bn2.c(se_ErrorDocument(input[_ED], context).n(_ED));
      }
      if (input[_ID] != null) {
        bn2.c(se_IndexDocument(input[_ID], context).n(_ID));
      }
      if (input[_RART] != null) {
        bn2.c(se_RedirectAllRequestsTo(input[_RART], context).n(_RART));
      }
      bn2.lc(input, "RoutingRules", "RoutingRules", () => se_RoutingRules(input[_RRo], context));
      return bn2;
    };
    de_AbortIncompleteMultipartUpload = (output, context) => {
      const contents = {};
      if (output[_DAI] != null) {
        contents[_DAI] = strictParseInt32(output[_DAI]);
      }
      return contents;
    };
    de_AccessControlTranslation = (output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = expectString(output[_O]);
      }
      return contents;
    };
    de_AllowedHeaders = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AllowedMethods = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AllowedOrigins = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AnalyticsAndOperator = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    };
    de_AnalyticsConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_AnalyticsFilter(expectUnion(output[_F]), context);
      }
      if (output[_SCA] != null) {
        contents[_SCA] = de_StorageClassAnalysis(output[_SCA], context);
      }
      return contents;
    };
    de_AnalyticsConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_AnalyticsConfiguration(entry, context);
      });
    };
    de_AnalyticsExportDestination = (output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_AnalyticsS3BucketDestination(output[_SBD], context);
      }
      return contents;
    };
    de_AnalyticsFilter = (output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: expectString(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_A] != null) {
        return {
          And: de_AnalyticsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_AnalyticsS3BucketDestination = (output, context) => {
      const contents = {};
      if (output[_Fo] != null) {
        contents[_Fo] = expectString(output[_Fo]);
      }
      if (output[_BAI] != null) {
        contents[_BAI] = expectString(output[_BAI]);
      }
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    };
    de_Bucket = (output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = expectString(output[_N]);
      }
      if (output[_CDr] != null) {
        contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CDr]));
      }
      if (output[_BR] != null) {
        contents[_BR] = expectString(output[_BR]);
      }
      if (output[_BA] != null) {
        contents[_BA] = expectString(output[_BA]);
      }
      return contents;
    };
    de_Buckets = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Bucket(entry, context);
      });
    };
    de_Checksum = (output, context) => {
      const contents = {};
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      return contents;
    };
    de_ChecksumAlgorithmList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_CommonPrefix = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    };
    de_CommonPrefixList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_CommonPrefix(entry, context);
      });
    };
    de_Condition = (output, context) => {
      const contents = {};
      if (output[_HECRE] != null) {
        contents[_HECRE] = expectString(output[_HECRE]);
      }
      if (output[_KPE] != null) {
        contents[_KPE] = expectString(output[_KPE]);
      }
      return contents;
    };
    de_ContinuationEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    de_CopyObjectResult = (output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    };
    de_CopyPartResult = (output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    };
    de_CORSRule = (output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output.AllowedHeader === "") {
        contents[_AHl] = [];
      } else if (output[_AH] != null) {
        contents[_AHl] = de_AllowedHeaders(getArrayIfSingleItem(output[_AH]), context);
      }
      if (output.AllowedMethod === "") {
        contents[_AMl] = [];
      } else if (output[_AM] != null) {
        contents[_AMl] = de_AllowedMethods(getArrayIfSingleItem(output[_AM]), context);
      }
      if (output.AllowedOrigin === "") {
        contents[_AOl] = [];
      } else if (output[_AO] != null) {
        contents[_AOl] = de_AllowedOrigins(getArrayIfSingleItem(output[_AO]), context);
      }
      if (output.ExposeHeader === "") {
        contents[_EH] = [];
      } else if (output[_EHx] != null) {
        contents[_EH] = de_ExposeHeaders(getArrayIfSingleItem(output[_EHx]), context);
      }
      if (output[_MAS] != null) {
        contents[_MAS] = strictParseInt32(output[_MAS]);
      }
      return contents;
    };
    de_CORSRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_CORSRule(entry, context);
      });
    };
    de_DefaultRetention = (output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = expectString(output[_Mo]);
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_Y] != null) {
        contents[_Y] = strictParseInt32(output[_Y]);
      }
      return contents;
    };
    de_DeletedObject = (output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_DM] != null) {
        contents[_DM] = parseBoolean(output[_DM]);
      }
      if (output[_DMVI] != null) {
        contents[_DMVI] = expectString(output[_DMVI]);
      }
      return contents;
    };
    de_DeletedObjects = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_DeletedObject(entry, context);
      });
    };
    de_DeleteMarkerEntry = (output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = parseBoolean(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      return contents;
    };
    de_DeleteMarkerReplication = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    };
    de_DeleteMarkers = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_DeleteMarkerEntry(entry, context);
      });
    };
    de_Destination = (output, context) => {
      const contents = {};
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = expectString(output[_Ac]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_ACT] != null) {
        contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
      }
      if (output[_ECn] != null) {
        contents[_ECn] = de_EncryptionConfiguration(output[_ECn], context);
      }
      if (output[_RTe] != null) {
        contents[_RTe] = de_ReplicationTime(output[_RTe], context);
      }
      if (output[_Me] != null) {
        contents[_Me] = de_Metrics(output[_Me], context);
      }
      return contents;
    };
    de_DestinationResult = (output, context) => {
      const contents = {};
      if (output[_TBT] != null) {
        contents[_TBT] = expectString(output[_TBT]);
      }
      if (output[_TBA] != null) {
        contents[_TBA] = expectString(output[_TBA]);
      }
      if (output[_TNa] != null) {
        contents[_TNa] = expectString(output[_TNa]);
      }
      return contents;
    };
    de_EncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output[_RKKID] != null) {
        contents[_RKKID] = expectString(output[_RKKID]);
      }
      return contents;
    };
    de_EndEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    de__Error = (output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_Cod] != null) {
        contents[_Cod] = expectString(output[_Cod]);
      }
      if (output[_Mes] != null) {
        contents[_Mes] = expectString(output[_Mes]);
      }
      return contents;
    };
    de_ErrorDetails = (output, context) => {
      const contents = {};
      if (output[_EC] != null) {
        contents[_EC] = expectString(output[_EC]);
      }
      if (output[_EM] != null) {
        contents[_EM] = expectString(output[_EM]);
      }
      return contents;
    };
    de_ErrorDocument = (output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      return contents;
    };
    de_Errors = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de__Error(entry, context);
      });
    };
    de_EventBridgeConfiguration = (output, context) => {
      const contents = {};
      return contents;
    };
    de_EventList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_ExistingObjectReplication = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    };
    de_ExposeHeaders = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_FilterRule = (output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = expectString(output[_N]);
      }
      if (output[_Va] != null) {
        contents[_Va] = expectString(output[_Va]);
      }
      return contents;
    };
    de_FilterRuleList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_FilterRule(entry, context);
      });
    };
    de_GetBucketMetadataConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_MCR] != null) {
        contents[_MCR] = de_MetadataConfigurationResult(output[_MCR], context);
      }
      return contents;
    };
    de_GetBucketMetadataTableConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_MTCR] != null) {
        contents[_MTCR] = de_MetadataTableConfigurationResult(output[_MTCR], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      return contents;
    };
    de_GetObjectAttributesParts = (output, context) => {
      const contents = {};
      if (output[_PC] != null) {
        contents[_TPC] = strictParseInt32(output[_PC]);
      }
      if (output[_PNM] != null) {
        contents[_PNM] = expectString(output[_PNM]);
      }
      if (output[_NPNM] != null) {
        contents[_NPNM] = expectString(output[_NPNM]);
      }
      if (output[_MP] != null) {
        contents[_MP] = strictParseInt32(output[_MP]);
      }
      if (output[_IT] != null) {
        contents[_IT] = parseBoolean(output[_IT]);
      }
      if (output.Part === "") {
        contents[_Part] = [];
      } else if (output[_Par] != null) {
        contents[_Part] = de_PartsList(getArrayIfSingleItem(output[_Par]), context);
      }
      return contents;
    };
    de_Grant = (output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = expectString(output[_Pe]);
      }
      return contents;
    };
    de_Grantee = (output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      if (output[_EA] != null) {
        contents[_EA] = expectString(output[_EA]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_URI] != null) {
        contents[_URI] = expectString(output[_URI]);
      }
      if (output[_x] != null) {
        contents[_Ty] = expectString(output[_x]);
      }
      return contents;
    };
    de_Grants = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Grant(entry, context);
      });
    };
    de_IndexDocument = (output, context) => {
      const contents = {};
      if (output[_Su] != null) {
        contents[_Su] = expectString(output[_Su]);
      }
      return contents;
    };
    de_Initiator = (output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      return contents;
    };
    de_IntelligentTieringAndOperator = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    };
    de_IntelligentTieringConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_F] != null) {
        contents[_F] = de_IntelligentTieringFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output.Tiering === "") {
        contents[_Tie] = [];
      } else if (output[_Tier] != null) {
        contents[_Tie] = de_TieringList(getArrayIfSingleItem(output[_Tier]), context);
      }
      return contents;
    };
    de_IntelligentTieringConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_IntelligentTieringConfiguration(entry, context);
      });
    };
    de_IntelligentTieringFilter = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_IntelligentTieringAndOperator(output[_A], context);
      }
      return contents;
    };
    de_InventoryConfiguration = (output, context) => {
      const contents = {};
      if (output[_Des] != null) {
        contents[_Des] = de_InventoryDestination(output[_Des], context);
      }
      if (output[_IE] != null) {
        contents[_IE] = parseBoolean(output[_IE]);
      }
      if (output[_F] != null) {
        contents[_F] = de_InventoryFilter(output[_F], context);
      }
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_IOV] != null) {
        contents[_IOV] = expectString(output[_IOV]);
      }
      if (output.OptionalFields === "") {
        contents[_OF] = [];
      } else if (output[_OF] != null && output[_OF][_Fi] != null) {
        contents[_OF] = de_InventoryOptionalFields(getArrayIfSingleItem(output[_OF][_Fi]), context);
      }
      if (output[_Sc] != null) {
        contents[_Sc] = de_InventorySchedule(output[_Sc], context);
      }
      return contents;
    };
    de_InventoryConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_InventoryConfiguration(entry, context);
      });
    };
    de_InventoryDestination = (output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_InventoryS3BucketDestination(output[_SBD], context);
      }
      return contents;
    };
    de_InventoryEncryption = (output, context) => {
      const contents = {};
      if (output[_SS] != null) {
        contents[_SSES] = de_SSES3(output[_SS], context);
      }
      if (output[_SK] != null) {
        contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
      }
      return contents;
    };
    de_InventoryFilter = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      return contents;
    };
    de_InventoryOptionalFields = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_InventoryS3BucketDestination = (output, context) => {
      const contents = {};
      if (output[_AIc] != null) {
        contents[_AIc] = expectString(output[_AIc]);
      }
      if (output[_B] != null) {
        contents[_B] = expectString(output[_B]);
      }
      if (output[_Fo] != null) {
        contents[_Fo] = expectString(output[_Fo]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_En] != null) {
        contents[_En] = de_InventoryEncryption(output[_En], context);
      }
      return contents;
    };
    de_InventorySchedule = (output, context) => {
      const contents = {};
      if (output[_Fr] != null) {
        contents[_Fr] = expectString(output[_Fr]);
      }
      return contents;
    };
    de_InventoryTableConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_CSo] != null) {
        contents[_CSo] = expectString(output[_CSo]);
      }
      if (output[_TSa] != null) {
        contents[_TSa] = expectString(output[_TSa]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      return contents;
    };
    de_JournalTableConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_TSa] != null) {
        contents[_TSa] = expectString(output[_TSa]);
      }
      if (output[_Er] != null) {
        contents[_Er] = de_ErrorDetails(output[_Er], context);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      if (output[_REe] != null) {
        contents[_REe] = de_RecordExpiration(output[_REe], context);
      }
      return contents;
    };
    de_LambdaFunctionConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_CF] != null) {
        contents[_LFA] = expectString(output[_CF]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    };
    de_LambdaFunctionConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_LambdaFunctionConfiguration(entry, context);
      });
    };
    de_LifecycleExpiration = (output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_EODM] != null) {
        contents[_EODM] = parseBoolean(output[_EODM]);
      }
      return contents;
    };
    de_LifecycleRule = (output, context) => {
      const contents = {};
      if (output[_Exp] != null) {
        contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_LifecycleRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output.Transition === "") {
        contents[_Tr] = [];
      } else if (output[_Tra] != null) {
        contents[_Tr] = de_TransitionList(getArrayIfSingleItem(output[_Tra]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents[_NVT] = [];
      } else if (output[_NVTo] != null) {
        contents[_NVT] = de_NoncurrentVersionTransitionList(getArrayIfSingleItem(output[_NVTo]), context);
      }
      if (output[_NVE] != null) {
        contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
      }
      if (output[_AIMU] != null) {
        contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
      }
      return contents;
    };
    de_LifecycleRuleAndOperator = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = strictParseLong(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = strictParseLong(output[_OSLT]);
      }
      return contents;
    };
    de_LifecycleRuleFilter = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = strictParseLong(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = strictParseLong(output[_OSLT]);
      }
      if (output[_A] != null) {
        contents[_A] = de_LifecycleRuleAndOperator(output[_A], context);
      }
      return contents;
    };
    de_LifecycleRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_LifecycleRule(entry, context);
      });
    };
    de_LoggingEnabled = (output, context) => {
      const contents = {};
      if (output[_TB] != null) {
        contents[_TB] = expectString(output[_TB]);
      }
      if (output.TargetGrants === "") {
        contents[_TG] = [];
      } else if (output[_TG] != null && output[_TG][_G] != null) {
        contents[_TG] = de_TargetGrants(getArrayIfSingleItem(output[_TG][_G]), context);
      }
      if (output[_TP] != null) {
        contents[_TP] = expectString(output[_TP]);
      }
      if (output[_TOKF] != null) {
        contents[_TOKF] = de_TargetObjectKeyFormat(output[_TOKF], context);
      }
      return contents;
    };
    de_MetadataConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_DRes] != null) {
        contents[_DRes] = de_DestinationResult(output[_DRes], context);
      }
      if (output[_JTCR] != null) {
        contents[_JTCR] = de_JournalTableConfigurationResult(output[_JTCR], context);
      }
      if (output[_ITCR] != null) {
        contents[_ITCR] = de_InventoryTableConfigurationResult(output[_ITCR], context);
      }
      return contents;
    };
    de_MetadataTableConfigurationResult = (output, context) => {
      const contents = {};
      if (output[_STDR] != null) {
        contents[_STDR] = de_S3TablesDestinationResult(output[_STDR], context);
      }
      return contents;
    };
    de_Metrics = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_ETv] != null) {
        contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
      }
      return contents;
    };
    de_MetricsAndOperator = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      if (output[_APAc] != null) {
        contents[_APAc] = expectString(output[_APAc]);
      }
      return contents;
    };
    de_MetricsConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_MetricsFilter(expectUnion(output[_F]), context);
      }
      return contents;
    };
    de_MetricsConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_MetricsConfiguration(entry, context);
      });
    };
    de_MetricsFilter = (output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: expectString(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_APAc] != null) {
        return {
          AccessPointArn: expectString(output[_APAc])
        };
      }
      if (output[_A] != null) {
        return {
          And: de_MetricsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_MultipartUpload = (output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = expectString(output[_UI]);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_Ini] != null) {
        contents[_Ini] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Ini]));
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_In] != null) {
        contents[_In] = de_Initiator(output[_In], context);
      }
      if (output[_CA] != null) {
        contents[_CA] = expectString(output[_CA]);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      return contents;
    };
    de_MultipartUploadList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_MultipartUpload(entry, context);
      });
    };
    de_NoncurrentVersionExpiration = (output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = strictParseInt32(output[_ND]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = strictParseInt32(output[_NNV]);
      }
      return contents;
    };
    de_NoncurrentVersionTransition = (output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = strictParseInt32(output[_ND]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = strictParseInt32(output[_NNV]);
      }
      return contents;
    };
    de_NoncurrentVersionTransitionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_NoncurrentVersionTransition(entry, context);
      });
    };
    de_NotificationConfigurationFilter = (output, context) => {
      const contents = {};
      if (output[_SKe] != null) {
        contents[_K] = de_S3KeyFilter(output[_SKe], context);
      }
      return contents;
    };
    de__Object = (output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList(getArrayIfSingleItem(output[_CA]), context);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSes] != null) {
        contents[_RSes] = de_RestoreStatus(output[_RSes], context);
      }
      return contents;
    };
    de_ObjectList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de__Object(entry, context);
      });
    };
    de_ObjectLockConfiguration = (output, context) => {
      const contents = {};
      if (output[_OLE] != null) {
        contents[_OLE] = expectString(output[_OLE]);
      }
      if (output[_Ru] != null) {
        contents[_Ru] = de_ObjectLockRule(output[_Ru], context);
      }
      return contents;
    };
    de_ObjectLockLegalHold = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    };
    de_ObjectLockRetention = (output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = expectString(output[_Mo]);
      }
      if (output[_RUD] != null) {
        contents[_RUD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_RUD]));
      }
      return contents;
    };
    de_ObjectLockRule = (output, context) => {
      const contents = {};
      if (output[_DRe] != null) {
        contents[_DRe] = de_DefaultRetention(output[_DRe], context);
      }
      return contents;
    };
    de_ObjectPart = (output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = strictParseInt32(output[_PN]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    };
    de_ObjectVersion = (output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList(getArrayIfSingleItem(output[_CA]), context);
      }
      if (output[_CT] != null) {
        contents[_CT] = expectString(output[_CT]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = expectString(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = parseBoolean(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSes] != null) {
        contents[_RSes] = de_RestoreStatus(output[_RSes], context);
      }
      return contents;
    };
    de_ObjectVersionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ObjectVersion(entry, context);
      });
    };
    de_Owner = (output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = expectString(output[_DN]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      return contents;
    };
    de_OwnershipControls = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_OwnershipControlsRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    };
    de_OwnershipControlsRule = (output, context) => {
      const contents = {};
      if (output[_OO] != null) {
        contents[_OO] = expectString(output[_OO]);
      }
      return contents;
    };
    de_OwnershipControlsRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_OwnershipControlsRule(entry, context);
      });
    };
    de_Part = (output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = strictParseInt32(output[_PN]);
      }
      if (output[_LM] != null) {
        contents[_LM] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = expectString(output[_ETa]);
      }
      if (output[_Si] != null) {
        contents[_Si] = strictParseLong(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = expectString(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = expectString(output[_CCRCC]);
      }
      if (output[_CCRCNVME] != null) {
        contents[_CCRCNVME] = expectString(output[_CCRCNVME]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = expectString(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = expectString(output[_CSHAh]);
      }
      return contents;
    };
    de_PartitionedPrefix = (output, context) => {
      const contents = {};
      if (output[_PDS] != null) {
        contents[_PDS] = expectString(output[_PDS]);
      }
      return contents;
    };
    de_Parts = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Part(entry, context);
      });
    };
    de_PartsList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ObjectPart(entry, context);
      });
    };
    de_PolicyStatus = (output, context) => {
      const contents = {};
      if (output[_IP] != null) {
        contents[_IP] = parseBoolean(output[_IP]);
      }
      return contents;
    };
    de_Progress = (output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = strictParseLong(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = strictParseLong(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = strictParseLong(output[_BRy]);
      }
      return contents;
    };
    de_PublicAccessBlockConfiguration = (output, context) => {
      const contents = {};
      if (output[_BPA] != null) {
        contents[_BPA] = parseBoolean(output[_BPA]);
      }
      if (output[_IPA] != null) {
        contents[_IPA] = parseBoolean(output[_IPA]);
      }
      if (output[_BPP] != null) {
        contents[_BPP] = parseBoolean(output[_BPP]);
      }
      if (output[_RPB] != null) {
        contents[_RPB] = parseBoolean(output[_RPB]);
      }
      return contents;
    };
    de_QueueConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_Qu] != null) {
        contents[_QA] = expectString(output[_Qu]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    };
    de_QueueConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_QueueConfiguration(entry, context);
      });
    };
    de_RecordExpiration = (output, context) => {
      const contents = {};
      if (output[_Exp] != null) {
        contents[_Exp] = expectString(output[_Exp]);
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      return contents;
    };
    de_Redirect = (output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = expectString(output[_HN]);
      }
      if (output[_HRC] != null) {
        contents[_HRC] = expectString(output[_HRC]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = expectString(output[_Pr]);
      }
      if (output[_RKPW] != null) {
        contents[_RKPW] = expectString(output[_RKPW]);
      }
      if (output[_RKW] != null) {
        contents[_RKW] = expectString(output[_RKW]);
      }
      return contents;
    };
    de_RedirectAllRequestsTo = (output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = expectString(output[_HN]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = expectString(output[_Pr]);
      }
      return contents;
    };
    de_ReplicaModifications = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    };
    de_ReplicationConfiguration = (output, context) => {
      const contents = {};
      if (output[_Ro] != null) {
        contents[_Ro] = expectString(output[_Ro]);
      }
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ReplicationRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    };
    de_ReplicationRule = (output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = expectString(output[_ID_]);
      }
      if (output[_Pri] != null) {
        contents[_Pri] = strictParseInt32(output[_Pri]);
      }
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_ReplicationRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_SSC] != null) {
        contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
      }
      if (output[_EOR] != null) {
        contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_Destination(output[_Des], context);
      }
      if (output[_DMR] != null) {
        contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
      }
      return contents;
    };
    de_ReplicationRuleAndOperator = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet(getArrayIfSingleItem(output[_Ta]), context);
      }
      return contents;
    };
    de_ReplicationRuleFilter = (output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = expectString(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_ReplicationRuleAndOperator(output[_A], context);
      }
      return contents;
    };
    de_ReplicationRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ReplicationRule(entry, context);
      });
    };
    de_ReplicationTime = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_Tim] != null) {
        contents[_Tim] = de_ReplicationTimeValue(output[_Tim], context);
      }
      return contents;
    };
    de_ReplicationTimeValue = (output, context) => {
      const contents = {};
      if (output[_Mi] != null) {
        contents[_Mi] = strictParseInt32(output[_Mi]);
      }
      return contents;
    };
    de_RestoreStatus = (output, context) => {
      const contents = {};
      if (output[_IRIP] != null) {
        contents[_IRIP] = parseBoolean(output[_IRIP]);
      }
      if (output[_REDe] != null) {
        contents[_REDe] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_REDe]));
      }
      return contents;
    };
    de_RoutingRule = (output, context) => {
      const contents = {};
      if (output[_Con] != null) {
        contents[_Con] = de_Condition(output[_Con], context);
      }
      if (output[_Red] != null) {
        contents[_Red] = de_Redirect(output[_Red], context);
      }
      return contents;
    };
    de_RoutingRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_RoutingRule(entry, context);
      });
    };
    de_S3KeyFilter = (output, context) => {
      const contents = {};
      if (output.FilterRule === "") {
        contents[_FRi] = [];
      } else if (output[_FR] != null) {
        contents[_FRi] = de_FilterRuleList(getArrayIfSingleItem(output[_FR]), context);
      }
      return contents;
    };
    de_S3TablesDestinationResult = (output, context) => {
      const contents = {};
      if (output[_TBA] != null) {
        contents[_TBA] = expectString(output[_TBA]);
      }
      if (output[_TN] != null) {
        contents[_TN] = expectString(output[_TN]);
      }
      if (output[_TAa] != null) {
        contents[_TAa] = expectString(output[_TAa]);
      }
      if (output[_TNa] != null) {
        contents[_TNa] = expectString(output[_TNa]);
      }
      return contents;
    };
    de_ServerSideEncryptionByDefault = (output, context) => {
      const contents = {};
      if (output[_SSEA] != null) {
        contents[_SSEA] = expectString(output[_SSEA]);
      }
      if (output[_KMSMKID] != null) {
        contents[_KMSMKID] = expectString(output[_KMSMKID]);
      }
      return contents;
    };
    de_ServerSideEncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ServerSideEncryptionRules(getArrayIfSingleItem(output[_Ru]), context);
      }
      return contents;
    };
    de_ServerSideEncryptionRule = (output, context) => {
      const contents = {};
      if (output[_ASSEBD] != null) {
        contents[_ASSEBD] = de_ServerSideEncryptionByDefault(output[_ASSEBD], context);
      }
      if (output[_BKE] != null) {
        contents[_BKE] = parseBoolean(output[_BKE]);
      }
      return contents;
    };
    de_ServerSideEncryptionRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ServerSideEncryptionRule(entry, context);
      });
    };
    de_SessionCredentials = (output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = expectString(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = expectString(output[_SAK]);
      }
      if (output[_ST] != null) {
        contents[_ST] = expectString(output[_ST]);
      }
      if (output[_Exp] != null) {
        contents[_Exp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Exp]));
      }
      return contents;
    };
    de_SimplePrefix = (output, context) => {
      const contents = {};
      return contents;
    };
    de_SourceSelectionCriteria = (output, context) => {
      const contents = {};
      if (output[_SKEO] != null) {
        contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
      }
      if (output[_RM] != null) {
        contents[_RM] = de_ReplicaModifications(output[_RM], context);
      }
      return contents;
    };
    de_SSEKMS = (output, context) => {
      const contents = {};
      if (output[_KI] != null) {
        contents[_KI] = expectString(output[_KI]);
      }
      return contents;
    };
    de_SseKmsEncryptedObjects = (output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      return contents;
    };
    de_SSES3 = (output, context) => {
      const contents = {};
      return contents;
    };
    de_Stats = (output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = strictParseLong(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = strictParseLong(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = strictParseLong(output[_BRy]);
      }
      return contents;
    };
    de_StorageClassAnalysis = (output, context) => {
      const contents = {};
      if (output[_DE] != null) {
        contents[_DE] = de_StorageClassAnalysisDataExport(output[_DE], context);
      }
      return contents;
    };
    de_StorageClassAnalysisDataExport = (output, context) => {
      const contents = {};
      if (output[_OSV] != null) {
        contents[_OSV] = expectString(output[_OSV]);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_AnalyticsExportDestination(output[_Des], context);
      }
      return contents;
    };
    de_Tag = (output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = expectString(output[_K]);
      }
      if (output[_Va] != null) {
        contents[_Va] = expectString(output[_Va]);
      }
      return contents;
    };
    de_TagSet = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Tag(entry, context);
      });
    };
    de_TargetGrant = (output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = expectString(output[_Pe]);
      }
      return contents;
    };
    de_TargetGrants = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_TargetGrant(entry, context);
      });
    };
    de_TargetObjectKeyFormat = (output, context) => {
      const contents = {};
      if (output[_SPi] != null) {
        contents[_SPi] = de_SimplePrefix(output[_SPi], context);
      }
      if (output[_PP] != null) {
        contents[_PP] = de_PartitionedPrefix(output[_PP], context);
      }
      return contents;
    };
    de_Tiering = (output, context) => {
      const contents = {};
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_AT] != null) {
        contents[_AT] = expectString(output[_AT]);
      }
      return contents;
    };
    de_TieringList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Tiering(entry, context);
      });
    };
    de_TopicConfiguration = (output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_Top] != null) {
        contents[_TA] = expectString(output[_Top]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList(getArrayIfSingleItem(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    };
    de_TopicConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_TopicConfiguration(entry, context);
      });
    };
    de_Transition = (output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = strictParseInt32(output[_Da]);
      }
      if (output[_SC] != null) {
        contents[_SC] = expectString(output[_SC]);
      }
      return contents;
    };
    de_TransitionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Transition(entry, context);
      });
    };
    deserializeMetadata2 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    collectBodyString2 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    _A = "And";
    _AAO = "AnalyticsAndOperator";
    _AC = "AnalyticsConfiguration";
    _ACL = "ACL";
    _ACLc = "AccessControlList";
    _ACLn = "AnalyticsConfigurationList";
    _ACP = "AccessControlPolicy";
    _ACT = "AccessControlTranslation";
    _ACc = "AccelerateConfiguration";
    _AD = "AbortDate";
    _AED = "AnalyticsExportDestination";
    _AF = "AnalyticsFilter";
    _AH = "AllowedHeader";
    _AHl = "AllowedHeaders";
    _AI = "AnalyticsId";
    _AIMU = "AbortIncompleteMultipartUpload";
    _AIc = "AccountId";
    _AKI = "AccessKeyId";
    _AM = "AllowedMethod";
    _AMl = "AllowedMethods";
    _AO = "AllowedOrigin";
    _AOl = "AllowedOrigins";
    _APA = "AccessPointAlias";
    _APAc = "AccessPointArn";
    _AQRD = "AllowQuotedRecordDelimiter";
    _AR = "AcceptRanges";
    _ARI = "AbortRuleId";
    _AS = "ArchiveStatus";
    _ASBD = "AnalyticsS3BucketDestination";
    _ASEFF = "AnalyticsS3ExportFileFormat";
    _ASSEBD = "ApplyServerSideEncryptionByDefault";
    _AT = "AccessTier";
    _Ac = "Account";
    _B = "Bucket";
    _BA = "BucketArn";
    _BAI = "BucketAccountId";
    _BAS = "BucketAccelerateStatus";
    _BGR = "BypassGovernanceRetention";
    _BI = "BucketInfo";
    _BKE = "BucketKeyEnabled";
    _BLC = "BucketLifecycleConfiguration";
    _BLCu = "BucketLocationConstraint";
    _BLN = "BucketLocationName";
    _BLP = "BucketLogsPermission";
    _BLS = "BucketLoggingStatus";
    _BLT = "BucketLocationType";
    _BN = "BucketName";
    _BP = "BytesProcessed";
    _BPA = "BlockPublicAcls";
    _BPP = "BlockPublicPolicy";
    _BR = "BucketRegion";
    _BRy = "BytesReturned";
    _BS = "BytesScanned";
    _BT = "BucketType";
    _BVS = "BucketVersioningStatus";
    _Bu = "Buckets";
    _C = "Credentials";
    _CA = "ChecksumAlgorithm";
    _CACL = "CannedACL";
    _CBC = "CreateBucketConfiguration";
    _CC = "CacheControl";
    _CCRC = "ChecksumCRC32";
    _CCRCC = "ChecksumCRC32C";
    _CCRCNVME = "ChecksumCRC64NVME";
    _CD = "ContentDisposition";
    _CDr = "CreationDate";
    _CE = "ContentEncoding";
    _CF = "CloudFunction";
    _CFC = "CloudFunctionConfiguration";
    _CL = "ContentLanguage";
    _CLo = "ContentLength";
    _CM = "ChecksumMode";
    _CMD = "ContentMD5";
    _CMU = "CompletedMultipartUpload";
    _CORSC = "CORSConfiguration";
    _CORSR = "CORSRule";
    _CORSRu = "CORSRules";
    _CP = "CommonPrefixes";
    _CPo = "CompletedPart";
    _CR = "ContentRange";
    _CRSBA = "ConfirmRemoveSelfBucketAccess";
    _CS = "CopySource";
    _CSHA = "ChecksumSHA1";
    _CSHAh = "ChecksumSHA256";
    _CSIM = "CopySourceIfMatch";
    _CSIMS = "CopySourceIfModifiedSince";
    _CSINM = "CopySourceIfNoneMatch";
    _CSIUS = "CopySourceIfUnmodifiedSince";
    _CSR = "CopySourceRange";
    _CSSSECA = "CopySourceSSECustomerAlgorithm";
    _CSSSECK = "CopySourceSSECustomerKey";
    _CSSSECKMD = "CopySourceSSECustomerKeyMD5";
    _CSV = "CSV";
    _CSVI = "CopySourceVersionId";
    _CSVIn = "CSVInput";
    _CSVO = "CSVOutput";
    _CSo = "ConfigurationState";
    _CT = "ChecksumType";
    _CTl = "ClientToken";
    _CTo = "ContentType";
    _CTom = "CompressionType";
    _CTon = "ContinuationToken";
    _Ch = "Checksum";
    _Co = "Contents";
    _Cod = "Code";
    _Com = "Comments";
    _Con = "Condition";
    _D = "Delimiter";
    _DAI = "DaysAfterInitiation";
    _DE = "DataExport";
    _DIM = "DestinationIfMatch";
    _DIMS = "DestinationIfModifiedSince";
    _DINM = "DestinationIfNoneMatch";
    _DIUS = "DestinationIfUnmodifiedSince";
    _DM = "DeleteMarker";
    _DMR = "DeleteMarkerReplication";
    _DMRS = "DeleteMarkerReplicationStatus";
    _DMVI = "DeleteMarkerVersionId";
    _DMe = "DeleteMarkers";
    _DN = "DisplayName";
    _DR = "DataRedundancy";
    _DRe = "DefaultRetention";
    _DRes = "DestinationResult";
    _Da = "Days";
    _Dat = "Date";
    _De = "Deleted";
    _Del = "Delete";
    _Des = "Destination";
    _Desc = "Description";
    _E = "Expires";
    _EA = "EmailAddress";
    _EBC = "EventBridgeConfiguration";
    _EBO = "ExpectedBucketOwner";
    _EC = "ErrorCode";
    _ECn = "EncryptionConfiguration";
    _ED = "ErrorDocument";
    _EH = "ExposeHeaders";
    _EHx = "ExposeHeader";
    _EM = "ErrorMessage";
    _EODM = "ExpiredObjectDeleteMarker";
    _EOR = "ExistingObjectReplication";
    _EORS = "ExistingObjectReplicationStatus";
    _ERP = "EnableRequestProgress";
    _ES = "ExpiresString";
    _ESBO = "ExpectedSourceBucketOwner";
    _ESx = "ExpirationStatus";
    _ESxp = "ExpirationState";
    _ET = "EncodingType";
    _ETa = "ETag";
    _ETn = "EncryptionType";
    _ETv = "EventThreshold";
    _ETx = "ExpressionType";
    _En = "Encryption";
    _Ena = "Enabled";
    _End = "End";
    _Er = "Error";
    _Err = "Errors";
    _Ev = "Event";
    _Eve = "Events";
    _Ex = "Expression";
    _Exp = "Expiration";
    _F = "Filter";
    _FD = "FieldDelimiter";
    _FHI = "FileHeaderInfo";
    _FO = "FetchOwner";
    _FR = "FilterRule";
    _FRN = "FilterRuleName";
    _FRV = "FilterRuleValue";
    _FRi = "FilterRules";
    _Fi = "Field";
    _Fo = "Format";
    _Fr = "Frequency";
    _G = "Grant";
    _GFC = "GrantFullControl";
    _GJP = "GlacierJobParameters";
    _GR = "GrantRead";
    _GRACP = "GrantReadACP";
    _GW = "GrantWrite";
    _GWACP = "GrantWriteACP";
    _Gr = "Grants";
    _Gra = "Grantee";
    _HECRE = "HttpErrorCodeReturnedEquals";
    _HN = "HostName";
    _HRC = "HttpRedirectCode";
    _I = "Id";
    _IC = "InventoryConfiguration";
    _ICL = "InventoryConfigurationList";
    _ICS = "InventoryConfigurationState";
    _ID = "IndexDocument";
    _ID_ = "ID";
    _IDn = "InventoryDestination";
    _IE = "IsEnabled";
    _IEn = "InventoryEncryption";
    _IF = "InventoryFilter";
    _IFn = "InventoryFormat";
    _IFnv = "InventoryFrequency";
    _II = "InventoryId";
    _IIOV = "InventoryIncludedObjectVersions";
    _IL = "IsLatest";
    _IM = "IfMatch";
    _IMIT = "IfMatchInitiatedTime";
    _IMLMT = "IfMatchLastModifiedTime";
    _IMS = "IfMatchSize";
    _IMSf = "IfModifiedSince";
    _INM = "IfNoneMatch";
    _IOF = "InventoryOptionalField";
    _IOV = "IncludedObjectVersions";
    _IP = "IsPublic";
    _IPA = "IgnorePublicAcls";
    _IRIP = "IsRestoreInProgress";
    _IS = "InputSerialization";
    _ISBD = "InventoryS3BucketDestination";
    _ISn = "InventorySchedule";
    _IT = "IsTruncated";
    _ITAO = "IntelligentTieringAndOperator";
    _ITAT = "IntelligentTieringAccessTier";
    _ITC = "IntelligentTieringConfiguration";
    _ITCL = "IntelligentTieringConfigurationList";
    _ITCR = "InventoryTableConfigurationResult";
    _ITCU = "InventoryTableConfigurationUpdates";
    _ITCn = "InventoryTableConfiguration";
    _ITD = "IntelligentTieringDays";
    _ITF = "IntelligentTieringFilter";
    _ITI = "IntelligentTieringId";
    _ITS = "IntelligentTieringStatus";
    _IUS = "IfUnmodifiedSince";
    _In = "Initiator";
    _Ini = "Initiated";
    _JSON = "JSON";
    _JSONI = "JSONInput";
    _JSONO = "JSONOutput";
    _JSONT = "JSONType";
    _JTC = "JournalTableConfiguration";
    _JTCR = "JournalTableConfigurationResult";
    _JTCU = "JournalTableConfigurationUpdates";
    _K = "Key";
    _KC = "KeyCount";
    _KI = "KeyId";
    _KKA = "KmsKeyArn";
    _KM = "KeyMarker";
    _KMSC = "KMSContext";
    _KMSKI = "KMSKeyId";
    _KMSMKID = "KMSMasterKeyID";
    _KPE = "KeyPrefixEquals";
    _L = "Location";
    _LC = "LocationConstraint";
    _LE = "LoggingEnabled";
    _LEi = "LifecycleExpiration";
    _LFA = "LambdaFunctionArn";
    _LFC = "LambdaFunctionConfigurations";
    _LFCa = "LambdaFunctionConfiguration";
    _LI = "LocationInfo";
    _LM = "LastModified";
    _LMT = "LastModifiedTime";
    _LNAS = "LocationNameAsString";
    _LP = "LocationPrefix";
    _LR = "LifecycleRule";
    _LRAO = "LifecycleRuleAndOperator";
    _LRF = "LifecycleRuleFilter";
    _LT = "LocationType";
    _M = "Marker";
    _MAO = "MetricsAndOperator";
    _MAS = "MaxAgeSeconds";
    _MB = "MaxBuckets";
    _MC = "MetricsConfiguration";
    _MCL = "MetricsConfigurationList";
    _MCR = "MetadataConfigurationResult";
    _MCe = "MetadataConfiguration";
    _MD = "MetadataDirective";
    _MDB = "MaxDirectoryBuckets";
    _MDf = "MfaDelete";
    _ME = "MetadataEntry";
    _MF = "MetricsFilter";
    _MFA = "MFA";
    _MFAD = "MFADelete";
    _MI = "MetricsId";
    _MK = "MaxKeys";
    _MKe = "MetadataKey";
    _MM = "MissingMeta";
    _MOS = "MpuObjectSize";
    _MP = "MaxParts";
    _MS = "MetricsStatus";
    _MTC = "MetadataTableConfiguration";
    _MTCR = "MetadataTableConfigurationResult";
    _MTEC = "MetadataTableEncryptionConfiguration";
    _MU = "MaxUploads";
    _MV = "MetadataValue";
    _Me = "Metrics";
    _Mes = "Message";
    _Mi = "Minutes";
    _Mo = "Mode";
    _N = "Name";
    _NC = "NotificationConfiguration";
    _NCF = "NotificationConfigurationFilter";
    _NCT = "NextContinuationToken";
    _ND = "NoncurrentDays";
    _NI = "NotificationId";
    _NKM = "NextKeyMarker";
    _NM = "NextMarker";
    _NNV = "NewerNoncurrentVersions";
    _NPNM = "NextPartNumberMarker";
    _NUIM = "NextUploadIdMarker";
    _NVE = "NoncurrentVersionExpiration";
    _NVIM = "NextVersionIdMarker";
    _NVT = "NoncurrentVersionTransitions";
    _NVTo = "NoncurrentVersionTransition";
    _O = "Owner";
    _OA = "ObjectAttributes";
    _OC = "OwnershipControls";
    _OCACL = "ObjectCannedACL";
    _OCR = "OwnershipControlsRule";
    _OF = "OptionalFields";
    _OI = "ObjectIdentifier";
    _OK = "ObjectKey";
    _OL = "OutputLocation";
    _OLC = "ObjectLockConfiguration";
    _OLE = "ObjectLockEnabled";
    _OLEFB = "ObjectLockEnabledForBucket";
    _OLLH = "ObjectLockLegalHold";
    _OLLHS = "ObjectLockLegalHoldStatus";
    _OLM = "ObjectLockMode";
    _OLR = "ObjectLockRetention";
    _OLRM = "ObjectLockRetentionMode";
    _OLRUD = "ObjectLockRetainUntilDate";
    _OLRb = "ObjectLockRule";
    _OO = "ObjectOwnership";
    _OOA = "OptionalObjectAttributes";
    _OOw = "OwnerOverride";
    _OP = "ObjectParts";
    _OS = "OutputSerialization";
    _OSGT = "ObjectSizeGreaterThan";
    _OSGTB = "ObjectSizeGreaterThanBytes";
    _OSLT = "ObjectSizeLessThan";
    _OSLTB = "ObjectSizeLessThanBytes";
    _OSV = "OutputSchemaVersion";
    _OSb = "ObjectSize";
    _OVI = "ObjectVersionId";
    _Ob = "Objects";
    _P = "Prefix";
    _PABC = "PublicAccessBlockConfiguration";
    _PC = "PartsCount";
    _PDS = "PartitionDateSource";
    _PI = "ParquetInput";
    _PN = "PartNumber";
    _PNM = "PartNumberMarker";
    _PP = "PartitionedPrefix";
    _Pa = "Payer";
    _Par = "Part";
    _Parq = "Parquet";
    _Part = "Parts";
    _Pe = "Permission";
    _Pr = "Protocol";
    _Pri = "Priority";
    _Q = "Quiet";
    _QA = "QueueArn";
    _QC = "QueueConfiguration";
    _QCu = "QueueConfigurations";
    _QCuo = "QuoteCharacter";
    _QEC = "QuoteEscapeCharacter";
    _QF = "QuoteFields";
    _Qu = "Queue";
    _R = "Range";
    _RART = "RedirectAllRequestsTo";
    _RC = "RequestCharged";
    _RCC = "ResponseCacheControl";
    _RCD = "ResponseContentDisposition";
    _RCE = "ResponseContentEncoding";
    _RCL = "ResponseContentLanguage";
    _RCT = "ResponseContentType";
    _RCe = "ReplicationConfiguration";
    _RD = "RecordDelimiter";
    _RE = "ResponseExpires";
    _RED = "RecordExpirationDays";
    _REDe = "RestoreExpiryDate";
    _REe = "RecordExpiration";
    _RKKID = "ReplicaKmsKeyID";
    _RKPW = "ReplaceKeyPrefixWith";
    _RKW = "ReplaceKeyWith";
    _RM = "ReplicaModifications";
    _RMS = "ReplicaModificationsStatus";
    _ROP = "RestoreOutputPath";
    _RP = "RequestPayer";
    _RPB = "RestrictPublicBuckets";
    _RPC = "RequestPaymentConfiguration";
    _RPe = "RequestProgress";
    _RR = "RequestRoute";
    _RRAO = "ReplicationRuleAndOperator";
    _RRF = "ReplicationRuleFilter";
    _RRS = "ReplicationRuleStatus";
    _RRT = "RestoreRequestType";
    _RRe = "ReplicationRule";
    _RRes = "RestoreRequest";
    _RRo = "RoutingRules";
    _RRou = "RoutingRule";
    _RS = "RenameSource";
    _RSe = "ReplicationStatus";
    _RSes = "RestoreStatus";
    _RT = "RequestToken";
    _RTS = "ReplicationTimeStatus";
    _RTV = "ReplicationTimeValue";
    _RTe = "ReplicationTime";
    _RUD = "RetainUntilDate";
    _Re = "Restore";
    _Red = "Redirect";
    _Ro = "Role";
    _Ru = "Rule";
    _Rul = "Rules";
    _S = "Status";
    _SA = "StartAfter";
    _SAK = "SecretAccessKey";
    _SAs = "SseAlgorithm";
    _SBD = "S3BucketDestination";
    _SC = "StorageClass";
    _SCA = "StorageClassAnalysis";
    _SCADE = "StorageClassAnalysisDataExport";
    _SCASV = "StorageClassAnalysisSchemaVersion";
    _SCt = "StatusCode";
    _SDV = "SkipDestinationValidation";
    _SIM = "SourceIfMatch";
    _SIMS = "SourceIfModifiedSince";
    _SINM = "SourceIfNoneMatch";
    _SIUS = "SourceIfUnmodifiedSince";
    _SK = "SSE-KMS";
    _SKEO = "SseKmsEncryptedObjects";
    _SKEOS = "SseKmsEncryptedObjectsStatus";
    _SKF = "S3KeyFilter";
    _SKe = "S3Key";
    _SL = "S3Location";
    _SM = "SessionMode";
    _SOCR = "SelectObjectContentRequest";
    _SP = "SelectParameters";
    _SPi = "SimplePrefix";
    _SR = "ScanRange";
    _SS = "SSE-S3";
    _SSC = "SourceSelectionCriteria";
    _SSE = "ServerSideEncryption";
    _SSEA = "SSEAlgorithm";
    _SSEBD = "ServerSideEncryptionByDefault";
    _SSEC = "ServerSideEncryptionConfiguration";
    _SSECA = "SSECustomerAlgorithm";
    _SSECK = "SSECustomerKey";
    _SSECKMD = "SSECustomerKeyMD5";
    _SSEKMS = "SSEKMS";
    _SSEKMSEC = "SSEKMSEncryptionContext";
    _SSEKMSKI = "SSEKMSKeyId";
    _SSER = "ServerSideEncryptionRule";
    _SSES = "SSES3";
    _ST = "SessionToken";
    _STBA = "S3TablesBucketArn";
    _STD = "S3TablesDestination";
    _STDR = "S3TablesDestinationResult";
    _STN = "S3TablesName";
    _S_ = "S3";
    _Sc = "Schedule";
    _Se = "Setting";
    _Si = "Size";
    _St = "Start";
    _Su = "Suffix";
    _T = "Tagging";
    _TA = "TopicArn";
    _TAa = "TableArn";
    _TB = "TargetBucket";
    _TBA = "TableBucketArn";
    _TBT = "TableBucketType";
    _TC = "TagCount";
    _TCo = "TopicConfiguration";
    _TCop = "TopicConfigurations";
    _TD = "TaggingDirective";
    _TDMOS = "TransitionDefaultMinimumObjectSize";
    _TG = "TargetGrants";
    _TGa = "TargetGrant";
    _TN = "TableName";
    _TNa = "TableNamespace";
    _TOKF = "TargetObjectKeyFormat";
    _TP = "TargetPrefix";
    _TPC = "TotalPartsCount";
    _TS = "TagSet";
    _TSA = "TableSseAlgorithm";
    _TSC = "TransitionStorageClass";
    _TSa = "TableStatus";
    _Ta = "Tag";
    _Tag = "Tags";
    _Ti = "Tier";
    _Tie = "Tierings";
    _Tier = "Tiering";
    _Tim = "Time";
    _To = "Token";
    _Top = "Topic";
    _Tr = "Transitions";
    _Tra = "Transition";
    _Ty = "Type";
    _U = "Upload";
    _UI = "UploadId";
    _UIM = "UploadIdMarker";
    _UM = "UserMetadata";
    _URI = "URI";
    _Up = "Uploads";
    _V = "Version";
    _VC = "VersionCount";
    _VCe = "VersioningConfiguration";
    _VI = "VersionId";
    _VIM = "VersionIdMarker";
    _Va = "Value";
    _Ve = "Versions";
    _WC = "WebsiteConfiguration";
    _WOB = "WriteOffsetBytes";
    _WRL = "WebsiteRedirectLocation";
    _Y = "Years";
    _a = "analytics";
    _ac = "accelerate";
    _acl = "acl";
    _ar = "accept-ranges";
    _at = "attributes";
    _br = "bucket-region";
    _c = "cors";
    _cc = "cache-control";
    _cd = "content-disposition";
    _ce = "content-encoding";
    _cl = "content-language";
    _cl_ = "content-length";
    _cm = "content-md5";
    _cr = "content-range";
    _ct = "content-type";
    _ct_ = "continuation-token";
    _d = "delete";
    _de = "delimiter";
    _e = "expires";
    _en = "encryption";
    _et = "encoding-type";
    _eta = "etag";
    _ex = "expiresstring";
    _fo = "fetch-owner";
    _i = "id";
    _im = "if-match";
    _ims = "if-modified-since";
    _in = "inventory";
    _inm = "if-none-match";
    _it = "intelligent-tiering";
    _ius = "if-unmodified-since";
    _km = "key-marker";
    _l = "lifecycle";
    _lh = "legal-hold";
    _lm = "last-modified";
    _lo = "location";
    _log = "logging";
    _lt = "list-type";
    _m = "metrics";
    _mC = "metadataConfiguration";
    _mIT = "metadataInventoryTable";
    _mJT = "metadataJournalTable";
    _mT = "metadataTable";
    _ma = "marker";
    _mb = "max-buckets";
    _mdb = "max-directory-buckets";
    _me = "member";
    _mk = "max-keys";
    _mp = "max-parts";
    _mu = "max-uploads";
    _n = "notification";
    _oC = "ownershipControls";
    _ol = "object-lock";
    _p = "policy";
    _pAB = "publicAccessBlock";
    _pN = "partNumber";
    _pS = "policyStatus";
    _pnm = "part-number-marker";
    _pr = "prefix";
    _r = "replication";
    _rO = "renameObject";
    _rP = "requestPayment";
    _ra = "range";
    _rcc = "response-cache-control";
    _rcd = "response-content-disposition";
    _rce = "response-content-encoding";
    _rcl = "response-content-language";
    _rct = "response-content-type";
    _re = "response-expires";
    _res = "restore";
    _ret = "retention";
    _s = "session";
    _sa = "start-after";
    _se = "select";
    _st = "select-type";
    _t = "tagging";
    _to = "torrent";
    _u = "uploads";
    _uI = "uploadId";
    _uim = "upload-id-marker";
    _v = "versioning";
    _vI = "versionId";
    _ve = '<?xml version="1.0" encoding="UTF-8"?>';
    _ver = "versions";
    _vim = "version-id-marker";
    _w = "website";
    _x = "xsi:type";
    _xaa = "x-amz-acl";
    _xaad = "x-amz-abort-date";
    _xaapa = "x-amz-access-point-alias";
    _xaari = "x-amz-abort-rule-id";
    _xaas = "x-amz-archive-status";
    _xaba = "x-amz-bucket-arn";
    _xabgr = "x-amz-bypass-governance-retention";
    _xabln = "x-amz-bucket-location-name";
    _xablt = "x-amz-bucket-location-type";
    _xabole = "x-amz-bucket-object-lock-enabled";
    _xabolt = "x-amz-bucket-object-lock-token";
    _xabr = "x-amz-bucket-region";
    _xaca = "x-amz-checksum-algorithm";
    _xacc = "x-amz-checksum-crc32";
    _xacc_ = "x-amz-checksum-crc32c";
    _xacc__ = "x-amz-checksum-crc64nvme";
    _xacm = "x-amz-checksum-mode";
    _xacrsba = "x-amz-confirm-remove-self-bucket-access";
    _xacs = "x-amz-checksum-sha1";
    _xacs_ = "x-amz-checksum-sha256";
    _xacs__ = "x-amz-copy-source";
    _xacsim = "x-amz-copy-source-if-match";
    _xacsims = "x-amz-copy-source-if-modified-since";
    _xacsinm = "x-amz-copy-source-if-none-match";
    _xacsius = "x-amz-copy-source-if-unmodified-since";
    _xacsm = "x-amz-create-session-mode";
    _xacsr = "x-amz-copy-source-range";
    _xacssseca = "x-amz-copy-source-server-side-encryption-customer-algorithm";
    _xacssseck = "x-amz-copy-source-server-side-encryption-customer-key";
    _xacssseckm = "x-amz-copy-source-server-side-encryption-customer-key-md5";
    _xacsvi = "x-amz-copy-source-version-id";
    _xact = "x-amz-checksum-type";
    _xact_ = "x-amz-client-token";
    _xadm = "x-amz-delete-marker";
    _xae = "x-amz-expiration";
    _xaebo = "x-amz-expected-bucket-owner";
    _xafec = "x-amz-fwd-error-code";
    _xafem = "x-amz-fwd-error-message";
    _xafhar = "x-amz-fwd-header-accept-ranges";
    _xafhcc = "x-amz-fwd-header-cache-control";
    _xafhcd = "x-amz-fwd-header-content-disposition";
    _xafhce = "x-amz-fwd-header-content-encoding";
    _xafhcl = "x-amz-fwd-header-content-language";
    _xafhcr = "x-amz-fwd-header-content-range";
    _xafhct = "x-amz-fwd-header-content-type";
    _xafhe = "x-amz-fwd-header-etag";
    _xafhe_ = "x-amz-fwd-header-expires";
    _xafhlm = "x-amz-fwd-header-last-modified";
    _xafhxacc = "x-amz-fwd-header-x-amz-checksum-crc32";
    _xafhxacc_ = "x-amz-fwd-header-x-amz-checksum-crc32c";
    _xafhxacc__ = "x-amz-fwd-header-x-amz-checksum-crc64nvme";
    _xafhxacs = "x-amz-fwd-header-x-amz-checksum-sha1";
    _xafhxacs_ = "x-amz-fwd-header-x-amz-checksum-sha256";
    _xafhxadm = "x-amz-fwd-header-x-amz-delete-marker";
    _xafhxae = "x-amz-fwd-header-x-amz-expiration";
    _xafhxamm = "x-amz-fwd-header-x-amz-missing-meta";
    _xafhxampc = "x-amz-fwd-header-x-amz-mp-parts-count";
    _xafhxaollh = "x-amz-fwd-header-x-amz-object-lock-legal-hold";
    _xafhxaolm = "x-amz-fwd-header-x-amz-object-lock-mode";
    _xafhxaolrud = "x-amz-fwd-header-x-amz-object-lock-retain-until-date";
    _xafhxar = "x-amz-fwd-header-x-amz-restore";
    _xafhxarc = "x-amz-fwd-header-x-amz-request-charged";
    _xafhxars = "x-amz-fwd-header-x-amz-replication-status";
    _xafhxasc = "x-amz-fwd-header-x-amz-storage-class";
    _xafhxasse = "x-amz-fwd-header-x-amz-server-side-encryption";
    _xafhxasseakki = "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id";
    _xafhxassebke = "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled";
    _xafhxasseca = "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm";
    _xafhxasseckm = "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5";
    _xafhxatc = "x-amz-fwd-header-x-amz-tagging-count";
    _xafhxavi = "x-amz-fwd-header-x-amz-version-id";
    _xafs = "x-amz-fwd-status";
    _xagfc = "x-amz-grant-full-control";
    _xagr = "x-amz-grant-read";
    _xagra = "x-amz-grant-read-acp";
    _xagw = "x-amz-grant-write";
    _xagwa = "x-amz-grant-write-acp";
    _xaimit = "x-amz-if-match-initiated-time";
    _xaimlmt = "x-amz-if-match-last-modified-time";
    _xaims = "x-amz-if-match-size";
    _xam = "x-amz-mfa";
    _xamd = "x-amz-metadata-directive";
    _xamm = "x-amz-missing-meta";
    _xamos = "x-amz-mp-object-size";
    _xamp = "x-amz-max-parts";
    _xampc = "x-amz-mp-parts-count";
    _xaoa = "x-amz-object-attributes";
    _xaollh = "x-amz-object-lock-legal-hold";
    _xaolm = "x-amz-object-lock-mode";
    _xaolrud = "x-amz-object-lock-retain-until-date";
    _xaoo = "x-amz-object-ownership";
    _xaooa = "x-amz-optional-object-attributes";
    _xaos = "x-amz-object-size";
    _xapnm = "x-amz-part-number-marker";
    _xar = "x-amz-restore";
    _xarc = "x-amz-request-charged";
    _xarop = "x-amz-restore-output-path";
    _xarp = "x-amz-request-payer";
    _xarr = "x-amz-request-route";
    _xars = "x-amz-rename-source";
    _xars_ = "x-amz-replication-status";
    _xarsim = "x-amz-rename-source-if-match";
    _xarsims = "x-amz-rename-source-if-modified-since";
    _xarsinm = "x-amz-rename-source-if-none-match";
    _xarsius = "x-amz-rename-source-if-unmodified-since";
    _xart = "x-amz-request-token";
    _xasc = "x-amz-storage-class";
    _xasca = "x-amz-sdk-checksum-algorithm";
    _xasdv = "x-amz-skip-destination-validation";
    _xasebo = "x-amz-source-expected-bucket-owner";
    _xasse = "x-amz-server-side-encryption";
    _xasseakki = "x-amz-server-side-encryption-aws-kms-key-id";
    _xassebke = "x-amz-server-side-encryption-bucket-key-enabled";
    _xassec = "x-amz-server-side-encryption-context";
    _xasseca = "x-amz-server-side-encryption-customer-algorithm";
    _xasseck = "x-amz-server-side-encryption-customer-key";
    _xasseckm = "x-amz-server-side-encryption-customer-key-md5";
    _xat = "x-amz-tagging";
    _xatc = "x-amz-tagging-count";
    _xatd = "x-amz-tagging-directive";
    _xatdmos = "x-amz-transition-default-minimum-object-size";
    _xavi = "x-amz-version-id";
    _xawob = "x-amz-write-offset-bytes";
    _xawrl = "x-amz-website-redirect-location";
    _xi = "x-id";
  }
});
var CreateSessionCommand;
var init_CreateSessionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateSessionCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CreateSessionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "CreateSession", {}).n("S3Client", "CreateSessionCommand").f(CreateSessionRequestFilterSensitiveLog, CreateSessionOutputFilterSensitiveLog).ser(se_CreateSessionCommand).de(de_CreateSessionCommand).build() {
    };
  }
});
var package_default;
var init_package = __esm({
  "node_modules/@aws-sdk/client-s3/package.json"() {
    package_default = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.887.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-s3",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn g:vitest run",
        "test:browser": "node ./test/browser-build/esbuild && yarn g:vitest run -c vitest.config.browser.mts",
        "test:browser:watch": "node ./test/browser-build/esbuild && yarn g:vitest watch -c vitest.config.browser.mts",
        "test:e2e": "yarn g:vitest run -c vitest.config.e2e.mts && yarn test:browser",
        "test:e2e:watch": "yarn g:vitest watch -c vitest.config.e2e.mts",
        "test:integration": "yarn g:vitest run -c vitest.config.integ.mts",
        "test:integration:watch": "yarn g:vitest watch -c vitest.config.integ.mts",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "5.2.0",
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.887.0",
        "@aws-sdk/credential-provider-node": "3.887.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.887.0",
        "@aws-sdk/middleware-expect-continue": "3.887.0",
        "@aws-sdk/middleware-flexible-checksums": "3.887.0",
        "@aws-sdk/middleware-host-header": "3.887.0",
        "@aws-sdk/middleware-location-constraint": "3.887.0",
        "@aws-sdk/middleware-logger": "3.887.0",
        "@aws-sdk/middleware-recursion-detection": "3.887.0",
        "@aws-sdk/middleware-sdk-s3": "3.887.0",
        "@aws-sdk/middleware-ssec": "3.887.0",
        "@aws-sdk/middleware-user-agent": "3.887.0",
        "@aws-sdk/region-config-resolver": "3.887.0",
        "@aws-sdk/signature-v4-multi-region": "3.887.0",
        "@aws-sdk/types": "3.887.0",
        "@aws-sdk/util-endpoints": "3.887.0",
        "@aws-sdk/util-user-agent-browser": "3.887.0",
        "@aws-sdk/util-user-agent-node": "3.887.0",
        "@aws-sdk/xml-builder": "3.887.0",
        "@smithy/config-resolver": "^4.2.1",
        "@smithy/core": "^3.11.0",
        "@smithy/eventstream-serde-browser": "^4.1.1",
        "@smithy/eventstream-serde-config-resolver": "^4.2.1",
        "@smithy/eventstream-serde-node": "^4.1.1",
        "@smithy/fetch-http-handler": "^5.2.1",
        "@smithy/hash-blob-browser": "^4.1.1",
        "@smithy/hash-node": "^4.1.1",
        "@smithy/hash-stream-node": "^4.1.1",
        "@smithy/invalid-dependency": "^4.1.1",
        "@smithy/md5-js": "^4.1.1",
        "@smithy/middleware-content-length": "^4.1.1",
        "@smithy/middleware-endpoint": "^4.2.1",
        "@smithy/middleware-retry": "^4.2.1",
        "@smithy/middleware-serde": "^4.1.1",
        "@smithy/middleware-stack": "^4.1.1",
        "@smithy/node-config-provider": "^4.2.1",
        "@smithy/node-http-handler": "^4.2.1",
        "@smithy/protocol-http": "^5.2.1",
        "@smithy/smithy-client": "^4.6.1",
        "@smithy/types": "^4.5.0",
        "@smithy/url-parser": "^4.1.1",
        "@smithy/util-base64": "^4.1.0",
        "@smithy/util-body-length-browser": "^4.1.0",
        "@smithy/util-body-length-node": "^4.1.0",
        "@smithy/util-defaults-mode-browser": "^4.1.1",
        "@smithy/util-defaults-mode-node": "^4.1.1",
        "@smithy/util-endpoints": "^3.1.1",
        "@smithy/util-middleware": "^4.1.1",
        "@smithy/util-retry": "^4.1.1",
        "@smithy/util-stream": "^4.3.1",
        "@smithy/util-utf8": "^4.1.0",
        "@smithy/util-waiter": "^4.1.1",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@aws-sdk/signature-v4-crt": "3.887.0",
        "@tsconfig/node18": "18.2.4",
        "@types/node": "^18.19.69",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.8.3"
      },
      engines: {
        node: ">=18.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});
var ENV_KEY;
var ENV_SECRET;
var ENV_SESSION;
var ENV_EXPIRATION;
var ENV_CREDENTIAL_SCOPE;
var ENV_ACCOUNT_ID;
var fromEnv2;
var init_fromEnv2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js"() {
    init_client();
    init_dist_es15();
    ENV_KEY = "AWS_ACCESS_KEY_ID";
    ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    ENV_SESSION = "AWS_SESSION_TOKEN";
    ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
    fromEnv2 = (init) => async () => {
      init?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      const accountId = process.env[ENV_ACCOUNT_ID];
      if (accessKeyId && secretAccessKey) {
        const credentials = {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope },
          ...accountId && { accountId }
        };
        setCredentialFeature(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
      }
      throw new CredentialsProviderError("Unable to find environment variable credentials.", { logger: init?.logger });
    };
  }
});
var dist_es_exports = {};
__export2(dist_es_exports, {
  ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
  ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
  ENV_EXPIRATION: () => ENV_EXPIRATION,
  ENV_KEY: () => ENV_KEY,
  ENV_SECRET: () => ENV_SECRET,
  ENV_SESSION: () => ENV_SESSION,
  fromEnv: () => fromEnv2
});
var init_dist_es68 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-env/dist-es/index.js"() {
    init_fromEnv2();
  }
});
function httpRequest(options) {
  return new Promise((resolve, reject) => {
    const req = request({
      method: "GET",
      ...options,
      hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
    });
    req.on("error", (err) => {
      reject(Object.assign(new ProviderError("Unable to connect to instance metadata service"), err));
      req.destroy();
    });
    req.on("timeout", () => {
      reject(new ProviderError("TimeoutError from instance metadata service"));
      req.destroy();
    });
    req.on("response", (res) => {
      const { statusCode = 400 } = res;
      if (statusCode < 200 || 300 <= statusCode) {
        reject(Object.assign(new ProviderError("Error response received from instance metadata service"), { statusCode }));
        req.destroy();
      }
      const chunks = [];
      res.on("data", (chunk) => {
        chunks.push(chunk);
      });
      res.on("end", () => {
        resolve(Buffer8.concat(chunks));
        req.destroy();
      });
    });
    req.end();
  });
}
var init_httpRequest8 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js"() {
    init_dist_es15();
  }
});
var isImdsCredentials;
var fromImdsCredentials;
var init_ImdsCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js"() {
    isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
      ...creds.AccountId && { accountId: creds.AccountId }
    });
  }
});
var DEFAULT_TIMEOUT;
var DEFAULT_MAX_RETRIES;
var providerConfigFromInit;
var init_RemoteProviderInit = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js"() {
    DEFAULT_TIMEOUT = 1e3;
    DEFAULT_MAX_RETRIES = 0;
    providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
  }
});
var retry;
var init_retry5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js"() {
    retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i5 = 0; i5 < maxRetries; i5++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
  }
});
var ENV_CMDS_FULL_URI;
var ENV_CMDS_RELATIVE_URI;
var ENV_CMDS_AUTH_TOKEN;
var fromContainerMetadata;
var requestFromEcsImds;
var CMDS_IP;
var GREENGRASS_HOSTS;
var GREENGRASS_PROTOCOLS;
var getCmdsUri;
var init_fromContainerMetadata = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"() {
    init_dist_es15();
    init_httpRequest8();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry5();
    ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    };
    requestFromEcsImds = async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    CMDS_IP = "169.254.170.2";
    GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    getCmdsUri = async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, {
        tryNextLink: false,
        logger: logger2
      });
    };
  }
});
var InstanceMetadataV1FallbackError;
var init_InstanceMetadataV1FallbackError = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js"() {
    init_dist_es15();
    InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError extends CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);
      }
    };
  }
});
var Endpoint;
var init_Endpoint = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js"() {
    (function(Endpoint3) {
      Endpoint3["IPv4"] = "http://169.254.169.254";
      Endpoint3["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint || (Endpoint = {}));
  }
});
var ENV_ENDPOINT_NAME;
var CONFIG_ENDPOINT_NAME;
var ENDPOINT_CONFIG_OPTIONS;
var init_EndpointConfigOptions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js"() {
    ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => env3[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});
var EndpointMode;
var init_EndpointMode = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js"() {
    (function(EndpointMode3) {
      EndpointMode3["IPv4"] = "IPv4";
      EndpointMode3["IPv6"] = "IPv6";
    })(EndpointMode || (EndpointMode = {}));
  }
});
var ENV_ENDPOINT_MODE_NAME;
var CONFIG_ENDPOINT_MODE_NAME;
var ENDPOINT_MODE_CONFIG_OPTIONS;
var init_EndpointModeConfigOptions = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js"() {
    init_EndpointMode();
    ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => env3[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode.IPv4
    };
  }
});
var getInstanceMetadataEndpoint;
var getFromEndpointConfig;
var getFromEndpointModeConfig;
var init_getInstanceMetadataEndpoint = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"() {
    init_dist_es58();
    init_dist_es51();
    init_Endpoint();
    init_EndpointConfigOptions();
    init_EndpointMode();
    init_EndpointModeConfigOptions();
    getInstanceMetadataEndpoint = async () => parseUrl(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    getFromEndpointConfig = async () => loadConfig2(ENDPOINT_CONFIG_OPTIONS)();
    getFromEndpointModeConfig = async () => {
      const endpointMode = await loadConfig2(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode.IPv4:
          return Endpoint.IPv4;
        case EndpointMode.IPv6:
          return Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    };
  }
});
var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS;
var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS;
var STATIC_STABILITY_DOC_URL;
var getExtendedInstanceMetadataCredentials;
var init_getExtendedInstanceMetadataCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js"() {
    STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    getExtendedInstanceMetadataCredentials = (credentials, logger2) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL);
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
  }
});
var staticStabilityProvider;
var init_staticStabilityProvider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"() {
    init_getExtendedInstanceMetadataCredentials();
    staticStabilityProvider = (provider, options = {}) => {
      const logger2 = options?.logger || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e5) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e5);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e5;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
  }
});
var IMDS_PATH;
var IMDS_TOKEN_PATH;
var AWS_EC2_METADATA_V1_DISABLED;
var PROFILE_AWS_EC2_METADATA_V1_DISABLED;
var X_AWS_EC2_METADATA_TOKEN;
var fromInstanceMetadata;
var getInstanceMetadataProvider;
var getMetadataToken;
var getProfile;
var getCredentialsFromProfile;
var init_fromInstanceMetadata = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"() {
    init_dist_es58();
    init_dist_es15();
    init_InstanceMetadataV1FallbackError();
    init_httpRequest8();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry5();
    init_getInstanceMetadataEndpoint();
    init_staticStabilityProvider();
    IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    IMDS_TOKEN_PATH = "/latest/api/token";
    AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });
    getInstanceMetadataProvider = (init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials2 = async (maxRetries2, options) => {
        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await loadConfig2({
            environmentVariableSelector: (env3) => {
              const envValue = env3[AWS_EC2_METADATA_V1_DISABLED];
              fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
              if (envValue === void 0) {
                throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });
              }
              return fallbackBlockedFromProcessEnv;
            },
            configFileSelector: (profile2) => {
              const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
              fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
              return fallbackBlockedFromProfile;
            },
            default: false
          }, {
            profile
          })();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials2(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error2) {
            if (error2?.statusCode === 400) {
              throw Object.assign(error2, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error2.message === "TimeoutError" || [403, 404, 405].includes(error2.statusCode)) {
              disableFetchToken = true;
            }
            logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials2(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials2(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    };
    getMetadataToken = async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();
    getCredentialsFromProfile = async (profile, options, init) => {
      const credentialsResponse = JSON.parse((await httpRequest({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!isImdsCredentials(credentialsResponse)) {
        throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    };
  }
});
var init_types15 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/types.js"() {
  }
});
var dist_es_exports2 = {};
__export2(dist_es_exports2, {
  DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
  DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
  ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
  ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
  ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
  Endpoint: () => Endpoint,
  fromContainerMetadata: () => fromContainerMetadata,
  fromInstanceMetadata: () => fromInstanceMetadata,
  getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
  httpRequest: () => httpRequest,
  providerConfigFromInit: () => providerConfigFromInit
});
var init_dist_es69 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/credential-provider-imds/dist-es/index.js"() {
    init_fromContainerMetadata();
    init_fromInstanceMetadata();
    init_RemoteProviderInit();
    init_types15();
    init_httpRequest8();
    init_getInstanceMetadataEndpoint();
    init_Endpoint();
  }
});
var init_httpExtensionConfiguration8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
  }
});
var init_extensions14 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration8();
  }
});
var init_Field8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery8(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest8;
var init_httpRequest9 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest8 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery8(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var HttpResponse4;
var init_httpResponse8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    HttpResponse4 = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
var init_isValidHostname8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types16 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es70 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions14();
    init_Field8();
    init_Fields8();
    init_httpHandler8();
    init_httpRequest9();
    init_httpResponse8();
    init_isValidHostname8();
    init_types16();
  }
});
var escapeUri2;
var hexEncode2;
var init_escape_uri2 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    escapeUri2 = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode2);
    hexEncode2 = (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});
var init_escape_uri_path2 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
  }
});
var init_dist_es71 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    init_escape_uri2();
    init_escape_uri_path2();
  }
});
function buildQueryString(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri2(key);
    if (Array.isArray(value)) {
      for (let i5 = 0, iLen = value.length; i5 < iLen; i5++) {
        parts.push(`${key}=${escapeUri2(value[i5])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri2(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
var init_dist_es72 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    init_dist_es71();
  }
});
var NODEJS_TIMEOUT_ERROR_CODES2;
var init_constants10 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/constants.js"() {
    NODEJS_TIMEOUT_ERROR_CODES2 = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});
var getTransformedHeaders;
var init_get_transformed_headers = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js"() {
    getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
  }
});
var timing;
var init_timing = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/timing.js"() {
    timing = {
      setTimeout: (cb2, ms) => setTimeout(cb2, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
  }
});
var DEFER_EVENT_LISTENER_TIME;
var setConnectionTimeout;
var init_set_connection_timeout = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js"() {
    init_timing();
    DEFER_EVENT_LISTENER_TIME = 1e3;
    setConnectionTimeout = (request3, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = (offset) => {
        const timeoutId = timing.setTimeout(() => {
          request3.destroy();
          reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
          }));
        }, timeoutInMs - offset);
        const doWithSocket = (socket) => {
          if (socket?.connecting) {
            socket.on("connect", () => {
              timing.clearTimeout(timeoutId);
            });
          } else {
            timing.clearTimeout(timeoutId);
          }
        };
        if (request3.socket) {
          doWithSocket(request3.socket);
        } else {
          request3.on("socket", doWithSocket);
        }
      };
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME2;
var setSocketKeepAlive;
var init_set_socket_keep_alive = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js"() {
    init_timing();
    DEFER_EVENT_LISTENER_TIME2 = 3e3;
    setSocketKeepAlive = (request3, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = () => {
        if (request3.socket) {
          request3.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request3.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      };
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing.setTimeout(registerListener, deferTimeMs);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME3;
var setSocketTimeout;
var init_set_socket_timeout = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js"() {
    init_node_http_handler();
    init_timing();
    DEFER_EVENT_LISTENER_TIME3 = 3e3;
    setSocketTimeout = (request3, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT) => {
      const registerTimeout = (offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = () => {
          request3.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        };
        if (request3.socket) {
          request3.socket.setTimeout(timeout, onTimeout);
          request3.on("close", () => request3.socket?.removeListener("timeout", onTimeout));
        } else {
          request3.setTimeout(timeout, onTimeout);
        }
      };
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3), DEFER_EVENT_LISTENER_TIME3);
    };
  }
});
async function writeRequestBody(httpRequest3, request3, maxContinueTimeoutMs = MIN_WAIT_TIME) {
  const headers = request3.headers ?? {};
  const expect = headers["Expect"] || headers["expect"];
  let timeoutId = -1;
  let sendBody = true;
  if (expect === "100-continue") {
    sendBody = await Promise.race([
      new Promise((resolve) => {
        timeoutId = Number(timing.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
      }),
      new Promise((resolve) => {
        httpRequest3.on("continue", () => {
          timing.clearTimeout(timeoutId);
          resolve(true);
        });
        httpRequest3.on("response", () => {
          timing.clearTimeout(timeoutId);
          resolve(false);
        });
        httpRequest3.on("error", () => {
          timing.clearTimeout(timeoutId);
          resolve(false);
        });
      })
    ]);
  }
  if (sendBody) {
    writeBody(httpRequest3, request3.body);
  }
}
function writeBody(httpRequest3, body) {
  if (body instanceof Readable4) {
    body.pipe(httpRequest3);
    return;
  }
  if (body) {
    if (Buffer.isBuffer(body) || typeof body === "string") {
      httpRequest3.end(body);
      return;
    }
    const uint8 = body;
    if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
      httpRequest3.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
      return;
    }
    httpRequest3.end(Buffer.from(body));
    return;
  }
  httpRequest3.end();
}
var MIN_WAIT_TIME;
var init_write_request_body = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js"() {
    init_timing();
    MIN_WAIT_TIME = 6e3;
  }
});
var DEFAULT_REQUEST_TIMEOUT;
var NodeHttpHandler;
var init_node_http_handler = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js"() {
    init_dist_es70();
    init_dist_es72();
    init_constants10();
    init_get_transformed_headers();
    init_set_connection_timeout();
    init_set_socket_keep_alive();
    init_set_socket_timeout();
    init_timing();
    init_write_request_body();
    DEFAULT_REQUEST_TIMEOUT = 0;
    NodeHttpHandler = class _NodeHttpHandler {
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler(instanceOrOptions);
      }
      static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = sockets[origin]?.length ?? 0;
            const requestsEnqueued = requests[origin]?.length ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              logger2?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          socketAcquisitionWarningTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof hAgent || typeof httpAgent?.destroy === "function") {
              return httpAgent;
            }
            return new hAgent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof hsAgent || typeof httpsAgent?.destroy === "function") {
              return httpsAgent;
            }
            return new hsAgent({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
      }
      async handle(request3, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request3.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(timing.setTimeout(() => {
            this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);
          }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)));
          const queryString = buildQueryString(request3.query || {});
          let auth = void 0;
          if (request3.username != null || request3.password != null) {
            const username = request3.username ?? "";
            const password = request3.password ?? "";
            auth = `${username}:${password}`;
          }
          let path4 = request3.path;
          if (queryString) {
            path4 += `?${queryString}`;
          }
          if (request3.fragment) {
            path4 += `#${request3.fragment}`;
          }
          let hostname = request3.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request3.hostname.slice(1, -1);
          } else {
            hostname = request3.hostname;
          }
          const nodeHttpsOptions = {
            headers: request3.headers,
            host: hostname,
            method: request3.method,
            path: path4,
            port: request3.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? hsRequest : hRequest;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new HttpResponse4({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES2.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          if (abortSignal) {
            const onAbort = () => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          const effectiveRequestTimeout = requestTimeout ?? this.config.requestTimeout;
          timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout(req, reject, effectiveRequestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(setSocketKeepAlive(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            }));
          }
          writeRequestBodyPromise = writeRequestBody(req, request3, effectiveRequestTimeout).catch((e5) => {
            timeouts.forEach(timing.clearTimeout);
            return _reject(e5);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return {
            ...config2,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
  }
});
var init_node_http2_handler = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js"() {
  }
});
var Collector2;
var init_collector = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js"() {
    Collector2 = class extends Writable3 {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
  }
});
async function collectReadableStream(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
var streamCollector;
var isReadableStreamInstance;
var init_stream_collector = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js"() {
    init_collector();
    streamCollector = (stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector2();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    };
    isReadableStreamInstance = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});
var init_dist_es73 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/node-http-handler/dist-es/index.js"() {
    init_node_http_handler();
    init_node_http2_handler();
    init_stream_collector();
  }
});
var ECS_CONTAINER_HOST;
var EKS_CONTAINER_HOST_IPv4;
var EKS_CONTAINER_HOST_IPv6;
var checkUrl;
var init_checkUrl = __esm({
  "node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js"() {
    init_dist_es15();
    ECS_CONTAINER_HOST = "169.254.170.2";
    EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
    EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
    checkUrl = (url, logger2) => {
      if (url.protocol === "https:") {
        return;
      }
      if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
        return;
      }
      if (url.hostname.includes("[")) {
        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
          return;
        }
      } else {
        if (url.hostname === "localhost") {
          return;
        }
        const ipComponents = url.hostname.split(".");
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
          return;
        }
      }
      throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger: logger2 });
    };
  }
});
var init_client8 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/client.js"() {
  }
});
var init_collect_stream_body5 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
  }
});
var init_command7 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/command.js"() {
  }
});
var init_constants11 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
  }
});
var init_create_aggregated_client4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
  }
});
var init_exceptions4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
  }
});
var init_default_error_handler4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
  }
});
var init_defaults_mode4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
  }
});
var init_emitWarningIfUnsupportedVersion5 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
  }
});
var init_extended_encode_uri_component5 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
  }
});
var init_defaultExtensionConfiguration7 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions15 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_defaultExtensionConfiguration7();
  }
});
var init_get_array_if_single_item4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
  }
});
var init_get_value_from_text_node4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
  }
});
var init_is_serializable_header_value4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
  }
});
var init_NoOpLogger4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
  }
});
var init_object_mapping4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
  }
});
var init_resolve_path5 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
  }
});
var init_ser_utils4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
  }
});
var init_serde_json4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
  }
});
var init_dist_es74 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_client8();
    init_collect_stream_body5();
    init_command7();
    init_constants11();
    init_create_aggregated_client4();
    init_default_error_handler4();
    init_defaults_mode4();
    init_emitWarningIfUnsupportedVersion5();
    init_exceptions4();
    init_extended_encode_uri_component5();
    init_extensions15();
    init_get_array_if_single_item4();
    init_get_value_from_text_node4();
    init_is_serializable_header_value4();
    init_NoOpLogger4();
    init_object_mapping4();
    init_resolve_path5();
    init_ser_utils4();
    init_serde_json4();
    init_serde2();
  }
});
var fromArrayBuffer5;
var fromString5;
var init_dist_es75 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer5 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer9.from(input, offset, length);
    };
    fromString5 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer9.from(input, encoding) : Buffer9.from(input);
    };
  }
});
var BASE64_REGEX2;
var fromBase642;
var init_fromBase643 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    init_dist_es75();
    BASE64_REGEX2 = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase642 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX2.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString5(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});
var fromUtf89;
var init_fromUtf87 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es75();
    fromUtf89 = (input) => {
      const buf = fromString5(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var init_toUint8Array7 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
  }
});
var toUtf83;
var init_toUtf87 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es75();
    toUtf83 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer5(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});
var init_dist_es76 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf87();
    init_toUint8Array7();
    init_toUtf87();
  }
});
var toBase643;
var init_toBase643 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    init_dist_es75();
    init_dist_es76();
    toBase643 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf89(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer5(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});
var init_dist_es77 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_fromBase643();
    init_toBase643();
  }
});
var init_Uint8ArrayBlobAdapter4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
  }
});
var init_ChecksumStream4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js"() {
  }
});
var isReadableStream3;
var init_stream_type_check4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
    isReadableStream3 = (stream) => typeof ReadableStream === "function" && (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream);
  }
});
var init_createChecksumStream4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js"() {
  }
});
var init_createBufferedReadable4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js"() {
  }
});
var init_getAwsChunkedEncodingStream4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
  }
});
var init_headStream4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/headStream.js"() {
  }
});
var init_fetch_http_handler = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js"() {
  }
});
async function collectBlob(blob) {
  const base64 = await readToBase64(blob);
  const arrayBuffer = fromBase642(base64);
  return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
function readToBase64(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      const result = reader.result ?? "";
      const commaIndex = result.indexOf(",");
      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = () => reject(new Error("Read aborted"));
    reader.onerror = () => reject(reader.error);
    reader.readAsDataURL(blob);
  });
}
var streamCollector2;
var init_stream_collector2 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"() {
    init_dist_es77();
    streamCollector2 = async (stream) => {
      if (typeof Blob === "function" && stream instanceof Blob || stream.constructor?.name === "Blob") {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
      }
      return collectStream(stream);
    };
  }
});
var init_dist_es78 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/fetch-http-handler/dist-es/index.js"() {
    init_fetch_http_handler();
    init_stream_collector2();
  }
});
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED;
var sdkStreamMixin;
var isBlobInstance;
var init_sdk_stream_mixin_browser = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js"() {
    init_dist_es78();
    init_dist_es77();
    init_dist_es12();
    init_dist_es76();
    init_stream_type_check4();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    sdkStreamMixin = (stream) => {
      if (!isBlobInstance(stream) && !isReadableStream3(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await streamCollector2(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return toBase643(buf);
          } else if (encoding === "hex") {
            return toHex(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return toUtf83(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if (isReadableStream3(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
  }
});
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2;
var sdkStreamMixin2;
var init_sdk_stream_mixin4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
    init_dist_es73();
    init_dist_es75();
    init_sdk_stream_mixin_browser();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2 = "The stream has already been transformed.";
    sdkStreamMixin2 = (stream) => {
      if (!(stream instanceof Readable5)) {
        try {
          return sdkStreamMixin(stream);
        } catch (e5) {
          const name = stream?.__proto__?.constructor?.name || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2);
        }
        transformed = true;
        return await streamCollector(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return fromArrayBuffer5(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof Readable5.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");
          }
          transformed = true;
          return Readable5.toWeb(stream);
        }
      });
    };
  }
});
var init_splitStream4 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/splitStream.js"() {
  }
});
var init_dist_es79 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_Uint8ArrayBlobAdapter4();
    init_ChecksumStream4();
    init_createChecksumStream4();
    init_createBufferedReadable4();
    init_getAwsChunkedEncodingStream4();
    init_headStream4();
    init_sdk_stream_mixin4();
    init_splitStream4();
    init_stream_type_check4();
  }
});
function createGetRequest(url) {
  return new HttpRequest8({
    protocol: url.protocol,
    hostname: url.hostname,
    port: Number(url.port),
    path: url.pathname,
    query: Array.from(url.searchParams.entries()).reduce((acc, [k5, v6]) => {
      acc[k5] = v6;
      return acc;
    }, {}),
    fragment: url.hash
  });
}
async function getCredentials(response, logger2) {
  const stream = sdkStreamMixin2(response.body);
  const str = await stream.transformToString();
  if (response.statusCode === 200) {
    const parsed = JSON.parse(str);
    if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
      throw new CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger: logger2 });
    }
    return {
      accessKeyId: parsed.AccessKeyId,
      secretAccessKey: parsed.SecretAccessKey,
      sessionToken: parsed.Token,
      expiration: parseRfc3339DateTime(parsed.Expiration)
    };
  }
  if (response.statusCode >= 400 && response.statusCode < 500) {
    let parsedBody = {};
    try {
      parsedBody = JSON.parse(str);
    } catch (e5) {
    }
    throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 }), {
      Code: parsedBody.Code,
      Message: parsedBody.Message
    });
  }
  throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 });
}
var init_requestHelpers = __esm({
  "node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js"() {
    init_dist_es15();
    init_dist_es70();
    init_dist_es74();
    init_dist_es79();
  }
});
var retryWrapper;
var init_retry_wrapper = __esm({
  "node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js"() {
    retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i5 = 0; i5 < maxRetries; ++i5) {
          try {
            return await toRetry();
          } catch (e5) {
            await new Promise((resolve) => setTimeout(resolve, delayMs));
          }
        }
        return await toRetry();
      };
    };
  }
});
var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI;
var DEFAULT_LINK_LOCAL_HOST;
var AWS_CONTAINER_CREDENTIALS_FULL_URI;
var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE;
var AWS_CONTAINER_AUTHORIZATION_TOKEN;
var fromHttp;
var init_fromHttp = __esm({
  "node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js"() {
    init_client();
    init_dist_es73();
    init_dist_es15();
    init_checkUrl();
    init_requestHelpers();
    init_retry_wrapper();
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
    AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
    AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromHttp = (options = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
      let host;
      const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn2 = options.logger?.constructor?.name === "NoOpLogger" || !options.logger?.warn ? console.warn : options.logger.warn.bind(options.logger);
      if (relative && full) {
        warn2("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
        warn2("awsContainerCredentialsFullUri will take precedence.");
      }
      if (token && tokenFile) {
        warn2("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
        warn2("awsContainerAuthorizationToken will take precedence.");
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
      }
      const url = new URL(host);
      checkUrl(url, options.logger);
      const requestHandler = new NodeHttpHandler({
        requestTimeout: options.timeout ?? 1e3,
        connectionTimeout: options.timeout ?? 1e3
      });
      return retryWrapper(async () => {
        const request3 = createGetRequest(url);
        if (token) {
          request3.headers.Authorization = token;
        } else if (tokenFile) {
          request3.headers.Authorization = (await fs2.readFile(tokenFile)).toString();
        }
        try {
          const result = await requestHandler.handle(request3);
          return getCredentials(result.response).then((creds) => setCredentialFeature(creds, "CREDENTIALS_HTTP", "z"));
        } catch (e5) {
          throw new CredentialsProviderError(String(e5), { logger: options.logger });
        }
      }, options.maxRetries ?? 3, options.timeout ?? 1e3);
    };
  }
});
var dist_es_exports3 = {};
__export2(dist_es_exports3, {
  fromHttp: () => fromHttp
});
var init_dist_es80 = __esm({
  "node_modules/@aws-sdk/credential-provider-http/dist-es/index.js"() {
    init_fromHttp();
  }
});
var ENV_IMDS_DISABLED;
var remoteProvider;
var init_remoteProvider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js"() {
    init_dist_es15();
    ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    remoteProvider = async (init) => {
      const { ENV_CMDS_FULL_URI: ENV_CMDS_FULL_URI3, ENV_CMDS_RELATIVE_URI: ENV_CMDS_RELATIVE_URI3, fromContainerMetadata: fromContainerMetadata3, fromInstanceMetadata: fromInstanceMetadata3 } = await Promise.resolve().then(() => (init_dist_es69(), dist_es_exports2));
      if (process.env[ENV_CMDS_RELATIVE_URI3] || process.env[ENV_CMDS_FULL_URI3]) {
        init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp: fromHttp2 } = await Promise.resolve().then(() => (init_dist_es80(), dist_es_exports3));
        return chain(fromHttp2(init), fromContainerMetadata3(init));
      }
      if (process.env[ENV_IMDS_DISABLED] && process.env[ENV_IMDS_DISABLED] !== "false") {
        return async () => {
          throw new CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata3(init);
    };
  }
});
var isSsoProfile;
var init_isSsoProfile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js"() {
    isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});
var init_fromEnvSigningName = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/fromEnvSigningName.js"() {
  }
});
var EXPIRE_WINDOW_MS;
var REFRESH_MESSAGE;
var init_constants12 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/constants.js"() {
    EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});
var getHttpHandlerExtensionConfiguration2;
var resolveHttpHandlerRuntimeConfig2;
var init_httpExtensionConfiguration9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
    getHttpHandlerExtensionConfiguration2 = (runtimeConfig) => {
      return {
        setHttpHandler(handler3) {
          runtimeConfig.httpHandler = handler3;
        },
        httpHandler() {
          return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
          runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return runtimeConfig.httpHandler.httpHandlerConfigs();
        }
      };
    };
    resolveHttpHandlerRuntimeConfig2 = (httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    };
  }
});
var init_extensions16 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    init_httpExtensionConfiguration9();
  }
});
var init_abort4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/abort.js"() {
  }
});
var HttpAuthLocation4;
var init_auth7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/auth.js"() {
    (function(HttpAuthLocation5) {
      HttpAuthLocation5["HEADER"] = "header";
      HttpAuthLocation5["QUERY"] = "query";
    })(HttpAuthLocation4 || (HttpAuthLocation4 = {}));
  }
});
var HttpApiKeyAuthLocation4;
var init_HttpApiKeyAuth4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    (function(HttpApiKeyAuthLocation5) {
      HttpApiKeyAuthLocation5["HEADER"] = "header";
      HttpApiKeyAuthLocation5["QUERY"] = "query";
    })(HttpApiKeyAuthLocation4 || (HttpApiKeyAuthLocation4 = {}));
  }
});
var init_HttpAuthScheme4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
  }
});
var init_HttpAuthSchemeProvider4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
  }
});
var init_HttpSigner4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
  }
});
var init_IdentityProviderConfig4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
  }
});
var init_auth8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/auth/index.js"() {
    init_auth7();
    init_HttpApiKeyAuth4();
    init_HttpAuthScheme4();
    init_HttpAuthSchemeProvider4();
    init_HttpSigner4();
    init_IdentityProviderConfig4();
  }
});
var init_blob_payload_input_types4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
  }
});
var init_checksum6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/checksum.js"() {
  }
});
var init_client9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/client.js"() {
  }
});
var init_command8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/command.js"() {
  }
});
var init_config7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/connection/config.js"() {
  }
});
var init_manager4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/connection/manager.js"() {
  }
});
var init_pool4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/connection/pool.js"() {
  }
});
var init_connection4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/connection/index.js"() {
    init_config7();
    init_manager4();
    init_pool4();
  }
});
var init_crypto4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/crypto.js"() {
  }
});
var init_encode4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/encode.js"() {
  }
});
var EndpointURLScheme4;
var init_endpoint4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoint.js"() {
    (function(EndpointURLScheme5) {
      EndpointURLScheme5["HTTP"] = "http";
      EndpointURLScheme5["HTTPS"] = "https";
    })(EndpointURLScheme4 || (EndpointURLScheme4 = {}));
  }
});
var init_EndpointRuleObject6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
  }
});
var init_shared6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
  }
});
var init_TreeRuleObject6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
  }
});
var init_endpoints4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    init_EndpointRuleObject6();
    init_ErrorRuleObject6();
    init_RuleSetObject6();
    init_shared6();
    init_TreeRuleObject6();
  }
});
var init_eventStream4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/eventStream.js"() {
  }
});
var AlgorithmId2;
var init_checksum7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/extensions/checksum.js"() {
    (function(AlgorithmId3) {
      AlgorithmId3["MD5"] = "md5";
      AlgorithmId3["CRC32"] = "crc32";
      AlgorithmId3["CRC32C"] = "crc32c";
      AlgorithmId3["SHA1"] = "sha1";
      AlgorithmId3["SHA256"] = "sha256";
    })(AlgorithmId2 || (AlgorithmId2 = {}));
  }
});
var init_defaultClientConfiguration4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
  }
});
var init_defaultExtensionConfiguration8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
  }
});
var init_extensions17 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/extensions/index.js"() {
    init_defaultClientConfiguration4();
    init_defaultExtensionConfiguration8();
    init_checksum7();
  }
});
var init_feature_ids4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/feature-ids.js"() {
  }
});
var FieldPosition4;
var init_http4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/http.js"() {
    (function(FieldPosition5) {
      FieldPosition5[FieldPosition5["HEADER"] = 0] = "HEADER";
      FieldPosition5[FieldPosition5["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition4 || (FieldPosition4 = {}));
  }
});
var init_httpHandlerInitialization4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
  }
});
var init_apiKeyIdentity4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
  }
});
var init_awsCredentialIdentity4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
  }
});
var init_identity7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/identity/identity.js"() {
  }
});
var init_tokenIdentity4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
  }
});
var init_identity8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/identity/index.js"() {
    init_apiKeyIdentity4();
    init_awsCredentialIdentity4();
    init_identity7();
    init_tokenIdentity4();
  }
});
var init_logger5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/logger.js"() {
  }
});
var SMITHY_CONTEXT_KEY3;
var init_middleware4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/middleware.js"() {
    SMITHY_CONTEXT_KEY3 = "__smithy_context";
  }
});
var init_pagination4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/pagination.js"() {
  }
});
var IniSectionType4;
var init_profile4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/profile.js"() {
    (function(IniSectionType5) {
      IniSectionType5["PROFILE"] = "profile";
      IniSectionType5["SSO_SESSION"] = "sso-session";
      IniSectionType5["SERVICES"] = "services";
    })(IniSectionType4 || (IniSectionType4 = {}));
  }
});
var init_response4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/response.js"() {
  }
});
var init_retry6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/retry.js"() {
  }
});
var init_schema5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/schema/schema.js"() {
  }
});
var init_sentinels5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/schema/sentinels.js"() {
  }
});
var init_serde5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/serde.js"() {
  }
});
var init_shapes4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/shapes.js"() {
  }
});
var init_signature4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/signature.js"() {
  }
});
var init_stream5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/stream.js"() {
  }
});
var init_streaming_blob_common_types4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
  }
});
var init_streaming_blob_payload_input_types4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
  }
});
var init_streaming_blob_payload_output_types4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
  }
});
var RequestHandlerProtocol4;
var init_transfer4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/transfer.js"() {
    (function(RequestHandlerProtocol5) {
      RequestHandlerProtocol5["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol5["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol5["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol4 || (RequestHandlerProtocol4 = {}));
  }
});
var init_client_payload_blob_type_narrow4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
  }
});
var init_mutable4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/transform/mutable.js"() {
  }
});
var init_no_undefined4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
  }
});
var init_type_transform4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
  }
});
var init_uri4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/uri.js"() {
  }
});
var init_util9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/util.js"() {
  }
});
var init_waiter4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/waiter.js"() {
  }
});
var init_dist_es81 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/types/dist-es/index.js"() {
    init_abort4();
    init_auth8();
    init_blob_payload_input_types4();
    init_checksum6();
    init_client9();
    init_command8();
    init_connection4();
    init_crypto4();
    init_encode4();
    init_endpoint4();
    init_endpoints4();
    init_eventStream4();
    init_extensions17();
    init_feature_ids4();
    init_http4();
    init_httpHandlerInitialization4();
    init_identity8();
    init_logger5();
    init_middleware4();
    init_pagination4();
    init_profile4();
    init_response4();
    init_retry6();
    init_schema5();
    init_sentinels5();
    init_serde5();
    init_shapes4();
    init_signature4();
    init_stream5();
    init_streaming_blob_common_types4();
    init_streaming_blob_payload_input_types4();
    init_streaming_blob_payload_output_types4();
    init_transfer4();
    init_client_payload_blob_type_narrow4();
    init_mutable4();
    init_no_undefined4();
    init_type_transform4();
    init_uri4();
    init_util9();
    init_waiter4();
  }
});
var init_Field9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
  }
});
var init_Fields9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
  }
});
var init_httpHandler9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
  }
});
function cloneQuery9(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest9;
var init_httpRequest10 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    HttpRequest9 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static clone(request3) {
        const cloned = new _HttpRequest({
          ...request3,
          headers: { ...request3.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery9(cloned.query);
        }
        return cloned;
      }
      static isInstance(request3) {
        if (!request3) {
          return false;
        }
        const req = request3;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return _HttpRequest.clone(this);
      }
    };
  }
});
var HttpResponse5;
var init_httpResponse9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    HttpResponse5 = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});
var init_isValidHostname9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
  }
});
var init_types17 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/types.js"() {
  }
});
var init_dist_es82 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    init_extensions16();
    init_Field9();
    init_Fields9();
    init_httpHandler9();
    init_httpRequest10();
    init_httpResponse9();
    init_isValidHostname9();
    init_types17();
  }
});
function resolveHostHeaderConfig2(input) {
  return input;
}
var hostHeaderMiddleware2;
var hostHeaderMiddlewareOptions2;
var getHostHeaderPlugin2;
var init_dist_es83 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js"() {
    init_dist_es82();
    hostHeaderMiddleware2 = (options) => (next) => async (args) => {
      if (!HttpRequest9.isInstance(args.request))
        return next(args);
      const { request: request3 } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request3.headers[":authority"]) {
        delete request3.headers["host"];
        request3.headers[":authority"] = request3.hostname + (request3.port ? ":" + request3.port : "");
      } else if (!request3.headers["host"]) {
        let host = request3.hostname;
        if (request3.port != null)
          host += `:${request3.port}`;
        request3.headers["host"] = host;
      }
      return next(args);
    };
    hostHeaderMiddlewareOptions2 = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    getHostHeaderPlugin2 = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware2(options), hostHeaderMiddlewareOptions2);
      }
    });
  }
});
var loggerMiddleware2;
var loggerMiddlewareOptions2;
var getLoggerPlugin2;
var init_loggerMiddleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"() {
    loggerMiddleware2 = () => (next, context) => async (args) => {
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger2?.info?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error2) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger2?.error?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error: error2,
          metadata: error2.$metadata
        });
        throw error2;
      }
    };
    loggerMiddlewareOptions2 = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    getLoggerPlugin2 = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware2(), loggerMiddlewareOptions2);
      }
    });
  }
});
var init_dist_es84 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-logger/dist-es/index.js"() {
    init_loggerMiddleware2();
  }
});
var recursionDetectionMiddlewareOptions2;
var init_configuration2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js"() {
    recursionDetectionMiddlewareOptions2 = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
  }
});
var import_lambda_invoke_store2;
var TRACE_ID_HEADER_NAME2;
var ENV_LAMBDA_FUNCTION_NAME2;
var ENV_TRACE_ID2;
var recursionDetectionMiddleware2;
var init_recursionDetectionMiddleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.js"() {
    import_lambda_invoke_store2 = __toESM2(require_invoke_store());
    init_dist_es82();
    TRACE_ID_HEADER_NAME2 = "X-Amzn-Trace-Id";
    ENV_LAMBDA_FUNCTION_NAME2 = "AWS_LAMBDA_FUNCTION_NAME";
    ENV_TRACE_ID2 = "_X_AMZN_TRACE_ID";
    recursionDetectionMiddleware2 = () => (next) => async (args) => {
      const { request: request3 } = args;
      if (!HttpRequest9.isInstance(request3)) {
        return next(args);
      }
      const traceIdHeader = Object.keys(request3.headers ?? {}).find((h5) => h5.toLowerCase() === TRACE_ID_HEADER_NAME2.toLowerCase()) ?? TRACE_ID_HEADER_NAME2;
      if (request3.headers.hasOwnProperty(traceIdHeader)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME2];
      const traceIdFromEnv = process.env[ENV_TRACE_ID2];
      const traceIdFromInvokeStore = import_lambda_invoke_store2.InvokeStore.getXRayTraceId();
      const traceId = traceIdFromInvokeStore ?? traceIdFromEnv;
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request3.headers[TRACE_ID_HEADER_NAME2] = traceId;
      }
      return next({
        ...args,
        request: request3
      });
    };
  }
});
var getRecursionDetectionPlugin2;
var init_getRecursionDetectionPlugin2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js"() {
    init_configuration2();
    init_recursionDetectionMiddleware2();
    getRecursionDetectionPlugin2 = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware2(), recursionDetectionMiddlewareOptions2);
      }
    });
  }
});
var init_dist_es85 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"() {
    init_getRecursionDetectionPlugin2();
    init_recursionDetectionMiddleware2();
  }
});
function isValidUserAgentAppId2(appId) {
  if (appId === void 0) {
    return true;
  }
  return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig2(input) {
  const normalizedAppIdProvider = normalizeProvider2(input.userAgentAppId ?? DEFAULT_UA_APP_ID2);
  const { customUserAgent } = input;
  return Object.assign(input, {
    customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
    userAgentAppId: async () => {
      const appId = await normalizedAppIdProvider();
      if (!isValidUserAgentAppId2(appId)) {
        const logger2 = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
        if (typeof appId !== "string") {
          logger2?.warn("userAgentAppId must be a string or undefined.");
        } else if (appId.length > 50) {
          logger2?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
        }
      }
      return appId;
    }
  });
}
var DEFAULT_UA_APP_ID2;
var init_configurations3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js"() {
    init_dist_es14();
    DEFAULT_UA_APP_ID2 = void 0;
  }
});
var init_isIpAddress3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js"() {
    init_dist_es49();
  }
});
var isVirtualHostableS3Bucket2;
var init_isVirtualHostableS3Bucket2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js"() {
    init_dist_es49();
    init_isIpAddress3();
    isVirtualHostableS3Bucket2 = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket2(label)) {
            return false;
          }
        }
        return true;
      }
      if (!isValidHostLabel(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if (isIpAddress(value)) {
        return false;
      }
      return true;
    };
  }
});
var ARN_DELIMITER2;
var RESOURCE_DELIMITER2;
var parseArn2;
var init_parseArn2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js"() {
    ARN_DELIMITER2 = ":";
    RESOURCE_DELIMITER2 = "/";
    parseArn2 = (value) => {
      const segments = value.split(ARN_DELIMITER2);
      if (segments.length < 6)
        return null;
      const [arn, partition3, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition3 === "" || service === "" || resourcePath.join(ARN_DELIMITER2) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER2)).flat();
      return {
        partition: partition3,
        service,
        region,
        accountId,
        resourceId
      };
    };
  }
});
var partitions_default2;
var init_partitions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json"() {
    partitions_default2 = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-east-2": {
            description: "Asia Pacific (Taipei)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "ap-southeast-6": {
            description: "Asia Pacific (New Zealand)"
          },
          "ap-southeast-7": {
            description: "Asia Pacific (Thailand)"
          },
          "aws-global": {
            description: "aws global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "mx-central-1": {
            description: "Mexico (Central)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "aws-cn global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-eusc",
        outputs: {
          dnsSuffix: "amazonaws.eu",
          dualStackDnsSuffix: "api.amazonwebservices.eu",
          implicitGlobalRegion: "eusc-de-east-1",
          name: "aws-eusc",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
        regions: {
          "eusc-de-east-1": {
            description: "EU (Germany)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "api.aws.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "aws-iso global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "api.aws.scloud",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "aws-iso-b global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "api.cloud-aws.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-e-global": {
            description: "aws-iso-e global region"
          },
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "api.aws.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-f-global": {
            description: "aws-iso-f global region"
          },
          "us-isof-east-1": {
            description: "US ISOF EAST"
          },
          "us-isof-south-1": {
            description: "US ISOF SOUTH"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "aws-us-gov global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }],
      version: "1.1"
    };
  }
});
var selectedPartitionsInfo2;
var selectedUserAgentPrefix2;
var partition2;
var getUserAgentPrefix2;
var init_partition2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"() {
    init_partitions2();
    selectedPartitionsInfo2 = partitions_default2;
    selectedUserAgentPrefix2 = "";
    partition2 = (value) => {
      const { partitions } = selectedPartitionsInfo2;
      for (const partition3 of partitions) {
        const { regions, outputs } = partition3;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition3 of partitions) {
        const { regionRegex, outputs } = partition3;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition3) => partition3.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    getUserAgentPrefix2 = () => selectedUserAgentPrefix2;
  }
});
var awsEndpointFunctions2;
var init_aws2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js"() {
    init_dist_es49();
    init_isVirtualHostableS3Bucket2();
    init_parseArn2();
    init_partition2();
    awsEndpointFunctions2 = {
      isVirtualHostableS3Bucket: isVirtualHostableS3Bucket2,
      parseArn: parseArn2,
      partition: partition2
    };
    customEndpointFunctions.aws = awsEndpointFunctions2;
  }
});
function parseQueryString2(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
var init_dist_es86 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/querystring-parser/dist-es/index.js"() {
  }
});
var parseUrl2;
var init_dist_es87 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/url-parser/dist-es/index.js"() {
    init_dist_es86();
    parseUrl2 = (url) => {
      if (typeof url === "string") {
        return parseUrl2(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = parseQueryString2(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
  }
});
var init_resolveDefaultAwsRegionalEndpointsConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/resolveDefaultAwsRegionalEndpointsConfig.js"() {
  }
});
var init_resolveEndpoint3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js"() {
  }
});
var init_EndpointError3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js"() {
  }
});
var init_EndpointRuleObject7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
  }
});
var init_ErrorRuleObject7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
  }
});
var init_RuleSetObject7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js"() {
  }
});
var init_TreeRuleObject7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js"() {
  }
});
var init_shared7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js"() {
  }
});
var init_types18 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js"() {
    init_EndpointError3();
    init_EndpointRuleObject7();
    init_ErrorRuleObject7();
    init_RuleSetObject7();
    init_TreeRuleObject7();
    init_shared7();
  }
});
var init_dist_es88 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-endpoints/dist-es/index.js"() {
    init_aws2();
    init_partition2();
    init_isIpAddress3();
    init_resolveDefaultAwsRegionalEndpointsConfig2();
    init_resolveEndpoint3();
    init_types18();
  }
});
async function checkFeatures2(context, config2, args) {
  const request3 = args.request;
  if (request3?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
    setFeature(context, "PROTOCOL_RPC_V2_CBOR", "M");
  }
  if (typeof config2.retryStrategy === "function") {
    const retryStrategy = await config2.retryStrategy();
    if (typeof retryStrategy.acquireInitialRetryToken === "function") {
      if (retryStrategy.constructor?.name?.includes("Adaptive")) {
        setFeature(context, "RETRY_MODE_ADAPTIVE", "F");
      } else {
        setFeature(context, "RETRY_MODE_STANDARD", "E");
      }
    } else {
      setFeature(context, "RETRY_MODE_LEGACY", "D");
    }
  }
  if (typeof config2.accountIdEndpointMode === "function") {
    const endpointV2 = context.endpointV2;
    if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX2)) {
      setFeature(context, "ACCOUNT_ID_ENDPOINT", "O");
    }
    switch (await config2.accountIdEndpointMode?.()) {
      case "disabled":
        setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
        break;
      case "preferred":
        setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
        break;
      case "required":
        setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
        break;
    }
  }
  const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
  if (identity?.$source) {
    const credentials = identity;
    if (credentials.accountId) {
      setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
    }
    for (const [key, value] of Object.entries(credentials.$source ?? {})) {
      setFeature(context, key, value);
    }
  }
}
var ACCOUNT_ID_ENDPOINT_REGEX2;
var init_check_features2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js"() {
    init_dist_es25();
    ACCOUNT_ID_ENDPOINT_REGEX2 = /\d{12}\.ddb/;
  }
});
var USER_AGENT2;
var X_AMZ_USER_AGENT2;
var SPACE2;
var UA_NAME_SEPARATOR2;
var UA_NAME_ESCAPE_REGEX2;
var UA_VALUE_ESCAPE_REGEX2;
var UA_ESCAPE_CHAR2;
var init_constants13 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js"() {
    USER_AGENT2 = "user-agent";
    X_AMZ_USER_AGENT2 = "x-amz-user-agent";
    SPACE2 = " ";
    UA_NAME_SEPARATOR2 = "/";
    UA_NAME_ESCAPE_REGEX2 = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    UA_VALUE_ESCAPE_REGEX2 = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    UA_ESCAPE_CHAR2 = "-";
  }
});
function encodeFeatures2(features) {
  let buffer = "";
  for (const key in features) {
    const val = features[key];
    if (buffer.length + val.length + 1 <= BYTE_LIMIT2) {
      if (buffer.length) {
        buffer += "," + val;
      } else {
        buffer += val;
      }
      continue;
    }
    break;
  }
  return buffer;
}
var BYTE_LIMIT2;
var init_encode_features2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js"() {
    BYTE_LIMIT2 = 1024;
  }
});
var userAgentMiddleware2;
var escapeUserAgent2;
var getUserAgentMiddlewareOptions2;
var getUserAgentPlugin2;
var init_user_agent_middleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js"() {
    init_dist_es88();
    init_dist_es82();
    init_check_features2();
    init_constants13();
    init_encode_features2();
    userAgentMiddleware2 = (options) => (next, context) => async (args) => {
      const { request: request3 } = args;
      if (!HttpRequest9.isInstance(request3)) {
        return next(args);
      }
      const { headers } = request3;
      const userAgent = context?.userAgent?.map(escapeUserAgent2) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent2);
      await checkFeatures2(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(`m/${encodeFeatures2(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
      const customUserAgent = options?.customUserAgent?.map(escapeUserAgent2) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent2([`app/${appId}`]));
      }
      const prefix = getUserAgentPrefix2();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE2);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE2);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT2] = headers[X_AMZ_USER_AGENT2] ? `${headers[USER_AGENT2]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT2] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT2] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request: request3
      });
    };
    escapeUserAgent2 = (userAgentPair) => {
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR2).map((part) => part.replace(UA_NAME_ESCAPE_REGEX2, UA_ESCAPE_CHAR2)).join(UA_NAME_SEPARATOR2);
      const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX2, UA_ESCAPE_CHAR2);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR2);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    getUserAgentMiddlewareOptions2 = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    getUserAgentPlugin2 = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware2(config2), getUserAgentMiddlewareOptions2);
      }
    });
  }
});
var init_dist_es89 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js"() {
    init_configurations3();
    init_user_agent_middleware2();
  }
});
var ENV_USE_DUALSTACK_ENDPOINT2;
var CONFIG_USE_DUALSTACK_ENDPOINT2;
var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS2;
var init_NodeUseDualstackEndpointConfigOptions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"() {
    init_dist_es44();
    ENV_USE_DUALSTACK_ENDPOINT2 = "AWS_USE_DUALSTACK_ENDPOINT";
    CONFIG_USE_DUALSTACK_ENDPOINT2 = "use_dualstack_endpoint";
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => booleanSelector(env3, ENV_USE_DUALSTACK_ENDPOINT2, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT2, SelectorType2.CONFIG),
      default: false
    };
  }
});
var ENV_USE_FIPS_ENDPOINT2;
var CONFIG_USE_FIPS_ENDPOINT2;
var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS2;
var init_NodeUseFipsEndpointConfigOptions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"() {
    init_dist_es44();
    ENV_USE_FIPS_ENDPOINT2 = "AWS_USE_FIPS_ENDPOINT";
    CONFIG_USE_FIPS_ENDPOINT2 = "use_fips_endpoint";
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => booleanSelector(env3, ENV_USE_FIPS_ENDPOINT2, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT2, SelectorType2.CONFIG),
      default: false
    };
  }
});
var init_resolveCustomEndpointsConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js"() {
  }
});
var init_resolveEndpointsConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"() {
  }
});
var init_endpointsConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js"() {
    init_NodeUseDualstackEndpointConfigOptions2();
    init_NodeUseFipsEndpointConfigOptions2();
    init_resolveCustomEndpointsConfig2();
    init_resolveEndpointsConfig2();
  }
});
var REGION_ENV_NAME2;
var REGION_INI_NAME2;
var NODE_REGION_CONFIG_OPTIONS2;
var NODE_REGION_CONFIG_FILE_OPTIONS2;
var init_config8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js"() {
    REGION_ENV_NAME2 = "AWS_REGION";
    REGION_INI_NAME2 = "region";
    NODE_REGION_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => env3[REGION_ENV_NAME2],
      configFileSelector: (profile) => profile[REGION_INI_NAME2],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    NODE_REGION_CONFIG_FILE_OPTIONS2 = {
      preferredFile: "credentials"
    };
  }
});
var isFipsRegion2;
var init_isFipsRegion2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    isFipsRegion2 = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
  }
});
var getRealRegion2;
var init_getRealRegion2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    init_isFipsRegion2();
    getRealRegion2 = (region) => isFipsRegion2(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
  }
});
var resolveRegionConfig2;
var init_resolveRegionConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    init_getRealRegion2();
    init_isFipsRegion2();
    resolveRegionConfig2 = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return Object.assign(input, {
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion2(region);
          }
          const providedRegion = await region();
          return getRealRegion2(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion2(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      });
    };
  }
});
var init_regionConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js"() {
    init_config8();
    init_resolveRegionConfig2();
  }
});
var init_PartitionHash2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js"() {
  }
});
var init_RegionHash2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js"() {
  }
});
var init_getRegionInfo2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"() {
  }
});
var init_regionInfo2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js"() {
    init_PartitionHash2();
    init_RegionHash2();
    init_getRegionInfo2();
  }
});
var init_dist_es90 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/config-resolver/dist-es/index.js"() {
    init_endpointsConfig2();
    init_regionConfig2();
    init_regionInfo2();
  }
});
function contentLengthMiddleware2(bodyLengthChecker) {
  return (next) => async (args) => {
    const request3 = args.request;
    if (HttpRequest9.isInstance(request3)) {
      const { body, headers } = request3;
      if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER3) === -1) {
        try {
          const length = bodyLengthChecker(body);
          request3.headers = {
            ...request3.headers,
            [CONTENT_LENGTH_HEADER3]: String(length)
          };
        } catch (error2) {
        }
      }
    }
    return next({
      ...args,
      request: request3
    });
  };
}
var CONTENT_LENGTH_HEADER3;
var contentLengthMiddlewareOptions2;
var getContentLengthPlugin2;
var init_dist_es91 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-content-length/dist-es/index.js"() {
    init_dist_es82();
    CONTENT_LENGTH_HEADER3 = "content-length";
    contentLengthMiddlewareOptions2 = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    getContentLengthPlugin2 = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware2(options.bodyLengthChecker), contentLengthMiddlewareOptions2);
      }
    });
  }
});
var resolveParamsForS32;
var DOMAIN_PATTERN2;
var IP_ADDRESS_PATTERN2;
var DOTS_PATTERN2;
var isDnsCompatibleBucketName2;
var isArnBucketName2;
var init_s32 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"() {
    resolveParamsForS32 = async (endpointParams) => {
      const bucket = endpointParams?.Bucket || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName2(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName2(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    DOMAIN_PATTERN2 = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    IP_ADDRESS_PATTERN2 = /(\d+\.){3}\d+/;
    DOTS_PATTERN2 = /\.\./;
    isDnsCompatibleBucketName2 = (bucketName) => DOMAIN_PATTERN2.test(bucketName) && !IP_ADDRESS_PATTERN2.test(bucketName) && !DOTS_PATTERN2.test(bucketName);
    isArnBucketName2 = (bucketName) => {
      const [arn, partition3, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition3 && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    };
  }
});
var init_service_customizations2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js"() {
    init_s32();
  }
});
var createConfigValueProvider2;
var init_createConfigValueProvider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"() {
    createConfigValueProvider2 = (configKey, canonicalEndpointParamKey, config2) => {
      const configProvider = async () => {
        const configValue = config2[configKey] ?? config2[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config2.credentials === "function" ? await config2.credentials() : config2.credentials;
          const configValue = credentials?.accountId ?? credentials?.AccountId;
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          if (config2.isCustomEndpoint === false) {
            return void 0;
          }
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path: path4 } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path4}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
  }
});
function getSelectorName2(functionString) {
  try {
    const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
    constants.delete("CONFIG");
    constants.delete("CONFIG_PREFIX_SEPARATOR");
    constants.delete("ENV");
    return [...constants].join(", ");
  } catch (e5) {
    return functionString;
  }
}
var init_getSelectorName2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js"() {
  }
});
var fromEnv3;
var init_fromEnv3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js"() {
    init_dist_es15();
    init_getSelectorName2();
    fromEnv3 = (envVarSelector, options) => async () => {
      try {
        const config2 = envVarSelector(process.env, options);
        if (config2 === void 0) {
          throw new Error();
        }
        return config2;
      } catch (e5) {
        throw new CredentialsProviderError(e5.message || `Not found in ENV: ${getSelectorName2(envVarSelector.toString())}`, { logger: options?.logger });
      }
    };
  }
});
var homeDirCache2;
var getHomeDirCacheKey2;
var getHomeDir2;
var init_getHomeDir2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js"() {
    homeDirCache2 = {};
    getHomeDirCacheKey2 = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep2}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey2();
      if (!homeDirCache2[homeDirCacheKey])
        homeDirCache2[homeDirCacheKey] = homedir2();
      return homeDirCache2[homeDirCacheKey];
    };
  }
});
var ENV_PROFILE2;
var DEFAULT_PROFILE2;
var getProfileName2;
var init_getProfileName2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js"() {
    ENV_PROFILE2 = "AWS_PROFILE";
    DEFAULT_PROFILE2 = "default";
    getProfileName2 = (init) => init.profile || process.env[ENV_PROFILE2] || DEFAULT_PROFILE2;
  }
});
var init_getSSOTokenFilepath2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js"() {
  }
});
var readFile3;
var init_getSSOTokenFromFile2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"() {
    ({ readFile: readFile3 } = fsPromises3);
  }
});
var getConfigData2;
var init_getConfigData2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js"() {
    init_dist_es81();
    init_loadSharedConfigFiles2();
    getConfigData2 = (data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR2);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(IniSectionType4).includes(key.substring(0, indexOfSeparator));
    }).reduce((acc, [key, value]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR2);
      const updatedKey = key.substring(0, indexOfSeparator) === IniSectionType4.PROFILE ? key.substring(indexOfSeparator + 1) : key;
      acc[updatedKey] = value;
      return acc;
    }, {
      ...data.default && { default: data.default }
    });
  }
});
var ENV_CONFIG_PATH2;
var getConfigFilepath2;
var init_getConfigFilepath2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js"() {
    init_getHomeDir2();
    ENV_CONFIG_PATH2 = "AWS_CONFIG_FILE";
    getConfigFilepath2 = () => process.env[ENV_CONFIG_PATH2] || join5(getHomeDir2(), ".aws", "config");
  }
});
var ENV_CREDENTIALS_PATH2;
var getCredentialsFilepath2;
var init_getCredentialsFilepath2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js"() {
    init_getHomeDir2();
    ENV_CREDENTIALS_PATH2 = "AWS_SHARED_CREDENTIALS_FILE";
    getCredentialsFilepath2 = () => process.env[ENV_CREDENTIALS_PATH2] || join6(getHomeDir2(), ".aws", "credentials");
  }
});
var prefixKeyRegex2;
var profileNameBlockList2;
var parseIni2;
var init_parseIni2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js"() {
    init_dist_es81();
    init_loadSharedConfigFiles2();
    prefixKeyRegex2 = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    profileNameBlockList2 = ["__proto__", "profile __proto__"];
    parseIni2 = (iniData) => {
      const map3 = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex2.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(IniSectionType4).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR2);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList2.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map3[currentSection] = map3[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR2) : name;
              map3[currentSection][key] = value;
            }
          }
        }
      }
      return map3;
    };
  }
});
var readFile4;
var filePromisesHash2;
var slurpFile2;
var init_slurpFile2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js"() {
    ({ readFile: readFile4 } = fsPromises4);
    filePromisesHash2 = {};
    slurpFile2 = (path4, options) => {
      if (!filePromisesHash2[path4] || options?.ignoreCache) {
        filePromisesHash2[path4] = readFile4(path4, "utf8");
      }
      return filePromisesHash2[path4];
    };
  }
});
var swallowError3;
var CONFIG_PREFIX_SEPARATOR2;
var loadSharedConfigFiles2;
var init_loadSharedConfigFiles2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js"() {
    init_getConfigData2();
    init_getConfigFilepath2();
    init_getCredentialsFilepath2();
    init_getHomeDir2();
    init_parseIni2();
    init_slurpFile2();
    swallowError3 = () => ({});
    CONFIG_PREFIX_SEPARATOR2 = ".";
    loadSharedConfigFiles2 = async (init = {}) => {
      const { filepath = getCredentialsFilepath2(), configFilepath = getConfigFilepath2() } = init;
      const homeDir = getHomeDir2();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = join7(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = join7(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        slurpFile2(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni2).then(getConfigData2).catch(swallowError3),
        slurpFile2(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni2).catch(swallowError3)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
  }
});
var init_loadSsoSessionData2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js"() {
  }
});
var init_parseKnownFiles2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js"() {
  }
});
var init_types19 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/types.js"() {
  }
});
var init_dist_es92 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js"() {
    init_getHomeDir2();
    init_getProfileName2();
    init_getSSOTokenFilepath2();
    init_getSSOTokenFromFile2();
    init_loadSharedConfigFiles2();
    init_loadSsoSessionData2();
    init_parseKnownFiles2();
    init_types19();
  }
});
var fromSharedConfigFiles2;
var init_fromSharedConfigFiles2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js"() {
    init_dist_es15();
    init_dist_es92();
    init_getSelectorName2();
    fromSharedConfigFiles2 = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = getProfileName2(init);
      const { configFile, credentialsFile } = await loadSharedConfigFiles2(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e5) {
        throw new CredentialsProviderError(e5.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName2(configSelector.toString())}`, { logger: init.logger });
      }
    };
  }
});
var isFunction2;
var fromStatic3;
var init_fromStatic3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js"() {
    init_dist_es15();
    isFunction2 = (func) => typeof func === "function";
    fromStatic3 = (defaultValue) => isFunction2(defaultValue) ? async () => await defaultValue() : fromStatic(defaultValue);
  }
});
var loadConfig3;
var init_configLoader2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/configLoader.js"() {
    init_dist_es15();
    init_fromEnv3();
    init_fromSharedConfigFiles2();
    init_fromStatic3();
    loadConfig3 = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => {
      const { signingName, logger: logger2 } = configuration;
      const envOptions = { signingName, logger: logger2 };
      return memoize(chain(fromEnv3(environmentVariableSelector, envOptions), fromSharedConfigFiles2(configFileSelector, configuration), fromStatic3(defaultValue)));
    };
  }
});
var init_dist_es93 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-config-provider/dist-es/index.js"() {
    init_configLoader2();
  }
});
var ENV_ENDPOINT_URL2;
var CONFIG_ENDPOINT_URL2;
var getEndpointUrlConfig2;
var init_getEndpointUrlConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js"() {
    init_dist_es92();
    ENV_ENDPOINT_URL2 = "AWS_ENDPOINT_URL";
    CONFIG_ENDPOINT_URL2 = "endpoint_url";
    getEndpointUrlConfig2 = (serviceId) => ({
      environmentVariableSelector: (env3) => {
        const serviceSuffixParts = serviceId.split(" ").map((w5) => w5.toUpperCase());
        const serviceEndpointUrl = env3[[ENV_ENDPOINT_URL2, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env3[ENV_ENDPOINT_URL2];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config2) => {
        if (config2 && profile.services) {
          const servicesSection = config2[["services", profile.services].join(CONFIG_PREFIX_SEPARATOR2)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w5) => w5.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL2].join(CONFIG_PREFIX_SEPARATOR2)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL2];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
  }
});
var getEndpointFromConfig2;
var init_getEndpointFromConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js"() {
    init_dist_es93();
    init_getEndpointUrlConfig2();
    getEndpointFromConfig2 = async (serviceId) => loadConfig3(getEndpointUrlConfig2(serviceId ?? ""))();
  }
});
var toEndpointV12;
var init_toEndpointV12 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js"() {
    init_dist_es87();
    toEndpointV12 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return parseUrl2(endpoint.url);
        }
        return endpoint;
      }
      return parseUrl2(endpoint);
    };
  }
});
var getEndpointFromInstructions2;
var resolveParams2;
var init_getEndpointFromInstructions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"() {
    init_service_customizations2();
    init_createConfigValueProvider2();
    init_getEndpointFromConfig2();
    init_toEndpointV12();
    getEndpointFromInstructions2 = async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.isCustomEndpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await getEndpointFromConfig2(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV12(endpointFromConfig));
          clientConfig.isCustomEndpoint = true;
        }
      }
      const endpointParams = await resolveParams2(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    resolveParams2 = async (commandInput, instructionsSupplier, clientConfig) => {
      const endpointParams = {};
      const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider2(instruction.name, name, clientConfig)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS32(endpointParams);
      }
      return endpointParams;
    };
  }
});
var init_adaptors2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js"() {
    init_getEndpointFromInstructions2();
    init_toEndpointV12();
  }
});
var endpointMiddleware2;
var init_endpointMiddleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"() {
    init_dist_es14();
    init_dist_es5();
    init_getEndpointFromInstructions2();
    endpointMiddleware2 = ({ config: config2, instructions }) => {
      return (next, context) => async (args) => {
        if (config2.isCustomEndpoint) {
          setFeature2(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions2(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config2 }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = getSmithyContext(context);
          const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
              signing_region: authScheme.signingRegion,
              signingRegion: authScheme.signingRegion,
              signing_service: authScheme.signingName,
              signingName: authScheme.signingName,
              signingRegionSet: authScheme.signingRegionSet
            }, authScheme.properties);
          }
        }
        return next({
          ...args
        });
      };
    };
  }
});
var deserializerMiddleware2;
var findHeader2;
var init_deserializerMiddleware3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
    init_dist_es82();
    deserializerMiddleware2 = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error2) {
        Object.defineProperty(error2, "$response", {
          value: response
        });
        if (!("$metadata" in error2)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          try {
            error2.message += "\n  " + hint;
          } catch (e5) {
            if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(hint);
            } else {
              context.logger?.warn?.(hint);
            }
          }
          if (typeof error2.$responseBodyText !== "undefined") {
            if (error2.$response) {
              error2.$response.body = error2.$responseBodyText;
            }
          }
          try {
            if (HttpResponse5.isInstance(response)) {
              const { headers = {} } = response;
              const headerEntries = Object.entries(headers);
              error2.$metadata = {
                httpStatusCode: response.statusCode,
                requestId: findHeader2(/^x-[\w-]+-request-?id$/, headerEntries),
                extendedRequestId: findHeader2(/^x-[\w-]+-id-2$/, headerEntries),
                cfId: findHeader2(/^x-[\w-]+-cf-id$/, headerEntries)
              };
            }
          } catch (e5) {
          }
        }
        throw error2;
      }
    };
    findHeader2 = (pattern, headers) => {
      return (headers.find(([k5]) => {
        return k5.match(pattern);
      }) || [void 0, void 0])[1];
    };
  }
});
var serializerMiddleware2;
var init_serializerMiddleware3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
    serializerMiddleware2 = (options, serializer) => (next, context) => async (args) => {
      const endpointConfig = options;
      const endpoint = context.endpointV2?.url && endpointConfig.urlParser ? async () => endpointConfig.urlParser(context.endpointV2.url) : endpointConfig.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request3 = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request: request3
      });
    };
  }
});
function getSerdePlugin2(config2, serializer, deserializer) {
  return {
    applyToStack: (commandStack) => {
      commandStack.add(deserializerMiddleware2(config2, deserializer), deserializerMiddlewareOption2);
      commandStack.add(serializerMiddleware2(config2, serializer), serializerMiddlewareOption3);
    }
  };
}
var deserializerMiddlewareOption2;
var serializerMiddlewareOption3;
var init_serdePlugin3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    init_deserializerMiddleware3();
    init_serializerMiddleware3();
    deserializerMiddlewareOption2 = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    serializerMiddlewareOption3 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
  }
});
var init_dist_es94 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    init_deserializerMiddleware3();
    init_serdePlugin3();
    init_serializerMiddleware3();
  }
});
var endpointMiddlewareOptions2;
var getEndpointPlugin2;
var init_getEndpointPlugin2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js"() {
    init_dist_es94();
    init_endpointMiddleware2();
    endpointMiddlewareOptions2 = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption3.name
    };
    getEndpointPlugin2 = (config2, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware2({
          config: config2,
          instructions
        }), endpointMiddlewareOptions2);
      }
    });
  }
});
var resolveEndpointConfig2;
var init_resolveEndpointConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"() {
    init_dist_es5();
    init_getEndpointFromConfig2();
    init_toEndpointV12();
    resolveEndpointConfig2 = (input) => {
      const tls = input.tls ?? true;
      const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV12(await normalizeProvider(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: normalizeProvider(useDualstackEndpoint ?? false),
        useFipsEndpoint: normalizeProvider(useFipsEndpoint ?? false)
      });
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = getEndpointFromConfig2(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    };
  }
});
var init_resolveEndpointRequiredConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointRequiredConfig.js"() {
  }
});
var init_types20 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/types.js"() {
  }
});
var init_dist_es95 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-endpoint/dist-es/index.js"() {
    init_adaptors2();
    init_endpointMiddleware2();
    init_getEndpointPlugin2();
    init_resolveEndpointConfig2();
    init_resolveEndpointRequiredConfig2();
    init_types20();
  }
});
var RETRY_MODES2;
var DEFAULT_MAX_ATTEMPTS2;
var DEFAULT_RETRY_MODE2;
var init_config9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/config.js"() {
    (function(RETRY_MODES3) {
      RETRY_MODES3["STANDARD"] = "standard";
      RETRY_MODES3["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES2 || (RETRY_MODES2 = {}));
    DEFAULT_MAX_ATTEMPTS2 = 3;
    DEFAULT_RETRY_MODE2 = RETRY_MODES2.STANDARD;
  }
});
var THROTTLING_ERROR_CODES2;
var TRANSIENT_ERROR_CODES2;
var TRANSIENT_ERROR_STATUS_CODES2;
var NODEJS_TIMEOUT_ERROR_CODES3;
var NODEJS_NETWORK_ERROR_CODES2;
var init_constants14 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/service-error-classification/dist-es/constants.js"() {
    THROTTLING_ERROR_CODES2 = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    TRANSIENT_ERROR_CODES2 = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    TRANSIENT_ERROR_STATUS_CODES2 = [500, 502, 503, 504];
    NODEJS_TIMEOUT_ERROR_CODES3 = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    NODEJS_NETWORK_ERROR_CODES2 = ["EHOSTUNREACH", "ENETUNREACH", "ENOTFOUND"];
  }
});
var isClockSkewCorrectedError2;
var isBrowserNetworkError2;
var isThrottlingError2;
var isTransientError2;
var isServerError2;
var init_dist_es96 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/service-error-classification/dist-es/index.js"() {
    init_constants14();
    isClockSkewCorrectedError2 = (error2) => error2.$metadata?.clockSkewCorrected;
    isBrowserNetworkError2 = (error2) => {
      const errorMessages = /* @__PURE__ */ new Set([
        "Failed to fetch",
        "NetworkError when attempting to fetch resource",
        "The Internet connection appears to be offline",
        "Load failed",
        "Network request failed"
      ]);
      const isValid = error2 && error2 instanceof TypeError;
      if (!isValid) {
        return false;
      }
      return errorMessages.has(error2.message);
    };
    isThrottlingError2 = (error2) => error2.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES2.includes(error2.name) || error2.$retryable?.throttling == true;
    isTransientError2 = (error2, depth = 0) => isClockSkewCorrectedError2(error2) || TRANSIENT_ERROR_CODES2.includes(error2.name) || NODEJS_TIMEOUT_ERROR_CODES3.includes(error2?.code || "") || NODEJS_NETWORK_ERROR_CODES2.includes(error2?.code || "") || TRANSIENT_ERROR_STATUS_CODES2.includes(error2.$metadata?.httpStatusCode || 0) || isBrowserNetworkError2(error2) || error2.cause !== void 0 && depth <= 10 && isTransientError2(error2.cause, depth + 1);
    isServerError2 = (error2) => {
      if (error2.$metadata?.httpStatusCode !== void 0) {
        const statusCode = error2.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError2(error2)) {
          return true;
        }
        return false;
      }
      return false;
    };
  }
});
var DefaultRateLimiter2;
var init_DefaultRateLimiter2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js"() {
    init_dist_es96();
    DefaultRateLimiter2 = class _DefaultRateLimiter {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (isThrottlingError2(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t5 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t5 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    DefaultRateLimiter2.setTimeoutFn = setTimeout;
  }
});
var DEFAULT_RETRY_DELAY_BASE2;
var MAXIMUM_RETRY_DELAY2;
var THROTTLING_RETRY_DELAY_BASE2;
var INITIAL_RETRY_TOKENS2;
var RETRY_COST2;
var TIMEOUT_RETRY_COST2;
var NO_RETRY_INCREMENT2;
var INVOCATION_ID_HEADER2;
var REQUEST_HEADER2;
var init_constants15 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/constants.js"() {
    DEFAULT_RETRY_DELAY_BASE2 = 100;
    MAXIMUM_RETRY_DELAY2 = 20 * 1e3;
    THROTTLING_RETRY_DELAY_BASE2 = 500;
    INITIAL_RETRY_TOKENS2 = 500;
    RETRY_COST2 = 5;
    TIMEOUT_RETRY_COST2 = 10;
    NO_RETRY_INCREMENT2 = 1;
    INVOCATION_ID_HEADER2 = "amz-sdk-invocation-id";
    REQUEST_HEADER2 = "amz-sdk-request";
  }
});
var getDefaultRetryBackoffStrategy2;
var init_defaultRetryBackoffStrategy2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js"() {
    init_constants15();
    getDefaultRetryBackoffStrategy2 = () => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE2;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY2, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
  }
});
var createDefaultRetryToken2;
var init_defaultRetryToken2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js"() {
    init_constants15();
    createDefaultRetryToken2 = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY2, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
  }
});
var StandardRetryStrategy2;
var init_StandardRetryStrategy3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"() {
    init_config9();
    init_constants15();
    init_defaultRetryBackoffStrategy2();
    init_defaultRetryToken2();
    StandardRetryStrategy2 = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES2.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS2;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy2();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken2({
          retryDelay: DEFAULT_RETRY_DELAY_BASE2,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE2 : DEFAULT_RETRY_DELAY_BASE2);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken2({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS2, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT2));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error2) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS2}`);
          return DEFAULT_MAX_ATTEMPTS2;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST2 : RETRY_COST2;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
  }
});
var AdaptiveRetryStrategy2;
var init_AdaptiveRetryStrategy3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js"() {
    init_config9();
    init_DefaultRateLimiter2();
    init_StandardRetryStrategy3();
    AdaptiveRetryStrategy2 = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES2.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter2();
        this.standardRetryStrategy = new StandardRetryStrategy2(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
  }
});
var init_ConfiguredRetryStrategy2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js"() {
  }
});
var init_types21 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/types.js"() {
  }
});
var init_dist_es97 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-retry/dist-es/index.js"() {
    init_AdaptiveRetryStrategy3();
    init_ConfiguredRetryStrategy2();
    init_DefaultRateLimiter2();
    init_StandardRetryStrategy3();
    init_config9();
    init_constants15();
    init_types21();
  }
});
var init_delayDecider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js"() {
  }
});
var init_retryDecider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/retryDecider.js"() {
  }
});
var asSdkError2;
var init_util10 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/util.js"() {
    asSdkError2 = (error2) => {
      if (error2 instanceof Error)
        return error2;
      if (error2 instanceof Object)
        return Object.assign(new Error(), error2);
      if (typeof error2 === "string")
        return new Error(error2);
      return new Error(`AWS SDK error wrapper for ${error2}`);
    };
  }
});
var init_StandardRetryStrategy4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js"() {
  }
});
var init_AdaptiveRetryStrategy4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js"() {
  }
});
var ENV_MAX_ATTEMPTS2;
var CONFIG_MAX_ATTEMPTS2;
var NODE_MAX_ATTEMPT_CONFIG_OPTIONS2;
var resolveRetryConfig2;
var ENV_RETRY_MODE2;
var CONFIG_RETRY_MODE2;
var NODE_RETRY_MODE_CONFIG_OPTIONS2;
var init_configurations4 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/configurations.js"() {
    init_dist_es5();
    init_dist_es97();
    ENV_MAX_ATTEMPTS2 = "AWS_MAX_ATTEMPTS";
    CONFIG_MAX_ATTEMPTS2 = "max_attempts";
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => {
        const value = env3[ENV_MAX_ATTEMPTS2];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS2} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS2];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS2} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: DEFAULT_MAX_ATTEMPTS2
    };
    resolveRetryConfig2 = (input) => {
      const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
      const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS2);
      return Object.assign(input, {
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await normalizeProvider(_retryMode)();
          if (retryMode === RETRY_MODES2.ADAPTIVE) {
            return new AdaptiveRetryStrategy2(maxAttempts);
          }
          return new StandardRetryStrategy2(maxAttempts);
        }
      });
    };
    ENV_RETRY_MODE2 = "AWS_RETRY_MODE";
    CONFIG_RETRY_MODE2 = "retry_mode";
    NODE_RETRY_MODE_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => env3[ENV_RETRY_MODE2],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE2],
      default: DEFAULT_RETRY_MODE2
    };
  }
});
var init_omitRetryHeadersMiddleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js"() {
  }
});
var getAllAliases2;
var getMiddlewareNameWithAliases2;
var constructStack2;
var stepWeights2;
var priorityWeights2;
var init_MiddlewareStack2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"() {
    getAllAliases2 = (name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    };
    getMiddlewareNameWithAliases2 = (name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    };
    constructStack2 = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a5, b5) => stepWeights2[b5.step] - stepWeights2[a5.step] || priorityWeights2[b5.priority || "normal"] - priorityWeights2[a5.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          const aliases = getAllAliases2(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases2(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug2 = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases2(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases2(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug2) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases2(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases2(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases2(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a5) => a5 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(`"${getMiddlewareNameWithAliases2(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases2(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases2(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases2(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a5) => a5 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(`"${getMiddlewareNameWithAliases2(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases2(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack2()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases2(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo(constructStack2());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases2(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler3, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler3 = middleware(handler3, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler3;
        }
      };
      return stack;
    };
    stepWeights2 = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    priorityWeights2 = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});
var init_dist_es98 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-stack/dist-es/index.js"() {
    init_MiddlewareStack2();
  }
});
var Client2;
var init_client10 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/client.js"() {
    init_dist_es98();
    Client2 = class {
      constructor(config2) {
        this.config = config2;
        this.middlewareStack = constructStack2();
      }
      send(command, optionsOrCb, cb2) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb2;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler3;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler3 = handlers.get(command.constructor);
          } else {
            handler3 = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler3);
          }
        } else {
          delete this.handlers;
          handler3 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler3(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler3(command).then((result) => result.output);
        }
      }
      destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
      }
    };
  }
});
var init_collect_stream_body6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
  }
});
function schemaLogFilter2(schema, data) {
  if (data == null) {
    return data;
  }
  const ns = NormalizedSchema.of(schema);
  if (ns.getMergedTraits().sensitive) {
    return SENSITIVE_STRING3;
  }
  if (ns.isListSchema()) {
    const isSensitive = !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING3;
    }
  } else if (ns.isMapSchema()) {
    const isSensitive = !!ns.getKeySchema().getMergedTraits().sensitive || !!ns.getValueSchema().getMergedTraits().sensitive;
    if (isSensitive) {
      return SENSITIVE_STRING3;
    }
  } else if (ns.isStructSchema() && typeof data === "object") {
    const object = data;
    const newObject = {};
    for (const [member, memberNs] of ns.structIterator()) {
      if (object[member] != null) {
        newObject[member] = schemaLogFilter2(memberNs, object[member]);
      }
    }
    return newObject;
  }
  return data;
}
var SENSITIVE_STRING3;
var init_schemaLogFilter2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/schemaLogFilter.js"() {
    init_schema2();
    SENSITIVE_STRING3 = "***SensitiveInformation***";
  }
});
var Command2;
var ClassBuilder2;
var init_command9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/command.js"() {
    init_dist_es98();
    init_dist_es81();
    init_schemaLogFilter2();
    Command2 = class {
      constructor() {
        this.middlewareStack = constructStack2();
      }
      static classBuilder() {
        return new ClassBuilder2();
      }
      resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [SMITHY_CONTEXT_KEY3]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve((request3) => requestHandler.handle(request3.request, options || {}), handlerExecutionContext);
      }
    };
    ClassBuilder2 = class {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = void 0;
        this._outputFilterSensitiveLog = void 0;
        this._serializer = null;
        this._deserializer = null;
      }
      init(cb2) {
        this._init = cb2;
      }
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      f(inputFilter = (_2) => _2, outputFilter = (_2) => _2) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      sc(operation) {
        this._operationSchema = operation;
        this._smithyContext.operationSchema = operation;
        return this;
      }
      build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command2 {
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
            this.schema = closure._operationSchema;
          }
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter2.bind(null, closure._operationSchema.input) : (_2) => _2),
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog ?? (closure._operationSchema ? schemaLogFilter2.bind(null, closure._operationSchema.output) : (_2) => _2),
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        };
      }
    };
  }
});
var SENSITIVE_STRING4;
var init_constants16 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
    SENSITIVE_STRING4 = "***SensitiveInformation***";
  }
});
var createAggregatedClient2;
var init_create_aggregated_client5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
    createAggregatedClient2 = (commands5, Client3) => {
      for (const command of Object.keys(commands5)) {
        const CommandCtor = commands5[command];
        const methodImpl = async function(args, optionsOrCb, cb2) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb2 === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb2);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client3.prototype[methodName] = methodImpl;
      }
    };
  }
});
var ServiceException2;
var decorateServiceException2;
var init_exceptions5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
    ServiceException2 = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
      static isInstance(value) {
        if (!value)
          return false;
        const candidate = value;
        return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
      }
      static [Symbol.hasInstance](instance) {
        if (!instance)
          return false;
        const candidate = instance;
        if (this === _ServiceException) {
          return _ServiceException.isInstance(instance);
        }
        if (_ServiceException.isInstance(instance)) {
          if (candidate.name && this.name) {
            return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
          }
          return this.prototype.isPrototypeOf(instance);
        }
        return false;
      }
    };
    decorateServiceException2 = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v6]) => v6 !== void 0).forEach(([k5, v6]) => {
        if (exception[k5] == void 0 || exception[k5] === "") {
          exception[k5] = v6;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
  }
});
var throwDefaultError3;
var withBaseException2;
var deserializeMetadata3;
var init_default_error_handler5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
    init_exceptions5();
    throwDefaultError3 = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata3(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException2(response, parsedBody);
    };
    withBaseException2 = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError3({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    deserializeMetadata3 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
  }
});
var loadConfigsForDefaultMode2;
var init_defaults_mode5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
    loadConfigsForDefaultMode2 = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
  }
});
var warningEmitted2;
var emitWarningIfUnsupportedVersion3;
var init_emitWarningIfUnsupportedVersion6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
    warningEmitted2 = false;
    emitWarningIfUnsupportedVersion3 = (version) => {
      if (version && !warningEmitted2 && parseInt(version.substring(1, version.indexOf("."))) < 16) {
        warningEmitted2 = true;
      }
    };
  }
});
var init_extended_encode_uri_component6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
    init_protocols();
  }
});
var getChecksumConfiguration2;
var resolveChecksumRuntimeConfig2;
var init_checksum8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"() {
    init_dist_es81();
    getChecksumConfiguration2 = (runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in AlgorithmId2) {
        const algorithmId = AlgorithmId2[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        }
      };
    };
    resolveChecksumRuntimeConfig2 = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
  }
});
var getRetryConfiguration2;
var resolveRetryRuntimeConfig2;
var init_retry7 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js"() {
    getRetryConfiguration2 = (runtimeConfig) => {
      return {
        setRetryStrategy(retryStrategy) {
          runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return runtimeConfig.retryStrategy;
        }
      };
    };
    resolveRetryRuntimeConfig2 = (retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    };
  }
});
var getDefaultExtensionConfiguration2;
var resolveDefaultRuntimeConfig2;
var init_defaultExtensionConfiguration9 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
    init_checksum8();
    init_retry7();
    getDefaultExtensionConfiguration2 = (runtimeConfig) => {
      return Object.assign(getChecksumConfiguration2(runtimeConfig), getRetryConfiguration2(runtimeConfig));
    };
    resolveDefaultRuntimeConfig2 = (config2) => {
      return Object.assign(resolveChecksumRuntimeConfig2(config2), resolveRetryRuntimeConfig2(config2));
    };
  }
});
var init_extensions18 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    init_defaultExtensionConfiguration9();
  }
});
var init_get_array_if_single_item5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
  }
});
var init_get_value_from_text_node5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
  }
});
var init_is_serializable_header_value5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/is-serializable-header-value.js"() {
  }
});
var NoOpLogger3;
var init_NoOpLogger5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    NoOpLogger3 = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});
function map2(arg0, arg1, arg2) {
  let target;
  let filter;
  let instructions;
  if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
    target = {};
    instructions = arg0;
  } else {
    target = arg0;
    if (typeof arg1 === "function") {
      filter = arg1;
      instructions = arg2;
      return mapWithFilter2(target, filter, instructions);
    } else {
      instructions = arg1;
    }
  }
  for (const key of Object.keys(instructions)) {
    if (!Array.isArray(instructions[key])) {
      target[key] = instructions[key];
      continue;
    }
    applyInstruction2(target, null, instructions, key);
  }
  return target;
}
var take2;
var mapWithFilter2;
var applyInstruction2;
var nonNullish2;
var pass2;
var init_object_mapping5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
    take2 = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction2(out, source, instructions, key);
      }
      return out;
    };
    mapWithFilter2 = (target, filter, instructions) => {
      return map2(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    applyInstruction2 = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish2, valueFn = pass2, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    nonNullish2 = (_2) => _2 != null;
    pass2 = (_2) => _2;
  }
});
var init_resolve_path6 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
  }
});
var init_ser_utils5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
  }
});
var _json2;
var init_serde_json5 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
    _json2 = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_2) => _2 != null).map(_json2);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json2(obj[key]);
        }
        return target;
      }
      return obj;
    };
  }
});
var init_dist_es99 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    init_client10();
    init_collect_stream_body6();
    init_command9();
    init_constants16();
    init_create_aggregated_client5();
    init_default_error_handler5();
    init_defaults_mode5();
    init_emitWarningIfUnsupportedVersion6();
    init_exceptions5();
    init_extended_encode_uri_component6();
    init_extensions18();
    init_get_array_if_single_item5();
    init_get_value_from_text_node5();
    init_is_serializable_header_value5();
    init_NoOpLogger5();
    init_object_mapping5();
    init_resolve_path6();
    init_ser_utils5();
    init_serde_json5();
    init_serde2();
  }
});
var isStreamingPayload2;
var init_isStreamingPayload2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js"() {
    isStreamingPayload2 = (request3) => request3?.body instanceof Readable6 || typeof ReadableStream !== "undefined" && request3?.body instanceof ReadableStream;
  }
});
var retryMiddleware2;
var isRetryStrategyV22;
var getRetryErrorInfo2;
var getRetryErrorType2;
var retryMiddlewareOptions2;
var getRetryPlugin2;
var getRetryAfterHint2;
var init_retryMiddleware2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js"() {
    init_dist_es82();
    init_dist_es96();
    init_dist_es99();
    init_dist_es97();
    init_esm_node();
    init_isStreamingPayload2();
    init_util10();
    retryMiddleware2 = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV22(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request: request3 } = args;
        const isRequest = HttpRequest9.isInstance(request3);
        if (isRequest) {
          request3.headers[INVOCATION_ID_HEADER2] = v4_default();
        }
        while (true) {
          try {
            if (isRequest) {
              request3.headers[REQUEST_HEADER2] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e5) {
            const retryErrorInfo = getRetryErrorInfo2(e5);
            lastError = asSdkError2(e5);
            if (isRequest && isStreamingPayload2(request3)) {
              (context.logger instanceof NoOpLogger3 ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    isRetryStrategyV22 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    getRetryErrorInfo2 = (error2) => {
      const errorInfo = {
        error: error2,
        errorType: getRetryErrorType2(error2)
      };
      const retryAfterHint = getRetryAfterHint2(error2.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    getRetryErrorType2 = (error2) => {
      if (isThrottlingError2(error2))
        return "THROTTLING";
      if (isTransientError2(error2))
        return "TRANSIENT";
      if (isServerError2(error2))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    retryMiddlewareOptions2 = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    getRetryPlugin2 = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware2(options), retryMiddlewareOptions2);
      }
    });
    getRetryAfterHint2 = (response) => {
      if (!HttpResponse5.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
  }
});
var init_dist_es100 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/middleware-retry/dist-es/index.js"() {
    init_AdaptiveRetryStrategy4();
    init_StandardRetryStrategy4();
    init_configurations4();
    init_delayDecider2();
    init_omitRetryHeadersMiddleware2();
    init_retryDecider2();
    init_retryMiddleware2();
  }
});
function createAwsAuthSigv4HttpAuthOption2(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sso-oauth",
      region: authParameters.region
    },
    propertiesExtractor: (config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSSOOIDCHttpAuthSchemeParametersProvider;
var defaultSSOOIDCHttpAuthSchemeProvider;
var resolveHttpAuthSchemeConfig2;
var init_httpAuthSchemeProvider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthSchemeProvider.js"() {
    init_dist_es25();
    init_dist_es5();
    defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption2(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig2 = (config2) => {
      const config_0 = resolveAwsSdkSigV4Config(config2);
      return Object.assign(config_0, {
        authSchemePreference: normalizeProvider(config2.authSchemePreference ?? [])
      });
    };
  }
});
var resolveClientEndpointParameters2;
var commonParams2;
var init_EndpointParameters2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters2 = (options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      });
    };
    commonParams2 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});
var package_default2;
var init_package2 = __esm({
  "node_modules/@aws-sdk/nested-clients/package.json"() {
    package_default2 = {
      name: "@aws-sdk/nested-clients",
      version: "3.887.0",
      description: "Nested clients for AWS SDK packages.",
      main: "./dist-cjs/index.js",
      module: "./dist-es/index.js",
      types: "./dist-types/index.d.ts",
      scripts: {
        build: "yarn lint && concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline nested-clients",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        lint: "node ../../scripts/validation/submodules-linter.js --pkg nested-clients",
        test: "yarn g:vitest run",
        "test:watch": "yarn g:vitest watch"
      },
      engines: {
        node: ">=18.0.0"
      },
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.887.0",
        "@aws-sdk/middleware-host-header": "3.887.0",
        "@aws-sdk/middleware-logger": "3.887.0",
        "@aws-sdk/middleware-recursion-detection": "3.887.0",
        "@aws-sdk/middleware-user-agent": "3.887.0",
        "@aws-sdk/region-config-resolver": "3.887.0",
        "@aws-sdk/types": "3.887.0",
        "@aws-sdk/util-endpoints": "3.887.0",
        "@aws-sdk/util-user-agent-browser": "3.887.0",
        "@aws-sdk/util-user-agent-node": "3.887.0",
        "@smithy/config-resolver": "^4.2.1",
        "@smithy/core": "^3.11.0",
        "@smithy/fetch-http-handler": "^5.2.1",
        "@smithy/hash-node": "^4.1.1",
        "@smithy/invalid-dependency": "^4.1.1",
        "@smithy/middleware-content-length": "^4.1.1",
        "@smithy/middleware-endpoint": "^4.2.1",
        "@smithy/middleware-retry": "^4.2.1",
        "@smithy/middleware-serde": "^4.1.1",
        "@smithy/middleware-stack": "^4.1.1",
        "@smithy/node-config-provider": "^4.2.1",
        "@smithy/node-http-handler": "^4.2.1",
        "@smithy/protocol-http": "^5.2.1",
        "@smithy/smithy-client": "^4.6.1",
        "@smithy/types": "^4.5.0",
        "@smithy/url-parser": "^4.1.1",
        "@smithy/util-base64": "^4.1.0",
        "@smithy/util-body-length-browser": "^4.1.0",
        "@smithy/util-body-length-node": "^4.1.0",
        "@smithy/util-defaults-mode-browser": "^4.1.1",
        "@smithy/util-defaults-mode-node": "^4.1.1",
        "@smithy/util-endpoints": "^3.1.1",
        "@smithy/util-middleware": "^4.1.1",
        "@smithy/util-retry": "^4.1.1",
        "@smithy/util-utf8": "^4.1.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.8.3"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "./sso-oidc.d.ts",
        "./sso-oidc.js",
        "./sts.d.ts",
        "./sts.js",
        "dist-*/**"
      ],
      browser: {
        "./dist-es/submodules/sso-oidc/runtimeConfig": "./dist-es/submodules/sso-oidc/runtimeConfig.browser",
        "./dist-es/submodules/sts/runtimeConfig": "./dist-es/submodules/sts/runtimeConfig.browser"
      },
      "react-native": {},
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/packages/nested-clients",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "packages/nested-clients"
      },
      exports: {
        "./sso-oidc": {
          types: "./dist-types/submodules/sso-oidc/index.d.ts",
          module: "./dist-es/submodules/sso-oidc/index.js",
          node: "./dist-cjs/submodules/sso-oidc/index.js",
          import: "./dist-es/submodules/sso-oidc/index.js",
          require: "./dist-cjs/submodules/sso-oidc/index.js"
        },
        "./sts": {
          types: "./dist-types/submodules/sts/index.d.ts",
          module: "./dist-es/submodules/sts/index.js",
          node: "./dist-cjs/submodules/sts/index.js",
          import: "./dist-es/submodules/sts/index.js",
          require: "./dist-cjs/submodules/sts/index.js"
        }
      }
    };
  }
});
var crtAvailability;
var init_crt_availability = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js"() {
    crtAvailability = {
      isCrtAvailable: false
    };
  }
});
var isCrtAvailable;
var init_is_crt_available = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js"() {
    init_crt_availability();
    isCrtAvailable = () => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    };
  }
});
var createDefaultUserAgentProvider;
var init_defaultUserAgent = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-user-agent-node/dist-es/defaultUserAgent.js"() {
    init_is_crt_available();
    init_crt_availability();
    createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => {
      return async (config2) => {
        const sections = [
          ["aws-sdk-js", clientVersion],
          ["ua", "2.1"],
          [`os/${platform()}`, release()],
          ["lang/js"],
          ["md/nodejs", `${versions.node}`]
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await config2?.userAgentAppId?.();
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    };
  }
});
var UA_APP_ID_ENV_NAME;
var UA_APP_ID_INI_NAME;
var UA_APP_ID_INI_NAME_DEPRECATED;
var NODE_APP_ID_CONFIG_OPTIONS;
var init_nodeAppIdConfigOptions = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-user-agent-node/dist-es/nodeAppIdConfigOptions.js"() {
    init_dist_es89();
    UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    UA_APP_ID_INI_NAME = "sdk_ua_app_id";
    UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
    NODE_APP_ID_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => env3[UA_APP_ID_ENV_NAME],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED],
      default: DEFAULT_UA_APP_ID2
    };
  }
});
var init_dist_es101 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js"() {
    init_defaultUserAgent();
    init_nodeAppIdConfigOptions();
  }
});
var fromArrayBuffer6;
var fromString6;
var init_dist_es102 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/hash-node/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer6 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer10.from(input, offset, length);
    };
    fromString6 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer10.from(input, encoding) : Buffer10.from(input);
    };
  }
});
var fromArrayBuffer7;
var fromString7;
var init_dist_es103 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-utf8/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer7 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer11.from(input, offset, length);
    };
    fromString7 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer11.from(input, encoding) : Buffer11.from(input);
    };
  }
});
var fromUtf810;
var init_fromUtf88 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es103();
    fromUtf810 = (input) => {
      const buf = fromString7(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var toUint8Array3;
var init_toUint8Array8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf88();
    toUint8Array3 = (data) => {
      if (typeof data === "string") {
        return fromUtf810(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});
var toUtf84;
var init_toUtf88 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es103();
    toUtf84 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer7(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});
var init_dist_es104 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf88();
    init_toUint8Array8();
    init_toUtf88();
  }
});
function castSourceData(toCast, encoding) {
  if (Buffer12.isBuffer(toCast)) {
    return toCast;
  }
  if (typeof toCast === "string") {
    return fromString6(toCast, encoding);
  }
  if (ArrayBuffer.isView(toCast)) {
    return fromArrayBuffer6(toCast.buffer, toCast.byteOffset, toCast.byteLength);
  }
  return fromArrayBuffer6(toCast);
}
var Hash;
var init_dist_es105 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/hash-node/dist-es/index.js"() {
    init_dist_es102();
    init_dist_es104();
    Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(toUint8Array3(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? createHmac(this.algorithmIdentifier, castSourceData(this.secret)) : createHash2(this.algorithmIdentifier);
      }
    };
  }
});
var escapeUri3;
var hexEncode3;
var init_escape_uri3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    escapeUri3 = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode3);
    hexEncode3 = (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});
var init_escape_uri_path3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
  }
});
var init_dist_es106 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    init_escape_uri3();
    init_escape_uri_path3();
  }
});
function buildQueryString2(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri3(key);
    if (Array.isArray(value)) {
      for (let i5 = 0, iLen = value.length; i5 < iLen; i5++) {
        parts.push(`${key}=${escapeUri3(value[i5])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri3(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
var init_dist_es107 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    init_dist_es106();
  }
});
var NODEJS_TIMEOUT_ERROR_CODES4;
var init_constants17 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/constants.js"() {
    NODEJS_TIMEOUT_ERROR_CODES4 = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});
var getTransformedHeaders2;
var init_get_transformed_headers2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js"() {
    getTransformedHeaders2 = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
  }
});
var timing2;
var init_timing2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/timing.js"() {
    timing2 = {
      setTimeout: (cb2, ms) => setTimeout(cb2, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
  }
});
var DEFER_EVENT_LISTENER_TIME4;
var setConnectionTimeout2;
var init_set_connection_timeout2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js"() {
    init_timing2();
    DEFER_EVENT_LISTENER_TIME4 = 1e3;
    setConnectionTimeout2 = (request3, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = (offset) => {
        const timeoutId = timing2.setTimeout(() => {
          request3.destroy();
          reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
          }));
        }, timeoutInMs - offset);
        const doWithSocket = (socket) => {
          if (socket?.connecting) {
            socket.on("connect", () => {
              timing2.clearTimeout(timeoutId);
            });
          } else {
            timing2.clearTimeout(timeoutId);
          }
        };
        if (request3.socket) {
          doWithSocket(request3.socket);
        } else {
          request3.on("socket", doWithSocket);
        }
      };
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing2.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME4), DEFER_EVENT_LISTENER_TIME4);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME5;
var setSocketKeepAlive2;
var init_set_socket_keep_alive2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js"() {
    init_timing2();
    DEFER_EVENT_LISTENER_TIME5 = 3e3;
    setSocketKeepAlive2 = (request3, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME5) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = () => {
        if (request3.socket) {
          request3.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request3.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      };
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing2.setTimeout(registerListener, deferTimeMs);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME6;
var setSocketTimeout2;
var init_set_socket_timeout2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js"() {
    init_node_http_handler2();
    init_timing2();
    DEFER_EVENT_LISTENER_TIME6 = 3e3;
    setSocketTimeout2 = (request3, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT2) => {
      const registerTimeout = (offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = () => {
          request3.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        };
        if (request3.socket) {
          request3.socket.setTimeout(timeout, onTimeout);
          request3.on("close", () => request3.socket?.removeListener("timeout", onTimeout));
        } else {
          request3.setTimeout(timeout, onTimeout);
        }
      };
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing2.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME6), DEFER_EVENT_LISTENER_TIME6);
    };
  }
});
async function writeRequestBody2(httpRequest3, request3, maxContinueTimeoutMs = MIN_WAIT_TIME2) {
  const headers = request3.headers ?? {};
  const expect = headers["Expect"] || headers["expect"];
  let timeoutId = -1;
  let sendBody = true;
  if (expect === "100-continue") {
    sendBody = await Promise.race([
      new Promise((resolve) => {
        timeoutId = Number(timing2.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME2, maxContinueTimeoutMs)));
      }),
      new Promise((resolve) => {
        httpRequest3.on("continue", () => {
          timing2.clearTimeout(timeoutId);
          resolve(true);
        });
        httpRequest3.on("response", () => {
          timing2.clearTimeout(timeoutId);
          resolve(false);
        });
        httpRequest3.on("error", () => {
          timing2.clearTimeout(timeoutId);
          resolve(false);
        });
      })
    ]);
  }
  if (sendBody) {
    writeBody2(httpRequest3, request3.body);
  }
}
function writeBody2(httpRequest3, body) {
  if (body instanceof Readable7) {
    body.pipe(httpRequest3);
    return;
  }
  if (body) {
    if (Buffer.isBuffer(body) || typeof body === "string") {
      httpRequest3.end(body);
      return;
    }
    const uint8 = body;
    if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
      httpRequest3.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
      return;
    }
    httpRequest3.end(Buffer.from(body));
    return;
  }
  httpRequest3.end();
}
var MIN_WAIT_TIME2;
var init_write_request_body2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js"() {
    init_timing2();
    MIN_WAIT_TIME2 = 6e3;
  }
});
var DEFAULT_REQUEST_TIMEOUT2;
var NodeHttpHandler2;
var init_node_http_handler2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js"() {
    init_dist_es82();
    init_dist_es107();
    init_constants17();
    init_get_transformed_headers2();
    init_set_connection_timeout2();
    init_set_socket_keep_alive2();
    init_set_socket_timeout2();
    init_timing2();
    init_write_request_body2();
    DEFAULT_REQUEST_TIMEOUT2 = 0;
    NodeHttpHandler2 = class _NodeHttpHandler {
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler(instanceOrOptions);
      }
      static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = sockets[origin]?.length ?? 0;
            const requestsEnqueued = requests[origin]?.length ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              logger2?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          socketAcquisitionWarningTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof hAgent2 || typeof httpAgent?.destroy === "function") {
              return httpAgent;
            }
            return new hAgent2({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof hsAgent2 || typeof httpsAgent?.destroy === "function") {
              return httpsAgent;
            }
            return new hsAgent2({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
      }
      async handle(request3, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing2.clearTimeout);
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing2.clearTimeout);
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request3.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(timing2.setTimeout(() => {
            this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);
          }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)));
          const queryString = buildQueryString2(request3.query || {});
          let auth = void 0;
          if (request3.username != null || request3.password != null) {
            const username = request3.username ?? "";
            const password = request3.password ?? "";
            auth = `${username}:${password}`;
          }
          let path4 = request3.path;
          if (queryString) {
            path4 += `?${queryString}`;
          }
          if (request3.fragment) {
            path4 += `#${request3.fragment}`;
          }
          let hostname = request3.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request3.hostname.slice(1, -1);
          } else {
            hostname = request3.hostname;
          }
          const nodeHttpsOptions = {
            headers: request3.headers,
            host: hostname,
            method: request3.method,
            path: path4,
            port: request3.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? hsRequest2 : hRequest2;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new HttpResponse5({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders2(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES4.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          if (abortSignal) {
            const onAbort = () => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          const effectiveRequestTimeout = requestTimeout ?? this.config.requestTimeout;
          timeouts.push(setConnectionTimeout2(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout2(req, reject, effectiveRequestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(setSocketKeepAlive2(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            }));
          }
          writeRequestBodyPromise = writeRequestBody2(req, request3, effectiveRequestTimeout).catch((e5) => {
            timeouts.forEach(timing2.clearTimeout);
            return _reject(e5);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return {
            ...config2,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
  }
});
var init_node_http2_handler2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js"() {
  }
});
var Collector3;
var init_collector2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js"() {
    Collector3 = class extends Writable4 {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
  }
});
async function collectReadableStream2(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
var streamCollector3;
var isReadableStreamInstance2;
var init_stream_collector3 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js"() {
    init_collector2();
    streamCollector3 = (stream) => {
      if (isReadableStreamInstance2(stream)) {
        return collectReadableStream2(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector3();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    };
    isReadableStreamInstance2 = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});
var init_dist_es108 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/node-http-handler/dist-es/index.js"() {
    init_node_http_handler2();
    init_node_http2_handler2();
    init_stream_collector3();
  }
});
var calculateBodyLength;
var init_calculateBodyLength = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js"() {
    calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return lstatSync(body.path).size;
      } else if (typeof body.fd === "number") {
        return fstatSync(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
  }
});
var init_dist_es109 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-body-length-node/dist-es/index.js"() {
    init_calculateBodyLength();
  }
});
var fromArrayBuffer8;
var fromString8;
var init_dist_es110 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-base64/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer8 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer13.from(input, offset, length);
    };
    fromString8 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer13.from(input, encoding) : Buffer13.from(input);
    };
  }
});
var BASE64_REGEX3;
var fromBase643;
var init_fromBase644 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    init_dist_es110();
    BASE64_REGEX3 = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase643 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX3.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString8(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});
var toBase644;
var init_toBase644 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    init_dist_es110();
    init_dist_es104();
    toBase644 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf810(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer8(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});
var init_dist_es111 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_fromBase644();
    init_toBase644();
  }
});
var u2;
var v2;
var w2;
var x2;
var a2;
var b2;
var c2;
var d2;
var e2;
var f2;
var g2;
var h2;
var i2;
var j2;
var k2;
var l2;
var m2;
var n2;
var o2;
var p2;
var q2;
var r2;
var s2;
var t2;
var _data2;
var ruleSet2;
var init_ruleset2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/ruleset.js"() {
    u2 = "required";
    v2 = "fn";
    w2 = "argv";
    x2 = "ref";
    a2 = true;
    b2 = "isSet";
    c2 = "booleanEquals";
    d2 = "error";
    e2 = "endpoint";
    f2 = "tree";
    g2 = "PartitionResult";
    h2 = "getAttr";
    i2 = { [u2]: false, "type": "String" };
    j2 = { [u2]: true, "default": false, "type": "Boolean" };
    k2 = { [x2]: "Endpoint" };
    l2 = { [v2]: c2, [w2]: [{ [x2]: "UseFIPS" }, true] };
    m2 = { [v2]: c2, [w2]: [{ [x2]: "UseDualStack" }, true] };
    n2 = {};
    o2 = { [v2]: h2, [w2]: [{ [x2]: g2 }, "supportsFIPS"] };
    p2 = { [x2]: g2 };
    q2 = { [v2]: c2, [w2]: [true, { [v2]: h2, [w2]: [p2, "supportsDualStack"] }] };
    r2 = [l2];
    s2 = [m2];
    t2 = [{ [x2]: "Region" }];
    _data2 = { version: "1.0", parameters: { Region: i2, UseDualStack: j2, UseFIPS: j2, Endpoint: i2 }, rules: [{ conditions: [{ [v2]: b2, [w2]: [k2] }], rules: [{ conditions: r2, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d2 }, { conditions: s2, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d2 }, { endpoint: { url: k2, properties: n2, headers: n2 }, type: e2 }], type: f2 }, { conditions: [{ [v2]: b2, [w2]: t2 }], rules: [{ conditions: [{ [v2]: "aws.partition", [w2]: t2, assign: g2 }], rules: [{ conditions: [l2, m2], rules: [{ conditions: [{ [v2]: c2, [w2]: [a2, o2] }, q2], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d2 }], type: f2 }, { conditions: r2, rules: [{ conditions: [{ [v2]: c2, [w2]: [o2, a2] }], rules: [{ conditions: [{ [v2]: "stringEquals", [w2]: [{ [v2]: h2, [w2]: [p2, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n2, headers: n2 }, type: e2 }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "FIPS is enabled but this partition does not support FIPS", type: d2 }], type: f2 }, { conditions: s2, rules: [{ conditions: [q2], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "DualStack is enabled but this partition does not support DualStack", type: d2 }], type: f2 }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }], type: f2 }, { error: "Invalid Configuration: Missing Region", type: d2 }] };
    ruleSet2 = _data2;
  }
});
var cache2;
var defaultEndpointResolver2;
var init_endpointResolver2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/endpointResolver.js"() {
    init_dist_es88();
    init_dist_es49();
    init_ruleset2();
    cache2 = new EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    defaultEndpointResolver2 = (endpointParams, context = {}) => {
      return cache2.get(endpointParams, () => resolveEndpoint(ruleSet2, {
        endpointParams,
        logger: context.logger
      }));
    };
    customEndpointFunctions.aws = awsEndpointFunctions2;
  }
});
var getRuntimeConfig;
var init_runtimeConfig_shared = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.shared.js"() {
    init_dist_es25();
    init_dist_es14();
    init_dist_es99();
    init_dist_es87();
    init_dist_es111();
    init_dist_es104();
    init_httpAuthSchemeProvider2();
    init_endpointResolver2();
    getRuntimeConfig = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? fromBase643,
        base64Encoder: config2?.base64Encoder ?? toBase644,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? defaultEndpointResolver2,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new NoOpLogger3(),
        serviceId: config2?.serviceId ?? "SSO OIDC",
        urlParser: config2?.urlParser ?? parseUrl2,
        utf8Decoder: config2?.utf8Decoder ?? fromUtf810,
        utf8Encoder: config2?.utf8Encoder ?? toUtf84
      };
    };
  }
});
var AWS_EXECUTION_ENV;
var AWS_REGION_ENV;
var AWS_DEFAULT_REGION_ENV;
var ENV_IMDS_DISABLED2;
var DEFAULTS_MODE_OPTIONS;
var IMDS_REGION_PATH;
var init_constants18 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js"() {
    AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    AWS_REGION_ENV = "AWS_REGION";
    AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    ENV_IMDS_DISABLED2 = "AWS_EC2_METADATA_DISABLED";
    DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});
var AWS_DEFAULTS_MODE_ENV;
var AWS_DEFAULTS_MODE_CONFIG;
var NODE_DEFAULTS_MODE_CONFIG_OPTIONS;
var init_defaultsModeConfig = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js"() {
    AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => {
        return env3[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});
function httpRequest2(options) {
  return new Promise((resolve, reject) => {
    const req = request2({
      method: "GET",
      ...options,
      hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
    });
    req.on("error", (err) => {
      reject(Object.assign(new ProviderError("Unable to connect to instance metadata service"), err));
      req.destroy();
    });
    req.on("timeout", () => {
      reject(new ProviderError("TimeoutError from instance metadata service"));
      req.destroy();
    });
    req.on("response", (res) => {
      const { statusCode = 400 } = res;
      if (statusCode < 200 || 300 <= statusCode) {
        reject(Object.assign(new ProviderError("Error response received from instance metadata service"), { statusCode }));
        req.destroy();
      }
      const chunks = [];
      res.on("data", (chunk) => {
        chunks.push(chunk);
      });
      res.on("end", () => {
        resolve(Buffer14.concat(chunks));
        req.destroy();
      });
    });
    req.end();
  });
}
var init_httpRequest11 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js"() {
    init_dist_es15();
  }
});
var isImdsCredentials2;
var fromImdsCredentials2;
var init_ImdsCredentials2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js"() {
    isImdsCredentials2 = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    fromImdsCredentials2 = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
      ...creds.AccountId && { accountId: creds.AccountId }
    });
  }
});
var DEFAULT_TIMEOUT2;
var DEFAULT_MAX_RETRIES2;
var providerConfigFromInit2;
var init_RemoteProviderInit2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js"() {
    DEFAULT_TIMEOUT2 = 1e3;
    DEFAULT_MAX_RETRIES2 = 0;
    providerConfigFromInit2 = ({ maxRetries = DEFAULT_MAX_RETRIES2, timeout = DEFAULT_TIMEOUT2 }) => ({ maxRetries, timeout });
  }
});
var retry2;
var init_retry8 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js"() {
    retry2 = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i5 = 0; i5 < maxRetries; i5++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
  }
});
var ENV_CMDS_FULL_URI2;
var ENV_CMDS_RELATIVE_URI2;
var ENV_CMDS_AUTH_TOKEN2;
var fromContainerMetadata2;
var requestFromEcsImds2;
var CMDS_IP2;
var GREENGRASS_HOSTS2;
var GREENGRASS_PROTOCOLS2;
var getCmdsUri2;
var init_fromContainerMetadata2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"() {
    init_dist_es15();
    init_httpRequest11();
    init_ImdsCredentials2();
    init_RemoteProviderInit2();
    init_retry8();
    ENV_CMDS_FULL_URI2 = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    ENV_CMDS_RELATIVE_URI2 = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    ENV_CMDS_AUTH_TOKEN2 = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromContainerMetadata2 = (init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit2(init);
      return () => retry2(async () => {
        const requestOptions = await getCmdsUri2({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds2(timeout, requestOptions));
        if (!isImdsCredentials2(credsResponse)) {
          throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials2(credsResponse);
      }, maxRetries);
    };
    requestFromEcsImds2 = async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN2]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN2]
        };
      }
      const buffer = await httpRequest2({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    CMDS_IP2 = "169.254.170.2";
    GREENGRASS_HOSTS2 = {
      localhost: true,
      "127.0.0.1": true
    };
    GREENGRASS_PROTOCOLS2 = {
      "http:": true,
      "https:": true
    };
    getCmdsUri2 = async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI2]) {
        return {
          hostname: CMDS_IP2,
          path: process.env[ENV_CMDS_RELATIVE_URI2]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI2]) {
        const parsed = parse2(process.env[ENV_CMDS_FULL_URI2]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS2)) {
          throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS2)) {
          throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI2} or ${ENV_CMDS_FULL_URI2} environment variable is set`, {
        tryNextLink: false,
        logger: logger2
      });
    };
  }
});
var InstanceMetadataV1FallbackError2;
var init_InstanceMetadataV1FallbackError2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js"() {
    init_dist_es15();
    InstanceMetadataV1FallbackError2 = class _InstanceMetadataV1FallbackError extends CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);
      }
    };
  }
});
var Endpoint2;
var init_Endpoint2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js"() {
    (function(Endpoint3) {
      Endpoint3["IPv4"] = "http://169.254.169.254";
      Endpoint3["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint2 || (Endpoint2 = {}));
  }
});
var ENV_ENDPOINT_NAME2;
var CONFIG_ENDPOINT_NAME2;
var ENDPOINT_CONFIG_OPTIONS2;
var init_EndpointConfigOptions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js"() {
    ENV_ENDPOINT_NAME2 = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    CONFIG_ENDPOINT_NAME2 = "ec2_metadata_service_endpoint";
    ENDPOINT_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => env3[ENV_ENDPOINT_NAME2],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME2],
      default: void 0
    };
  }
});
var EndpointMode2;
var init_EndpointMode2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js"() {
    (function(EndpointMode3) {
      EndpointMode3["IPv4"] = "IPv4";
      EndpointMode3["IPv6"] = "IPv6";
    })(EndpointMode2 || (EndpointMode2 = {}));
  }
});
var ENV_ENDPOINT_MODE_NAME2;
var CONFIG_ENDPOINT_MODE_NAME2;
var ENDPOINT_MODE_CONFIG_OPTIONS2;
var init_EndpointModeConfigOptions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js"() {
    init_EndpointMode2();
    ENV_ENDPOINT_MODE_NAME2 = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    CONFIG_ENDPOINT_MODE_NAME2 = "ec2_metadata_service_endpoint_mode";
    ENDPOINT_MODE_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => env3[ENV_ENDPOINT_MODE_NAME2],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME2],
      default: EndpointMode2.IPv4
    };
  }
});
var getInstanceMetadataEndpoint2;
var getFromEndpointConfig2;
var getFromEndpointModeConfig2;
var init_getInstanceMetadataEndpoint2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"() {
    init_dist_es93();
    init_dist_es87();
    init_Endpoint2();
    init_EndpointConfigOptions2();
    init_EndpointMode2();
    init_EndpointModeConfigOptions2();
    getInstanceMetadataEndpoint2 = async () => parseUrl2(await getFromEndpointConfig2() || await getFromEndpointModeConfig2());
    getFromEndpointConfig2 = async () => loadConfig3(ENDPOINT_CONFIG_OPTIONS2)();
    getFromEndpointModeConfig2 = async () => {
      const endpointMode = await loadConfig3(ENDPOINT_MODE_CONFIG_OPTIONS2)();
      switch (endpointMode) {
        case EndpointMode2.IPv4:
          return Endpoint2.IPv4;
        case EndpointMode2.IPv6:
          return Endpoint2.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode2)}`);
      }
    };
  }
});
var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS2;
var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS2;
var STATIC_STABILITY_DOC_URL2;
var getExtendedInstanceMetadataCredentials2;
var init_getExtendedInstanceMetadataCredentials2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js"() {
    STATIC_STABILITY_REFRESH_INTERVAL_SECONDS2 = 5 * 60;
    STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS2 = 5 * 60;
    STATIC_STABILITY_DOC_URL2 = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    getExtendedInstanceMetadataCredentials2 = (credentials, logger2) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS2 + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS2);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL2);
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
  }
});
var staticStabilityProvider2;
var init_staticStabilityProvider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"() {
    init_getExtendedInstanceMetadataCredentials2();
    staticStabilityProvider2 = (provider, options = {}) => {
      const logger2 = options?.logger || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials2(credentials, logger2);
          }
        } catch (e5) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e5);
            credentials = getExtendedInstanceMetadataCredentials2(pastCredentials, logger2);
          } else {
            throw e5;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
  }
});
var IMDS_PATH2;
var IMDS_TOKEN_PATH2;
var AWS_EC2_METADATA_V1_DISABLED2;
var PROFILE_AWS_EC2_METADATA_V1_DISABLED2;
var X_AWS_EC2_METADATA_TOKEN2;
var fromInstanceMetadata2;
var getInstanceMetadataProvider2;
var getMetadataToken2;
var getProfile2;
var getCredentialsFromProfile2;
var init_fromInstanceMetadata2 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"() {
    init_dist_es93();
    init_dist_es15();
    init_InstanceMetadataV1FallbackError2();
    init_httpRequest11();
    init_ImdsCredentials2();
    init_RemoteProviderInit2();
    init_retry8();
    init_getInstanceMetadataEndpoint2();
    init_staticStabilityProvider2();
    IMDS_PATH2 = "/latest/meta-data/iam/security-credentials/";
    IMDS_TOKEN_PATH2 = "/latest/api/token";
    AWS_EC2_METADATA_V1_DISABLED2 = "AWS_EC2_METADATA_V1_DISABLED";
    PROFILE_AWS_EC2_METADATA_V1_DISABLED2 = "ec2_metadata_v1_disabled";
    X_AWS_EC2_METADATA_TOKEN2 = "x-aws-ec2-metadata-token";
    fromInstanceMetadata2 = (init = {}) => staticStabilityProvider2(getInstanceMetadataProvider2(init), { logger: init.logger });
    getInstanceMetadataProvider2 = (init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit2(init);
      const getCredentials2 = async (maxRetries2, options) => {
        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN2] == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await loadConfig3({
            environmentVariableSelector: (env3) => {
              const envValue = env3[AWS_EC2_METADATA_V1_DISABLED2];
              fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
              if (envValue === void 0) {
                throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED2} not set in env, checking config file next.`, { logger: init.logger });
              }
              return fallbackBlockedFromProcessEnv;
            },
            configFileSelector: (profile2) => {
              const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED2];
              fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
              return fallbackBlockedFromProfile;
            },
            default: false
          }, {
            profile
          })();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED2})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED2})`);
            throw new InstanceMetadataV1FallbackError2(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
          }
        }
        const imdsProfile = (await retry2(async () => {
          let profile2;
          try {
            profile2 = await getProfile2(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry2(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile2(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint2();
        if (disableFetchToken) {
          logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials2(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken2({ ...endpoint, timeout })).toString();
          } catch (error2) {
            if (error2?.statusCode === 400) {
              throw Object.assign(error2, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error2.message === "TimeoutError" || [403, 404, 405].includes(error2.statusCode)) {
              disableFetchToken = true;
            }
            logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials2(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials2(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN2]: token
            },
            timeout
          });
        }
      };
    };
    getMetadataToken2 = async (options) => httpRequest2({
      ...options,
      path: IMDS_TOKEN_PATH2,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    getProfile2 = async (options) => (await httpRequest2({ ...options, path: IMDS_PATH2 })).toString();
    getCredentialsFromProfile2 = async (profile, options, init) => {
      const credentialsResponse = JSON.parse((await httpRequest2({
        ...options,
        path: IMDS_PATH2 + profile
      })).toString());
      if (!isImdsCredentials2(credentialsResponse)) {
        throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials2(credentialsResponse);
    };
  }
});
var init_types22 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/types.js"() {
  }
});
var dist_es_exports4 = {};
__export2(dist_es_exports4, {
  DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES2,
  DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT2,
  ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN2,
  ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI2,
  ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI2,
  Endpoint: () => Endpoint2,
  fromContainerMetadata: () => fromContainerMetadata2,
  fromInstanceMetadata: () => fromInstanceMetadata2,
  getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint2,
  httpRequest: () => httpRequest2,
  providerConfigFromInit: () => providerConfigFromInit2
});
var init_dist_es112 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/credential-provider-imds/dist-es/index.js"() {
    init_fromContainerMetadata2();
    init_fromInstanceMetadata2();
    init_RemoteProviderInit2();
    init_types22();
    init_httpRequest11();
    init_getInstanceMetadataEndpoint2();
    init_Endpoint2();
  }
});
var resolveDefaultsModeConfig;
var resolveNodeDefaultsModeAuto;
var inferPhysicalRegion;
var init_resolveDefaultsModeConfig = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js"() {
    init_dist_es90();
    init_dist_es93();
    init_dist_es15();
    init_constants18();
    init_defaultsModeConfig();
    resolveDefaultsModeConfig = ({ region = loadConfig3(NODE_REGION_CONFIG_OPTIONS2), defaultsMode = loadConfig3(NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => memoize(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode?.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode?.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    inferPhysicalRegion = async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED2]) {
        try {
          const { getInstanceMetadataEndpoint: getInstanceMetadataEndpoint3, httpRequest: httpRequest3 } = await Promise.resolve().then(() => (init_dist_es112(), dist_es_exports4));
          const endpoint = await getInstanceMetadataEndpoint3();
          return (await httpRequest3({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e5) {
        }
      }
    };
  }
});
var init_dist_es113 = __esm({
  "node_modules/@aws-sdk/nested-clients/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js"() {
    init_resolveDefaultsModeConfig();
  }
});
var getRuntimeConfig2;
var init_runtimeConfig = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.js"() {
    init_package2();
    init_dist_es25();
    init_dist_es101();
    init_dist_es90();
    init_dist_es105();
    init_dist_es100();
    init_dist_es93();
    init_dist_es108();
    init_dist_es109();
    init_dist_es97();
    init_runtimeConfig_shared();
    init_dist_es99();
    init_dist_es113();
    init_dist_es99();
    getRuntimeConfig2 = (config2) => {
      emitWarningIfUnsupportedVersion3(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode2);
      const clientSharedValues = getRuntimeConfig(config2);
      emitWarningIfUnsupportedVersion(process.version);
      const loaderConfig = {
        profile: config2?.profile,
        logger: clientSharedValues.logger
      };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config2?.authSchemePreference ?? loadConfig3(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config2?.bodyLengthChecker ?? calculateBodyLength,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }),
        maxAttempts: config2?.maxAttempts ?? loadConfig3(NODE_MAX_ATTEMPT_CONFIG_OPTIONS2, config2),
        region: config2?.region ?? loadConfig3(NODE_REGION_CONFIG_OPTIONS2, { ...NODE_REGION_CONFIG_FILE_OPTIONS2, ...loaderConfig }),
        requestHandler: NodeHttpHandler2.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? loadConfig3({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS2,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE2
        }, config2),
        sha256: config2?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? streamCollector3,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? loadConfig3(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS2, loaderConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? loadConfig3(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS2, loaderConfig),
        userAgentAppId: config2?.userAgentAppId ?? loadConfig3(NODE_APP_ID_CONFIG_OPTIONS, loaderConfig)
      };
    };
  }
});
var getAwsRegionExtensionConfiguration;
var resolveAwsRegionExtensionConfiguration;
var init_extensions19 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js"() {
    getAwsRegionExtensionConfiguration = (runtimeConfig) => {
      return {
        setRegion(region) {
          runtimeConfig.region = region;
        },
        region() {
          return runtimeConfig.region;
        }
      };
    };
    resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    };
  }
});
var init_config10 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js"() {
  }
});
var init_isFipsRegion3 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
  }
});
var init_getRealRegion3 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    init_isFipsRegion3();
  }
});
var init_resolveRegionConfig3 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    init_getRealRegion3();
    init_isFipsRegion3();
  }
});
var init_regionConfig3 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js"() {
    init_config10();
    init_resolveRegionConfig3();
  }
});
var init_dist_es114 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/index.js"() {
    init_extensions19();
    init_regionConfig3();
  }
});
var getHttpAuthExtensionConfiguration;
var resolveHttpAuthRuntimeConfig;
var init_httpAuthExtensionConfiguration = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
  }
});
var resolveRuntimeExtensions;
var init_runtimeExtensions = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeExtensions.js"() {
    init_dist_es114();
    init_dist_es82();
    init_dist_es99();
    init_httpAuthExtensionConfiguration();
    resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration2(runtimeConfig), getHttpHandlerExtensionConfiguration2(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig2(extensionConfiguration), resolveHttpHandlerRuntimeConfig2(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
    };
  }
});
var SSOOIDCClient;
var init_SSOOIDCClient = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDCClient.js"() {
    init_dist_es83();
    init_dist_es84();
    init_dist_es85();
    init_dist_es89();
    init_dist_es90();
    init_dist_es14();
    init_dist_es91();
    init_dist_es95();
    init_dist_es100();
    init_dist_es99();
    init_httpAuthSchemeProvider2();
    init_EndpointParameters2();
    init_runtimeConfig();
    init_runtimeExtensions();
    SSOOIDCClient = class extends Client2 {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters2(_config_0);
        const _config_2 = resolveUserAgentConfig2(_config_1);
        const _config_3 = resolveRetryConfig2(_config_2);
        const _config_4 = resolveRegionConfig2(_config_3);
        const _config_5 = resolveHostHeaderConfig2(_config_4);
        const _config_6 = resolveEndpointConfig2(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig2(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(getUserAgentPlugin2(this.config));
        this.middlewareStack.use(getRetryPlugin2(this.config));
        this.middlewareStack.use(getContentLengthPlugin2(this.config));
        this.middlewareStack.use(getHostHeaderPlugin2(this.config));
        this.middlewareStack.use(getLoggerPlugin2(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin2(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultSSOOIDCHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});
var SSOOIDCServiceException;
var init_SSOOIDCServiceException = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/SSOOIDCServiceException.js"() {
    init_dist_es99();
    SSOOIDCServiceException = class _SSOOIDCServiceException extends ServiceException2 {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
  }
});
var AccessDeniedException;
var AuthorizationPendingException;
var CreateTokenRequestFilterSensitiveLog;
var CreateTokenResponseFilterSensitiveLog;
var ExpiredTokenException;
var InternalServerException;
var InvalidClientException;
var InvalidGrantException;
var InvalidRequestException;
var InvalidScopeException;
var SlowDownException;
var UnauthorizedClientException;
var UnsupportedGrantTypeException;
var init_models_02 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/models_0.js"() {
    init_dist_es99();
    init_SSOOIDCServiceException();
    AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      name = "AccessDeniedException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      name = "AuthorizationPendingException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: SENSITIVE_STRING4 },
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING4 },
      ...obj.codeVerifier && { codeVerifier: SENSITIVE_STRING4 }
    });
    CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING4 },
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING4 },
      ...obj.idToken && { idToken: SENSITIVE_STRING4 }
    });
    ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      name = "ExpiredTokenException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      name = "InternalServerException";
      $fault = "server";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      name = "InvalidClientException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      name = "InvalidGrantException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      name = "InvalidRequestException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      name = "InvalidScopeException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      name = "SlowDownException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      name = "UnauthorizedClientException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      name = "UnsupportedGrantTypeException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
  }
});
var se_CreateTokenCommand;
var de_CreateTokenCommand;
var de_CommandError2;
var throwDefaultError4;
var de_AccessDeniedExceptionRes;
var de_AuthorizationPendingExceptionRes;
var de_ExpiredTokenExceptionRes;
var de_InternalServerExceptionRes;
var de_InvalidClientExceptionRes;
var de_InvalidGrantExceptionRes;
var de_InvalidRequestExceptionRes;
var de_InvalidScopeExceptionRes;
var de_SlowDownExceptionRes;
var de_UnauthorizedClientExceptionRes;
var de_UnsupportedGrantTypeExceptionRes;
var deserializeMetadata4;
var init_Aws_restJson1 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/protocols/Aws_restJson1.js"() {
    init_dist_es25();
    init_dist_es14();
    init_dist_es99();
    init_models_02();
    init_SSOOIDCServiceException();
    se_CreateTokenCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b5.bp("/token");
      let body;
      body = JSON.stringify(take2(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        codeVerifier: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_2) => _json2(_2)
      }));
      b5.m("POST").h(headers).b(body);
      return b5.build();
    };
    de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata4(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take2(data, {
        accessToken: expectString,
        expiresIn: expectInt32,
        idToken: expectString,
        refreshToken: expectString,
        tokenType: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_CommandError2 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError4({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError4 = withBaseException2(SSOOIDCServiceException);
    de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take2(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...contents
      });
      return decorateServiceException2(exception, parsedOutput.body);
    };
    deserializeMetadata4 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
  }
});
var CreateTokenCommand;
var init_CreateTokenCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/CreateTokenCommand.js"() {
    init_dist_es95();
    init_dist_es94();
    init_dist_es99();
    init_EndpointParameters2();
    init_models_02();
    init_Aws_restJson1();
    CreateTokenCommand = class extends Command2.classBuilder().ep(commonParams2).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin2(config2, this.serialize, this.deserialize),
        getEndpointPlugin2(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
  }
});
var commands;
var SSOOIDC;
var init_SSOOIDC = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDC.js"() {
    init_dist_es99();
    init_CreateTokenCommand();
    init_SSOOIDCClient();
    commands = {
      CreateTokenCommand
    };
    SSOOIDC = class extends SSOOIDCClient {
    };
    createAggregatedClient2(commands, SSOOIDC);
  }
});
var init_commands = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/index.js"() {
    init_CreateTokenCommand();
  }
});
var init_models = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/index.js"() {
    init_models_02();
  }
});
var sso_oidc_exports = {};
__export2(sso_oidc_exports, {
  $Command: () => Command2,
  AccessDeniedException: () => AccessDeniedException,
  AuthorizationPendingException: () => AuthorizationPendingException,
  CreateTokenCommand: () => CreateTokenCommand,
  CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
  CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
  ExpiredTokenException: () => ExpiredTokenException,
  InternalServerException: () => InternalServerException,
  InvalidClientException: () => InvalidClientException,
  InvalidGrantException: () => InvalidGrantException,
  InvalidRequestException: () => InvalidRequestException,
  InvalidScopeException: () => InvalidScopeException,
  SSOOIDC: () => SSOOIDC,
  SSOOIDCClient: () => SSOOIDCClient,
  SSOOIDCServiceException: () => SSOOIDCServiceException,
  SlowDownException: () => SlowDownException,
  UnauthorizedClientException: () => UnauthorizedClientException,
  UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
  __Client: () => Client2
});
var init_sso_oidc = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/index.js"() {
    init_SSOOIDCClient();
    init_SSOOIDC();
    init_commands();
    init_models();
    init_SSOOIDCServiceException();
  }
});
var getSsoOidcClient;
var init_getSsoOidcClient = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js"() {
    getSsoOidcClient = async (ssoRegion, init = {}) => {
      const { SSOOIDCClient: SSOOIDCClient2 } = await Promise.resolve().then(() => (init_sso_oidc(), sso_oidc_exports));
      const ssoOidcClient = new SSOOIDCClient2(Object.assign({}, init.clientConfig ?? {}, {
        region: ssoRegion ?? init.clientConfig?.region,
        logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger
      }));
      return ssoOidcClient;
    };
  }
});
var getNewSsoOidcToken;
var init_getNewSsoOidcToken = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js"() {
    init_getSsoOidcClient();
    getNewSsoOidcToken = async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand: CreateTokenCommand2 } = await Promise.resolve().then(() => (init_sso_oidc(), sso_oidc_exports));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(new CreateTokenCommand2({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
  }
});
var validateTokenExpiry;
var init_validateTokenExpiry = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js"() {
    init_dist_es15();
    init_constants12();
    validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});
var validateTokenKey;
var init_validateTokenKey = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js"() {
    init_dist_es15();
    init_constants12();
    validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});
var writeFile;
var writeSSOTokenToFile;
var init_writeSSOTokenToFile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js"() {
    init_dist_es57();
    ({ writeFile } = fsPromises5);
    writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = getSSOTokenFilepath(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
  }
});
var lastRefreshAttemptTime;
var fromSso;
var init_fromSso = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js"() {
    init_dist_es15();
    init_dist_es57();
    init_constants12();
    init_getNewSsoOidcToken();
    init_validateTokenExpiry();
    init_validateTokenKey();
    init_writeSSOTokenToFile();
    lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    fromSso = (_init = {}) => async ({ callerClientConfig } = {}) => {
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      init.logger?.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await parseKnownFiles(init);
      const profileName = getProfileName({
        profile: init.profile ?? callerClientConfig?.profile
      });
      const profile = profiles[profileName];
      if (!profile) {
        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await loadSsoSessionData(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await getSSOTokenFromFile(ssoSessionName);
      } catch (e5) {
        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error2) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error2) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    };
  }
});
var init_fromStatic4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js"() {
  }
});
var init_nodeProvider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js"() {
  }
});
var init_dist_es115 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/token-providers/dist-es/index.js"() {
    init_fromEnvSigningName();
    init_fromSso();
    init_fromStatic4();
    init_nodeProvider();
  }
});
function createAwsAuthSigv4HttpAuthOption3(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "awsssoportal",
      region: authParameters.region
    },
    propertiesExtractor: (config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption2(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSSOHttpAuthSchemeParametersProvider;
var defaultSSOHttpAuthSchemeProvider;
var resolveHttpAuthSchemeConfig3;
var init_httpAuthSchemeProvider3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthSchemeProvider.js"() {
    init_dist_es25();
    init_dist_es5();
    defaultSSOHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption3(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig3 = (config2) => {
      const config_0 = resolveAwsSdkSigV4Config(config2);
      return Object.assign(config_0, {
        authSchemePreference: normalizeProvider(config2.authSchemePreference ?? [])
      });
    };
  }
});
var resolveClientEndpointParameters3;
var commonParams3;
var init_EndpointParameters3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters3 = (options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      });
    };
    commonParams3 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});
var package_default3;
var init_package3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/package.json"() {
    package_default3 = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.887.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.887.0",
        "@aws-sdk/middleware-host-header": "3.887.0",
        "@aws-sdk/middleware-logger": "3.887.0",
        "@aws-sdk/middleware-recursion-detection": "3.887.0",
        "@aws-sdk/middleware-user-agent": "3.887.0",
        "@aws-sdk/region-config-resolver": "3.887.0",
        "@aws-sdk/types": "3.887.0",
        "@aws-sdk/util-endpoints": "3.887.0",
        "@aws-sdk/util-user-agent-browser": "3.887.0",
        "@aws-sdk/util-user-agent-node": "3.887.0",
        "@smithy/config-resolver": "^4.2.1",
        "@smithy/core": "^3.11.0",
        "@smithy/fetch-http-handler": "^5.2.1",
        "@smithy/hash-node": "^4.1.1",
        "@smithy/invalid-dependency": "^4.1.1",
        "@smithy/middleware-content-length": "^4.1.1",
        "@smithy/middleware-endpoint": "^4.2.1",
        "@smithy/middleware-retry": "^4.2.1",
        "@smithy/middleware-serde": "^4.1.1",
        "@smithy/middleware-stack": "^4.1.1",
        "@smithy/node-config-provider": "^4.2.1",
        "@smithy/node-http-handler": "^4.2.1",
        "@smithy/protocol-http": "^5.2.1",
        "@smithy/smithy-client": "^4.6.1",
        "@smithy/types": "^4.5.0",
        "@smithy/url-parser": "^4.1.1",
        "@smithy/util-base64": "^4.1.0",
        "@smithy/util-body-length-browser": "^4.1.0",
        "@smithy/util-body-length-node": "^4.1.0",
        "@smithy/util-defaults-mode-browser": "^4.1.1",
        "@smithy/util-defaults-mode-node": "^4.1.1",
        "@smithy/util-endpoints": "^3.1.1",
        "@smithy/util-middleware": "^4.1.1",
        "@smithy/util-retry": "^4.1.1",
        "@smithy/util-utf8": "^4.1.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node18": "18.2.4",
        "@types/node": "^18.19.69",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.8.3"
      },
      engines: {
        node: ">=18.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});
var crtAvailability2;
var init_crt_availability2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js"() {
    crtAvailability2 = {
      isCrtAvailable: false
    };
  }
});
var isCrtAvailable2;
var init_is_crt_available2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js"() {
    init_crt_availability2();
    isCrtAvailable2 = () => {
      if (crtAvailability2.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    };
  }
});
var createDefaultUserAgentProvider2;
var init_defaultUserAgent2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-user-agent-node/dist-es/defaultUserAgent.js"() {
    init_is_crt_available2();
    init_crt_availability2();
    createDefaultUserAgentProvider2 = ({ serviceId, clientVersion }) => {
      return async (config2) => {
        const sections = [
          ["aws-sdk-js", clientVersion],
          ["ua", "2.1"],
          [`os/${platform2()}`, release2()],
          ["lang/js"],
          ["md/nodejs", `${versions2.node}`]
        ];
        const crtAvailable = isCrtAvailable2();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (env2.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${env2.AWS_EXECUTION_ENV}`]);
        }
        const appId = await config2?.userAgentAppId?.();
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    };
  }
});
var UA_APP_ID_ENV_NAME2;
var UA_APP_ID_INI_NAME2;
var UA_APP_ID_INI_NAME_DEPRECATED2;
var NODE_APP_ID_CONFIG_OPTIONS2;
var init_nodeAppIdConfigOptions2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-user-agent-node/dist-es/nodeAppIdConfigOptions.js"() {
    init_dist_es53();
    UA_APP_ID_ENV_NAME2 = "AWS_SDK_UA_APP_ID";
    UA_APP_ID_INI_NAME2 = "sdk_ua_app_id";
    UA_APP_ID_INI_NAME_DEPRECATED2 = "sdk-ua-app-id";
    NODE_APP_ID_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => env3[UA_APP_ID_ENV_NAME2],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME2] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED2],
      default: DEFAULT_UA_APP_ID
    };
  }
});
var init_dist_es116 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js"() {
    init_defaultUserAgent2();
    init_nodeAppIdConfigOptions2();
  }
});
var fromArrayBuffer9;
var fromString9;
var init_dist_es117 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/hash-node/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer9 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer15.from(input, offset, length);
    };
    fromString9 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer15.from(input, encoding) : Buffer15.from(input);
    };
  }
});
var fromArrayBuffer10;
var fromString10;
var init_dist_es118 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-utf8/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer10 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer16.from(input, offset, length);
    };
    fromString10 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer16.from(input, encoding) : Buffer16.from(input);
    };
  }
});
var fromUtf811;
var init_fromUtf89 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es118();
    fromUtf811 = (input) => {
      const buf = fromString10(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var toUint8Array4;
var init_toUint8Array9 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf89();
    toUint8Array4 = (data) => {
      if (typeof data === "string") {
        return fromUtf811(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});
var toUtf85;
var init_toUtf89 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    init_dist_es118();
    toUtf85 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer10(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});
var init_dist_es119 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf89();
    init_toUint8Array9();
    init_toUtf89();
  }
});
function castSourceData2(toCast, encoding) {
  if (Buffer17.isBuffer(toCast)) {
    return toCast;
  }
  if (typeof toCast === "string") {
    return fromString9(toCast, encoding);
  }
  if (ArrayBuffer.isView(toCast)) {
    return fromArrayBuffer9(toCast.buffer, toCast.byteOffset, toCast.byteLength);
  }
  return fromArrayBuffer9(toCast);
}
var Hash2;
var init_dist_es120 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/hash-node/dist-es/index.js"() {
    init_dist_es117();
    init_dist_es119();
    Hash2 = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(toUint8Array4(castSourceData2(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? createHmac2(this.algorithmIdentifier, castSourceData2(this.secret)) : createHash3(this.algorithmIdentifier);
      }
    };
  }
});
var escapeUri4;
var hexEncode4;
var init_escape_uri4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    escapeUri4 = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode4);
    hexEncode4 = (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});
var init_escape_uri_path4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
  }
});
var init_dist_es121 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    init_escape_uri4();
    init_escape_uri_path4();
  }
});
function buildQueryString3(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri4(key);
    if (Array.isArray(value)) {
      for (let i5 = 0, iLen = value.length; i5 < iLen; i5++) {
        parts.push(`${key}=${escapeUri4(value[i5])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri4(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
var init_dist_es122 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    init_dist_es121();
  }
});
var NODEJS_TIMEOUT_ERROR_CODES5;
var init_constants19 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/constants.js"() {
    NODEJS_TIMEOUT_ERROR_CODES5 = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});
var getTransformedHeaders3;
var init_get_transformed_headers3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js"() {
    getTransformedHeaders3 = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
  }
});
var timing3;
var init_timing3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/timing.js"() {
    timing3 = {
      setTimeout: (cb2, ms) => setTimeout(cb2, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
  }
});
var DEFER_EVENT_LISTENER_TIME7;
var setConnectionTimeout3;
var init_set_connection_timeout3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js"() {
    init_timing3();
    DEFER_EVENT_LISTENER_TIME7 = 1e3;
    setConnectionTimeout3 = (request3, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = (offset) => {
        const timeoutId = timing3.setTimeout(() => {
          request3.destroy();
          reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
          }));
        }, timeoutInMs - offset);
        const doWithSocket = (socket) => {
          if (socket?.connecting) {
            socket.on("connect", () => {
              timing3.clearTimeout(timeoutId);
            });
          } else {
            timing3.clearTimeout(timeoutId);
          }
        };
        if (request3.socket) {
          doWithSocket(request3.socket);
        } else {
          request3.on("socket", doWithSocket);
        }
      };
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing3.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME7), DEFER_EVENT_LISTENER_TIME7);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME8;
var setSocketKeepAlive3;
var init_set_socket_keep_alive3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js"() {
    init_timing3();
    DEFER_EVENT_LISTENER_TIME8 = 3e3;
    setSocketKeepAlive3 = (request3, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME8) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = () => {
        if (request3.socket) {
          request3.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request3.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      };
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing3.setTimeout(registerListener, deferTimeMs);
    };
  }
});
var DEFER_EVENT_LISTENER_TIME9;
var setSocketTimeout3;
var init_set_socket_timeout3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js"() {
    init_node_http_handler3();
    init_timing3();
    DEFER_EVENT_LISTENER_TIME9 = 3e3;
    setSocketTimeout3 = (request3, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT3) => {
      const registerTimeout = (offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = () => {
          request3.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        };
        if (request3.socket) {
          request3.socket.setTimeout(timeout, onTimeout);
          request3.on("close", () => request3.socket?.removeListener("timeout", onTimeout));
        } else {
          request3.setTimeout(timeout, onTimeout);
        }
      };
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing3.setTimeout(registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME9), DEFER_EVENT_LISTENER_TIME9);
    };
  }
});
async function writeRequestBody3(httpRequest3, request3, maxContinueTimeoutMs = MIN_WAIT_TIME3) {
  const headers = request3.headers ?? {};
  const expect = headers["Expect"] || headers["expect"];
  let timeoutId = -1;
  let sendBody = true;
  if (expect === "100-continue") {
    sendBody = await Promise.race([
      new Promise((resolve) => {
        timeoutId = Number(timing3.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME3, maxContinueTimeoutMs)));
      }),
      new Promise((resolve) => {
        httpRequest3.on("continue", () => {
          timing3.clearTimeout(timeoutId);
          resolve(true);
        });
        httpRequest3.on("response", () => {
          timing3.clearTimeout(timeoutId);
          resolve(false);
        });
        httpRequest3.on("error", () => {
          timing3.clearTimeout(timeoutId);
          resolve(false);
        });
      })
    ]);
  }
  if (sendBody) {
    writeBody3(httpRequest3, request3.body);
  }
}
function writeBody3(httpRequest3, body) {
  if (body instanceof Readable8) {
    body.pipe(httpRequest3);
    return;
  }
  if (body) {
    if (Buffer.isBuffer(body) || typeof body === "string") {
      httpRequest3.end(body);
      return;
    }
    const uint8 = body;
    if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
      httpRequest3.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
      return;
    }
    httpRequest3.end(Buffer.from(body));
    return;
  }
  httpRequest3.end();
}
var MIN_WAIT_TIME3;
var init_write_request_body3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js"() {
    init_timing3();
    MIN_WAIT_TIME3 = 6e3;
  }
});
var DEFAULT_REQUEST_TIMEOUT3;
var NodeHttpHandler3;
var init_node_http_handler3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js"() {
    init_dist_es38();
    init_dist_es122();
    init_constants19();
    init_get_transformed_headers3();
    init_set_connection_timeout3();
    init_set_socket_keep_alive3();
    init_set_socket_timeout3();
    init_timing3();
    init_write_request_body3();
    DEFAULT_REQUEST_TIMEOUT3 = 0;
    NodeHttpHandler3 = class _NodeHttpHandler {
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler(instanceOrOptions);
      }
      static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = sockets[origin]?.length ?? 0;
            const requestsEnqueued = requests[origin]?.length ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              logger2?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`);
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          socketAcquisitionWarningTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof hAgent3 || typeof httpAgent?.destroy === "function") {
              return httpAgent;
            }
            return new hAgent3({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof hsAgent3 || typeof httpsAgent?.destroy === "function") {
              return httpsAgent;
            }
            return new hsAgent3({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
      }
      async handle(request3, { abortSignal, requestTimeout } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing3.clearTimeout);
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing3.clearTimeout);
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request3.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(timing3.setTimeout(() => {
            this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp, this.config.logger);
          }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)));
          const queryString = buildQueryString3(request3.query || {});
          let auth = void 0;
          if (request3.username != null || request3.password != null) {
            const username = request3.username ?? "";
            const password = request3.password ?? "";
            auth = `${username}:${password}`;
          }
          let path4 = request3.path;
          if (queryString) {
            path4 += `?${queryString}`;
          }
          if (request3.fragment) {
            path4 += `#${request3.fragment}`;
          }
          let hostname = request3.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request3.hostname.slice(1, -1);
          } else {
            hostname = request3.hostname;
          }
          const nodeHttpsOptions = {
            headers: request3.headers,
            host: hostname,
            method: request3.method,
            path: path4,
            port: request3.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? hsRequest3 : hRequest3;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new HttpResponse2({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders3(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES5.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          if (abortSignal) {
            const onAbort = () => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          const effectiveRequestTimeout = requestTimeout ?? this.config.requestTimeout;
          timeouts.push(setConnectionTimeout3(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout3(req, reject, effectiveRequestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(setSocketKeepAlive3(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            }));
          }
          writeRequestBodyPromise = writeRequestBody3(req, request3, effectiveRequestTimeout).catch((e5) => {
            timeouts.forEach(timing3.clearTimeout);
            return _reject(e5);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return {
            ...config2,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
  }
});
var init_node_http2_handler3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js"() {
  }
});
var Collector4;
var init_collector3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js"() {
    Collector4 = class extends Writable5 {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
  }
});
async function collectReadableStream3(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
var streamCollector4;
var isReadableStreamInstance3;
var init_stream_collector4 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js"() {
    init_collector3();
    streamCollector4 = (stream) => {
      if (isReadableStreamInstance3(stream)) {
        return collectReadableStream3(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector4();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    };
    isReadableStreamInstance3 = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});
var init_dist_es123 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/node-http-handler/dist-es/index.js"() {
    init_node_http_handler3();
    init_node_http2_handler3();
    init_stream_collector4();
  }
});
var calculateBodyLength2;
var init_calculateBodyLength2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js"() {
    calculateBodyLength2 = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return lstatSync2(body.path).size;
      } else if (typeof body.fd === "number") {
        return fstatSync2(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
  }
});
var init_dist_es124 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-body-length-node/dist-es/index.js"() {
    init_calculateBodyLength2();
  }
});
var fromArrayBuffer11;
var fromString11;
var init_dist_es125 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-base64/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer11 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer18.from(input, offset, length);
    };
    fromString11 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer18.from(input, encoding) : Buffer18.from(input);
    };
  }
});
var BASE64_REGEX4;
var fromBase644;
var init_fromBase645 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    init_dist_es125();
    BASE64_REGEX4 = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase644 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX4.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString11(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});
var toBase645;
var init_toBase645 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    init_dist_es125();
    init_dist_es119();
    toBase645 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf811(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer11(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});
var init_dist_es126 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-base64/dist-es/index.js"() {
    init_fromBase645();
    init_toBase645();
  }
});
var u3;
var v3;
var w3;
var x3;
var a3;
var b3;
var c3;
var d3;
var e3;
var f3;
var g3;
var h3;
var i3;
var j3;
var k3;
var l3;
var m3;
var n3;
var o3;
var p3;
var q3;
var r3;
var s3;
var t3;
var _data3;
var ruleSet3;
var init_ruleset3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js"() {
    u3 = "required";
    v3 = "fn";
    w3 = "argv";
    x3 = "ref";
    a3 = true;
    b3 = "isSet";
    c3 = "booleanEquals";
    d3 = "error";
    e3 = "endpoint";
    f3 = "tree";
    g3 = "PartitionResult";
    h3 = "getAttr";
    i3 = { [u3]: false, "type": "String" };
    j3 = { [u3]: true, "default": false, "type": "Boolean" };
    k3 = { [x3]: "Endpoint" };
    l3 = { [v3]: c3, [w3]: [{ [x3]: "UseFIPS" }, true] };
    m3 = { [v3]: c3, [w3]: [{ [x3]: "UseDualStack" }, true] };
    n3 = {};
    o3 = { [v3]: h3, [w3]: [{ [x3]: g3 }, "supportsFIPS"] };
    p3 = { [x3]: g3 };
    q3 = { [v3]: c3, [w3]: [true, { [v3]: h3, [w3]: [p3, "supportsDualStack"] }] };
    r3 = [l3];
    s3 = [m3];
    t3 = [{ [x3]: "Region" }];
    _data3 = { version: "1.0", parameters: { Region: i3, UseDualStack: j3, UseFIPS: j3, Endpoint: i3 }, rules: [{ conditions: [{ [v3]: b3, [w3]: [k3] }], rules: [{ conditions: r3, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d3 }, { conditions: s3, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d3 }, { endpoint: { url: k3, properties: n3, headers: n3 }, type: e3 }], type: f3 }, { conditions: [{ [v3]: b3, [w3]: t3 }], rules: [{ conditions: [{ [v3]: "aws.partition", [w3]: t3, assign: g3 }], rules: [{ conditions: [l3, m3], rules: [{ conditions: [{ [v3]: c3, [w3]: [a3, o3] }, q3], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d3 }], type: f3 }, { conditions: r3, rules: [{ conditions: [{ [v3]: c3, [w3]: [o3, a3] }], rules: [{ conditions: [{ [v3]: "stringEquals", [w3]: [{ [v3]: h3, [w3]: [p3, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n3, headers: n3 }, type: e3 }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "FIPS is enabled but this partition does not support FIPS", type: d3 }], type: f3 }, { conditions: s3, rules: [{ conditions: [q3], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "DualStack is enabled but this partition does not support DualStack", type: d3 }], type: f3 }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }], type: f3 }, { error: "Invalid Configuration: Missing Region", type: d3 }] };
    ruleSet3 = _data3;
  }
});
var cache3;
var defaultEndpointResolver3;
var init_endpointResolver3 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js"() {
    init_dist_es52();
    init_dist_es49();
    init_ruleset3();
    cache3 = new EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    defaultEndpointResolver3 = (endpointParams, context = {}) => {
      return cache3.get(endpointParams, () => resolveEndpoint(ruleSet3, {
        endpointParams,
        logger: context.logger
      }));
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});
var getRuntimeConfig3;
var init_runtimeConfig_shared2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js"() {
    init_dist_es25();
    init_dist_es14();
    init_dist_es64();
    init_dist_es51();
    init_dist_es126();
    init_dist_es119();
    init_httpAuthSchemeProvider3();
    init_endpointResolver3();
    getRuntimeConfig3 = (config2) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config2?.base64Decoder ?? fromBase644,
        base64Encoder: config2?.base64Encoder ?? toBase645,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? defaultEndpointResolver3,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new NoOpLogger2(),
        serviceId: config2?.serviceId ?? "SSO",
        urlParser: config2?.urlParser ?? parseUrl,
        utf8Decoder: config2?.utf8Decoder ?? fromUtf811,
        utf8Encoder: config2?.utf8Encoder ?? toUtf85
      };
    };
  }
});
var AWS_EXECUTION_ENV2;
var AWS_REGION_ENV2;
var AWS_DEFAULT_REGION_ENV2;
var ENV_IMDS_DISABLED3;
var DEFAULTS_MODE_OPTIONS2;
var IMDS_REGION_PATH2;
var init_constants20 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js"() {
    AWS_EXECUTION_ENV2 = "AWS_EXECUTION_ENV";
    AWS_REGION_ENV2 = "AWS_REGION";
    AWS_DEFAULT_REGION_ENV2 = "AWS_DEFAULT_REGION";
    ENV_IMDS_DISABLED3 = "AWS_EC2_METADATA_DISABLED";
    DEFAULTS_MODE_OPTIONS2 = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    IMDS_REGION_PATH2 = "/latest/meta-data/placement/region";
  }
});
var AWS_DEFAULTS_MODE_ENV2;
var AWS_DEFAULTS_MODE_CONFIG2;
var NODE_DEFAULTS_MODE_CONFIG_OPTIONS2;
var init_defaultsModeConfig2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js"() {
    AWS_DEFAULTS_MODE_ENV2 = "AWS_DEFAULTS_MODE";
    AWS_DEFAULTS_MODE_CONFIG2 = "defaults_mode";
    NODE_DEFAULTS_MODE_CONFIG_OPTIONS2 = {
      environmentVariableSelector: (env3) => {
        return env3[AWS_DEFAULTS_MODE_ENV2];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG2];
      },
      default: "legacy"
    };
  }
});
var resolveDefaultsModeConfig2;
var resolveNodeDefaultsModeAuto2;
var inferPhysicalRegion2;
var init_resolveDefaultsModeConfig2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js"() {
    init_dist_es54();
    init_dist_es58();
    init_dist_es15();
    init_constants20();
    init_defaultsModeConfig2();
    resolveDefaultsModeConfig2 = ({ region = loadConfig2(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig2(NODE_DEFAULTS_MODE_CONFIG_OPTIONS2) } = {}) => memoize(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode?.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto2(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode?.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS2.join(", ")}, got ${mode}`);
      }
    });
    resolveNodeDefaultsModeAuto2 = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion2();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    inferPhysicalRegion2 = async () => {
      if (process.env[AWS_EXECUTION_ENV2] && (process.env[AWS_REGION_ENV2] || process.env[AWS_DEFAULT_REGION_ENV2])) {
        return process.env[AWS_REGION_ENV2] ?? process.env[AWS_DEFAULT_REGION_ENV2];
      }
      if (!process.env[ENV_IMDS_DISABLED3]) {
        try {
          const { getInstanceMetadataEndpoint: getInstanceMetadataEndpoint3, httpRequest: httpRequest3 } = await Promise.resolve().then(() => (init_dist_es69(), dist_es_exports2));
          const endpoint = await getInstanceMetadataEndpoint3();
          return (await httpRequest3({ ...endpoint, path: IMDS_REGION_PATH2 })).toString();
        } catch (e5) {
        }
      }
    };
  }
});
var init_dist_es127 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js"() {
    init_resolveDefaultsModeConfig2();
  }
});
var getRuntimeConfig4;
var init_runtimeConfig2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js"() {
    init_package3();
    init_dist_es25();
    init_dist_es116();
    init_dist_es54();
    init_dist_es120();
    init_dist_es65();
    init_dist_es58();
    init_dist_es123();
    init_dist_es124();
    init_dist_es62();
    init_runtimeConfig_shared2();
    init_dist_es64();
    init_dist_es127();
    init_dist_es64();
    getRuntimeConfig4 = (config2) => {
      emitWarningIfUnsupportedVersion2(process.version);
      const defaultsMode = resolveDefaultsModeConfig2(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig3(config2);
      emitWarningIfUnsupportedVersion(process.version);
      const loaderConfig = {
        profile: config2?.profile,
        logger: clientSharedValues.logger
      };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config2?.authSchemePreference ?? loadConfig2(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config2?.bodyLengthChecker ?? calculateBodyLength2,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? createDefaultUserAgentProvider2({ serviceId: clientSharedValues.serviceId, clientVersion: package_default3.version }),
        maxAttempts: config2?.maxAttempts ?? loadConfig2(NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        region: config2?.region ?? loadConfig2(NODE_REGION_CONFIG_OPTIONS, { ...NODE_REGION_CONFIG_FILE_OPTIONS, ...loaderConfig }),
        requestHandler: NodeHttpHandler3.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? loadConfig2({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }, config2),
        sha256: config2?.sha256 ?? Hash2.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? streamCollector4,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? loadConfig2(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? loadConfig2(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        userAgentAppId: config2?.userAgentAppId ?? loadConfig2(NODE_APP_ID_CONFIG_OPTIONS2, loaderConfig)
      };
    };
  }
});
var getHttpAuthExtensionConfiguration2;
var resolveHttpAuthRuntimeConfig2;
var init_httpAuthExtensionConfiguration2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration2 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig2 = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
  }
});
var resolveRuntimeExtensions2;
var init_runtimeExtensions2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js"() {
    init_dist_es114();
    init_dist_es38();
    init_dist_es64();
    init_httpAuthExtensionConfiguration2();
    resolveRuntimeExtensions2 = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration2(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig2(extensionConfiguration));
    };
  }
});
var SSOClient;
var init_SSOClient = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js"() {
    init_dist_es39();
    init_dist_es40();
    init_dist_es41();
    init_dist_es53();
    init_dist_es54();
    init_dist_es14();
    init_dist_es56();
    init_dist_es60();
    init_dist_es65();
    init_dist_es64();
    init_httpAuthSchemeProvider3();
    init_EndpointParameters3();
    init_runtimeConfig2();
    init_runtimeExtensions2();
    SSOClient = class extends Client {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig4(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters3(_config_0);
        const _config_2 = resolveUserAgentConfig(_config_1);
        const _config_3 = resolveRetryConfig(_config_2);
        const _config_4 = resolveRegionConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveEndpointConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig3(_config_6);
        const _config_8 = resolveRuntimeExtensions2(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultSSOHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});
var SSOServiceException;
var init_SSOServiceException = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js"() {
    init_dist_es64();
    SSOServiceException = class _SSOServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
  }
});
var InvalidRequestException2;
var ResourceNotFoundException;
var TooManyRequestsException;
var UnauthorizedException;
var GetRoleCredentialsRequestFilterSensitiveLog;
var RoleCredentialsFilterSensitiveLog;
var GetRoleCredentialsResponseFilterSensitiveLog;
var ListAccountRolesRequestFilterSensitiveLog;
var ListAccountsRequestFilterSensitiveLog;
var LogoutRequestFilterSensitiveLog;
var init_models_03 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js"() {
    init_dist_es64();
    init_SSOServiceException();
    InvalidRequestException2 = class _InvalidRequestException extends SSOServiceException {
      name = "InvalidRequestException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException {
      name = "ResourceNotFoundException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException {
      name = "TooManyRequestsException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    UnauthorizedException = class _UnauthorizedException extends SSOServiceException {
      name = "UnauthorizedException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING2 }
    });
    RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: SENSITIVE_STRING2 },
      ...obj.sessionToken && { sessionToken: SENSITIVE_STRING2 }
    });
    GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    });
    ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING2 }
    });
    ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING2 }
    });
    LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING2 }
    });
  }
});
var se_GetRoleCredentialsCommand;
var se_ListAccountRolesCommand;
var se_ListAccountsCommand;
var se_LogoutCommand;
var de_GetRoleCredentialsCommand;
var de_ListAccountRolesCommand;
var de_ListAccountsCommand;
var de_LogoutCommand;
var de_CommandError3;
var throwDefaultError5;
var de_InvalidRequestExceptionRes2;
var de_ResourceNotFoundExceptionRes;
var de_TooManyRequestsExceptionRes;
var de_UnauthorizedExceptionRes;
var deserializeMetadata5;
var _aI;
var _aT;
var _ai;
var _mR;
var _mr;
var _nT;
var _nt;
var _rN;
var _rn;
var _xasbt;
var init_Aws_restJson12 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js"() {
    init_dist_es25();
    init_dist_es14();
    init_dist_es64();
    init_models_03();
    init_SSOServiceException();
    se_GetRoleCredentialsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b5.bp("/federation/credentials");
      const query = map({
        [_rn]: [, expectNonNull(input[_rN], `roleName`)],
        [_ai]: [, expectNonNull(input[_aI], `accountId`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListAccountRolesCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b5.bp("/assignment/roles");
      const query = map({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, expectNonNull(input[_aI], `accountId`)]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_ListAccountsCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b5.bp("/assignment/accounts");
      const query = map({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b5.m("GET").h(headers).q(query).b(body);
      return b5.build();
    };
    se_LogoutCommand = async (input, context) => {
      const b5 = requestBuilder(input, context);
      const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b5.bp("/logout");
      let body;
      b5.m("POST").h(headers).b(body);
      return b5.build();
    };
    de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        roleCredentials: _json
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        nextToken: expectString,
        roleList: _json
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        accountList: _json,
        nextToken: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CommandError3 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError5 = withBaseException(SSOServiceException);
    de_InvalidRequestExceptionRes2 = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException2({
        $metadata: deserializeMetadata5(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    deserializeMetadata5 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    _aI = "accountId";
    _aT = "accessToken";
    _ai = "account_id";
    _mR = "maxResults";
    _mr = "max_result";
    _nT = "nextToken";
    _nt = "next_token";
    _rN = "roleName";
    _rn = "role_name";
    _xasbt = "x-amz-sso_bearer_token";
  }
});
var GetRoleCredentialsCommand;
var init_GetRoleCredentialsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters3();
    init_models_03();
    init_Aws_restJson12();
    GetRoleCredentialsCommand = class extends Command.classBuilder().ep(commonParams3).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
  }
});
var ListAccountRolesCommand;
var init_ListAccountRolesCommand = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountRolesCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters3();
    init_models_03();
    init_Aws_restJson12();
    ListAccountRolesCommand = class extends Command.classBuilder().ep(commonParams3).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
  }
});
var ListAccountsCommand;
var init_ListAccountsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountsCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters3();
    init_models_03();
    init_Aws_restJson12();
    ListAccountsCommand = class extends Command.classBuilder().ep(commonParams3).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
  }
});
var LogoutCommand;
var init_LogoutCommand = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/commands/LogoutCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters3();
    init_models_03();
    init_Aws_restJson12();
    LogoutCommand = class extends Command.classBuilder().ep(commonParams3).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
  }
});
var commands2;
var SSO;
var init_SSO = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/SSO.js"() {
    init_dist_es64();
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
    init_SSOClient();
    commands2 = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    SSO = class extends SSOClient {
    };
    createAggregatedClient(commands2, SSO);
  }
});
var init_commands2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/commands/index.js"() {
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
  }
});
var init_Interfaces = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/pagination/Interfaces.js"() {
  }
});
var paginateListAccountRoles;
var init_ListAccountRolesPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js"() {
    init_dist_es14();
    init_ListAccountRolesCommand();
    init_SSOClient();
    paginateListAccountRoles = createPaginator(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
  }
});
var paginateListAccounts;
var init_ListAccountsPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountsPaginator.js"() {
    init_dist_es14();
    init_ListAccountsCommand();
    init_SSOClient();
    paginateListAccounts = createPaginator(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});
var init_pagination5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/pagination/index.js"() {
    init_Interfaces();
    init_ListAccountRolesPaginator();
    init_ListAccountsPaginator();
  }
});
var init_models2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/models/index.js"() {
    init_models_03();
  }
});
var init_dist_es128 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/client-sso/dist-es/index.js"() {
    init_SSOClient();
    init_SSO();
    init_commands2();
    init_pagination5();
    init_models2();
  }
});
var loadSso_exports = {};
__export2(loadSso_exports, {
  GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
  SSOClient: () => SSOClient
});
var init_loadSso = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/loadSso.js"() {
    init_dist_es128();
  }
});
var SHOULD_FAIL_CREDENTIAL_CHAIN;
var resolveSSOCredentials;
var init_resolveSSOCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js"() {
    init_client();
    init_dist_es115();
    init_dist_es15();
    init_dist_es57();
    SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger: logger2 }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await fromSso({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e5) {
          throw new CredentialsProviderError(e5.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      } else {
        try {
          token = await getSSOTokenFromFile(ssoStartUrl);
        } catch (e5) {
          throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(Object.assign({}, clientConfig ?? {}, {
        logger: clientConfig?.logger ?? parentClientConfig?.logger,
        region: clientConfig?.region ?? ssoRegion
      }));
      let ssoResp;
      try {
        ssoResp = await sso.send(new GetRoleCredentialsCommand2({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e5) {
        throw new CredentialsProviderError(e5, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const credentials = {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      if (ssoSession) {
        setCredentialFeature(credentials, "CREDENTIALS_SSO", "s");
      } else {
        setCredentialFeature(credentials, "CREDENTIALS_SSO_LEGACY", "u");
      }
      return credentials;
    };
  }
});
var validateSsoProfile;
var init_validateSsoProfile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js"() {
    init_dist_es15();
    validateSsoProfile = (profile, logger2) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger: logger2 });
      }
      return profile;
    };
  }
});
var fromSSO;
var init_fromSSO = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"() {
    init_dist_es15();
    init_dist_es57();
    init_isSsoProfile();
    init_resolveSSOCredentials();
    init_validateSsoProfile();
    fromSSO = (init = {}) => async ({ callerClientConfig } = {}) => {
      init.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = getProfileName({
        profile: init.profile ?? callerClientConfig?.profile
      });
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await parseKnownFiles(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile?.sso_session) {
          const ssoSessions = await loadSsoSessionData(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"', { tryNextLink: false, logger: init.logger });
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      }
    };
  }
});
var init_types23 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js"() {
  }
});
var dist_es_exports5 = {};
__export2(dist_es_exports5, {
  fromSSO: () => fromSSO,
  isSsoProfile: () => isSsoProfile,
  validateSsoProfile: () => validateSsoProfile
});
var init_dist_es129 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"() {
    init_fromSSO();
    init_isSsoProfile();
    init_types23();
    init_validateSsoProfile();
  }
});
var resolveCredentialSource;
var setNamedProvider;
var init_resolveCredentialSource = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js"() {
    init_client();
    init_dist_es15();
    resolveCredentialSource = (credentialSource, profileName, logger2) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp: fromHttp2 } = await Promise.resolve().then(() => (init_dist_es80(), dist_es_exports3));
          const { fromContainerMetadata: fromContainerMetadata3 } = await Promise.resolve().then(() => (init_dist_es69(), dist_es_exports2));
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return async () => chain(fromHttp2(options ?? {}), fromContainerMetadata3(options))().then(setNamedProvider);
        },
        Ec2InstanceMetadata: async (options) => {
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata: fromInstanceMetadata3 } = await Promise.resolve().then(() => (init_dist_es69(), dist_es_exports2));
          return async () => fromInstanceMetadata3(options)().then(setNamedProvider);
        },
        Environment: async (options) => {
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv: fromEnv4 } = await Promise.resolve().then(() => (init_dist_es68(), dist_es_exports));
          return async () => fromEnv4(options)().then(setNamedProvider);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger: logger2 });
      }
    };
    setNamedProvider = (creds) => setCredentialFeature(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p");
  }
});
function createAwsAuthSigv4HttpAuthOption4(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sts",
      region: authParameters.region
    },
    propertiesExtractor: (config2, context) => ({
      signingProperties: {
        config: config2,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption3(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSTSHttpAuthSchemeParametersProvider;
var defaultSTSHttpAuthSchemeProvider;
var resolveStsAuthConfig;
var resolveHttpAuthSchemeConfig4;
var init_httpAuthSchemeProvider4 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthSchemeProvider.js"() {
    init_dist_es25();
    init_dist_es5();
    init_STSClient();
    defaultSTSHttpAuthSchemeParametersProvider = async (config2, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config2.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption4(authParameters));
        }
      }
      return options;
    };
    resolveStsAuthConfig = (input) => Object.assign(input, {
      stsClientCtor: STSClient
    });
    resolveHttpAuthSchemeConfig4 = (config2) => {
      const config_0 = resolveStsAuthConfig(config2);
      const config_1 = resolveAwsSdkSigV4Config(config_0);
      return Object.assign(config_1, {
        authSchemePreference: normalizeProvider(config2.authSchemePreference ?? [])
      });
    };
  }
});
var resolveClientEndpointParameters4;
var commonParams4;
var init_EndpointParameters4 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters4 = (options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      });
    };
    commonParams4 = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});
var F2;
var G2;
var H2;
var I2;
var J2;
var a4;
var b4;
var c4;
var d4;
var e4;
var f4;
var g4;
var h4;
var i4;
var j4;
var k4;
var l4;
var m4;
var n4;
var o4;
var p4;
var q4;
var r4;
var s4;
var t4;
var u4;
var v5;
var w4;
var x4;
var y2;
var z2;
var A2;
var B2;
var C2;
var D2;
var E2;
var _data4;
var ruleSet4;
var init_ruleset4 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/ruleset.js"() {
    F2 = "required";
    G2 = "type";
    H2 = "fn";
    I2 = "argv";
    J2 = "ref";
    a4 = false;
    b4 = true;
    c4 = "booleanEquals";
    d4 = "stringEquals";
    e4 = "sigv4";
    f4 = "sts";
    g4 = "us-east-1";
    h4 = "endpoint";
    i4 = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    j4 = "tree";
    k4 = "error";
    l4 = "getAttr";
    m4 = { [F2]: false, [G2]: "String" };
    n4 = { [F2]: true, "default": false, [G2]: "Boolean" };
    o4 = { [J2]: "Endpoint" };
    p4 = { [H2]: "isSet", [I2]: [{ [J2]: "Region" }] };
    q4 = { [J2]: "Region" };
    r4 = { [H2]: "aws.partition", [I2]: [q4], "assign": "PartitionResult" };
    s4 = { [J2]: "UseFIPS" };
    t4 = { [J2]: "UseDualStack" };
    u4 = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e4, "signingName": f4, "signingRegion": g4 }] }, "headers": {} };
    v5 = {};
    w4 = { "conditions": [{ [H2]: d4, [I2]: [q4, "aws-global"] }], [h4]: u4, [G2]: h4 };
    x4 = { [H2]: c4, [I2]: [s4, true] };
    y2 = { [H2]: c4, [I2]: [t4, true] };
    z2 = { [H2]: l4, [I2]: [{ [J2]: "PartitionResult" }, "supportsFIPS"] };
    A2 = { [J2]: "PartitionResult" };
    B2 = { [H2]: c4, [I2]: [true, { [H2]: l4, [I2]: [A2, "supportsDualStack"] }] };
    C2 = [{ [H2]: "isSet", [I2]: [o4] }];
    D2 = [x4];
    E2 = [y2];
    _data4 = { version: "1.0", parameters: { Region: m4, UseDualStack: n4, UseFIPS: n4, Endpoint: m4, UseGlobalEndpoint: n4 }, rules: [{ conditions: [{ [H2]: c4, [I2]: [{ [J2]: "UseGlobalEndpoint" }, b4] }, { [H2]: "not", [I2]: C2 }, p4, r4, { [H2]: c4, [I2]: [s4, a4] }, { [H2]: c4, [I2]: [t4, a4] }], rules: [{ conditions: [{ [H2]: d4, [I2]: [q4, "ap-northeast-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "ap-south-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "ap-southeast-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "ap-southeast-2"] }], endpoint: u4, [G2]: h4 }, w4, { conditions: [{ [H2]: d4, [I2]: [q4, "ca-central-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "eu-central-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "eu-north-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "eu-west-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "eu-west-2"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "eu-west-3"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "sa-east-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, g4] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "us-east-2"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "us-west-1"] }], endpoint: u4, [G2]: h4 }, { conditions: [{ [H2]: d4, [I2]: [q4, "us-west-2"] }], endpoint: u4, [G2]: h4 }, { endpoint: { url: i4, properties: { authSchemes: [{ name: e4, signingName: f4, signingRegion: "{Region}" }] }, headers: v5 }, [G2]: h4 }], [G2]: j4 }, { conditions: C2, rules: [{ conditions: D2, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G2]: k4 }, { conditions: E2, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G2]: k4 }, { endpoint: { url: o4, properties: v5, headers: v5 }, [G2]: h4 }], [G2]: j4 }, { conditions: [p4], rules: [{ conditions: [r4], rules: [{ conditions: [x4, y2], rules: [{ conditions: [{ [H2]: c4, [I2]: [b4, z2] }, B2], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v5, headers: v5 }, [G2]: h4 }], [G2]: j4 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G2]: k4 }], [G2]: j4 }, { conditions: D2, rules: [{ conditions: [{ [H2]: c4, [I2]: [z2, b4] }], rules: [{ conditions: [{ [H2]: d4, [I2]: [{ [H2]: l4, [I2]: [A2, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v5, headers: v5 }, [G2]: h4 }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v5, headers: v5 }, [G2]: h4 }], [G2]: j4 }, { error: "FIPS is enabled but this partition does not support FIPS", [G2]: k4 }], [G2]: j4 }, { conditions: E2, rules: [{ conditions: [B2], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v5, headers: v5 }, [G2]: h4 }], [G2]: j4 }, { error: "DualStack is enabled but this partition does not support DualStack", [G2]: k4 }], [G2]: j4 }, w4, { endpoint: { url: i4, properties: v5, headers: v5 }, [G2]: h4 }], [G2]: j4 }], [G2]: j4 }, { error: "Invalid Configuration: Missing Region", [G2]: k4 }] };
    ruleSet4 = _data4;
  }
});
var cache4;
var defaultEndpointResolver4;
var init_endpointResolver4 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/endpointResolver.js"() {
    init_dist_es88();
    init_dist_es49();
    init_ruleset4();
    cache4 = new EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
    });
    defaultEndpointResolver4 = (endpointParams, context = {}) => {
      return cache4.get(endpointParams, () => resolveEndpoint(ruleSet4, {
        endpointParams,
        logger: context.logger
      }));
    };
    customEndpointFunctions.aws = awsEndpointFunctions2;
  }
});
var getRuntimeConfig5;
var init_runtimeConfig_shared3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.shared.js"() {
    init_dist_es25();
    init_dist_es14();
    init_dist_es99();
    init_dist_es87();
    init_dist_es111();
    init_dist_es104();
    init_httpAuthSchemeProvider4();
    init_endpointResolver4();
    getRuntimeConfig5 = (config2) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config2?.base64Decoder ?? fromBase643,
        base64Encoder: config2?.base64Encoder ?? toBase644,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? defaultEndpointResolver4,
        extensions: config2?.extensions ?? [],
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config2?.logger ?? new NoOpLogger3(),
        serviceId: config2?.serviceId ?? "STS",
        urlParser: config2?.urlParser ?? parseUrl2,
        utf8Decoder: config2?.utf8Decoder ?? fromUtf810,
        utf8Encoder: config2?.utf8Encoder ?? toUtf84
      };
    };
  }
});
var getRuntimeConfig6;
var init_runtimeConfig3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.js"() {
    init_package2();
    init_dist_es25();
    init_dist_es101();
    init_dist_es90();
    init_dist_es14();
    init_dist_es105();
    init_dist_es100();
    init_dist_es93();
    init_dist_es108();
    init_dist_es109();
    init_dist_es97();
    init_runtimeConfig_shared3();
    init_dist_es99();
    init_dist_es113();
    init_dist_es99();
    getRuntimeConfig6 = (config2) => {
      emitWarningIfUnsupportedVersion3(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode2);
      const clientSharedValues = getRuntimeConfig5(config2);
      emitWarningIfUnsupportedVersion(process.version);
      const loaderConfig = {
        profile: config2?.profile,
        logger: clientSharedValues.logger
      };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config2?.authSchemePreference ?? loadConfig3(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config2?.bodyLengthChecker ?? calculateBodyLength,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }),
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await config2.credentialDefaultProvider(idProps?.__config || {})()),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        maxAttempts: config2?.maxAttempts ?? loadConfig3(NODE_MAX_ATTEMPT_CONFIG_OPTIONS2, config2),
        region: config2?.region ?? loadConfig3(NODE_REGION_CONFIG_OPTIONS2, { ...NODE_REGION_CONFIG_FILE_OPTIONS2, ...loaderConfig }),
        requestHandler: NodeHttpHandler2.create(config2?.requestHandler ?? defaultConfigProvider),
        retryMode: config2?.retryMode ?? loadConfig3({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS2,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE2
        }, config2),
        sha256: config2?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config2?.streamCollector ?? streamCollector3,
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? loadConfig3(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS2, loaderConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? loadConfig3(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS2, loaderConfig),
        userAgentAppId: config2?.userAgentAppId ?? loadConfig3(NODE_APP_ID_CONFIG_OPTIONS, loaderConfig)
      };
    };
  }
});
var getHttpAuthExtensionConfiguration3;
var resolveHttpAuthRuntimeConfig3;
var init_httpAuthExtensionConfiguration3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration3 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig3 = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
  }
});
var resolveRuntimeExtensions3;
var init_runtimeExtensions3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeExtensions.js"() {
    init_dist_es114();
    init_dist_es82();
    init_dist_es99();
    init_httpAuthExtensionConfiguration3();
    resolveRuntimeExtensions3 = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration2(runtimeConfig), getHttpHandlerExtensionConfiguration2(runtimeConfig), getHttpAuthExtensionConfiguration3(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig2(extensionConfiguration), resolveHttpHandlerRuntimeConfig2(extensionConfiguration), resolveHttpAuthRuntimeConfig3(extensionConfiguration));
    };
  }
});
var STSClient;
var init_STSClient = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STSClient.js"() {
    init_dist_es83();
    init_dist_es84();
    init_dist_es85();
    init_dist_es89();
    init_dist_es90();
    init_dist_es14();
    init_dist_es91();
    init_dist_es95();
    init_dist_es100();
    init_dist_es99();
    init_httpAuthSchemeProvider4();
    init_EndpointParameters4();
    init_runtimeConfig3();
    init_runtimeExtensions3();
    STSClient = class extends Client2 {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig6(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters4(_config_0);
        const _config_2 = resolveUserAgentConfig2(_config_1);
        const _config_3 = resolveRetryConfig2(_config_2);
        const _config_4 = resolveRegionConfig2(_config_3);
        const _config_5 = resolveHostHeaderConfig2(_config_4);
        const _config_6 = resolveEndpointConfig2(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig4(_config_6);
        const _config_8 = resolveRuntimeExtensions3(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(getUserAgentPlugin2(this.config));
        this.middlewareStack.use(getRetryPlugin2(this.config));
        this.middlewareStack.use(getContentLengthPlugin2(this.config));
        this.middlewareStack.use(getHostHeaderPlugin2(this.config));
        this.middlewareStack.use(getLoggerPlugin2(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin2(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultSTSHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});
var STSServiceException;
var init_STSServiceException = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/STSServiceException.js"() {
    init_dist_es99();
    STSServiceException = class _STSServiceException extends ServiceException2 {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
  }
});
var CredentialsFilterSensitiveLog;
var AssumeRoleResponseFilterSensitiveLog;
var ExpiredTokenException2;
var MalformedPolicyDocumentException;
var PackedPolicyTooLargeException;
var RegionDisabledException;
var IDPRejectedClaimException;
var InvalidIdentityTokenException;
var AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
var AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
var IDPCommunicationErrorException;
var init_models_04 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/models_0.js"() {
    init_dist_es99();
    init_STSServiceException();
    CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING4 }
    });
    AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    ExpiredTokenException2 = class _ExpiredTokenException extends STSServiceException {
      name = "ExpiredTokenException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
      name = "MalformedPolicyDocumentException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
      name = "PackedPolicyTooLargeException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    RegionDisabledException = class _RegionDisabledException extends STSServiceException {
      name = "RegionDisabledException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
      name = "IDPRejectedClaimException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
      name = "InvalidIdentityTokenException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: SENSITIVE_STRING4 }
    });
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
      name = "IDPCommunicationErrorException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
  }
});
var se_AssumeRoleCommand;
var se_AssumeRoleWithWebIdentityCommand;
var de_AssumeRoleCommand;
var de_AssumeRoleWithWebIdentityCommand;
var de_CommandError4;
var de_ExpiredTokenExceptionRes2;
var de_IDPCommunicationErrorExceptionRes;
var de_IDPRejectedClaimExceptionRes;
var de_InvalidIdentityTokenExceptionRes;
var de_MalformedPolicyDocumentExceptionRes;
var de_PackedPolicyTooLargeExceptionRes;
var de_RegionDisabledExceptionRes;
var se_AssumeRoleRequest;
var se_AssumeRoleWithWebIdentityRequest;
var se_policyDescriptorListType;
var se_PolicyDescriptorType;
var se_ProvidedContext;
var se_ProvidedContextsListType;
var se_Tag2;
var se_tagKeyListType;
var se_tagListType;
var de_AssumedRoleUser;
var de_AssumeRoleResponse;
var de_AssumeRoleWithWebIdentityResponse;
var de_Credentials;
var de_ExpiredTokenException;
var de_IDPCommunicationErrorException;
var de_IDPRejectedClaimException;
var de_InvalidIdentityTokenException;
var de_MalformedPolicyDocumentException;
var de_PackedPolicyTooLargeException;
var de_RegionDisabledException;
var deserializeMetadata6;
var throwDefaultError6;
var buildHttpRpcRequest;
var SHARED_HEADERS;
var _;
var _A2;
var _AKI2;
var _AR2;
var _ARI2;
var _ARU;
var _ARWWI;
var _Ar;
var _Au;
var _C2;
var _CA2;
var _DS;
var _E2;
var _EI;
var _K2;
var _P2;
var _PA;
var _PAr;
var _PC2;
var _PI2;
var _PPS;
var _Pr2;
var _RA;
var _RSN;
var _SAK2;
var _SFWIT;
var _SI;
var _SN;
var _ST2;
var _T2;
var _TC2;
var _TTK;
var _V2;
var _Va2;
var _WIT;
var _a2;
var _m2;
var buildFormUrlencodedString;
var loadQueryErrorCode;
var init_Aws_query = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/protocols/Aws_query.js"() {
    init_dist_es25();
    init_dist_es82();
    init_dist_es99();
    init_models_04();
    init_STSServiceException();
    se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A2]: _AR2,
        [_V2]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A2]: _ARWWI,
        [_V2]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata6(output),
        ...contents
      };
      return response;
    };
    de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata6(output),
        ...contents
      };
      return response;
    };
    de_CommandError4 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseXmlErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes2(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError6({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    de_ExpiredTokenExceptionRes2 = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException2({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata6(parsedOutput),
        ...deserialized
      });
      return decorateServiceException2(exception, body);
    };
    se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P2] != null) {
        entries[_P2] = input[_P2];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T2] != null) {
        const memberEntries = se_tagListType(input[_T2], context);
        if (input[_T2]?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (input[_TTK]?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC2] != null) {
        entries[_TC2] = input[_TC2];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC2] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC2], context);
        if (input[_PC2]?.length === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI2] != null) {
        entries[_PI2] = input[_PI2];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P2] != null) {
        entries[_P2] = input[_P2];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    };
    se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input[_a2] != null) {
        entries[_a2] = input[_a2];
      }
      return entries;
    };
    se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_CA2] != null) {
        entries[_CA2] = input[_CA2];
      }
      return entries;
    };
    se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_Tag2 = (input, context) => {
      const entries = {};
      if (input[_K2] != null) {
        entries[_K2] = input[_K2];
      }
      if (input[_Va2] != null) {
        entries[_Va2] = input[_Va2];
      }
      return entries;
    };
    se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag2(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output[_ARI2] != null) {
        contents[_ARI2] = expectString(output[_ARI2]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = expectString(output[_Ar]);
      }
      return contents;
    };
    de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output[_C2] != null) {
        contents[_C2] = de_Credentials(output[_C2], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = expectString(output[_SI]);
      }
      return contents;
    };
    de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output[_C2] != null) {
        contents[_C2] = de_Credentials(output[_C2], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = expectString(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      if (output[_Pr2] != null) {
        contents[_Pr2] = expectString(output[_Pr2]);
      }
      if (output[_Au] != null) {
        contents[_Au] = expectString(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = expectString(output[_SI]);
      }
      return contents;
    };
    de_Credentials = (output, context) => {
      const contents = {};
      if (output[_AKI2] != null) {
        contents[_AKI2] = expectString(output[_AKI2]);
      }
      if (output[_SAK2] != null) {
        contents[_SAK2] = expectString(output[_SAK2]);
      }
      if (output[_ST2] != null) {
        contents[_ST2] = expectString(output[_ST2]);
      }
      if (output[_E2] != null) {
        contents[_E2] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_E2]));
      }
      return contents;
    };
    de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output[_m2] != null) {
        contents[_m2] = expectString(output[_m2]);
      }
      return contents;
    };
    deserializeMetadata6 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    throwDefaultError6 = withBaseException2(STSServiceException);
    buildHttpRpcRequest = async (context, headers, path4, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path4 : basePath + path4,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new HttpRequest9(contents);
    };
    SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    _ = "2011-06-15";
    _A2 = "Action";
    _AKI2 = "AccessKeyId";
    _AR2 = "AssumeRole";
    _ARI2 = "AssumedRoleId";
    _ARU = "AssumedRoleUser";
    _ARWWI = "AssumeRoleWithWebIdentity";
    _Ar = "Arn";
    _Au = "Audience";
    _C2 = "Credentials";
    _CA2 = "ContextAssertion";
    _DS = "DurationSeconds";
    _E2 = "Expiration";
    _EI = "ExternalId";
    _K2 = "Key";
    _P2 = "Policy";
    _PA = "PolicyArns";
    _PAr = "ProviderArn";
    _PC2 = "ProvidedContexts";
    _PI2 = "ProviderId";
    _PPS = "PackedPolicySize";
    _Pr2 = "Provider";
    _RA = "RoleArn";
    _RSN = "RoleSessionName";
    _SAK2 = "SecretAccessKey";
    _SFWIT = "SubjectFromWebIdentityToken";
    _SI = "SourceIdentity";
    _SN = "SerialNumber";
    _ST2 = "SessionToken";
    _T2 = "Tags";
    _TC2 = "TokenCode";
    _TTK = "TransitiveTagKeys";
    _V2 = "Version";
    _Va2 = "Value";
    _WIT = "WebIdentityToken";
    _a2 = "arn";
    _m2 = "message";
    buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
    loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});
var AssumeRoleCommand;
var init_AssumeRoleCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleCommand.js"() {
    init_dist_es95();
    init_dist_es94();
    init_dist_es99();
    init_EndpointParameters4();
    init_models_04();
    init_Aws_query();
    AssumeRoleCommand = class extends Command2.classBuilder().ep(commonParams4).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin2(config2, this.serialize, this.deserialize),
        getEndpointPlugin2(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
  }
});
var AssumeRoleWithWebIdentityCommand;
var init_AssumeRoleWithWebIdentityCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleWithWebIdentityCommand.js"() {
    init_dist_es95();
    init_dist_es94();
    init_dist_es99();
    init_EndpointParameters4();
    init_models_04();
    init_Aws_query();
    AssumeRoleWithWebIdentityCommand = class extends Command2.classBuilder().ep(commonParams4).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin2(config2, this.serialize, this.deserialize),
        getEndpointPlugin2(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
  }
});
var commands3;
var STS;
var init_STS = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STS.js"() {
    init_dist_es99();
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_STSClient();
    commands3 = {
      AssumeRoleCommand,
      AssumeRoleWithWebIdentityCommand
    };
    STS = class extends STSClient {
    };
    createAggregatedClient2(commands3, STS);
  }
});
var init_commands3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/index.js"() {
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
  }
});
var init_models3 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/index.js"() {
    init_models_04();
  }
});
var ASSUME_ROLE_DEFAULT_REGION;
var getAccountIdFromAssumedRoleUser;
var resolveRegion;
var getDefaultRoleAssumer;
var getDefaultRoleAssumerWithWebIdentity;
var isH2;
var init_defaultStsRoleAssumers = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultStsRoleAssumers.js"() {
    init_client();
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    getAccountIdFromAssumedRoleUser = (assumedRoleUser) => {
      if (typeof assumedRoleUser?.Arn === "string") {
        const arnComponents = assumedRoleUser.Arn.split(":");
        if (arnComponents.length > 4 && arnComponents[4] !== "") {
          return arnComponents[4];
        }
      }
      return void 0;
    };
    resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion", "accepting first of:", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    };
    getDefaultRoleAssumer = (stsOptions, STSClient2) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger: logger2 = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient2({
            profile: stsOptions?.parentClientConfig?.profile,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2
          });
        }
        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);
        const credentials = {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          ...Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope },
          ...accountId && { accountId }
        };
        setCredentialFeature(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
        return credentials;
      };
    };
    getDefaultRoleAssumerWithWebIdentity = (stsOptions, STSClient2) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger: logger2 = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient2({
            profile: stsOptions?.parentClientConfig?.profile,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2
          });
        }
        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);
        const credentials = {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          ...Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope },
          ...accountId && { accountId }
        };
        if (accountId) {
          setCredentialFeature(credentials, "RESOLVED_ACCOUNT_ID", "T");
        }
        setCredentialFeature(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
        return credentials;
      };
    };
    isH2 = (requestHandler) => {
      return requestHandler?.metadata?.handlerProtocol === "h2";
    };
  }
});
var getCustomizableStsClientCtor;
var getDefaultRoleAssumer2;
var getDefaultRoleAssumerWithWebIdentity2;
var decorateDefaultCredentialProvider;
var init_defaultRoleAssumers = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultRoleAssumers.js"() {
    init_defaultStsRoleAssumers();
    init_STSClient();
    getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config2) {
            super(config2);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    getDefaultRoleAssumer2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    getDefaultRoleAssumerWithWebIdentity2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    });
  }
});
var sts_exports = {};
__export2(sts_exports, {
  $Command: () => Command2,
  AssumeRoleCommand: () => AssumeRoleCommand,
  AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
  AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
  AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
  AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
  CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
  ExpiredTokenException: () => ExpiredTokenException2,
  IDPCommunicationErrorException: () => IDPCommunicationErrorException,
  IDPRejectedClaimException: () => IDPRejectedClaimException,
  InvalidIdentityTokenException: () => InvalidIdentityTokenException,
  MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
  PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
  RegionDisabledException: () => RegionDisabledException,
  STS: () => STS,
  STSClient: () => STSClient,
  STSServiceException: () => STSServiceException,
  __Client: () => Client2,
  decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
  getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
  getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
});
var init_sts = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/index.js"() {
    init_STSClient();
    init_STS();
    init_commands3();
    init_models3();
    init_defaultRoleAssumers();
    init_STSServiceException();
  }
});
var isAssumeRoleProfile;
var isAssumeRoleWithSourceProfile;
var isCredentialSourceProfile;
var resolveAssumeRoleCredentials;
var isCredentialSourceWithoutRoleArn;
var init_resolveAssumeRoleCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"() {
    init_client();
    init_dist_es15();
    init_dist_es57();
    init_resolveCredentialSource();
    init_resolveProfileData();
    isAssumeRoleProfile = (arg, { profile = "default", logger: logger2 } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger: logger2 }) || isCredentialSourceProfile(arg, { profile, logger: logger2 }));
    };
    isAssumeRoleWithSourceProfile = (arg, { profile, logger: logger2 }) => {
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        logger2?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    };
    isCredentialSourceProfile = (arg, { profile, logger: logger2 }) => {
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        logger2?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    };
    resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const profileData = profiles[profileName];
      const { source_profile, region } = profileData;
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer: getDefaultRoleAssumer3 } = await Promise.resolve().then(() => (init_sts(), sts_exports));
        options.roleAssumer = getDefaultRoleAssumer3({
          ...options.clientConfig,
          credentialProviderLogger: options.logger,
          parentClientConfig: {
            ...options?.parentClientConfig,
            region: region ?? options?.parentClientConfig?.region
          }
        }, options.clientPlugins);
      }
      if (source_profile && source_profile in visitedProfiles) {
        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${getProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), { logger: options.logger });
      }
      options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);
      const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})) : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();
      if (isCredentialSourceWithoutRoleArn(profileData)) {
        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      } else {
        const params = {
          RoleArn: profileData.role_arn,
          RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,
          ExternalId: profileData.external_id,
          DurationSeconds: parseInt(profileData.duration_seconds || "3600", 10)
        };
        const { mfa_serial } = profileData;
        if (mfa_serial) {
          if (!options.mfaCodeProvider) {
            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });
          }
          params.SerialNumber = mfa_serial;
          params.TokenCode = await options.mfaCodeProvider(mfa_serial);
        }
        const sourceCreds = await sourceCredsProvider;
        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      }
    };
    isCredentialSourceWithoutRoleArn = (section) => {
      return !section.role_arn && !!section.credential_source;
    };
  }
});
var getValidatedProcessCredentials;
var init_getValidatedProcessCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js"() {
    init_client();
    getValidatedProcessCredentials = (profileName, data, profiles) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (!accountId && profiles?.[profileName]?.aws_account_id) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope },
        ...accountId && { accountId }
      };
      setCredentialFeature(credentials, "CREDENTIALS_PROCESS", "w");
      return credentials;
    };
  }
});
var resolveProcessCredentials;
var init_resolveProcessCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"() {
    init_dist_es15();
    init_getValidatedProcessCredentials();
    resolveProcessCredentials = async (profileName, profiles, logger2) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = promisify(exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error2) {
            throw new CredentialsProviderError(error2.message, { logger: logger2 });
          }
        } else {
          throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger: logger2 });
        }
      } else {
        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger: logger2
        });
      }
    };
  }
});
var fromProcess;
var init_fromProcess = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"() {
    init_dist_es57();
    init_resolveProcessCredentials();
    fromProcess = (init = {}) => async ({ callerClientConfig } = {}) => {
      init.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await parseKnownFiles(init);
      return resolveProcessCredentials(getProfileName({
        profile: init.profile ?? callerClientConfig?.profile
      }), profiles, init.logger);
    };
  }
});
var dist_es_exports6 = {};
__export2(dist_es_exports6, {
  fromProcess: () => fromProcess
});
var init_dist_es130 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"() {
    init_fromProcess();
  }
});
var isProcessProfile;
var resolveProcessCredentials2;
var init_resolveProcessCredentials2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js"() {
    init_client();
    isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    resolveProcessCredentials2 = async (options, profile) => Promise.resolve().then(() => (init_dist_es130(), dist_es_exports6)).then(({ fromProcess: fromProcess2 }) => fromProcess2({
      ...options,
      profile
    })().then((creds) => setCredentialFeature(creds, "CREDENTIALS_PROFILE_PROCESS", "v")));
  }
});
var resolveSsoCredentials;
var isSsoProfile2;
var init_resolveSsoCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js"() {
    init_client();
    resolveSsoCredentials = async (profile, profileData, options = {}) => {
      const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => (init_dist_es129(), dist_es_exports5));
      return fromSSO2({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig
      })().then((creds) => {
        if (profileData.sso_session) {
          return setCredentialFeature(creds, "CREDENTIALS_PROFILE_SSO", "r");
        } else {
          return setCredentialFeature(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
        }
      });
    };
    isSsoProfile2 = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});
var isStaticCredsProfile;
var resolveStaticCredentials;
var init_resolveStaticCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js"() {
    init_client();
    isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1;
    resolveStaticCredentials = async (profile, options) => {
      options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      const credentials = {
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
        ...profile.aws_account_id && { accountId: profile.aws_account_id }
      };
      return setCredentialFeature(credentials, "CREDENTIALS_PROFILE", "n");
    };
  }
});
var fromWebToken;
var init_fromWebToken = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js"() {
    fromWebToken = (init) => async (awsIdentityProperties) => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity3 } = await Promise.resolve().then(() => (init_sts(), sts_exports));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity3({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: {
            ...awsIdentityProperties?.callerClientConfig,
            ...init.parentClientConfig
          }
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
  }
});
var ENV_TOKEN_FILE;
var ENV_ROLE_ARN;
var ENV_ROLE_SESSION_NAME;
var fromTokenFile;
var init_fromTokenFile = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"() {
    init_client();
    init_dist_es15();
    init_fromWebToken();
    ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    ENV_ROLE_ARN = "AWS_ROLE_ARN";
    ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    fromTokenFile = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      const credentials = await fromWebToken({
        ...init,
        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
      if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
        setCredentialFeature(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
      }
      return credentials;
    };
  }
});
var dist_es_exports7 = {};
__export2(dist_es_exports7, {
  fromTokenFile: () => fromTokenFile,
  fromWebToken: () => fromWebToken
});
var init_dist_es131 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"() {
    init_fromTokenFile();
    init_fromWebToken();
  }
});
var isWebIdentityProfile;
var resolveWebIdentityCredentials;
var init_resolveWebIdentityCredentials = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"() {
    init_client();
    isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    resolveWebIdentityCredentials = async (profile, options) => Promise.resolve().then(() => (init_dist_es131(), dist_es_exports7)).then(({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      logger: options.logger,
      parentClientConfig: options.parentClientConfig
    })().then((creds) => setCredentialFeature(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q")));
  }
});
var resolveProfileData;
var init_resolveProfileData = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"() {
    init_dist_es15();
    init_resolveAssumeRoleCredentials();
    init_resolveProcessCredentials2();
    init_resolveSsoCredentials();
    init_resolveStaticCredentials();
    init_resolveWebIdentityCredentials();
    resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials2(options, profileName);
      }
      if (isSsoProfile2(data)) {
        return await resolveSsoCredentials(profileName, data, options);
      }
      throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });
    };
  }
});
var fromIni;
var init_fromIni = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"() {
    init_dist_es57();
    init_resolveProfileData();
    fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await parseKnownFiles(init);
      return resolveProfileData(getProfileName({
        profile: _init.profile ?? callerClientConfig?.profile
      }), profiles, init);
    };
  }
});
var dist_es_exports8 = {};
__export2(dist_es_exports8, {
  fromIni: () => fromIni
});
var init_dist_es132 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"() {
    init_fromIni();
  }
});
var multipleCredentialSourceWarningEmitted;
var defaultProvider;
var credentialsWillNeedRefresh;
var credentialsTreatedAsExpired;
var init_defaultProvider = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js"() {
    init_dist_es68();
    init_dist_es15();
    init_dist_es57();
    init_remoteProvider();
    multipleCredentialSourceWarningEmitted = false;
    defaultProvider = (init = {}) => memoize(chain(async () => {
      const profile = init.profile ?? process.env[ENV_PROFILE];
      if (profile) {
        const envStaticCredentialsAreSet = process.env[ENV_KEY] && process.env[ENV_SECRET];
        if (envStaticCredentialsAreSet) {
          if (!multipleCredentialSourceWarningEmitted) {
            const warnFn = init.logger?.warn && init.logger?.constructor?.name !== "NoOpLogger" ? init.logger.warn.bind(init.logger) : console.warn;
            warnFn(`@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`);
            multipleCredentialSourceWarningEmitted = true;
          }
        }
        throw new CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
          logger: init.logger,
          tryNextLink: true
        });
      }
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
      return fromEnv2(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        throw new CredentialsProviderError("Skipping SSO provider in default chain (inputs do not include SSO fields).", { logger: init.logger });
      }
      const { fromSSO: fromSSO2 } = await Promise.resolve().then(() => (init_dist_es129(), dist_es_exports5));
      return fromSSO2(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
      const { fromIni: fromIni2 } = await Promise.resolve().then(() => (init_dist_es132(), dist_es_exports8));
      return fromIni2(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
      const { fromProcess: fromProcess2 } = await Promise.resolve().then(() => (init_dist_es130(), dist_es_exports6));
      return fromProcess2(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
      const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => (init_dist_es131(), dist_es_exports7));
      return fromTokenFile2(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
      return (await remoteProvider(init))();
    }, async () => {
      throw new CredentialsProviderError("Could not load credentials from any providers", {
        tryNextLink: false,
        logger: init.logger
      });
    }), credentialsTreatedAsExpired, credentialsWillNeedRefresh);
    credentialsWillNeedRefresh = (credentials) => credentials?.expiration !== void 0;
    credentialsTreatedAsExpired = (credentials) => credentials?.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5;
  }
});
var init_dist_es133 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js"() {
    init_defaultProvider();
  }
});
var init_NodeDisableMultiregionAccessPointConfigOptions = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js"() {
  }
});
var NODE_USE_ARN_REGION_ENV_NAME;
var NODE_USE_ARN_REGION_INI_NAME;
var NODE_USE_ARN_REGION_CONFIG_OPTIONS;
var init_NodeUseArnRegionConfigOptions = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js"() {
    init_dist_es44();
    NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
    NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
    NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env3) => booleanSelector(env3, NODE_USE_ARN_REGION_ENV_NAME, SelectorType2.ENV),
      configFileSelector: (profile) => booleanSelector(profile, NODE_USE_ARN_REGION_INI_NAME, SelectorType2.CONFIG),
      default: void 0
    };
  }
});
var init_bucketHostnameUtils = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js"() {
  }
});
var init_bucketHostname = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js"() {
    init_bucketHostnameUtils();
  }
});
var init_bucketEndpointMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js"() {
    init_dist_es46();
    init_bucketHostname();
  }
});
var init_configurations5 = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js"() {
  }
});
var init_dist_es134 = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js"() {
    init_NodeDisableMultiregionAccessPointConfigOptions();
    init_NodeUseArnRegionConfigOptions();
    init_bucketEndpointMiddleware();
    init_bucketHostname();
    init_configurations5();
    init_bucketHostnameUtils();
  }
});
function negate2(bytes) {
  for (let i5 = 0; i5 < 8; i5++) {
    bytes[i5] ^= 255;
  }
  for (let i5 = 7; i5 > -1; i5--) {
    bytes[i5]++;
    if (bytes[i5] !== 0)
      break;
  }
}
var Int642;
var init_Int64 = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/Int64.js"() {
    init_dist_es12();
    Int642 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i5 = 7, remaining = Math.abs(Math.round(number)); i5 > -1 && remaining > 0; i5--, remaining /= 256) {
          bytes[i5] = remaining;
        }
        if (number < 0) {
          negate2(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate2(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
  }
});
var HeaderMarshaller;
var HEADER_VALUE_TYPE2;
var BOOLEAN_TAG;
var BYTE_TAG;
var SHORT_TAG;
var INT_TAG;
var LONG_TAG;
var BINARY_TAG;
var STRING_TAG;
var TIMESTAMP_TAG;
var UUID_TAG;
var UUID_PATTERN2;
var init_HeaderMarshaller = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js"() {
    init_dist_es12();
    init_Int64();
    HeaderMarshaller = class {
      constructor(toUtf86, fromUtf813) {
        this.toUtf8 = toUtf86;
        this.fromUtf8 = fromUtf813;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int642.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN2.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE2 || (HEADER_VALUE_TYPE2 = {}));
    BOOLEAN_TAG = "boolean";
    BYTE_TAG = "byte";
    SHORT_TAG = "short";
    INT_TAG = "integer";
    LONG_TAG = "long";
    BINARY_TAG = "binary";
    STRING_TAG = "string";
    TIMESTAMP_TAG = "timestamp";
    UUID_TAG = "uuid";
    UUID_PATTERN2 = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});
function splitMessage({ byteLength, byteOffset, buffer }) {
  if (byteLength < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  const view = new DataView(buffer, byteOffset, byteLength);
  const messageLength = view.getUint32(0, false);
  if (byteLength !== messageLength) {
    throw new Error("Reported message length does not match received message length");
  }
  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
  if (expectedPreludeChecksum !== checksummer.digest()) {
    throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
  }
  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
  if (expectedMessageChecksum !== checksummer.digest()) {
    throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
  }
  return {
    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
  };
}
var PRELUDE_MEMBER_LENGTH;
var PRELUDE_LENGTH;
var CHECKSUM_LENGTH;
var MINIMUM_MESSAGE_LENGTH;
var init_splitMessage = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js"() {
    init_module4();
    PRELUDE_MEMBER_LENGTH = 4;
    PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    CHECKSUM_LENGTH = 4;
    MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  }
});
var EventStreamCodec;
var init_EventStreamCodec = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js"() {
    init_module4();
    init_HeaderMarshaller();
    init_splitMessage();
    EventStreamCodec = class {
      constructor(toUtf86, fromUtf813) {
        this.headerMarshaller = new HeaderMarshaller(toUtf86, fromUtf813);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = splitMessage(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
  }
});
var init_Message = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/Message.js"() {
  }
});
var MessageDecoderStream;
var init_MessageDecoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js"() {
    MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
  }
});
var MessageEncoderStream;
var init_MessageEncoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js"() {
    MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
  }
});
var SmithyMessageDecoderStream;
var init_SmithyMessageDecoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js"() {
    SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
  }
});
var SmithyMessageEncoderStream;
var init_SmithyMessageEncoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js"() {
    SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
  }
});
var init_dist_es135 = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/index.js"() {
    init_EventStreamCodec();
    init_HeaderMarshaller();
    init_Int64();
    init_Message();
    init_MessageDecoderStream();
    init_MessageEncoderStream();
    init_SmithyMessageDecoderStream();
    init_SmithyMessageEncoderStream();
  }
});
function getChunkedStream(source) {
  let currentMessageTotalLength = 0;
  let currentMessagePendingLength = 0;
  let currentMessage = null;
  let messageLengthBuffer = null;
  const allocateMessage = (size) => {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    const currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  };
  const iterator = async function* () {
    const sourceIterator = source[Symbol.asyncIterator]();
    while (true) {
      const { value, done } = await sourceIterator.next();
      if (done) {
        if (!currentMessageTotalLength) {
          return;
        } else if (currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
        } else {
          throw new Error("Truncated event message received.");
        }
        return;
      }
      const chunkLength = value.length;
      let currentOffset = 0;
      while (currentOffset < chunkLength) {
        if (!currentMessage) {
          const bytesRemaining = chunkLength - currentOffset;
          if (!messageLengthBuffer) {
            messageLengthBuffer = new Uint8Array(4);
          }
          const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
          messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
          currentMessagePendingLength += numBytesForTotal;
          currentOffset += numBytesForTotal;
          if (currentMessagePendingLength < 4) {
            break;
          }
          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
          messageLengthBuffer = null;
        }
        const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
        currentMessagePendingLength += numBytesToWrite;
        currentOffset += numBytesToWrite;
        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
          currentMessage = null;
          currentMessageTotalLength = 0;
          currentMessagePendingLength = 0;
        }
      }
    }
  };
  return {
    [Symbol.asyncIterator]: iterator
  };
}
var init_getChunkedStream = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js"() {
  }
});
function getMessageUnmarshaller(deserializer, toUtf86) {
  return async function(message) {
    const { value: messageType } = message.headers[":message-type"];
    if (messageType === "error") {
      const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
      unmodeledError.name = message.headers[":error-code"].value;
      throw unmodeledError;
    } else if (messageType === "exception") {
      const code = message.headers[":exception-type"].value;
      const exception = { [code]: message };
      const deserializedException = await deserializer(exception);
      if (deserializedException.$unknown) {
        const error2 = new Error(toUtf86(message.body));
        error2.name = code;
        throw error2;
      }
      throw deserializedException[code];
    } else if (messageType === "event") {
      const event = {
        [message.headers[":event-type"].value]: message
      };
      const deserialized = await deserializer(event);
      if (deserialized.$unknown)
        return;
      return deserialized;
    } else {
      throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
    }
  };
}
var init_getUnmarshalledStream = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"() {
  }
});
var EventStreamMarshaller;
var init_EventStreamMarshaller = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js"() {
    init_dist_es135();
    init_getChunkedStream();
    init_getUnmarshalledStream();
    EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = getChunkedStream(body);
        return new SmithyMessageDecoderStream({
          messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new MessageEncoderStream({
          messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
  }
});
var init_provider = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/provider.js"() {
  }
});
var init_dist_es136 = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/index.js"() {
    init_EventStreamMarshaller();
    init_provider();
  }
});
async function* readabletoIterable(readStream) {
  let streamEnded = false;
  let generationEnded = false;
  const records = new Array();
  readStream.on("error", (err) => {
    if (!streamEnded) {
      streamEnded = true;
    }
    if (err) {
      throw err;
    }
  });
  readStream.on("data", (data) => {
    records.push(data);
  });
  readStream.on("end", () => {
    streamEnded = true;
  });
  while (!generationEnded) {
    const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
    if (value) {
      yield value;
    }
    generationEnded = streamEnded && records.length === 0;
  }
}
var init_utils4 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/utils.js"() {
  }
});
var EventStreamMarshaller2;
var init_EventStreamMarshaller2 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/EventStreamMarshaller.js"() {
    init_dist_es136();
    init_utils4();
    EventStreamMarshaller2 = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        return Readable9.from(this.universalMarshaller.serialize(input, serializer));
      }
    };
  }
});
var eventStreamSerdeProvider;
var init_provider2 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/provider.js"() {
    init_EventStreamMarshaller2();
    eventStreamSerdeProvider = (options) => new EventStreamMarshaller2(options);
  }
});
var init_dist_es137 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/index.js"() {
    init_EventStreamMarshaller2();
    init_provider2();
  }
});
var fromString12;
var init_dist_es138 = __esm({
  "node_modules/@smithy/hash-stream-node/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    fromString12 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? Buffer19.from(input, encoding) : Buffer19.from(input);
    };
  }
});
var fromUtf812;
var init_fromUtf810 = __esm({
  "node_modules/@smithy/hash-stream-node/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    init_dist_es138();
    fromUtf812 = (input) => {
      const buf = fromString12(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});
var toUint8Array5;
var init_toUint8Array10 = __esm({
  "node_modules/@smithy/hash-stream-node/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    init_fromUtf810();
    toUint8Array5 = (data) => {
      if (typeof data === "string") {
        return fromUtf812(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});
var init_toUtf810 = __esm({
  "node_modules/@smithy/hash-stream-node/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
  }
});
var init_dist_es139 = __esm({
  "node_modules/@smithy/hash-stream-node/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    init_fromUtf810();
    init_toUint8Array10();
    init_toUtf810();
  }
});
var HashCalculator;
var init_HashCalculator = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/HashCalculator.js"() {
    init_dist_es139();
    HashCalculator = class extends Writable6 {
      constructor(hash, options) {
        super(options);
        this.hash = hash;
      }
      _write(chunk, encoding, callback) {
        try {
          this.hash.update(toUint8Array5(chunk));
        } catch (err) {
          return callback(err);
        }
        callback();
      }
    };
  }
});
var init_fileStreamHasher = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/fileStreamHasher.js"() {
  }
});
var readableStreamHasher;
var init_readableStreamHasher = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/readableStreamHasher.js"() {
    init_HashCalculator();
    readableStreamHasher = (hashCtor, readableStream) => {
      if (readableStream.readableFlowing !== null) {
        throw new Error("Unable to calculate hash for flowing readable stream");
      }
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator(hash);
      readableStream.pipe(hashCalculator);
      return new Promise((resolve, reject) => {
        readableStream.on("error", (err) => {
          hashCalculator.end();
          reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", () => {
          hash.digest().then(resolve).catch(reject);
        });
      });
    };
  }
});
var init_dist_es140 = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/index.js"() {
    init_fileStreamHasher();
    init_readableStreamHasher();
  }
});
var init_Uint8ArrayBlobAdapter5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
  }
});
var init_ChecksumStream5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/checksum/ChecksumStream.js"() {
  }
});
var isReadableStream4;
var init_stream_type_check5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/stream-type-check.js"() {
    isReadableStream4 = (stream) => typeof ReadableStream === "function" && (stream?.constructor?.name === ReadableStream.name || stream instanceof ReadableStream);
  }
});
var init_createChecksumStream5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.js"() {
  }
});
var init_createBufferedReadable5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/createBufferedReadable.js"() {
  }
});
var getAwsChunkedEncodingStream;
var init_getAwsChunkedEncodingStream5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
    getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new Readable10({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
  }
});
var init_headStream5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/headStream.js"() {
  }
});
var fromArrayBuffer12;
var init_dist_es141 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    init_dist_es8();
    fromArrayBuffer12 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return Buffer20.from(input, offset, length);
    };
  }
});
var init_fetch_http_handler2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js"() {
  }
});
async function collectBlob2(blob) {
  const base64 = await readToBase642(blob);
  const arrayBuffer = fromBase644(base64);
  return new Uint8Array(arrayBuffer);
}
async function collectStream2(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
function readToBase642(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      const result = reader.result ?? "";
      const commaIndex = result.indexOf(",");
      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = () => reject(new Error("Read aborted"));
    reader.onerror = () => reject(reader.error);
    reader.readAsDataURL(blob);
  });
}
var streamCollector5;
var init_stream_collector5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"() {
    init_dist_es126();
    streamCollector5 = async (stream) => {
      if (typeof Blob === "function" && stream instanceof Blob || stream.constructor?.name === "Blob") {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob2(stream);
      }
      return collectStream2(stream);
    };
  }
});
var init_dist_es142 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/fetch-http-handler/dist-es/index.js"() {
    init_fetch_http_handler2();
    init_stream_collector5();
  }
});
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED3;
var sdkStreamMixin3;
var isBlobInstance2;
var init_sdk_stream_mixin_browser2 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js"() {
    init_dist_es142();
    init_dist_es126();
    init_dist_es12();
    init_dist_es119();
    init_stream_type_check5();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED3 = "The stream has already been transformed.";
    sdkStreamMixin3 = (stream) => {
      if (!isBlobInstance2(stream) && !isReadableStream4(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED3);
        }
        transformed = true;
        return await streamCollector5(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return toBase645(buf);
          } else if (encoding === "hex") {
            return toHex(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return toUtf85(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED3);
          }
          transformed = true;
          if (isBlobInstance2(stream)) {
            return blobToWebStream(stream);
          } else if (isReadableStream4(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    isBlobInstance2 = (stream) => typeof Blob === "function" && stream instanceof Blob;
  }
});
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED4;
var sdkStreamMixin4;
var init_sdk_stream_mixin5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
    init_dist_es123();
    init_dist_es141();
    init_sdk_stream_mixin_browser2();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED4 = "The stream has already been transformed.";
    sdkStreamMixin4 = (stream) => {
      if (!(stream instanceof Readable11)) {
        try {
          return sdkStreamMixin3(stream);
        } catch (e5) {
          const name = stream?.__proto__?.constructor?.name || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED4);
        }
        transformed = true;
        return await streamCollector4(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return fromArrayBuffer12(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED4);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof Readable11.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");
          }
          transformed = true;
          return Readable11.toWeb(stream);
        }
      });
    };
  }
});
var init_splitStream5 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/splitStream.js"() {
  }
});
var init_dist_es143 = __esm({
  "node_modules/@aws-sdk/client-s3/node_modules/@smithy/util-stream/dist-es/index.js"() {
    init_Uint8ArrayBlobAdapter5();
    init_ChecksumStream5();
    init_createChecksumStream5();
    init_createBufferedReadable5();
    init_getAwsChunkedEncodingStream5();
    init_headStream5();
    init_sdk_stream_mixin5();
    init_splitStream5();
    init_stream_type_check5();
  }
});
var getRuntimeConfig7;
var init_runtimeConfig_shared4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js"() {
    init_dist_es25();
    init_dist_es66();
    init_dist_es64();
    init_dist_es51();
    init_dist_es126();
    init_dist_es143();
    init_dist_es119();
    init_httpAuthSchemeProvider();
    init_endpointResolver();
    getRuntimeConfig7 = (config2) => {
      return {
        apiVersion: "2006-03-01",
        base64Decoder: config2?.base64Decoder ?? fromBase644,
        base64Encoder: config2?.base64Encoder ?? toBase645,
        disableHostPrefix: config2?.disableHostPrefix ?? false,
        endpointProvider: config2?.endpointProvider ?? defaultEndpointResolver,
        extensions: config2?.extensions ?? [],
        getAwsChunkedEncodingStream: config2?.getAwsChunkedEncodingStream ?? getAwsChunkedEncodingStream,
        httpAuthSchemeProvider: config2?.httpAuthSchemeProvider ?? defaultS3HttpAuthSchemeProvider,
        httpAuthSchemes: config2?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "aws.auth#sigv4a",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4a"),
            signer: new AwsSdkSigV4ASigner()
          }
        ],
        logger: config2?.logger ?? new NoOpLogger2(),
        sdkStreamMixin: config2?.sdkStreamMixin ?? sdkStreamMixin4,
        serviceId: config2?.serviceId ?? "S3",
        signerConstructor: config2?.signerConstructor ?? SignatureV4MultiRegion,
        signingEscapePath: config2?.signingEscapePath ?? false,
        urlParser: config2?.urlParser ?? parseUrl,
        useArnRegion: config2?.useArnRegion ?? void 0,
        utf8Decoder: config2?.utf8Decoder ?? fromUtf811,
        utf8Encoder: config2?.utf8Encoder ?? toUtf85
      };
    };
  }
});
var getRuntimeConfig8;
var init_runtimeConfig4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.js"() {
    init_package();
    init_dist_es25();
    init_dist_es133();
    init_dist_es134();
    init_dist_es36();
    init_dist_es47();
    init_dist_es116();
    init_dist_es54();
    init_dist_es137();
    init_dist_es120();
    init_dist_es140();
    init_dist_es65();
    init_dist_es58();
    init_dist_es123();
    init_dist_es124();
    init_dist_es62();
    init_runtimeConfig_shared4();
    init_dist_es64();
    init_dist_es127();
    init_dist_es64();
    getRuntimeConfig8 = (config2) => {
      emitWarningIfUnsupportedVersion2(process.version);
      const defaultsMode = resolveDefaultsModeConfig2(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig7(config2);
      emitWarningIfUnsupportedVersion(process.version);
      const loaderConfig = {
        profile: config2?.profile,
        logger: clientSharedValues.logger
      };
      return {
        ...clientSharedValues,
        ...config2,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config2?.authSchemePreference ?? loadConfig2(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker: config2?.bodyLengthChecker ?? calculateBodyLength2,
        credentialDefaultProvider: config2?.credentialDefaultProvider ?? defaultProvider,
        defaultUserAgentProvider: config2?.defaultUserAgentProvider ?? createDefaultUserAgentProvider2({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        disableS3ExpressSessionAuth: config2?.disableS3ExpressSessionAuth ?? loadConfig2(NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS, loaderConfig),
        eventStreamSerdeProvider: config2?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,
        maxAttempts: config2?.maxAttempts ?? loadConfig2(NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config2),
        md5: config2?.md5 ?? Hash2.bind(null, "md5"),
        region: config2?.region ?? loadConfig2(NODE_REGION_CONFIG_OPTIONS, { ...NODE_REGION_CONFIG_FILE_OPTIONS, ...loaderConfig }),
        requestChecksumCalculation: config2?.requestChecksumCalculation ?? loadConfig2(NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS, loaderConfig),
        requestHandler: NodeHttpHandler3.create(config2?.requestHandler ?? defaultConfigProvider),
        responseChecksumValidation: config2?.responseChecksumValidation ?? loadConfig2(NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS, loaderConfig),
        retryMode: config2?.retryMode ?? loadConfig2({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }, config2),
        sha1: config2?.sha1 ?? Hash2.bind(null, "sha1"),
        sha256: config2?.sha256 ?? Hash2.bind(null, "sha256"),
        sigv4aSigningRegionSet: config2?.sigv4aSigningRegionSet ?? loadConfig2(NODE_SIGV4A_CONFIG_OPTIONS, loaderConfig),
        streamCollector: config2?.streamCollector ?? streamCollector4,
        streamHasher: config2?.streamHasher ?? readableStreamHasher,
        useArnRegion: config2?.useArnRegion ?? loadConfig2(NODE_USE_ARN_REGION_CONFIG_OPTIONS, loaderConfig),
        useDualstackEndpoint: config2?.useDualstackEndpoint ?? loadConfig2(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        useFipsEndpoint: config2?.useFipsEndpoint ?? loadConfig2(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, loaderConfig),
        userAgentAppId: config2?.userAgentAppId ?? loadConfig2(NODE_APP_ID_CONFIG_OPTIONS2, loaderConfig)
      };
    };
  }
});
var getHttpAuthExtensionConfiguration4;
var resolveHttpAuthRuntimeConfig4;
var init_httpAuthExtensionConfiguration4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration4 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig4 = (config2) => {
      return {
        httpAuthSchemes: config2.httpAuthSchemes(),
        httpAuthSchemeProvider: config2.httpAuthSchemeProvider(),
        credentials: config2.credentials()
      };
    };
  }
});
var resolveRuntimeExtensions4;
var init_runtimeExtensions4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeExtensions.js"() {
    init_dist_es114();
    init_dist_es38();
    init_dist_es64();
    init_httpAuthExtensionConfiguration4();
    resolveRuntimeExtensions4 = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration4(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig4(extensionConfiguration));
    };
  }
});
var S3Client;
var init_S3Client = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/S3Client.js"() {
    init_dist_es2();
    init_dist_es36();
    init_dist_es39();
    init_dist_es40();
    init_dist_es41();
    init_dist_es47();
    init_dist_es53();
    init_dist_es54();
    init_dist_es14();
    init_dist_es55();
    init_dist_es56();
    init_dist_es60();
    init_dist_es65();
    init_dist_es64();
    init_httpAuthSchemeProvider();
    init_CreateSessionCommand();
    init_EndpointParameters();
    init_runtimeConfig4();
    init_runtimeExtensions4();
    S3Client = class extends Client {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig8(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = resolveUserAgentConfig(_config_1);
        const _config_3 = resolveFlexibleChecksumsConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveRegionConfig(_config_4);
        const _config_6 = resolveHostHeaderConfig(_config_5);
        const _config_7 = resolveEndpointConfig(_config_6);
        const _config_8 = resolveEventStreamSerdeConfig(_config_7);
        const _config_9 = resolveHttpAuthSchemeConfig(_config_8);
        const _config_10 = resolveS3Config(_config_9, { session: [() => this, CreateSessionCommand] });
        const _config_11 = resolveRuntimeExtensions4(_config_10, configuration?.extensions || []);
        this.config = _config_11;
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultS3HttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config2) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config2.credentials,
            "aws.auth#sigv4a": config2.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
        this.middlewareStack.use(getValidateBucketNamePlugin(this.config));
        this.middlewareStack.use(getAddExpectContinuePlugin(this.config));
        this.middlewareStack.use(getRegionRedirectMiddlewarePlugin(this.config));
        this.middlewareStack.use(getS3ExpressPlugin(this.config));
        this.middlewareStack.use(getS3ExpressHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});
var AbortMultipartUploadCommand;
var init_AbortMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    AbortMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "AbortMultipartUpload", {}).n("S3Client", "AbortMultipartUploadCommand").f(void 0, void 0).ser(se_AbortMultipartUploadCommand).de(de_AbortMultipartUploadCommand).build() {
    };
  }
});
function ssecMiddleware(options) {
  return (next) => async (args) => {
    const input = { ...args.input };
    const properties = [
      {
        target: "SSECustomerKey",
        hash: "SSECustomerKeyMD5"
      },
      {
        target: "CopySourceSSECustomerKey",
        hash: "CopySourceSSECustomerKeyMD5"
      }
    ];
    for (const prop of properties) {
      const value = input[prop.target];
      if (value) {
        let valueForHash;
        if (typeof value === "string") {
          if (isValidBase64EncodedSSECustomerKey(value, options)) {
            valueForHash = options.base64Decoder(value);
          } else {
            valueForHash = options.utf8Decoder(value);
            input[prop.target] = options.base64Encoder(valueForHash);
          }
        } else {
          valueForHash = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : new Uint8Array(value);
          input[prop.target] = options.base64Encoder(valueForHash);
        }
        const hash = new options.md5();
        hash.update(valueForHash);
        input[prop.hash] = options.base64Encoder(await hash.digest());
      }
    }
    return next({
      ...args,
      input
    });
  };
}
function isValidBase64EncodedSSECustomerKey(str, options) {
  const base64Regex = /^(?:[A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
  if (!base64Regex.test(str))
    return false;
  try {
    const decodedBytes = options.base64Decoder(str);
    return decodedBytes.length === 32;
  } catch {
    return false;
  }
}
var ssecMiddlewareOptions;
var getSsecPlugin;
var init_dist_es144 = __esm({
  "node_modules/@aws-sdk/middleware-ssec/dist-es/index.js"() {
    ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    getSsecPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config2), ssecMiddlewareOptions);
      }
    });
  }
});
var CompleteMultipartUploadCommand;
var init_CompleteMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CompleteMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CompleteMultipartUpload", {}).n("S3Client", "CompleteMultipartUploadCommand").f(CompleteMultipartUploadRequestFilterSensitiveLog, CompleteMultipartUploadOutputFilterSensitiveLog).ser(se_CompleteMultipartUploadCommand).de(de_CompleteMultipartUploadCommand).build() {
    };
  }
});
var CopyObjectCommand;
var init_CopyObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CopyObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" },
      CopySource: { type: "contextParams", name: "CopySource" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CopyObject", {}).n("S3Client", "CopyObjectCommand").f(CopyObjectRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog).ser(se_CopyObjectCommand).de(de_CopyObjectCommand).build() {
    };
  }
});
function locationConstraintMiddleware(options) {
  return (next) => async (args) => {
    const { CreateBucketConfiguration } = args.input;
    const region = await options.region();
    if (!CreateBucketConfiguration?.LocationConstraint && !CreateBucketConfiguration?.Location) {
      args = {
        ...args,
        input: {
          ...args.input,
          CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
        }
      };
    }
    return next(args);
  };
}
var locationConstraintMiddlewareOptions;
var getLocationConstraintPlugin;
var init_dist_es145 = __esm({
  "node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js"() {
    locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    getLocationConstraintPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config2), locationConstraintMiddlewareOptions);
      }
    });
  }
});
var CreateBucketCommand;
var init_CreateBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js"() {
    init_dist_es145();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      DisableAccessPoints: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getLocationConstraintPlugin(config2)
      ];
    }).s("AmazonS3", "CreateBucket", {}).n("S3Client", "CreateBucketCommand").f(void 0, void 0).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
    };
  }
});
var CreateBucketMetadataConfigurationCommand;
var init_CreateBucketMetadataConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketMetadataConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "CreateBucketMetadataConfiguration", {}).n("S3Client", "CreateBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_CreateBucketMetadataConfigurationCommand).de(de_CreateBucketMetadataConfigurationCommand).build() {
    };
  }
});
var CreateBucketMetadataTableConfigurationCommand;
var init_CreateBucketMetadataTableConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketMetadataTableConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    CreateBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "CreateBucketMetadataTableConfiguration", {}).n("S3Client", "CreateBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_CreateBucketMetadataTableConfigurationCommand).de(de_CreateBucketMetadataTableConfigurationCommand).build() {
    };
  }
});
var CreateMultipartUploadCommand;
var init_CreateMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    CreateMultipartUploadCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "CreateMultipartUpload", {}).n("S3Client", "CreateMultipartUploadCommand").f(CreateMultipartUploadRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog).ser(se_CreateMultipartUploadCommand).de(de_CreateMultipartUploadCommand).build() {
    };
  }
});
var DeleteBucketAnalyticsConfigurationCommand;
var init_DeleteBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketAnalyticsConfiguration", {}).n("S3Client", "DeleteBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketAnalyticsConfigurationCommand).de(de_DeleteBucketAnalyticsConfigurationCommand).build() {
    };
  }
});
var DeleteBucketCommand;
var init_DeleteBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucket", {}).n("S3Client", "DeleteBucketCommand").f(void 0, void 0).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
    };
  }
});
var DeleteBucketCorsCommand;
var init_DeleteBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketCors", {}).n("S3Client", "DeleteBucketCorsCommand").f(void 0, void 0).ser(se_DeleteBucketCorsCommand).de(de_DeleteBucketCorsCommand).build() {
    };
  }
});
var DeleteBucketEncryptionCommand;
var init_DeleteBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketEncryption", {}).n("S3Client", "DeleteBucketEncryptionCommand").f(void 0, void 0).ser(se_DeleteBucketEncryptionCommand).de(de_DeleteBucketEncryptionCommand).build() {
    };
  }
});
var DeleteBucketIntelligentTieringConfigurationCommand;
var init_DeleteBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketIntelligentTieringConfiguration", {}).n("S3Client", "DeleteBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketIntelligentTieringConfigurationCommand).de(de_DeleteBucketIntelligentTieringConfigurationCommand).build() {
    };
  }
});
var DeleteBucketInventoryConfigurationCommand;
var init_DeleteBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketInventoryConfiguration", {}).n("S3Client", "DeleteBucketInventoryConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketInventoryConfigurationCommand).de(de_DeleteBucketInventoryConfigurationCommand).build() {
    };
  }
});
var DeleteBucketLifecycleCommand;
var init_DeleteBucketLifecycleCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketLifecycleCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketLifecycle", {}).n("S3Client", "DeleteBucketLifecycleCommand").f(void 0, void 0).ser(se_DeleteBucketLifecycleCommand).de(de_DeleteBucketLifecycleCommand).build() {
    };
  }
});
var DeleteBucketMetadataConfigurationCommand;
var init_DeleteBucketMetadataConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetadataConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetadataConfiguration", {}).n("S3Client", "DeleteBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetadataConfigurationCommand).de(de_DeleteBucketMetadataConfigurationCommand).build() {
    };
  }
});
var DeleteBucketMetadataTableConfigurationCommand;
var init_DeleteBucketMetadataTableConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetadataTableConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetadataTableConfiguration", {}).n("S3Client", "DeleteBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetadataTableConfigurationCommand).de(de_DeleteBucketMetadataTableConfigurationCommand).build() {
    };
  }
});
var DeleteBucketMetricsConfigurationCommand;
var init_DeleteBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetricsConfiguration", {}).n("S3Client", "DeleteBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetricsConfigurationCommand).de(de_DeleteBucketMetricsConfigurationCommand).build() {
    };
  }
});
var DeleteBucketOwnershipControlsCommand;
var init_DeleteBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketOwnershipControls", {}).n("S3Client", "DeleteBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_DeleteBucketOwnershipControlsCommand).de(de_DeleteBucketOwnershipControlsCommand).build() {
    };
  }
});
var DeleteBucketPolicyCommand;
var init_DeleteBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketPolicy", {}).n("S3Client", "DeleteBucketPolicyCommand").f(void 0, void 0).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
    };
  }
});
var DeleteBucketReplicationCommand;
var init_DeleteBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketReplication", {}).n("S3Client", "DeleteBucketReplicationCommand").f(void 0, void 0).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
    };
  }
});
var DeleteBucketTaggingCommand;
var init_DeleteBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketTagging", {}).n("S3Client", "DeleteBucketTaggingCommand").f(void 0, void 0).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
    };
  }
});
var DeleteBucketWebsiteCommand;
var init_DeleteBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketWebsite", {}).n("S3Client", "DeleteBucketWebsiteCommand").f(void 0, void 0).ser(se_DeleteBucketWebsiteCommand).de(de_DeleteBucketWebsiteCommand).build() {
    };
  }
});
var DeleteObjectCommand;
var init_DeleteObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObject", {}).n("S3Client", "DeleteObjectCommand").f(void 0, void 0).ser(se_DeleteObjectCommand).de(de_DeleteObjectCommand).build() {
    };
  }
});
var DeleteObjectsCommand;
var init_DeleteObjectsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObjects", {}).n("S3Client", "DeleteObjectsCommand").f(void 0, void 0).ser(se_DeleteObjectsCommand).de(de_DeleteObjectsCommand).build() {
    };
  }
});
var DeleteObjectTaggingCommand;
var init_DeleteObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeleteObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "DeleteObjectTagging", {}).n("S3Client", "DeleteObjectTaggingCommand").f(void 0, void 0).ser(se_DeleteObjectTaggingCommand).de(de_DeleteObjectTaggingCommand).build() {
    };
  }
});
var DeletePublicAccessBlockCommand;
var init_DeletePublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    DeletePublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeletePublicAccessBlock", {}).n("S3Client", "DeletePublicAccessBlockCommand").f(void 0, void 0).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
    };
  }
});
var GetBucketAccelerateConfigurationCommand;
var init_GetBucketAccelerateConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAccelerateConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAccelerateConfiguration", {}).n("S3Client", "GetBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAccelerateConfigurationCommand).de(de_GetBucketAccelerateConfigurationCommand).build() {
    };
  }
});
var GetBucketAclCommand;
var init_GetBucketAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAcl", {}).n("S3Client", "GetBucketAclCommand").f(void 0, void 0).ser(se_GetBucketAclCommand).de(de_GetBucketAclCommand).build() {
    };
  }
});
var GetBucketAnalyticsConfigurationCommand;
var init_GetBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketAnalyticsConfiguration", {}).n("S3Client", "GetBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAnalyticsConfigurationCommand).de(de_GetBucketAnalyticsConfigurationCommand).build() {
    };
  }
});
var GetBucketCorsCommand;
var init_GetBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketCors", {}).n("S3Client", "GetBucketCorsCommand").f(void 0, void 0).ser(se_GetBucketCorsCommand).de(de_GetBucketCorsCommand).build() {
    };
  }
});
var GetBucketEncryptionCommand;
var init_GetBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketEncryption", {}).n("S3Client", "GetBucketEncryptionCommand").f(void 0, GetBucketEncryptionOutputFilterSensitiveLog).ser(se_GetBucketEncryptionCommand).de(de_GetBucketEncryptionCommand).build() {
    };
  }
});
var GetBucketIntelligentTieringConfigurationCommand;
var init_GetBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketIntelligentTieringConfiguration", {}).n("S3Client", "GetBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_GetBucketIntelligentTieringConfigurationCommand).de(de_GetBucketIntelligentTieringConfigurationCommand).build() {
    };
  }
});
var GetBucketInventoryConfigurationCommand;
var init_GetBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketInventoryConfiguration", {}).n("S3Client", "GetBucketInventoryConfigurationCommand").f(void 0, GetBucketInventoryConfigurationOutputFilterSensitiveLog).ser(se_GetBucketInventoryConfigurationCommand).de(de_GetBucketInventoryConfigurationCommand).build() {
    };
  }
});
var GetBucketLifecycleConfigurationCommand;
var init_GetBucketLifecycleConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLifecycleConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLifecycleConfiguration", {}).n("S3Client", "GetBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
    };
  }
});
var GetBucketLocationCommand;
var init_GetBucketLocationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLocationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLocation", {}).n("S3Client", "GetBucketLocationCommand").f(void 0, void 0).ser(se_GetBucketLocationCommand).de(de_GetBucketLocationCommand).build() {
    };
  }
});
var GetBucketLoggingCommand;
var init_GetBucketLoggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketLoggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketLogging", {}).n("S3Client", "GetBucketLoggingCommand").f(void 0, void 0).ser(se_GetBucketLoggingCommand).de(de_GetBucketLoggingCommand).build() {
    };
  }
});
var GetBucketMetadataConfigurationCommand;
var init_GetBucketMetadataConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetadataConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetadataConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetadataConfiguration", {}).n("S3Client", "GetBucketMetadataConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetadataConfigurationCommand).de(de_GetBucketMetadataConfigurationCommand).build() {
    };
  }
});
var GetBucketMetadataTableConfigurationCommand;
var init_GetBucketMetadataTableConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetadataTableConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetadataTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetadataTableConfiguration", {}).n("S3Client", "GetBucketMetadataTableConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetadataTableConfigurationCommand).de(de_GetBucketMetadataTableConfigurationCommand).build() {
    };
  }
});
var GetBucketMetricsConfigurationCommand;
var init_GetBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketMetricsConfiguration", {}).n("S3Client", "GetBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetricsConfigurationCommand).de(de_GetBucketMetricsConfigurationCommand).build() {
    };
  }
});
var GetBucketNotificationConfigurationCommand;
var init_GetBucketNotificationConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketNotificationConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketNotificationConfiguration", {}).n("S3Client", "GetBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_GetBucketNotificationConfigurationCommand).de(de_GetBucketNotificationConfigurationCommand).build() {
    };
  }
});
var GetBucketOwnershipControlsCommand;
var init_GetBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketOwnershipControls", {}).n("S3Client", "GetBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_GetBucketOwnershipControlsCommand).de(de_GetBucketOwnershipControlsCommand).build() {
    };
  }
});
var GetBucketPolicyCommand;
var init_GetBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketPolicy", {}).n("S3Client", "GetBucketPolicyCommand").f(void 0, void 0).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
    };
  }
});
var GetBucketPolicyStatusCommand;
var init_GetBucketPolicyStatusCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketPolicyStatusCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketPolicyStatus", {}).n("S3Client", "GetBucketPolicyStatusCommand").f(void 0, void 0).ser(se_GetBucketPolicyStatusCommand).de(de_GetBucketPolicyStatusCommand).build() {
    };
  }
});
var GetBucketReplicationCommand;
var init_GetBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketReplication", {}).n("S3Client", "GetBucketReplicationCommand").f(void 0, void 0).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
    };
  }
});
var GetBucketRequestPaymentCommand;
var init_GetBucketRequestPaymentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketRequestPaymentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketRequestPayment", {}).n("S3Client", "GetBucketRequestPaymentCommand").f(void 0, void 0).ser(se_GetBucketRequestPaymentCommand).de(de_GetBucketRequestPaymentCommand).build() {
    };
  }
});
var GetBucketTaggingCommand;
var init_GetBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketTagging", {}).n("S3Client", "GetBucketTaggingCommand").f(void 0, void 0).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
    };
  }
});
var GetBucketVersioningCommand;
var init_GetBucketVersioningCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketVersioningCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketVersioning", {}).n("S3Client", "GetBucketVersioningCommand").f(void 0, void 0).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
    };
  }
});
var GetBucketWebsiteCommand;
var init_GetBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetBucketWebsite", {}).n("S3Client", "GetBucketWebsiteCommand").f(void 0, void 0).ser(se_GetBucketWebsiteCommand).de(de_GetBucketWebsiteCommand).build() {
    };
  }
});
var GetObjectAclCommand;
var init_GetObjectAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectAcl", {}).n("S3Client", "GetObjectAclCommand").f(void 0, void 0).ser(se_GetObjectAclCommand).de(de_GetObjectAclCommand).build() {
    };
  }
});
var GetObjectAttributesCommand;
var init_GetObjectAttributesCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectAttributesCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectAttributes", {}).n("S3Client", "GetObjectAttributesCommand").f(GetObjectAttributesRequestFilterSensitiveLog, void 0).ser(se_GetObjectAttributesCommand).de(de_GetObjectAttributesCommand).build() {
    };
  }
});
var GetObjectCommand;
var init_GetObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC64NVME", "CRC32", "CRC32C", "SHA256", "SHA1"]
        }),
        getSsecPlugin(config2),
        getS3ExpiresMiddlewarePlugin(config2)
      ];
    }).s("AmazonS3", "GetObject", {}).n("S3Client", "GetObjectCommand").f(GetObjectRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog).ser(se_GetObjectCommand).de(de_GetObjectCommand).build() {
    };
  }
});
var GetObjectLegalHoldCommand;
var init_GetObjectLegalHoldCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectLegalHoldCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectLegalHold", {}).n("S3Client", "GetObjectLegalHoldCommand").f(void 0, void 0).ser(se_GetObjectLegalHoldCommand).de(de_GetObjectLegalHoldCommand).build() {
    };
  }
});
var GetObjectLockConfigurationCommand;
var init_GetObjectLockConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectLockConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectLockConfiguration", {}).n("S3Client", "GetObjectLockConfigurationCommand").f(void 0, void 0).ser(se_GetObjectLockConfigurationCommand).de(de_GetObjectLockConfigurationCommand).build() {
    };
  }
});
var GetObjectRetentionCommand;
var init_GetObjectRetentionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectRetentionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectRetention", {}).n("S3Client", "GetObjectRetentionCommand").f(void 0, void 0).ser(se_GetObjectRetentionCommand).de(de_GetObjectRetentionCommand).build() {
    };
  }
});
var GetObjectTaggingCommand;
var init_GetObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetObjectTagging", {}).n("S3Client", "GetObjectTaggingCommand").f(void 0, void 0).ser(se_GetObjectTaggingCommand).de(de_GetObjectTaggingCommand).build() {
    };
  }
});
var GetObjectTorrentCommand;
var init_GetObjectTorrentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    GetObjectTorrentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "GetObjectTorrent", {}).n("S3Client", "GetObjectTorrentCommand").f(void 0, GetObjectTorrentOutputFilterSensitiveLog).ser(se_GetObjectTorrentCommand).de(de_GetObjectTorrentCommand).build() {
    };
  }
});
var GetPublicAccessBlockCommand;
var init_GetPublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    GetPublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "GetPublicAccessBlock", {}).n("S3Client", "GetPublicAccessBlockCommand").f(void 0, void 0).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
    };
  }
});
var HeadBucketCommand;
var init_HeadBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    HeadBucketCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "HeadBucket", {}).n("S3Client", "HeadBucketCommand").f(void 0, void 0).ser(se_HeadBucketCommand).de(de_HeadBucketCommand).build() {
    };
  }
});
var HeadObjectCommand;
var init_HeadObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    HeadObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2),
        getS3ExpiresMiddlewarePlugin(config2)
      ];
    }).s("AmazonS3", "HeadObject", {}).n("S3Client", "HeadObjectCommand").f(HeadObjectRequestFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog).ser(se_HeadObjectCommand).de(de_HeadObjectCommand).build() {
    };
  }
});
var ListBucketAnalyticsConfigurationsCommand;
var init_ListBucketAnalyticsConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketAnalyticsConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketAnalyticsConfigurations", {}).n("S3Client", "ListBucketAnalyticsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketAnalyticsConfigurationsCommand).de(de_ListBucketAnalyticsConfigurationsCommand).build() {
    };
  }
});
var ListBucketIntelligentTieringConfigurationsCommand;
var init_ListBucketIntelligentTieringConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketIntelligentTieringConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketIntelligentTieringConfigurations", {}).n("S3Client", "ListBucketIntelligentTieringConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketIntelligentTieringConfigurationsCommand).de(de_ListBucketIntelligentTieringConfigurationsCommand).build() {
    };
  }
});
var ListBucketInventoryConfigurationsCommand;
var init_ListBucketInventoryConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_0();
    init_Aws_restXml();
    ListBucketInventoryConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketInventoryConfigurations", {}).n("S3Client", "ListBucketInventoryConfigurationsCommand").f(void 0, ListBucketInventoryConfigurationsOutputFilterSensitiveLog).ser(se_ListBucketInventoryConfigurationsCommand).de(de_ListBucketInventoryConfigurationsCommand).build() {
    };
  }
});
var ListBucketMetricsConfigurationsCommand;
var init_ListBucketMetricsConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketMetricsConfigurationsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBucketMetricsConfigurations", {}).n("S3Client", "ListBucketMetricsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketMetricsConfigurationsCommand).de(de_ListBucketMetricsConfigurationsCommand).build() {
    };
  }
});
var ListBucketsCommand;
var init_ListBucketsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListBucketsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListBuckets", {}).n("S3Client", "ListBucketsCommand").f(void 0, void 0).ser(se_ListBucketsCommand).de(de_ListBucketsCommand).build() {
    };
  }
});
var ListDirectoryBucketsCommand;
var init_ListDirectoryBucketsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListDirectoryBucketsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListDirectoryBucketsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListDirectoryBuckets", {}).n("S3Client", "ListDirectoryBucketsCommand").f(void 0, void 0).ser(se_ListDirectoryBucketsCommand).de(de_ListDirectoryBucketsCommand).build() {
    };
  }
});
var ListMultipartUploadsCommand;
var init_ListMultipartUploadsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListMultipartUploadsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListMultipartUploads", {}).n("S3Client", "ListMultipartUploadsCommand").f(void 0, void 0).ser(se_ListMultipartUploadsCommand).de(de_ListMultipartUploadsCommand).build() {
    };
  }
});
var ListObjectsCommand;
var init_ListObjectsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjects", {}).n("S3Client", "ListObjectsCommand").f(void 0, void 0).ser(se_ListObjectsCommand).de(de_ListObjectsCommand).build() {
    };
  }
});
var ListObjectsV2Command;
var init_ListObjectsV2Command = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectsV2Command = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjectsV2", {}).n("S3Client", "ListObjectsV2Command").f(void 0, void 0).ser(se_ListObjectsV2Command).de(de_ListObjectsV2Command).build() {
    };
  }
});
var ListObjectVersionsCommand;
var init_ListObjectVersionsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    ListObjectVersionsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "ListObjectVersions", {}).n("S3Client", "ListObjectVersionsCommand").f(void 0, void 0).ser(se_ListObjectVersionsCommand).de(de_ListObjectVersionsCommand).build() {
    };
  }
});
var ListPartsCommand;
var init_ListPartsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    ListPartsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "ListParts", {}).n("S3Client", "ListPartsCommand").f(ListPartsRequestFilterSensitiveLog, void 0).ser(se_ListPartsCommand).de(de_ListPartsCommand).build() {
    };
  }
});
var PutBucketAccelerateConfigurationCommand;
var init_PutBucketAccelerateConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAccelerateConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        })
      ];
    }).s("AmazonS3", "PutBucketAccelerateConfiguration", {}).n("S3Client", "PutBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAccelerateConfigurationCommand).de(de_PutBucketAccelerateConfigurationCommand).build() {
    };
  }
});
var PutBucketAclCommand;
var init_PutBucketAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketAcl", {}).n("S3Client", "PutBucketAclCommand").f(void 0, void 0).ser(se_PutBucketAclCommand).de(de_PutBucketAclCommand).build() {
    };
  }
});
var PutBucketAnalyticsConfigurationCommand;
var init_PutBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketAnalyticsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketAnalyticsConfiguration", {}).n("S3Client", "PutBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAnalyticsConfigurationCommand).de(de_PutBucketAnalyticsConfigurationCommand).build() {
    };
  }
});
var PutBucketCorsCommand;
var init_PutBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketCorsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketCors", {}).n("S3Client", "PutBucketCorsCommand").f(void 0, void 0).ser(se_PutBucketCorsCommand).de(de_PutBucketCorsCommand).build() {
    };
  }
});
var PutBucketEncryptionCommand;
var init_PutBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutBucketEncryptionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketEncryption", {}).n("S3Client", "PutBucketEncryptionCommand").f(PutBucketEncryptionRequestFilterSensitiveLog, void 0).ser(se_PutBucketEncryptionCommand).de(de_PutBucketEncryptionCommand).build() {
    };
  }
});
var PutBucketIntelligentTieringConfigurationCommand;
var init_PutBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketIntelligentTieringConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketIntelligentTieringConfiguration", {}).n("S3Client", "PutBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_PutBucketIntelligentTieringConfigurationCommand).de(de_PutBucketIntelligentTieringConfigurationCommand).build() {
    };
  }
});
var PutBucketInventoryConfigurationCommand;
var init_PutBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutBucketInventoryConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketInventoryConfiguration", {}).n("S3Client", "PutBucketInventoryConfigurationCommand").f(PutBucketInventoryConfigurationRequestFilterSensitiveLog, void 0).ser(se_PutBucketInventoryConfigurationCommand).de(de_PutBucketInventoryConfigurationCommand).build() {
    };
  }
});
var PutBucketLifecycleConfigurationCommand;
var init_PutBucketLifecycleConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketLifecycleConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutBucketLifecycleConfiguration", {}).n("S3Client", "PutBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
    };
  }
});
var PutBucketLoggingCommand;
var init_PutBucketLoggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketLoggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketLogging", {}).n("S3Client", "PutBucketLoggingCommand").f(void 0, void 0).ser(se_PutBucketLoggingCommand).de(de_PutBucketLoggingCommand).build() {
    };
  }
});
var PutBucketMetricsConfigurationCommand;
var init_PutBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketMetricsConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketMetricsConfiguration", {}).n("S3Client", "PutBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketMetricsConfigurationCommand).de(de_PutBucketMetricsConfigurationCommand).build() {
    };
  }
});
var PutBucketNotificationConfigurationCommand;
var init_PutBucketNotificationConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketNotificationConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketNotificationConfiguration", {}).n("S3Client", "PutBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_PutBucketNotificationConfigurationCommand).de(de_PutBucketNotificationConfigurationCommand).build() {
    };
  }
});
var PutBucketOwnershipControlsCommand;
var init_PutBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketOwnershipControlsCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketOwnershipControls", {}).n("S3Client", "PutBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_PutBucketOwnershipControlsCommand).de(de_PutBucketOwnershipControlsCommand).build() {
    };
  }
});
var PutBucketPolicyCommand;
var init_PutBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketPolicyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketPolicy", {}).n("S3Client", "PutBucketPolicyCommand").f(void 0, void 0).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
    };
  }
});
var PutBucketReplicationCommand;
var init_PutBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketReplicationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketReplication", {}).n("S3Client", "PutBucketReplicationCommand").f(void 0, void 0).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
    };
  }
});
var PutBucketRequestPaymentCommand;
var init_PutBucketRequestPaymentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketRequestPaymentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketRequestPayment", {}).n("S3Client", "PutBucketRequestPaymentCommand").f(void 0, void 0).ser(se_PutBucketRequestPaymentCommand).de(de_PutBucketRequestPaymentCommand).build() {
    };
  }
});
var PutBucketTaggingCommand;
var init_PutBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketTagging", {}).n("S3Client", "PutBucketTaggingCommand").f(void 0, void 0).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
    };
  }
});
var PutBucketVersioningCommand;
var init_PutBucketVersioningCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketVersioningCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketVersioning", {}).n("S3Client", "PutBucketVersioningCommand").f(void 0, void 0).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
    };
  }
});
var PutBucketWebsiteCommand;
var init_PutBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutBucketWebsiteCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketWebsite", {}).n("S3Client", "PutBucketWebsiteCommand").f(void 0, void 0).ser(se_PutBucketWebsiteCommand).de(de_PutBucketWebsiteCommand).build() {
    };
  }
});
var PutObjectAclCommand;
var init_PutObjectAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectAclCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectAcl", {}).n("S3Client", "PutObjectAclCommand").f(void 0, void 0).ser(se_PutObjectAclCommand).de(de_PutObjectAclCommand).build() {
    };
  }
});
var PutObjectCommand;
var init_PutObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    PutObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getCheckContentLengthHeaderPlugin(config2),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "PutObject", {}).n("S3Client", "PutObjectCommand").f(PutObjectRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog).ser(se_PutObjectCommand).de(de_PutObjectCommand).build() {
    };
  }
});
var PutObjectLegalHoldCommand;
var init_PutObjectLegalHoldCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectLegalHoldCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectLegalHold", {}).n("S3Client", "PutObjectLegalHoldCommand").f(void 0, void 0).ser(se_PutObjectLegalHoldCommand).de(de_PutObjectLegalHoldCommand).build() {
    };
  }
});
var PutObjectLockConfigurationCommand;
var init_PutObjectLockConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectLockConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectLockConfiguration", {}).n("S3Client", "PutObjectLockConfigurationCommand").f(void 0, void 0).ser(se_PutObjectLockConfigurationCommand).de(de_PutObjectLockConfigurationCommand).build() {
    };
  }
});
var PutObjectRetentionCommand;
var init_PutObjectRetentionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectRetentionCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectRetention", {}).n("S3Client", "PutObjectRetentionCommand").f(void 0, void 0).ser(se_PutObjectRetentionCommand).de(de_PutObjectRetentionCommand).build() {
    };
  }
});
var PutObjectTaggingCommand;
var init_PutObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutObjectTaggingCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "PutObjectTagging", {}).n("S3Client", "PutObjectTaggingCommand").f(void 0, void 0).ser(se_PutObjectTaggingCommand).de(de_PutObjectTaggingCommand).build() {
    };
  }
});
var PutPublicAccessBlockCommand;
var init_PutPublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    PutPublicAccessBlockCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutPublicAccessBlock", {}).n("S3Client", "PutPublicAccessBlockCommand").f(void 0, void 0).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
    };
  }
});
var RenameObjectCommand;
var init_RenameObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/RenameObjectCommand.js"() {
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    RenameObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "RenameObject", {}).n("S3Client", "RenameObjectCommand").f(void 0, void 0).ser(se_RenameObjectCommand).de(de_RenameObjectCommand).build() {
    };
  }
});
var RestoreObjectCommand;
var init_RestoreObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    RestoreObjectCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getThrow200ExceptionsPlugin(config2)
      ];
    }).s("AmazonS3", "RestoreObject", {}).n("S3Client", "RestoreObjectCommand").f(RestoreObjectRequestFilterSensitiveLog, void 0).ser(se_RestoreObjectCommand).de(de_RestoreObjectCommand).build() {
    };
  }
});
var SelectObjectContentCommand;
var init_SelectObjectContentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    SelectObjectContentCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "SelectObjectContent", {
      eventStream: {
        output: true
      }
    }).n("S3Client", "SelectObjectContentCommand").f(SelectObjectContentRequestFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog).ser(se_SelectObjectContentCommand).de(de_SelectObjectContentCommand).build() {
    };
  }
});
var UpdateBucketMetadataInventoryTableConfigurationCommand;
var init_UpdateBucketMetadataInventoryTableConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UpdateBucketMetadataInventoryTableConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    UpdateBucketMetadataInventoryTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "UpdateBucketMetadataInventoryTableConfiguration", {}).n("S3Client", "UpdateBucketMetadataInventoryTableConfigurationCommand").f(void 0, void 0).ser(se_UpdateBucketMetadataInventoryTableConfigurationCommand).de(de_UpdateBucketMetadataInventoryTableConfigurationCommand).build() {
    };
  }
});
var UpdateBucketMetadataJournalTableConfigurationCommand;
var init_UpdateBucketMetadataJournalTableConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UpdateBucketMetadataJournalTableConfigurationCommand.js"() {
    init_dist_es36();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_Aws_restXml();
    UpdateBucketMetadataJournalTableConfigurationCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "UpdateBucketMetadataJournalTableConfiguration", {}).n("S3Client", "UpdateBucketMetadataJournalTableConfigurationCommand").f(void 0, void 0).ser(se_UpdateBucketMetadataJournalTableConfigurationCommand).de(de_UpdateBucketMetadataJournalTableConfigurationCommand).build() {
    };
  }
});
var UploadPartCommand;
var init_UploadPartCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js"() {
    init_dist_es36();
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    UploadPartCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getFlexibleChecksumsPlugin(config2, {
          requestAlgorithmMember: { httpHeader: "x-amz-sdk-checksum-algorithm", name: "ChecksumAlgorithm" },
          requestChecksumRequired: false
        }),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "UploadPart", {}).n("S3Client", "UploadPartCommand").f(UploadPartRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog).ser(se_UploadPartCommand).de(de_UploadPartCommand).build() {
    };
  }
});
var UploadPartCopyCommand;
var init_UploadPartCopyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js"() {
    init_dist_es47();
    init_dist_es144();
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    UploadPartCopyCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions()),
        getThrow200ExceptionsPlugin(config2),
        getSsecPlugin(config2)
      ];
    }).s("AmazonS3", "UploadPartCopy", {}).n("S3Client", "UploadPartCopyCommand").f(UploadPartCopyRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog).ser(se_UploadPartCopyCommand).de(de_UploadPartCopyCommand).build() {
    };
  }
});
var WriteGetObjectResponseCommand;
var init_WriteGetObjectResponseCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js"() {
    init_dist_es60();
    init_dist_es59();
    init_dist_es64();
    init_EndpointParameters();
    init_models_1();
    init_Aws_restXml();
    WriteGetObjectResponseCommand = class extends Command.classBuilder().ep({
      ...commonParams,
      UseObjectLambdaEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command3, cs2, config2, o5) {
      return [
        getSerdePlugin(config2, this.serialize, this.deserialize),
        getEndpointPlugin(config2, Command3.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "WriteGetObjectResponse", {}).n("S3Client", "WriteGetObjectResponseCommand").f(WriteGetObjectResponseRequestFilterSensitiveLog, void 0).ser(se_WriteGetObjectResponseCommand).de(de_WriteGetObjectResponseCommand).build() {
    };
  }
});
var commands4;
var S3;
var init_S3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/S3.js"() {
    init_dist_es64();
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateBucketMetadataConfigurationCommand();
    init_CreateBucketMetadataTableConfigurationCommand();
    init_CreateMultipartUploadCommand();
    init_CreateSessionCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetadataConfigurationCommand();
    init_DeleteBucketMetadataTableConfigurationCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectsCommand();
    init_DeleteObjectTaggingCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetadataConfigurationCommand();
    init_GetBucketMetadataTableConfigurationCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListDirectoryBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListObjectVersionsCommand();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RenameObjectCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UpdateBucketMetadataInventoryTableConfigurationCommand();
    init_UpdateBucketMetadataJournalTableConfigurationCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
    init_S3Client();
    commands4 = {
      AbortMultipartUploadCommand,
      CompleteMultipartUploadCommand,
      CopyObjectCommand,
      CreateBucketCommand,
      CreateBucketMetadataConfigurationCommand,
      CreateBucketMetadataTableConfigurationCommand,
      CreateMultipartUploadCommand,
      CreateSessionCommand,
      DeleteBucketCommand,
      DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand,
      DeleteBucketMetadataConfigurationCommand,
      DeleteBucketMetadataTableConfigurationCommand,
      DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand,
      DeleteObjectCommand,
      DeleteObjectsCommand,
      DeleteObjectTaggingCommand,
      DeletePublicAccessBlockCommand,
      GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand,
      GetBucketEncryptionCommand,
      GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand,
      GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand,
      GetBucketLoggingCommand,
      GetBucketMetadataConfigurationCommand,
      GetBucketMetadataTableConfigurationCommand,
      GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand,
      GetBucketVersioningCommand,
      GetBucketWebsiteCommand,
      GetObjectCommand,
      GetObjectAclCommand,
      GetObjectAttributesCommand,
      GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand,
      GetObjectRetentionCommand,
      GetObjectTaggingCommand,
      GetObjectTorrentCommand,
      GetPublicAccessBlockCommand,
      HeadBucketCommand,
      HeadObjectCommand,
      ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand,
      ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand,
      ListDirectoryBucketsCommand,
      ListMultipartUploadsCommand,
      ListObjectsCommand,
      ListObjectsV2Command,
      ListObjectVersionsCommand,
      ListPartsCommand,
      PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand,
      PutBucketEncryptionCommand,
      PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand,
      PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand,
      PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand,
      PutBucketVersioningCommand,
      PutBucketWebsiteCommand,
      PutObjectCommand,
      PutObjectAclCommand,
      PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand,
      PutObjectRetentionCommand,
      PutObjectTaggingCommand,
      PutPublicAccessBlockCommand,
      RenameObjectCommand,
      RestoreObjectCommand,
      SelectObjectContentCommand,
      UpdateBucketMetadataInventoryTableConfigurationCommand,
      UpdateBucketMetadataJournalTableConfigurationCommand,
      UploadPartCommand,
      UploadPartCopyCommand,
      WriteGetObjectResponseCommand
    };
    S3 = class extends S3Client {
    };
    createAggregatedClient(commands4, S3);
  }
});
var init_commands4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/index.js"() {
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateBucketMetadataConfigurationCommand();
    init_CreateBucketMetadataTableConfigurationCommand();
    init_CreateMultipartUploadCommand();
    init_CreateSessionCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetadataConfigurationCommand();
    init_DeleteBucketMetadataTableConfigurationCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectTaggingCommand();
    init_DeleteObjectsCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetadataConfigurationCommand();
    init_GetBucketMetadataTableConfigurationCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListDirectoryBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectVersionsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RenameObjectCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UpdateBucketMetadataInventoryTableConfigurationCommand();
    init_UpdateBucketMetadataJournalTableConfigurationCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
  }
});
var init_Interfaces2 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/Interfaces.js"() {
  }
});
var paginateListBuckets;
var init_ListBucketsPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListBucketsPaginator.js"() {
    init_dist_es14();
    init_ListBucketsCommand();
    init_S3Client();
    paginateListBuckets = createPaginator(S3Client, ListBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxBuckets");
  }
});
var paginateListDirectoryBuckets;
var init_ListDirectoryBucketsPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListDirectoryBucketsPaginator.js"() {
    init_dist_es14();
    init_ListDirectoryBucketsCommand();
    init_S3Client();
    paginateListDirectoryBuckets = createPaginator(S3Client, ListDirectoryBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxDirectoryBuckets");
  }
});
var paginateListObjectsV2;
var init_ListObjectsV2Paginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js"() {
    init_dist_es14();
    init_ListObjectsV2Command();
    init_S3Client();
    paginateListObjectsV2 = createPaginator(S3Client, ListObjectsV2Command, "ContinuationToken", "NextContinuationToken", "MaxKeys");
  }
});
var paginateListParts;
var init_ListPartsPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js"() {
    init_dist_es14();
    init_ListPartsCommand();
    init_S3Client();
    paginateListParts = createPaginator(S3Client, ListPartsCommand, "PartNumberMarker", "NextPartNumberMarker", "MaxParts");
  }
});
var init_pagination6 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js"() {
    init_Interfaces2();
    init_ListBucketsPaginator();
    init_ListDirectoryBucketsPaginator();
    init_ListObjectsV2Paginator();
    init_ListPartsPaginator();
  }
});
var init_waitForBucketExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js"() {
  }
});
var init_waitForBucketNotExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js"() {
  }
});
var init_waitForObjectExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js"() {
  }
});
var init_waitForObjectNotExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js"() {
  }
});
var init_waiters = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js"() {
    init_waitForBucketExists();
    init_waitForBucketNotExists();
    init_waitForObjectExists();
    init_waitForObjectNotExists();
  }
});
var init_models4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/index.js"() {
    init_models_0();
    init_models_1();
  }
});
var init_dist_es146 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/index.js"() {
    init_S3Client();
    init_S3();
    init_commands4();
    init_pagination6();
    init_waiters();
    init_models4();
  }
});
var s3_exports = {};
__export2(s3_exports, {
  default: () => s3_default
});
function ensureBucketExists() {
  if (!BUCKET_NAME) {
    throw new Error("Bucket name must be defined!");
  }
}
var BUCKET_NAME;
var BUCKET_KEY_PREFIX;
var s3Loader;
var s3_default;
var init_s33 = __esm({
  "node_modules/@opennextjs/aws/dist/overrides/imageLoader/s3.js"() {
    init_dist_es146();
    init_error();
    init_logger();
    ({ BUCKET_NAME, BUCKET_KEY_PREFIX } = process.env);
    s3Loader = {
      name: "s3",
      load: async (key) => {
        const s3Client = new S3Client({ logger: awsLogger });
        ensureBucketExists();
        const keyPrefix = BUCKET_KEY_PREFIX?.replace(/^\/|\/$/g, "");
        const response = await s3Client.send(new GetObjectCommand({
          Bucket: BUCKET_NAME,
          Key: keyPrefix ? `${keyPrefix}/${key.replace(/^\//, "")}` : key.replace(/^\//, "")
        }));
        const body = response.Body;
        if (!body) {
          throw new FatalError("No body in S3 response");
        }
        return {
          body,
          contentType: response.ContentType,
          cacheControl: response.CacheControl
        };
      }
    };
    s3_default = s3Loader;
  }
});
function setNodeEnv() {
  const processEnv = process.env;
  processEnv.NODE_ENV = process.env.NODE_ENV ?? "production";
}
var init_util11 = __esm({
  "node_modules/@opennextjs/aws/dist/adapters/util.js"() {
  }
});
init_util();
init_openNextResponse();
init_stream();
init_logger();
async function resolveConverter(converter) {
  if (typeof converter === "function") {
    return converter();
  }
  const m_1 = await Promise.resolve().then(() => (init_aws_apigw_v2(), aws_apigw_v2_exports));
  return m_1.default;
}
async function resolveWrapper(wrapper) {
  if (typeof wrapper === "function") {
    return wrapper();
  }
  const m_1 = await Promise.resolve().then(() => (init_aws_lambda(), aws_lambda_exports));
  return m_1.default;
}
async function resolveImageLoader(imageLoader) {
  if (typeof imageLoader === "function") {
    return imageLoader();
  }
  const m_1 = await Promise.resolve().then(() => (init_s33(), s3_exports));
  return m_1.default;
}
async function createGenericHandler(handler3) {
  const config2 = await import("./open-next.config.mjs").then((m5) => m5.default);
  globalThis.openNextConfig = config2;
  const handlerConfig = config2[handler3.type];
  const override = handlerConfig && "override" in handlerConfig ? handlerConfig.override : void 0;
  const converter = await resolveConverter(override?.converter);
  const { name, wrapper } = await resolveWrapper(override?.wrapper);
  debug("Using wrapper", name);
  return wrapper(handler3.handler, converter);
}
init_logger();
init_logger();
async function optimizeImage(headers, imageParams, nextConfig2, handleRequest) {
  const { isAbsolute, href } = imageParams;
  const imageUpstream = isAbsolute ? await (0, import_image_optimizer2.fetchExternalImage)(href) : await (0, import_image_optimizer2.fetchInternalImage)(
    href,
    // @ts-expect-error - It is supposed to be an IncomingMessage object, but only the headers are used.
    { headers },
    {},
    // res object is not necessary as it's not actually used.
    handleRequest
  );
  const result = await (0, import_image_optimizer2.imageOptimizer)(
    imageUpstream,
    imageParams,
    // @ts-ignore
    nextConfig2,
    false
  );
  debug("optimized result", result);
  return result;
}
init_util11();
setNodeEnv();
var nextDir = path3.join(__dirname, ".next");
var config = loadConfig(nextDir);
var buildId = loadBuildId(nextDir);
var nextConfig = {
  ...import_config_shared.defaultConfig,
  images: {
    ...import_config_shared.defaultConfig.images,
    ...config.images
  }
};
debug("Init config", {
  nextDir,
  nextConfig
});
var handler2 = await createGenericHandler({
  handler: defaultHandler,
  type: "imageOptimization"
});
async function defaultHandler(event, options) {
  debug("handler event", event);
  const { headers, query: queryString } = event;
  try {
    if (!process.env.HOST) {
      const headersHost = headers["x-forwarded-host"] || headers.host;
      process.env.HOST = headersHost;
    }
    const imageParams = validateImageParams(headers, queryString === null ? void 0 : queryString);
    if ("errorMessage" in imageParams) {
      error("Error during validation of image params", imageParams.errorMessage);
      return buildFailureResponse(imageParams.errorMessage, options?.streamCreator, 400);
    }
    let etag;
    if (process.env.OPENNEXT_STATIC_ETAG) {
      etag = computeEtag(imageParams);
    }
    if (etag && headers["if-none-match"] === etag) {
      return {
        statusCode: 304,
        headers: {},
        body: emptyReadableStream(),
        isBase64Encoded: false,
        type: "core"
      };
    }
    const result = await optimizeImage(headers, imageParams, nextConfig, downloadHandler);
    return buildSuccessResponse(result, options?.streamCreator, etag);
  } catch (e5) {
    error("Failed to optimize image", e5);
    return buildFailureResponse("Internal server error", options?.streamCreator);
  }
}
function validateImageParams(headers, query) {
  const imageParams = import_image_optimizer.ImageOptimizerCache.validateParams(
    // @ts-ignore
    { headers },
    query,
    nextConfig,
    false
  );
  debug("image params", imageParams);
  return imageParams;
}
function computeEtag(imageParams) {
  return createHash4("sha1").update(JSON.stringify({
    href: imageParams.href,
    width: imageParams.width,
    quality: imageParams.quality,
    buildId
  })).digest("base64");
}
function buildSuccessResponse(result, streamCreator, etag) {
  const headers = {
    Vary: "Accept",
    "Content-Type": result.contentType,
    "Cache-Control": `public,max-age=${result.maxAge},immutable`
  };
  debug("result", result);
  if (etag) {
    headers.ETag = etag;
  }
  if (streamCreator) {
    const response = new OpenNextNodeResponse(() => void 0, async () => void 0, streamCreator);
    response.writeHead(200, headers);
    response.end(result.buffer);
  }
  return {
    type: "core",
    statusCode: 200,
    body: toReadableStream(result.buffer, true),
    isBase64Encoded: true,
    headers
  };
}
function buildFailureResponse(errorMessage, streamCreator, statusCode = 500) {
  debug(errorMessage, statusCode);
  if (streamCreator) {
    const response = new OpenNextNodeResponse(() => void 0, async () => void 0, streamCreator);
    response.writeHead(statusCode, {
      Vary: "Accept",
      "Cache-Control": "public,max-age=60,immutable"
    });
    response.end(errorMessage);
  }
  return {
    type: "core",
    isBase64Encoded: false,
    statusCode,
    headers: {
      Vary: "Accept",
      // For failed images, allow client to retry after 1 minute.
      "Cache-Control": "public,max-age=60,immutable"
    },
    body: toReadableStream(errorMessage)
  };
}
var loader = await resolveImageLoader(globalThis.openNextConfig.imageOptimization?.loader ?? "s3");
async function downloadHandler(_req, res, url) {
  debug("downloadHandler url", url);
  const pipeRes = (w5, res2) => {
    w5.pipe(res2).once("close", () => {
      res2.statusCode = 200;
      res2.end();
    }).once("error", (err) => {
      error("Failed to get image", err);
      res2.statusCode = 400;
      res2.end();
    });
  };
  try {
    if (url.href.toLowerCase().match(/^https?:\/\//)) {
      pipeRes(https.get(url), res);
    } else {
      const response = await loader.load(url.href);
      if (!response.body) {
        throw new Error("Empty response body from the S3 request.");
      }
      pipeRes(response.body, res);
      if (response.contentType) {
        res.setHeader("Content-Type", response.contentType);
      }
      if (response.cacheControl) {
        res.setHeader("Cache-Control", response.cacheControl);
      }
    }
  } catch (e5) {
    error("Failed to download image", e5);
    throw e5;
  }
}
export {
  defaultHandler,
  handler2 as handler
};
/*! Bundled license information:

next/dist/compiled/content-disposition/index.js:
  (*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

next/dist/compiled/fresh/index.js:
  (*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   *)

next/dist/compiled/send/index.js:
  (*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * destroy
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   *)
  (*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   *)
  (*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
  (*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=data:application/json;base64,
